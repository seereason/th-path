-- | Use template haskell functions to generate the path types for appraisalscribe.
{-# LANGUAGE CPP #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wall -fno-warn-orphans #-}
module ReportDecs where

import Appraisal.File (File)
import Appraisal.Image
import Appraisal.ImageFile
import Appraisal.IntJS
import Appraisal.Markup (Markup(..))
import Appraisal.Permissions
import Appraisal.Report
import Appraisal.ReportImage
import Appraisal.ReportInstances
import Appraisal.ReportItem
import Appraisal.ReportMap (ReportID(..), ReportMap(..), MRR)
import Appraisal.Utils.CIString (CIString(..))
import Control.Lens (iso, _Just, _1, _2, _Left, _Right, Lens', toListOf, Traversal')
import Data.Generics (Data, Typeable)
import Data.Int (Int64)
import Data.Map (Map, toList)
import Data.Monoid ((<>))
import Data.Proxy
import Data.Text (Text)
import Data.Tree (Tree(Node), Forest)
import Data.UserId (UserId(UserId))
import Data.UUID (UUID)
import Data.UUID.Orphans ()
import Language.Haskell.TH.Path.Core (HasPaths(Path, pathsOf), ToLens (A, S, toLens), IsPathStart(Peek, peek, hop), HasIdPath(idPath),
                                      Path_Either(Path_Left, Path_Right), Path_Map(Path_Look),
                                      Path_Maybe(Path_Just), Path_Pair(Path_First, Path_Second), forestMap, mat)
import Language.Haskell.TH.Path.Order (lens_omat, Order, Path_OMap(Path_At), toPairs)
import Language.Haskell.TH.Path.View (View(viewLens))
import Network.URI (URI(URI), URIAuth)

data Path_Author a
    = Path_Author_authorName (Path_Markup a) | Path_Author_authorCredentials (Path_Markup a) | Path_Author
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Bool a = Path_Bool_View (Path_String a) | Path_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Branding a = Path_Branding_View (Path_Text a) | Path_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_CIString a = Path_CIString_View (Path_Text a) | Path_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Dimension a = Path_Dimension_View (Path_JSONText a) | Path_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Double a = Path_Double_View (Path_String a) | Path_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageCrop a = Path_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageFile a = Path_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageSize a
    = Path_ImageSize_dim (Path_Dimension a) | Path_ImageSize_size (Path_Double a) | Path_ImageSize_units (Path_Units a) | Path_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int a = Path_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int64 a = Path_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Integer a = Path_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Item a
    = Path_Item_itemName (Path_Text a) | Path_Item_fields (Path_MIM a) | Path_Item_images (Path_ReportImages a) | Path_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_JSONText a = Path_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Markup a = Path_Markup_markdownText (Path_Text a) | Path_Markup_htmlText (Path_Text a) | Path_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeImageFile a = Path_MaybeImageFile_View (Path_String a) | Path_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeReportIntendedUse a = Path_MaybeReportIntendedUse_View (Path_String a) | Path_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Permissions a
    = Path_Permissions_owner (Path_UserId a) | Path_Permissions_writers (Path_UserIds a) | Path_Permissions_readers (Path_UserIds a) | Path_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReadOnlyFilePath a = Path_ReadOnlyFilePath_View (Path_String a) | Path_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Report a = Path_Report_View (Path_ReportView a) | Path_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportElem a
    = Path_ReportElem_elemItem (Path_Item a) | Path_ReportElem_elemText (Path_Markup a) | Path_ReportElem
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportFlags a = Path_ReportFlags_hideEmptyItemFields (Path_Bool a) | Path_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImage a = Path_ReportImage_View (Path_ReportImageView a) | Path_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImageView a
    = Path_ReportImageView__picSize (Path_SaneSizeImageSize a)
    | Path_ReportImageView__picCrop (Path_ImageCrop a)
    | Path_ReportImageView__picCaption (Path_Markup a)
    | Path_ReportImageView__picOriginal (Path_Maybe (Path_Either (Path_URI a) (Path_ImageFile a)))
    | Path_ReportImageView__picEditedDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picThumbDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picPrinterDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picMustEnlarge (Path_Bool a)
    | Path_ReportImageView__picEnlargedDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportIntendedUse a = Path_ReportIntendedUse_View (Path_String a) | Path_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportMap a = Path_ReportMap_unReportMap (Path_MRR a) | Path_ReportMap deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStandard a = Path_ReportStandard_unReportStandard (Path_Int a) | Path_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStatus a = Path_ReportStatus_View (Path_String a) | Path_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueApproachInfo a
    = Path_ReportValueApproachInfo_reportValueApproachName (Path_Markup a)
    | Path_ReportValueApproachInfo_reportValueApproachDescription (Path_Markup a)
    | Path_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueTypeInfo a
    = Path_ReportValueTypeInfo_reportValueTypeName (Path_Markup a)
    | Path_ReportValueTypeInfo_reportValueTypeDescription (Path_Markup a)
    | Path_ReportValueTypeInfo_reportValueTypeDefinition (Path_Markup a)
    | Path_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportView a
    = Path_ReportView__reportFolder (Path_ReadOnlyFilePath a)
    | Path_ReportView__reportName (Path_Markup a)
    | Path_ReportView__reportDate (Path_Markup a)
    | Path_ReportView__reportContractDate (Path_Markup a)
    | Path_ReportView__reportInspectionDate (Path_Markup a)
    | Path_ReportView__reportEffectiveDate (Path_Markup a)
    | Path_ReportView__reportAuthors (Path_Authors a)
    | Path_ReportView__reportPreparer (Path_Markup a)
    | Path_ReportView__reportPreparerEIN (Path_Markup a)
    | Path_ReportView__reportPreparerAddress (Path_Markup a)
    | Path_ReportView__reportPreparerEMail (Path_Markup a)
    | Path_ReportView__reportPreparerWebsite (Path_Markup a)
    | Path_ReportView__reportAbbrevs (Path_AbbrevPairs a)
    | Path_ReportView__reportTitle (Path_Markup a)
    | Path_ReportView__reportHeader (Path_Markup a)
    | Path_ReportView__reportFooter (Path_Markup a)
    | Path_ReportView__reportIntendedUse (Path_MaybeReportIntendedUse a)
    | Path_ReportView__reportValueTypeInfo (Path_ReportValueTypeInfo a)
    | Path_ReportView__reportValueApproachInfo (Path_ReportValueApproachInfo a)
    | Path_ReportView__reportClientName (Path_Markup a)
    | Path_ReportView__reportClientAddress (Path_Markup a)
    | Path_ReportView__reportClientGreeting (Path_Markup a)
    | Path_ReportView__reportItemsOwnerFull (Path_Markup a)
    | Path_ReportView__reportItemsOwner (Path_Markup a)
    | Path_ReportView__reportBriefItems (Path_Markup a)
    | Path_ReportView__reportInspectionLocation (Path_Markup a)
    | Path_ReportView__reportBody (Path_ReportElems a)
    | Path_ReportView__reportGlossary (Path_MarkupPairs a)
    | Path_ReportView__reportSources (Path_MarkupPairs a)
    | Path_ReportView__reportLetterOfTransmittal (Path_Markup a)
    | Path_ReportView__reportScopeOfWork (Path_Markup a)
    | Path_ReportView__reportCertification (Path_Markups a)
    | Path_ReportView__reportLimitingConditions (Path_Markups a)
    | Path_ReportView__reportPrivacyPolicy (Path_Markup a)
    | Path_ReportView__reportPerms (Path_Permissions a)
    | Path_ReportView__reportRevision (Path_Integer a)
    | Path_ReportView__reportCreated (Path_EpochMilli a)
    | Path_ReportView__reportBranding (Path_Branding a)
    | Path_ReportView__reportStatus (Path_ReportStatus a)
    | Path_ReportView__reportRedacted (Path_Bool a)
    | Path_ReportView__reportFlags (Path_ReportFlags a)
    | Path_ReportView__reportUUID (Path_UUID a)
    | Path_ReportView__reportOrderByItemName (Path_Bool a)
    | Path_ReportView__reportDisplayItemName (Path_Bool a)
    | Path_ReportView__reportStandardsVersion (Path_ReportStandard a)
    | Path_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_SaneSizeImageSize a = Path_SaneSizeImageSize_View (Path_ImageSize a) | Path_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_String a = Path_String_View (Path_JSONText a) | Path_String deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Text a = Path_Text_View (Path_JSONText a) | Path_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_URI a = Path_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UUID a = Path_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Units a = Path_Units_View (Path_JSONText a) | Path_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserId a = Path_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserIds a = Path_UserIds_View (Path_Text a) | Path_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
type Path_AbbrevPair a = Path_Pair (Path_CIString a) (Path_Markup a)
type Path_AbbrevPairs a = Path_OMap AbbrevPairID (Path_Pair (Path_CIString a) (Path_Markup a))
type Path_Authors a = Path_OMap AuthorID (Path_Author a)
type Path_Checksum a = Path_String a
type Path_EUI a = Path_Either (Path_URI a) (Path_ImageFile a)
type Path_EpochMilli a = Path_Int64 a
type Path_FilePath a = Path_String a
type Path_MEUI a = Path_Maybe (Path_Either (Path_URI a) (Path_ImageFile a))
type Path_MIM a = Path_Map ItemFieldName (Path_Markup a)
type Path_MRR a = Path_Map ReportID (Path_Report a)
type Path_MarkupPair a = Path_Pair (Path_Markup a) (Path_Markup a)
type Path_MarkupPairs a = Path_OMap MarkupPairID (Path_Pair (Path_Markup a) (Path_Markup a))
type Path_Markups a = Path_OMap MarkupID (Path_Markup a)
type Path_ReportElems a = Path_OMap ReportElemID (Path_ReportElem a)
type Path_ReportImages a = Path_OMap ReportImageID (Path_ReportImage a)
type Path_Size a = Path_Int a
class HasAuthor c
    where lens_author :: Lens' c Author
          lens_Author_authorCredentials :: forall . Lens' c Markup
          lens_Author_authorCredentials = (.) lens_author lens_Author_authorCredentials
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName :: forall . Lens' c Markup
          lens_Author_authorName = (.) lens_author lens_Author_authorName
          {-# INLINE lens_Author_authorName #-}
class HasBool c
    where lens_bool :: Lens' c Bool
class HasBranding c
    where lens_branding :: Lens' c Branding
class HasCIString c
    where lens_cIString :: Lens' c CIString
          lens_CIString_unCIString :: forall . Lens' c String
          lens_CIString_unCIString = (.) lens_cIString lens_CIString_unCIString
          {-# INLINE lens_CIString_unCIString #-}
class HasDimension c
    where lens_dimension :: Lens' c Dimension
class HasDouble c
    where lens_double :: Lens' c Double
class HasImageCrop c
    where lens_imageCrop :: Lens' c ImageCrop
          lens_ImageCrop_bottomCrop :: forall . Lens' c Int
          lens_ImageCrop_bottomCrop = (.) lens_imageCrop lens_ImageCrop_bottomCrop
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop :: forall . Lens' c Int
          lens_ImageCrop_leftCrop = (.) lens_imageCrop lens_ImageCrop_leftCrop
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop :: forall . Lens' c Int
          lens_ImageCrop_rightCrop = (.) lens_imageCrop lens_ImageCrop_rightCrop
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation :: forall . Lens' c Int
          lens_ImageCrop_rotation = (.) lens_imageCrop lens_ImageCrop_rotation
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop :: forall . Lens' c Int
          lens_ImageCrop_topCrop = (.) lens_imageCrop lens_ImageCrop_topCrop
          {-# INLINE lens_ImageCrop_topCrop #-}
class HasImageFile c
    where lens_imageFile :: Lens' c ImageFile
          lens_ImageFile_imageFile :: forall . Lens' c File
          lens_ImageFile_imageFile = (.) lens_imageFile lens_ImageFile_imageFile
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight :: forall . Lens' c Int
          lens_ImageFile_imageFileHeight = (.) lens_imageFile lens_ImageFile_imageFileHeight
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal :: forall . Lens' c Int
          lens_ImageFile_imageFileMaxVal = (.) lens_imageFile lens_ImageFile_imageFileMaxVal
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType :: forall . Lens' c ImageType
          lens_ImageFile_imageFileType = (.) lens_imageFile lens_ImageFile_imageFileType
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth :: forall . Lens' c Int
          lens_ImageFile_imageFileWidth = (.) lens_imageFile lens_ImageFile_imageFileWidth
          {-# INLINE lens_ImageFile_imageFileWidth #-}
class HasImageSize c
    where lens_imageSize :: Lens' c ImageSize
          lens_ImageSize_dim :: forall . Lens' c Dimension
          lens_ImageSize_dim = (.) lens_imageSize lens_ImageSize_dim
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size :: forall . Lens' c Double
          lens_ImageSize_size = (.) lens_imageSize lens_ImageSize_size
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units :: forall . Lens' c Units
          lens_ImageSize_units = (.) lens_imageSize lens_ImageSize_units
          {-# INLINE lens_ImageSize_units #-}
class HasInt c
    where lens_int :: Lens' c Int
class HasInt64 c
    where lens_int64 :: Lens' c Int64
class HasInteger c
    where lens_integer :: Lens' c Integer
class HasItem c
    where lens_item :: Lens' c Item
          lens_Item_fields :: forall . Lens' c MIM
          lens_Item_fields = (.) lens_item lens_Item_fields
          {-# INLINE lens_Item_fields #-}
          lens_Item_images :: forall . Lens' c ReportImages
          lens_Item_images = (.) lens_item lens_Item_images
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName :: forall . Lens' c Text
          lens_Item_itemName = (.) lens_item lens_Item_itemName
          {-# INLINE lens_Item_itemName #-}
class HasJSONText c
    where lens_jSONText :: Lens' c JSONText
          lens_JSONText_unJSONText :: forall . Lens' c String
          lens_JSONText_unJSONText = (.) lens_jSONText lens_JSONText_unJSONText
          {-# INLINE lens_JSONText_unJSONText #-}
class HasMarkup c
    where lens_markup :: Lens' c Markup
          lens_Markup_htmlText :: forall . Traversal' c Text
          lens_Markup_htmlText = (.) lens_markup lens_Markup_htmlText
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText :: forall . Traversal' c Text
          lens_Markup_markdownText = (.) lens_markup lens_Markup_markdownText
          {-# INLINE lens_Markup_markdownText #-}
class HasPermissions c
    where lens_permissions :: Lens' c Permissions
          lens_Permissions_owner :: forall . Lens' c UserId
          lens_Permissions_owner = (.) lens_permissions lens_Permissions_owner
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers :: forall . Lens' c UserIds
          lens_Permissions_readers = (.) lens_permissions lens_Permissions_readers
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers :: forall . Lens' c UserIds
          lens_Permissions_writers = (.) lens_permissions lens_Permissions_writers
          {-# INLINE lens_Permissions_writers #-}
class HasReport c
    where lens_report :: Lens' c Report
          lens_Report_reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_Report_reportAbbrevs = (.) lens_report lens_Report_reportAbbrevs
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors :: forall . Lens' c Authors
          lens_Report_reportAuthors = (.) lens_report lens_Report_reportAuthors
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody :: forall . Lens' c ReportElems
          lens_Report_reportBody = (.) lens_report lens_Report_reportBody
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding :: forall . Lens' c Branding
          lens_Report_reportBranding = (.) lens_report lens_Report_reportBranding
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems :: forall . Lens' c Markup
          lens_Report_reportBriefItems = (.) lens_report lens_Report_reportBriefItems
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification :: forall . Lens' c Markups
          lens_Report_reportCertification = (.) lens_report lens_Report_reportCertification
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress :: forall . Lens' c Markup
          lens_Report_reportClientAddress = (.) lens_report lens_Report_reportClientAddress
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting :: forall . Lens' c Markup
          lens_Report_reportClientGreeting = (.) lens_report lens_Report_reportClientGreeting
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName :: forall . Lens' c Markup
          lens_Report_reportClientName = (.) lens_report lens_Report_reportClientName
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate :: forall . Lens' c Markup
          lens_Report_reportContractDate = (.) lens_report lens_Report_reportContractDate
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated :: forall . Lens' c EpochMilli
          lens_Report_reportCreated = (.) lens_report lens_Report_reportCreated
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate :: forall . Lens' c Markup
          lens_Report_reportDate = (.) lens_report lens_Report_reportDate
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName :: forall . Lens' c Bool
          lens_Report_reportDisplayItemName = (.) lens_report lens_Report_reportDisplayItemName
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate :: forall . Lens' c Markup
          lens_Report_reportEffectiveDate = (.) lens_report lens_Report_reportEffectiveDate
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags :: forall . Lens' c ReportFlags
          lens_Report_reportFlags = (.) lens_report lens_Report_reportFlags
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder :: forall . Lens' c FilePath
          lens_Report_reportFolder = (.) lens_report lens_Report_reportFolder
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter :: forall . Lens' c Markup
          lens_Report_reportFooter = (.) lens_report lens_Report_reportFooter
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary :: forall . Lens' c MarkupPairs
          lens_Report_reportGlossary = (.) lens_report lens_Report_reportGlossary
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader :: forall . Lens' c Markup
          lens_Report_reportHeader = (.) lens_report lens_Report_reportHeader
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate :: forall . Lens' c Markup
          lens_Report_reportInspectionDate = (.) lens_report lens_Report_reportInspectionDate
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation :: forall . Lens' c Markup
          lens_Report_reportInspectionLocation = (.) lens_report lens_Report_reportInspectionLocation
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_Report_reportIntendedUse = (.) lens_report lens_Report_reportIntendedUse
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner :: forall . Lens' c Markup
          lens_Report_reportItemsOwner = (.) lens_report lens_Report_reportItemsOwner
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull :: forall . Lens' c Markup
          lens_Report_reportItemsOwnerFull = (.) lens_report lens_Report_reportItemsOwnerFull
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_Report_reportLetterOfTransmittal = (.) lens_report lens_Report_reportLetterOfTransmittal
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions :: forall . Lens' c Markups
          lens_Report_reportLimitingConditions = (.) lens_report lens_Report_reportLimitingConditions
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName :: forall . Lens' c Markup
          lens_Report_reportName = (.) lens_report lens_Report_reportName
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName :: forall . Lens' c Bool
          lens_Report_reportOrderByItemName = (.) lens_report lens_Report_reportOrderByItemName
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms :: forall . Lens' c Permissions
          lens_Report_reportPerms = (.) lens_report lens_Report_reportPerms
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer :: forall . Lens' c Markup
          lens_Report_reportPreparer = (.) lens_report lens_Report_reportPreparer
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress :: forall . Lens' c Markup
          lens_Report_reportPreparerAddress = (.) lens_report lens_Report_reportPreparerAddress
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN :: forall . Lens' c Markup
          lens_Report_reportPreparerEIN = (.) lens_report lens_Report_reportPreparerEIN
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail :: forall . Lens' c Markup
          lens_Report_reportPreparerEMail = (.) lens_report lens_Report_reportPreparerEMail
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite :: forall . Lens' c Markup
          lens_Report_reportPreparerWebsite = (.) lens_report lens_Report_reportPreparerWebsite
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy :: forall . Lens' c Markup
          lens_Report_reportPrivacyPolicy = (.) lens_report lens_Report_reportPrivacyPolicy
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted :: forall . Lens' c Bool
          lens_Report_reportRedacted = (.) lens_report lens_Report_reportRedacted
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision :: forall . Lens' c Integer
          lens_Report_reportRevision = (.) lens_report lens_Report_reportRevision
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork :: forall . Lens' c Markup
          lens_Report_reportScopeOfWork = (.) lens_report lens_Report_reportScopeOfWork
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources :: forall . Lens' c MarkupPairs
          lens_Report_reportSources = (.) lens_report lens_Report_reportSources
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_Report_reportStandardsVersion = (.) lens_report lens_Report_reportStandardsVersion
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus :: forall . Lens' c ReportStatus
          lens_Report_reportStatus = (.) lens_report lens_Report_reportStatus
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle :: forall . Lens' c Markup
          lens_Report_reportTitle = (.) lens_report lens_Report_reportTitle
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID :: forall . Lens' c UUID
          lens_Report_reportUUID = (.) lens_report lens_Report_reportUUID
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_Report_reportValueApproachInfo = (.) lens_report lens_Report_reportValueApproachInfo
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_Report_reportValueTypeInfo = (.) lens_report lens_Report_reportValueTypeInfo
          {-# INLINE lens_Report_reportValueTypeInfo #-}
class HasReportElem c
    where lens_reportElem :: Lens' c ReportElem
          lens_ReportElem_elemItem :: forall . Traversal' c Item
          lens_ReportElem_elemItem = (.) lens_reportElem lens_ReportElem_elemItem
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText :: forall . Traversal' c Markup
          lens_ReportElem_elemText = (.) lens_reportElem lens_ReportElem_elemText
          {-# INLINE lens_ReportElem_elemText #-}
class HasReportFlags c
    where lens_reportFlags :: Lens' c ReportFlags
          lens_ReportFlags_hideEmptyItemFields :: forall . Lens' c Bool
          lens_ReportFlags_hideEmptyItemFields = (.) lens_reportFlags lens_ReportFlags_hideEmptyItemFields
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
class HasReportImage c
    where lens_reportImage :: Lens' c ReportImage
          lens_ReportImage_picCaption :: forall . Lens' c Markup
          lens_ReportImage_picCaption = (.) lens_reportImage lens_ReportImage_picCaption
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop :: forall . Lens' c ImageCrop
          lens_ReportImage_picCrop = (.) lens_reportImage lens_ReportImage_picCrop
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEditedDeprecated = (.) lens_reportImage lens_ReportImage_picEditedDeprecated
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEnlargedDeprecated = (.) lens_reportImage lens_ReportImage_picEnlargedDeprecated
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImage_picMustEnlarge = (.) lens_reportImage lens_ReportImage_picMustEnlarge
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal :: forall . Lens' c MEUI
          lens_ReportImage_picOriginal = (.) lens_reportImage lens_ReportImage_picOriginal
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picPrinterDeprecated = (.) lens_reportImage lens_ReportImage_picPrinterDeprecated
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize :: forall . Lens' c ImageSize
          lens_ReportImage_picSize = (.) lens_reportImage lens_ReportImage_picSize
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picThumbDeprecated = (.) lens_reportImage lens_ReportImage_picThumbDeprecated
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
class HasReportImageView c
    where lens_reportImageView :: Lens' c ReportImageView
          lens_ReportImageView__picCaption :: forall . Lens' c Markup
          lens_ReportImageView__picCaption = (.) lens_reportImageView lens_ReportImageView__picCaption
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop :: forall . Lens' c ImageCrop
          lens_ReportImageView__picCrop = (.) lens_reportImageView lens_ReportImageView__picCrop
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEditedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEditedDeprecated
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEnlargedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEnlargedDeprecated
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImageView__picMustEnlarge = (.) lens_reportImageView lens_ReportImageView__picMustEnlarge
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal :: forall . Lens' c (Maybe (Either URI ImageFile))
          lens_ReportImageView__picOriginal = (.) lens_reportImageView lens_ReportImageView__picOriginal
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picPrinterDeprecated = (.) lens_reportImageView lens_ReportImageView__picPrinterDeprecated
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize :: forall . Lens' c SaneSizeImageSize
          lens_ReportImageView__picSize = (.) lens_reportImageView lens_ReportImageView__picSize
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picThumbDeprecated = (.) lens_reportImageView lens_ReportImageView__picThumbDeprecated
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
class HasReportIntendedUse c
    where lens_reportIntendedUse :: Lens' c ReportIntendedUse
class HasReportMap c
    where lens_reportMap :: Lens' c ReportMap
          lens_ReportMap_unReportMap :: forall . Lens' c MRR
          lens_ReportMap_unReportMap = (.) lens_reportMap lens_ReportMap_unReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
class HasReportStandard c
    where lens_reportStandard :: Lens' c ReportStandard
          lens_ReportStandard_unReportStandard :: forall . Lens' c Int
          lens_ReportStandard_unReportStandard = (.) lens_reportStandard lens_ReportStandard_unReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
class HasReportStatus c
    where lens_reportStatus :: Lens' c ReportStatus
class HasReportValueApproachInfo c
    where lens_reportValueApproachInfo :: Lens' c ReportValueApproachInfo
          lens_ReportValueApproachInfo_reportValueApproachDescription :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachDescription = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachDescription
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachName = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachName
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
class HasReportValueTypeInfo c
    where lens_reportValueTypeInfo :: Lens' c ReportValueTypeInfo
          lens_ReportValueTypeInfo_reportValueTypeDefinition :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDefinition = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDefinition
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDescription = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDescription
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeName = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeName
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
class HasReportView c
    where lens_reportView :: Lens' c ReportView
          lens_ReportView__reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_ReportView__reportAbbrevs = (.) lens_reportView lens_ReportView__reportAbbrevs
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors :: forall . Lens' c Authors
          lens_ReportView__reportAuthors = (.) lens_reportView lens_ReportView__reportAuthors
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody :: forall . Lens' c ReportElems
          lens_ReportView__reportBody = (.) lens_reportView lens_ReportView__reportBody
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding :: forall . Lens' c Branding
          lens_ReportView__reportBranding = (.) lens_reportView lens_ReportView__reportBranding
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems :: forall . Lens' c Markup
          lens_ReportView__reportBriefItems = (.) lens_reportView lens_ReportView__reportBriefItems
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification :: forall . Lens' c Markups
          lens_ReportView__reportCertification = (.) lens_reportView lens_ReportView__reportCertification
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress :: forall . Lens' c Markup
          lens_ReportView__reportClientAddress = (.) lens_reportView lens_ReportView__reportClientAddress
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting :: forall . Lens' c Markup
          lens_ReportView__reportClientGreeting = (.) lens_reportView lens_ReportView__reportClientGreeting
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName :: forall . Lens' c Markup
          lens_ReportView__reportClientName = (.) lens_reportView lens_ReportView__reportClientName
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate :: forall . Lens' c Markup
          lens_ReportView__reportContractDate = (.) lens_reportView lens_ReportView__reportContractDate
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated :: forall . Lens' c EpochMilli
          lens_ReportView__reportCreated = (.) lens_reportView lens_ReportView__reportCreated
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate :: forall . Lens' c Markup
          lens_ReportView__reportDate = (.) lens_reportView lens_ReportView__reportDate
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName :: forall . Lens' c Bool
          lens_ReportView__reportDisplayItemName = (.) lens_reportView lens_ReportView__reportDisplayItemName
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate :: forall . Lens' c Markup
          lens_ReportView__reportEffectiveDate = (.) lens_reportView lens_ReportView__reportEffectiveDate
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags :: forall . Lens' c ReportFlags
          lens_ReportView__reportFlags = (.) lens_reportView lens_ReportView__reportFlags
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder :: forall . Lens' c ReadOnlyFilePath
          lens_ReportView__reportFolder = (.) lens_reportView lens_ReportView__reportFolder
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter :: forall . Lens' c Markup
          lens_ReportView__reportFooter = (.) lens_reportView lens_ReportView__reportFooter
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary :: forall . Lens' c MarkupPairs
          lens_ReportView__reportGlossary = (.) lens_reportView lens_ReportView__reportGlossary
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader :: forall . Lens' c Markup
          lens_ReportView__reportHeader = (.) lens_reportView lens_ReportView__reportHeader
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate :: forall . Lens' c Markup
          lens_ReportView__reportInspectionDate = (.) lens_reportView lens_ReportView__reportInspectionDate
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation :: forall . Lens' c Markup
          lens_ReportView__reportInspectionLocation = (.) lens_reportView lens_ReportView__reportInspectionLocation
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_ReportView__reportIntendedUse = (.) lens_reportView lens_ReportView__reportIntendedUse
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwner = (.) lens_reportView lens_ReportView__reportItemsOwner
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwnerFull = (.) lens_reportView lens_ReportView__reportItemsOwnerFull
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_ReportView__reportLetterOfTransmittal = (.) lens_reportView lens_ReportView__reportLetterOfTransmittal
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions :: forall . Lens' c Markups
          lens_ReportView__reportLimitingConditions = (.) lens_reportView lens_ReportView__reportLimitingConditions
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName :: forall . Lens' c Markup
          lens_ReportView__reportName = (.) lens_reportView lens_ReportView__reportName
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName :: forall . Lens' c Bool
          lens_ReportView__reportOrderByItemName = (.) lens_reportView lens_ReportView__reportOrderByItemName
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms :: forall . Lens' c Permissions
          lens_ReportView__reportPerms = (.) lens_reportView lens_ReportView__reportPerms
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer :: forall . Lens' c Markup
          lens_ReportView__reportPreparer = (.) lens_reportView lens_ReportView__reportPreparer
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress :: forall . Lens' c Markup
          lens_ReportView__reportPreparerAddress = (.) lens_reportView lens_ReportView__reportPreparerAddress
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEIN = (.) lens_reportView lens_ReportView__reportPreparerEIN
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEMail = (.) lens_reportView lens_ReportView__reportPreparerEMail
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite :: forall . Lens' c Markup
          lens_ReportView__reportPreparerWebsite = (.) lens_reportView lens_ReportView__reportPreparerWebsite
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy :: forall . Lens' c Markup
          lens_ReportView__reportPrivacyPolicy = (.) lens_reportView lens_ReportView__reportPrivacyPolicy
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted :: forall . Lens' c Bool
          lens_ReportView__reportRedacted = (.) lens_reportView lens_ReportView__reportRedacted
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision :: forall . Lens' c Integer
          lens_ReportView__reportRevision = (.) lens_reportView lens_ReportView__reportRevision
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork :: forall . Lens' c Markup
          lens_ReportView__reportScopeOfWork = (.) lens_reportView lens_ReportView__reportScopeOfWork
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources :: forall . Lens' c MarkupPairs
          lens_ReportView__reportSources = (.) lens_reportView lens_ReportView__reportSources
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_ReportView__reportStandardsVersion = (.) lens_reportView lens_ReportView__reportStandardsVersion
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus :: forall . Lens' c ReportStatus
          lens_ReportView__reportStatus = (.) lens_reportView lens_ReportView__reportStatus
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle :: forall . Lens' c Markup
          lens_ReportView__reportTitle = (.) lens_reportView lens_ReportView__reportTitle
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID :: forall . Lens' c UUID
          lens_ReportView__reportUUID = (.) lens_reportView lens_ReportView__reportUUID
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_ReportView__reportValueApproachInfo = (.) lens_reportView lens_ReportView__reportValueApproachInfo
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_ReportView__reportValueTypeInfo = (.) lens_reportView lens_ReportView__reportValueTypeInfo
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
class HasText c
    where lens_text :: Lens' c Text
class HasURI c
    where lens_uRI :: Lens' c URI
          lens_URI_uriAuthority :: forall . Lens' c (Maybe URIAuth)
          lens_URI_uriAuthority = (.) lens_uRI lens_URI_uriAuthority
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment :: forall . Lens' c String
          lens_URI_uriFragment = (.) lens_uRI lens_URI_uriFragment
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath :: forall . Lens' c String
          lens_URI_uriPath = (.) lens_uRI lens_URI_uriPath
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery :: forall . Lens' c String
          lens_URI_uriQuery = (.) lens_uRI lens_URI_uriQuery
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme :: forall . Lens' c String
          lens_URI_uriScheme = (.) lens_uRI lens_URI_uriScheme
          {-# INLINE lens_URI_uriScheme #-}
class HasUUID c
    where lens_uUID :: Lens' c UUID
class HasUnits c
    where lens_units :: Lens' c Units
class HasUserId c
    where lens_userId :: Lens' c UserId
          lens_UserId__unUserId :: forall . Lens' c Integer
          lens_UserId__unUserId = (.) lens_userId lens_UserId__unUserId
          {-# INLINE lens_UserId__unUserId #-}
instance HasPaths String String
    where type Path String String = Path_String String
          pathsOf s a = [idPath]
instance HasPaths String JSONText
    where type Path String JSONText = Path_String JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: JSONText) a)) ((\s' -> map (\a' -> (Path_String_View,
                                                                                                         a')) (toListOf (toLens (Path_String_View (idPath :: Path JSONText JSONText))) s')) s)
instance HasPaths Int64 Int64
    where type Path Int64 Int64 = Path_Int64 Int64
          pathsOf s a = [idPath]
instance HasPaths Bool String
    where type Path Bool String = Path_Bool String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_Bool_View,
                                                                                                       a')) (toListOf (toLens (Path_Bool_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths Bool Bool
    where type Path Bool Bool = Path_Bool Bool
          pathsOf s a = [idPath]
instance HasPaths Bool JSONText
    where type Path Bool JSONText = Path_Bool JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_Bool_View,
                                                                                                       a')) (toListOf (toLens (Path_Bool_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths Double String
    where type Path Double String = Path_Double String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_Double_View,
                                                                                                       a')) (toListOf (toLens (Path_Double_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths Double Double
    where type Path Double Double = Path_Double Double
          pathsOf s a = [idPath]
instance HasPaths Double JSONText
    where type Path Double JSONText = Path_Double JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_Double_View,
                                                                                                       a')) (toListOf (toLens (Path_Double_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths Int Int
    where type Path Int Int = Path_Int Int
          pathsOf s a = [idPath]
instance HasPaths Dimension Dimension
    where type Path Dimension Dimension = Path_Dimension Dimension
          pathsOf s a = [idPath]
instance HasPaths Dimension JSONText
    where type Path Dimension JSONText = Path_Dimension JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: JSONText) a)) ((\s' -> map (\a' -> (Path_Dimension_View,
                                                                                                         a')) (toListOf (toLens (Path_Dimension_View (idPath :: Path JSONText JSONText))) s')) s)
instance HasPaths ImageCrop ImageCrop
    where type Path ImageCrop ImageCrop = Path_ImageCrop ImageCrop
          pathsOf s a = [idPath]
instance HasPaths ImageSize String
    where type Path ImageSize String = Path_ImageSize String
          pathsOf s a = case s of
                            (ImageSize {}) -> mconcat [[], concatMap (\(p, a') -> map p (pathsOf (a' :: Double) a)) ((\x -> [(Path_ImageSize_size, size x)]) s), []]
instance HasPaths ImageSize Double
    where type Path ImageSize Double = Path_ImageSize Double
          pathsOf s a = case s of
                            (ImageSize {}) -> mconcat [[], concatMap (\(p, a') -> map p (pathsOf (a' :: Double) a)) ((\x -> [(Path_ImageSize_size, size x)]) s), []]
instance HasPaths ImageSize Dimension
    where type Path ImageSize Dimension = Path_ImageSize Dimension
          pathsOf s a = case s of
                            (ImageSize {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Dimension) a)) ((\x -> [(Path_ImageSize_dim, dim x)]) s), [], []]
instance HasPaths ImageSize ImageSize
    where type Path ImageSize ImageSize = Path_ImageSize ImageSize
          pathsOf s a = [idPath]
instance HasPaths ImageSize Units
    where type Path ImageSize Units = Path_ImageSize Units
          pathsOf s a = case s of
                            (ImageSize {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: Units) a)) ((\x -> [(Path_ImageSize_units, units x)]) s)]
instance HasPaths ImageSize JSONText
    where type Path ImageSize JSONText = Path_ImageSize JSONText
          pathsOf s a = case s of
                            (ImageSize {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Dimension) a)) ((\x -> [(Path_ImageSize_dim, dim x)]) s),
                                                       concatMap (\(p, a') -> map p (pathsOf (a' :: Double) a)) ((\x -> [(Path_ImageSize_size, size x)]) s),
                                                       concatMap (\(p, a') -> map p (pathsOf (a' :: Units) a)) ((\x -> [(Path_ImageSize_units, units x)]) s)]
instance HasPaths Units Units
    where type Path Units Units = Path_Units Units
          pathsOf s a = [idPath]
instance HasPaths Units JSONText
    where type Path Units JSONText = Path_Units JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: JSONText) a)) ((\s' -> map (\a' -> (Path_Units_View,
                                                                                                         a')) (toListOf (toLens (Path_Units_View (idPath :: Path JSONText JSONText))) s')) s)
instance HasPaths ImageFile ImageFile
    where type Path ImageFile ImageFile = Path_ImageFile ImageFile
          pathsOf s a = [idPath]
instance HasPaths Integer Integer
    where type Path Integer Integer = Path_Integer Integer
          pathsOf s a = [idPath]
instance HasPaths JSONText JSONText
    where type Path JSONText JSONText = Path_JSONText JSONText
          pathsOf s a = [idPath]
instance HasPaths Markup JSONText
    where type Path Markup JSONText = Path_Markup JSONText
          pathsOf s a = case s of
                            (Markdown {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Markup_markdownText, markdownText x)]) s)]
                            (Html {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Markup_htmlText, htmlText x)]) s)]
                            LaTeX p1 -> mconcat [[]]
                            Pandoc p1 -> mconcat [[]]
                            Markup p1 -> mconcat [[]]
instance HasPaths Markup Markup
    where type Path Markup Markup = Path_Markup Markup
          pathsOf s a = [idPath]
instance HasPaths Markup Text
    where type Path Markup Text = Path_Markup Text
          pathsOf s a = case s of
                            (Markdown {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Markup_markdownText, markdownText x)]) s)]
                            (Html {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Markup_htmlText, htmlText x)]) s)]
                            LaTeX p1 -> mconcat [[]]
                            Pandoc p1 -> mconcat [[]]
                            Markup p1 -> mconcat [[]]
instance HasPaths Permissions JSONText
    where type Path Permissions JSONText = Path_Permissions JSONText
          pathsOf s a = case s of
                            (Permissions {}) -> mconcat [[],
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_writers, writers x)]) s),
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_readers, readers x)]) s)]
instance HasPaths Permissions Permissions
    where type Path Permissions Permissions = Path_Permissions Permissions
          pathsOf s a = [idPath]
instance HasPaths Permissions UserIds
    where type Path Permissions UserIds = Path_Permissions UserIds
          pathsOf s a = case s of
                            (Permissions {}) -> mconcat [[],
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_writers, writers x)]) s),
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_readers, readers x)]) s)]
instance HasPaths Permissions Text
    where type Path Permissions Text = Path_Permissions Text
          pathsOf s a = case s of
                            (Permissions {}) -> mconcat [[],
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_writers, writers x)]) s),
                                                         concatMap (\(p, a') -> map p (pathsOf (a' :: UserIds) a)) ((\x -> [(Path_Permissions_readers, readers x)]) s)]
instance HasPaths Permissions UserId
    where type Path Permissions UserId = Path_Permissions UserId
          pathsOf s a = case s of
                            (Permissions {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: UserId) a)) ((\x -> [(Path_Permissions_owner, owner x)]) s), [], []]
instance HasPaths UserIds JSONText
    where type Path UserIds JSONText = Path_UserIds JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_UserIds_View,
                                                                                                     a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Text Text))) s')) s)
instance HasPaths UserIds UserIds
    where type Path UserIds UserIds = Path_UserIds UserIds
          pathsOf s a = [idPath]
instance HasPaths UserIds Text
    where type Path UserIds Text = Path_UserIds Text
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_UserIds_View,
                                                                                                     a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Text Text))) s')) s)
instance HasPaths AbbrevPair JSONText
    where type Path AbbrevPair JSONText = Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: CIString) a)) ((\x -> [(Path_First, fst x)]) s) <> concatMap (\(p,
                                                                                                                                     a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths AbbrevPair Markup
    where type Path AbbrevPair Markup = Path_Pair (Path_CIString Markup) (Path_Markup Markup)
          pathsOf s a = [] <> concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths AbbrevPair AbbrevPair
    where type Path AbbrevPair AbbrevPair = Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)
          pathsOf s a = [idPath]
instance HasPaths AbbrevPair CIString
    where type Path AbbrevPair CIString = Path_Pair (Path_CIString CIString) (Path_Markup CIString)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: CIString) a)) ((\x -> [(Path_First, fst x)]) s) <> []
instance HasPaths AbbrevPair Text
    where type Path AbbrevPair Text = Path_Pair (Path_CIString Text) (Path_Markup Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: CIString) a)) ((\x -> [(Path_First, fst x)]) s) <> concatMap (\(p,
                                                                                                                                     a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths AbbrevPairs JSONText
    where type Path AbbrevPairs JSONText = Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (CIString, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths AbbrevPairs Markup
    where type Path AbbrevPairs Markup = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (CIString, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths AbbrevPairs AbbrevPair
    where type Path AbbrevPairs AbbrevPair = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (CIString, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths AbbrevPairs AbbrevPairs
    where type Path AbbrevPairs AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))
          pathsOf s a = [idPath]
instance HasPaths AbbrevPairs CIString
    where type Path AbbrevPairs CIString = Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (CIString, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths AbbrevPairs Text
    where type Path AbbrevPairs Text = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (CIString, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Author JSONText
    where type Path Author JSONText = Path_Author JSONText
          pathsOf s a = case s of
                            (Author {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorName, authorName x)]) s),
                                                    concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorCredentials, authorCredentials x)]) s)]
instance HasPaths Author Markup
    where type Path Author Markup = Path_Author Markup
          pathsOf s a = case s of
                            (Author {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorName, authorName x)]) s),
                                                    concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorCredentials, authorCredentials x)]) s)]
instance HasPaths Author Author
    where type Path Author Author = Path_Author Author
          pathsOf s a = [idPath]
instance HasPaths Author Text
    where type Path Author Text = Path_Author Text
          pathsOf s a = case s of
                            (Author {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorName, authorName x)]) s),
                                                    concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Author_authorCredentials, authorCredentials x)]) s)]
instance HasPaths Authors JSONText
    where type Path Authors JSONText = Path_OMap AuthorID (Path_Author JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Author) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Authors Markup
    where type Path Authors Markup = Path_OMap AuthorID (Path_Author Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Author) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Authors Author
    where type Path Authors Author = Path_OMap AuthorID (Path_Author Author)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Author) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Authors Authors
    where type Path Authors Authors = Path_OMap AuthorID (Path_Author Authors)
          pathsOf s a = [idPath]
instance HasPaths Authors Text
    where type Path Authors Text = Path_OMap AuthorID (Path_Author Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Author) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Branding JSONText
    where type Path Branding JSONText = Path_Branding JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_Branding_View,
                                                                                                     a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Text Text))) s')) s)
instance HasPaths Branding Branding
    where type Path Branding Branding = Path_Branding Branding
          pathsOf s a = [idPath]
instance HasPaths Branding Text
    where type Path Branding Text = Path_Branding Text
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_Branding_View,
                                                                                                     a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Text Text))) s')) s)
instance HasPaths MarkupPair JSONText
    where type Path MarkupPair JSONText = Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_First, fst x)]) s) <> concatMap (\(p,
                                                                                                                                   a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths MarkupPair Markup
    where type Path MarkupPair Markup = Path_Pair (Path_Markup Markup) (Path_Markup Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_First, fst x)]) s) <> concatMap (\(p,
                                                                                                                                   a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths MarkupPair MarkupPair
    where type Path MarkupPair MarkupPair = Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)
          pathsOf s a = [idPath]
instance HasPaths MarkupPair Text
    where type Path MarkupPair Text = Path_Pair (Path_Markup Text) (Path_Markup Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_First, fst x)]) s) <> concatMap (\(p,
                                                                                                                                   a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_Second, snd x)]) s)
instance HasPaths MarkupPairs JSONText
    where type Path MarkupPairs JSONText = Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (Markup, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths MarkupPairs Markup
    where type Path MarkupPairs Markup = Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (Markup, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths MarkupPairs MarkupPair
    where type Path MarkupPairs MarkupPair = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (Markup, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths MarkupPairs MarkupPairs
    where type Path MarkupPairs MarkupPairs = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))
          pathsOf s a = [idPath]
instance HasPaths MarkupPairs Text
    where type Path MarkupPairs Text = Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: (Markup, Markup)) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Markups JSONText
    where type Path Markups JSONText = Path_OMap MarkupID (Path_Markup JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Markups Markup
    where type Path Markups Markup = Path_OMap MarkupID (Path_Markup Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths Markups Markups
    where type Path Markups Markups = Path_OMap MarkupID (Path_Markup Markups)
          pathsOf s a = [idPath]
instance HasPaths Markups Text
    where type Path Markups Text = Path_OMap MarkupID (Path_Markup Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths MaybeReportIntendedUse String
    where type Path MaybeReportIntendedUse String = Path_MaybeReportIntendedUse String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                                       a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths MaybeReportIntendedUse JSONText
    where type Path MaybeReportIntendedUse JSONText = Path_MaybeReportIntendedUse JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                                       a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths MaybeReportIntendedUse MaybeReportIntendedUse
    where type Path MaybeReportIntendedUse MaybeReportIntendedUse = Path_MaybeReportIntendedUse MaybeReportIntendedUse
          pathsOf s a = [idPath]
instance HasPaths Report String
    where type Path Report String = Path_Report String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Int64
    where type Path Report Int64 = Path_Report Int64
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Bool
    where type Path Report Bool = Path_Report Bool
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Double
    where type Path Report Double = Path_Report Double
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Int
    where type Path Report Int = Path_Report Int
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Dimension
    where type Path Report Dimension = Path_Report Dimension
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ImageCrop
    where type Path Report ImageCrop = Path_Report ImageCrop
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ImageSize
    where type Path Report ImageSize = Path_Report ImageSize
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Units
    where type Path Report Units = Path_Report Units
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ImageFile
    where type Path Report ImageFile = Path_Report ImageFile
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Integer
    where type Path Report Integer = Path_Report Integer
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report JSONText
    where type Path Report JSONText = Path_Report JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Markup
    where type Path Report Markup = Path_Report Markup
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Permissions
    where type Path Report Permissions = Path_Report Permissions
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report UserIds
    where type Path Report UserIds = Path_Report UserIds
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report AbbrevPair
    where type Path Report AbbrevPair = Path_Report AbbrevPair
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report AbbrevPairs
    where type Path Report AbbrevPairs = Path_Report AbbrevPairs
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Author
    where type Path Report Author = Path_Report Author
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Authors
    where type Path Report Authors = Path_Report Authors
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Branding
    where type Path Report Branding = Path_Report Branding
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MarkupPair
    where type Path Report MarkupPair = Path_Report MarkupPair
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MarkupPairs
    where type Path Report MarkupPairs = Path_Report MarkupPairs
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Markups
    where type Path Report Markups = Path_Report Markups
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MaybeReportIntendedUse
    where type Path Report MaybeReportIntendedUse = Path_Report MaybeReportIntendedUse
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Report
    where type Path Report Report = Path_Report Report
          pathsOf s a = [idPath]
instance HasPaths Report ReportElem
    where type Path Report ReportElem = Path_Report ReportElem
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportElems
    where type Path Report ReportElems = Path_Report ReportElems
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportFlags
    where type Path Report ReportFlags = Path_Report ReportFlags
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportStandard
    where type Path Report ReportStandard = Path_Report ReportStandard
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportStatus
    where type Path Report ReportStatus = Path_Report ReportStatus
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportValueApproachInfo
    where type Path Report ReportValueApproachInfo = Path_Report ReportValueApproachInfo
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportValueTypeInfo
    where type Path Report ReportValueTypeInfo = Path_Report ReportValueTypeInfo
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report EUI
    where type Path Report EUI = Path_Report EUI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MEUI
    where type Path Report MEUI = Path_Report MEUI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MaybeImageFile
    where type Path Report MaybeImageFile = Path_Report MaybeImageFile
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportImage
    where type Path Report ReportImage = Path_Report ReportImage
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportImages
    where type Path Report ReportImages = Path_Report ReportImages
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReadOnlyFilePath
    where type Path Report ReadOnlyFilePath = Path_Report ReadOnlyFilePath
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportImageView
    where type Path Report ReportImageView = Path_Report ReportImageView
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report ReportView
    where type Path Report ReportView = Path_Report ReportView
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report SaneSizeImageSize
    where type Path Report SaneSizeImageSize = Path_Report SaneSizeImageSize
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Item
    where type Path Report Item = Path_Report Item
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report MIM
    where type Path Report MIM = Path_Report MIM
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report CIString
    where type Path Report CIString = Path_Report CIString
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report URI
    where type Path Report URI = Path_Report URI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report Text
    where type Path Report Text = Path_Report Text
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report UserId
    where type Path Report UserId = Path_Report UserId
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths Report UUID
    where type Path Report UUID = Path_Report UUID
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportView) a)) ((\s' -> map (\a' -> (Path_Report_View,
                                                                                                           a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) s')) s)
instance HasPaths ReportElem String
    where type Path ReportElem String = Path_ReportElem String
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Bool
    where type Path ReportElem Bool = Path_ReportElem Bool
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Double
    where type Path ReportElem Double = Path_ReportElem Double
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Dimension
    where type Path ReportElem Dimension = Path_ReportElem Dimension
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ImageCrop
    where type Path ReportElem ImageCrop = Path_ReportElem ImageCrop
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ImageSize
    where type Path ReportElem ImageSize = Path_ReportElem ImageSize
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Units
    where type Path ReportElem Units = Path_ReportElem Units
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ImageFile
    where type Path ReportElem ImageFile = Path_ReportElem ImageFile
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem JSONText
    where type Path ReportElem JSONText = Path_ReportElem JSONText
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportElem_elemText, elemText x)]) s)]
                            ReportUndecided -> []
instance HasPaths ReportElem Markup
    where type Path ReportElem Markup = Path_ReportElem Markup
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportElem_elemText, elemText x)]) s)]
                            ReportUndecided -> []
instance HasPaths ReportElem ReportElem
    where type Path ReportElem ReportElem = Path_ReportElem ReportElem
          pathsOf s a = [idPath]
instance HasPaths ReportElem EUI
    where type Path ReportElem EUI = Path_ReportElem EUI
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem MEUI
    where type Path ReportElem MEUI = Path_ReportElem MEUI
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem MaybeImageFile
    where type Path ReportElem MaybeImageFile = Path_ReportElem MaybeImageFile
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ReportImage
    where type Path ReportElem ReportImage = Path_ReportElem ReportImage
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ReportImages
    where type Path ReportElem ReportImages = Path_ReportElem ReportImages
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem ReportImageView
    where type Path ReportElem ReportImageView = Path_ReportElem ReportImageView
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem SaneSizeImageSize
    where type Path ReportElem SaneSizeImageSize = Path_ReportElem SaneSizeImageSize
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Item
    where type Path ReportElem Item = Path_ReportElem Item
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem MIM
    where type Path ReportElem MIM = Path_ReportElem MIM
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem URI
    where type Path ReportElem URI = Path_ReportElem URI
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [[]]
                            ReportUndecided -> []
instance HasPaths ReportElem Text
    where type Path ReportElem Text = Path_ReportElem Text
          pathsOf s a = case s of
                            (ReportItem {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Item) a)) ((\x -> [(Path_ReportElem_elemItem, elemItem x)]) s)]
                            (ReportParagraph {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportElem_elemText, elemText x)]) s)]
                            ReportUndecided -> []
instance HasPaths ReportElems String
    where type Path ReportElems String = Path_OMap ReportElemID (Path_ReportElem String)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Bool
    where type Path ReportElems Bool = Path_OMap ReportElemID (Path_ReportElem Bool)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Double
    where type Path ReportElems Double = Path_OMap ReportElemID (Path_ReportElem Double)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Dimension
    where type Path ReportElems Dimension = Path_OMap ReportElemID (Path_ReportElem Dimension)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ImageCrop
    where type Path ReportElems ImageCrop = Path_OMap ReportElemID (Path_ReportElem ImageCrop)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ImageSize
    where type Path ReportElems ImageSize = Path_OMap ReportElemID (Path_ReportElem ImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Units
    where type Path ReportElems Units = Path_OMap ReportElemID (Path_ReportElem Units)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ImageFile
    where type Path ReportElems ImageFile = Path_OMap ReportElemID (Path_ReportElem ImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems JSONText
    where type Path ReportElems JSONText = Path_OMap ReportElemID (Path_ReportElem JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Markup
    where type Path ReportElems Markup = Path_OMap ReportElemID (Path_ReportElem Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ReportElem
    where type Path ReportElems ReportElem = Path_OMap ReportElemID (Path_ReportElem ReportElem)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ReportElems
    where type Path ReportElems ReportElems = Path_OMap ReportElemID (Path_ReportElem ReportElems)
          pathsOf s a = [idPath]
instance HasPaths ReportElems EUI
    where type Path ReportElems EUI = Path_OMap ReportElemID (Path_ReportElem EUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems MEUI
    where type Path ReportElems MEUI = Path_OMap ReportElemID (Path_ReportElem MEUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems MaybeImageFile
    where type Path ReportElems MaybeImageFile = Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ReportImage
    where type Path ReportElems ReportImage = Path_OMap ReportElemID (Path_ReportElem ReportImage)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ReportImages
    where type Path ReportElems ReportImages = Path_OMap ReportElemID (Path_ReportElem ReportImages)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems ReportImageView
    where type Path ReportElems ReportImageView = Path_OMap ReportElemID (Path_ReportElem ReportImageView)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems SaneSizeImageSize
    where type Path ReportElems SaneSizeImageSize = Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Item
    where type Path ReportElems Item = Path_OMap ReportElemID (Path_ReportElem Item)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems MIM
    where type Path ReportElems MIM = Path_OMap ReportElemID (Path_ReportElem MIM)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems URI
    where type Path ReportElems URI = Path_OMap ReportElemID (Path_ReportElem URI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportElems Text
    where type Path ReportElems Text = Path_OMap ReportElemID (Path_ReportElem Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElem) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportFlags String
    where type Path ReportFlags String = Path_ReportFlags String
          pathsOf s a = case s of
                            (ReportFlags {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields x)]) s)]
instance HasPaths ReportFlags Bool
    where type Path ReportFlags Bool = Path_ReportFlags Bool
          pathsOf s a = case s of
                            (ReportFlags {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields x)]) s)]
instance HasPaths ReportFlags JSONText
    where type Path ReportFlags JSONText = Path_ReportFlags JSONText
          pathsOf s a = case s of
                            (ReportFlags {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields x)]) s)]
instance HasPaths ReportFlags ReportFlags
    where type Path ReportFlags ReportFlags = Path_ReportFlags ReportFlags
          pathsOf s a = [idPath]
instance HasPaths ReportIntendedUse String
    where type Path ReportIntendedUse String = Path_ReportIntendedUse String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReportIntendedUse_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReportIntendedUse JSONText
    where type Path ReportIntendedUse JSONText = Path_ReportIntendedUse JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReportIntendedUse_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReportIntendedUse ReportIntendedUse
    where type Path ReportIntendedUse ReportIntendedUse = Path_ReportIntendedUse ReportIntendedUse
          pathsOf s a = [idPath]
instance HasPaths ReportStandard Int
    where type Path ReportStandard Int = Path_ReportStandard Int
          pathsOf s a = case s of
                            (ReportStandard {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Int) a)) ((\x -> [(Path_ReportStandard_unReportStandard, unReportStandard x)]) s)]
instance HasPaths ReportStandard ReportStandard
    where type Path ReportStandard ReportStandard = Path_ReportStandard ReportStandard
          pathsOf s a = [idPath]
instance HasPaths ReportStatus String
    where type Path ReportStatus String = Path_ReportStatus String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReportStatus_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReportStatus JSONText
    where type Path ReportStatus JSONText = Path_ReportStatus JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReportStatus_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReportStatus ReportStatus
    where type Path ReportStatus ReportStatus = Path_ReportStatus ReportStatus
          pathsOf s a = [idPath]
instance HasPaths ReportValueApproachInfo JSONText
    where type Path ReportValueApproachInfo JSONText = Path_ReportValueApproachInfo JSONText
          pathsOf s a = case s of
                            (ReportValueApproachInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                        reportValueApproachName x)]) s),
                                                                     concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription x)]) s)]
instance HasPaths ReportValueApproachInfo Markup
    where type Path ReportValueApproachInfo Markup = Path_ReportValueApproachInfo Markup
          pathsOf s a = case s of
                            (ReportValueApproachInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                        reportValueApproachName x)]) s),
                                                                     concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription x)]) s)]
instance HasPaths ReportValueApproachInfo ReportValueApproachInfo
    where type Path ReportValueApproachInfo ReportValueApproachInfo = Path_ReportValueApproachInfo ReportValueApproachInfo
          pathsOf s a = [idPath]
instance HasPaths ReportValueApproachInfo Text
    where type Path ReportValueApproachInfo Text = Path_ReportValueApproachInfo Text
          pathsOf s a = case s of
                            (ReportValueApproachInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                        reportValueApproachName x)]) s),
                                                                     concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription x)]) s)]
instance HasPaths ReportValueTypeInfo JSONText
    where type Path ReportValueTypeInfo JSONText = Path_ReportValueTypeInfo JSONText
          pathsOf s a = case s of
                            (ReportValueTypeInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                    reportValueTypeName x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition x)]) s)]
instance HasPaths ReportValueTypeInfo Markup
    where type Path ReportValueTypeInfo Markup = Path_ReportValueTypeInfo Markup
          pathsOf s a = case s of
                            (ReportValueTypeInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                    reportValueTypeName x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition x)]) s)]
instance HasPaths ReportValueTypeInfo ReportValueTypeInfo
    where type Path ReportValueTypeInfo ReportValueTypeInfo = Path_ReportValueTypeInfo ReportValueTypeInfo
          pathsOf s a = [idPath]
instance HasPaths ReportValueTypeInfo Text
    where type Path ReportValueTypeInfo Text = Path_ReportValueTypeInfo Text
          pathsOf s a = case s of
                            (ReportValueTypeInfo {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                    reportValueTypeName x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription x)]) s),
                                                                 concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition x)]) s)]
instance HasPaths EUI ImageFile
    where type Path EUI ImageFile = Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)
          pathsOf s a = [] <> concatMap (\(p, a') -> map p (pathsOf (a' :: ImageFile) a)) ((\s' -> case s' of
                                                                                                       Left _ -> []
                                                                                                       Right a' -> [(Path_Right, a')]) s)
instance HasPaths EUI EUI
    where type Path EUI EUI = Path_Either (Path_URI EUI) (Path_ImageFile EUI)
          pathsOf s a = [idPath]
instance HasPaths EUI URI
    where type Path EUI URI = Path_Either (Path_URI URI) (Path_ImageFile URI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: URI) a)) ((\s' -> case s' of
                                                                                           Left a' -> [(Path_Left, a')]
                                                                                           Right _ -> []) s) <> []
instance HasPaths MEUI ImageFile
    where type Path MEUI ImageFile = Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Either URI ImageFile) a)) ((\s' -> case s' of
                                                                                                            Nothing -> []
                                                                                                            Just a' -> [(Path_Just, a')]) s)
instance HasPaths MEUI EUI
    where type Path MEUI EUI = Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Either URI ImageFile) a)) ((\s' -> case s' of
                                                                                                            Nothing -> []
                                                                                                            Just a' -> [(Path_Just, a')]) s)
instance HasPaths MEUI MEUI
    where type Path MEUI MEUI = Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))
          pathsOf s a = [idPath]
instance HasPaths MEUI URI
    where type Path MEUI URI = Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Either URI ImageFile) a)) ((\s' -> case s' of
                                                                                                            Nothing -> []
                                                                                                            Just a' -> [(Path_Just, a')]) s)
instance HasPaths MaybeImageFile String
    where type Path MaybeImageFile String = Path_MaybeImageFile String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_MaybeImageFile_View,
                                                                                                       a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths MaybeImageFile JSONText
    where type Path MaybeImageFile JSONText = Path_MaybeImageFile JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_MaybeImageFile_View,
                                                                                                       a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths MaybeImageFile MaybeImageFile
    where type Path MaybeImageFile MaybeImageFile = Path_MaybeImageFile MaybeImageFile
          pathsOf s a = [idPath]
instance HasPaths ReportImage String
    where type Path ReportImage String = Path_ReportImage String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Bool
    where type Path ReportImage Bool = Path_ReportImage Bool
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Double
    where type Path ReportImage Double = Path_ReportImage Double
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Dimension
    where type Path ReportImage Dimension = Path_ReportImage Dimension
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage ImageCrop
    where type Path ReportImage ImageCrop = Path_ReportImage ImageCrop
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage ImageSize
    where type Path ReportImage ImageSize = Path_ReportImage ImageSize
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Units
    where type Path ReportImage Units = Path_ReportImage Units
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage ImageFile
    where type Path ReportImage ImageFile = Path_ReportImage ImageFile
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage JSONText
    where type Path ReportImage JSONText = Path_ReportImage JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Markup
    where type Path ReportImage Markup = Path_ReportImage Markup
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage EUI
    where type Path ReportImage EUI = Path_ReportImage EUI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage MEUI
    where type Path ReportImage MEUI = Path_ReportImage MEUI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage MaybeImageFile
    where type Path ReportImage MaybeImageFile = Path_ReportImage MaybeImageFile
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage ReportImage
    where type Path ReportImage ReportImage = Path_ReportImage ReportImage
          pathsOf s a = [idPath]
instance HasPaths ReportImage ReportImageView
    where type Path ReportImage ReportImageView = Path_ReportImage ReportImageView
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage SaneSizeImageSize
    where type Path ReportImage SaneSizeImageSize = Path_ReportImage SaneSizeImageSize
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage URI
    where type Path ReportImage URI = Path_ReportImage URI
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImage Text
    where type Path ReportImage Text = Path_ReportImage Text
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImageView) a)) ((\s' -> map (\a' -> (Path_ReportImage_View,
                                                                                                                a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) s')) s)
instance HasPaths ReportImages String
    where type Path ReportImages String = Path_OMap ReportImageID (Path_ReportImage String)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Bool
    where type Path ReportImages Bool = Path_OMap ReportImageID (Path_ReportImage Bool)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Double
    where type Path ReportImages Double = Path_OMap ReportImageID (Path_ReportImage Double)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Dimension
    where type Path ReportImages Dimension = Path_OMap ReportImageID (Path_ReportImage Dimension)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages ImageCrop
    where type Path ReportImages ImageCrop = Path_OMap ReportImageID (Path_ReportImage ImageCrop)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages ImageSize
    where type Path ReportImages ImageSize = Path_OMap ReportImageID (Path_ReportImage ImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Units
    where type Path ReportImages Units = Path_OMap ReportImageID (Path_ReportImage Units)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages ImageFile
    where type Path ReportImages ImageFile = Path_OMap ReportImageID (Path_ReportImage ImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages JSONText
    where type Path ReportImages JSONText = Path_OMap ReportImageID (Path_ReportImage JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Markup
    where type Path ReportImages Markup = Path_OMap ReportImageID (Path_ReportImage Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages EUI
    where type Path ReportImages EUI = Path_OMap ReportImageID (Path_ReportImage EUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages MEUI
    where type Path ReportImages MEUI = Path_OMap ReportImageID (Path_ReportImage MEUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages MaybeImageFile
    where type Path ReportImages MaybeImageFile = Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages ReportImage
    where type Path ReportImages ReportImage = Path_OMap ReportImageID (Path_ReportImage ReportImage)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages ReportImages
    where type Path ReportImages ReportImages = Path_OMap ReportImageID (Path_ReportImage ReportImages)
          pathsOf s a = [idPath]
instance HasPaths ReportImages ReportImageView
    where type Path ReportImages ReportImageView = Path_OMap ReportImageID (Path_ReportImage ReportImageView)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages SaneSizeImageSize
    where type Path ReportImages SaneSizeImageSize = Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages URI
    where type Path ReportImages URI = Path_OMap ReportImageID (Path_ReportImage URI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReportImages Text
    where type Path ReportImages Text = Path_OMap ReportImageID (Path_ReportImage Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImage) a)) ((map (\(i, v) -> (Path_At i, v)) . toPairs) s)
instance HasPaths ReadOnlyFilePath String
    where type Path ReadOnlyFilePath String = Path_ReadOnlyFilePath String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                                       a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReadOnlyFilePath JSONText
    where type Path ReadOnlyFilePath JSONText = Path_ReadOnlyFilePath JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: [Char]) a)) ((\s' -> map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                                       a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path ([Char]) ([Char])))) s')) s)
instance HasPaths ReadOnlyFilePath ReadOnlyFilePath
    where type Path ReadOnlyFilePath ReadOnlyFilePath = Path_ReadOnlyFilePath ReadOnlyFilePath
          pathsOf s a = [idPath]
instance HasPaths ReportImageView String
    where type Path ReportImageView String = Path_ReportImageView String
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated x)]) s)]
instance HasPaths ReportImageView Bool
    where type Path ReportImageView Bool = Path_ReportImageView Bool
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge x)]) s),
                                                             []]
instance HasPaths ReportImageView Double
    where type Path ReportImageView Double = Path_ReportImageView Double
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView Dimension
    where type Path ReportImageView Dimension = Path_ReportImageView Dimension
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView ImageCrop
    where type Path ReportImageView ImageCrop = Path_ReportImageView ImageCrop
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: ImageCrop) a)) ((\x -> [(Path_ReportImageView__picCrop, _picCrop x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView ImageSize
    where type Path ReportImageView ImageSize = Path_ReportImageView ImageSize
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView Units
    where type Path ReportImageView Units = Path_ReportImageView Units
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView ImageFile
    where type Path ReportImageView ImageFile = Path_ReportImageView ImageFile
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Maybe (Either URI ImageFile)) a)) ((\x -> [(Path_ReportImageView__picOriginal, _picOriginal x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView JSONText
    where type Path ReportImageView JSONText = Path_ReportImageView JSONText
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportImageView__picCaption, _picCaption x)]) s),
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated x)]) s)]
instance HasPaths ReportImageView Markup
    where type Path ReportImageView Markup = Path_ReportImageView Markup
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportImageView__picCaption, _picCaption x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView EUI
    where type Path ReportImageView EUI = Path_ReportImageView EUI
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Maybe (Either URI ImageFile)) a)) ((\x -> [(Path_ReportImageView__picOriginal, _picOriginal x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView MEUI
    where type Path ReportImageView MEUI = Path_ReportImageView MEUI
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Maybe (Either URI ImageFile)) a)) ((\x -> [(Path_ReportImageView__picOriginal, _picOriginal x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView MaybeImageFile
    where type Path ReportImageView MaybeImageFile = Path_ReportImageView MaybeImageFile
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated x)]) s),
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated x)]) s),
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeImageFile) a)) ((\x -> [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated x)]) s)]
instance HasPaths ReportImageView ReportImageView
    where type Path ReportImageView ReportImageView = Path_ReportImageView ReportImageView
          pathsOf s a = [idPath]
instance HasPaths ReportImageView SaneSizeImageSize
    where type Path ReportImageView SaneSizeImageSize = Path_ReportImageView SaneSizeImageSize
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: SaneSizeImageSize) a)) ((\x -> [(Path_ReportImageView__picSize, _picSize x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView URI
    where type Path ReportImageView URI = Path_ReportImageView URI
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Maybe (Either URI ImageFile)) a)) ((\x -> [(Path_ReportImageView__picOriginal, _picOriginal x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportImageView Text
    where type Path ReportImageView Text = Path_ReportImageView Text
          pathsOf s a = case s of
                            (ReportImageView {}) -> mconcat [[],
                                                             [],
                                                             concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportImageView__picCaption, _picCaption x)]) s),
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             [],
                                                             []]
instance HasPaths ReportView String
    where type Path ReportView String = Path_ReportView String
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: ReadOnlyFilePath) a)) ((\x -> [(Path_ReportView__reportFolder, _reportFolder x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeReportIntendedUse) a)) ((\x -> [(Path_ReportView__reportIntendedUse, _reportIntendedUse x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportStatus) a)) ((\x -> [(Path_ReportView__reportStatus, _reportStatus x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportRedacted, _reportRedacted x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportFlags) a)) ((\x -> [(Path_ReportView__reportFlags, _reportFlags x)]) s),
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName x)]) s),
                                                        []]
instance HasPaths ReportView Int64
    where type Path ReportView Int64 = Path_ReportView Int64
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: EpochMilli) a)) ((\x -> [(Path_ReportView__reportCreated, _reportCreated x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Bool
    where type Path ReportView Bool = Path_ReportView Bool
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportRedacted, _reportRedacted x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportFlags) a)) ((\x -> [(Path_ReportView__reportFlags, _reportFlags x)]) s),
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName x)]) s),
                                                        []]
instance HasPaths ReportView Double
    where type Path ReportView Double = Path_ReportView Double
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Int
    where type Path ReportView Int = Path_ReportView Int
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportStandard) a)) ((\x -> [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion x)]) s)]
instance HasPaths ReportView Dimension
    where type Path ReportView Dimension = Path_ReportView Dimension
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ImageCrop
    where type Path ReportView ImageCrop = Path_ReportView ImageCrop
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ImageSize
    where type Path ReportView ImageSize = Path_ReportView ImageSize
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Units
    where type Path ReportView Units = Path_ReportView Units
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ImageFile
    where type Path ReportView ImageFile = Path_ReportView ImageFile
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Integer
    where type Path ReportView Integer = Path_ReportView Integer
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Integer) a)) ((\x -> [(Path_ReportView__reportRevision, _reportRevision x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView JSONText
    where type Path ReportView JSONText = Path_ReportView JSONText
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: ReadOnlyFilePath) a)) ((\x -> [(Path_ReportView__reportFolder, _reportFolder x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportName, _reportName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportDate, _reportDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportContractDate, _reportContractDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionDate, _reportInspectionDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Authors) a)) ((\x -> [(Path_ReportView__reportAuthors, _reportAuthors x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparer, _reportPreparer x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportTitle, _reportTitle x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportHeader, _reportHeader x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportFooter, _reportFooter x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeReportIntendedUse) a)) ((\x -> [(Path_ReportView__reportIntendedUse, _reportIntendedUse x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueTypeInfo) a)) ((\x -> [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueApproachInfo) a)) ((\x -> [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientName, _reportClientName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientAddress, _reportClientAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientGreeting, _reportClientGreeting x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwner, _reportItemsOwner x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportBriefItems, _reportBriefItems x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportGlossary, _reportGlossary x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportSources, _reportSources x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportCertification, _reportCertification x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Permissions) a)) ((\x -> [(Path_ReportView__reportPerms, _reportPerms x)]) s),
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Branding) a)) ((\x -> [(Path_ReportView__reportBranding, _reportBranding x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportStatus) a)) ((\x -> [(Path_ReportView__reportStatus, _reportStatus x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportRedacted, _reportRedacted x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportFlags) a)) ((\x -> [(Path_ReportView__reportFlags, _reportFlags x)]) s),
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Bool) a)) ((\x -> [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName x)]) s),
                                                        []]
instance HasPaths ReportView Markup
    where type Path ReportView Markup = Path_ReportView Markup
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportName, _reportName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportDate, _reportDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportContractDate, _reportContractDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionDate, _reportInspectionDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Authors) a)) ((\x -> [(Path_ReportView__reportAuthors, _reportAuthors x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparer, _reportPreparer x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportTitle, _reportTitle x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportHeader, _reportHeader x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportFooter, _reportFooter x)]) s),
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueTypeInfo) a)) ((\x -> [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueApproachInfo) a)) ((\x -> [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientName, _reportClientName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientAddress, _reportClientAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientGreeting, _reportClientGreeting x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwner, _reportItemsOwner x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportBriefItems, _reportBriefItems x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportGlossary, _reportGlossary x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportSources, _reportSources x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportCertification, _reportCertification x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Permissions
    where type Path ReportView Permissions = Path_ReportView Permissions
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Permissions) a)) ((\x -> [(Path_ReportView__reportPerms, _reportPerms x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView UserIds
    where type Path ReportView UserIds = Path_ReportView UserIds
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Permissions) a)) ((\x -> [(Path_ReportView__reportPerms, _reportPerms x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView AbbrevPair
    where type Path ReportView AbbrevPair = Path_ReportView AbbrevPair
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView AbbrevPairs
    where type Path ReportView AbbrevPairs = Path_ReportView AbbrevPairs
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Author
    where type Path ReportView Author = Path_ReportView Author
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Authors) a)) ((\x -> [(Path_ReportView__reportAuthors, _reportAuthors x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Authors
    where type Path ReportView Authors = Path_ReportView Authors
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Authors) a)) ((\x -> [(Path_ReportView__reportAuthors, _reportAuthors x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Branding
    where type Path ReportView Branding = Path_ReportView Branding
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Branding) a)) ((\x -> [(Path_ReportView__reportBranding, _reportBranding x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MarkupPair
    where type Path ReportView MarkupPair = Path_ReportView MarkupPair
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportGlossary, _reportGlossary x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportSources, _reportSources x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MarkupPairs
    where type Path ReportView MarkupPairs = Path_ReportView MarkupPairs
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportGlossary, _reportGlossary x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportSources, _reportSources x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Markups
    where type Path ReportView Markups = Path_ReportView Markups
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportCertification, _reportCertification x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MaybeReportIntendedUse
    where type Path ReportView MaybeReportIntendedUse = Path_ReportView MaybeReportIntendedUse
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MaybeReportIntendedUse) a)) ((\x -> [(Path_ReportView__reportIntendedUse, _reportIntendedUse x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportElem
    where type Path ReportView ReportElem = Path_ReportView ReportElem
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportElems
    where type Path ReportView ReportElems = Path_ReportView ReportElems
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportFlags
    where type Path ReportView ReportFlags = Path_ReportView ReportFlags
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportFlags) a)) ((\x -> [(Path_ReportView__reportFlags, _reportFlags x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportStandard
    where type Path ReportView ReportStandard = Path_ReportView ReportStandard
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportStandard) a)) ((\x -> [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion x)]) s)]
instance HasPaths ReportView ReportStatus
    where type Path ReportView ReportStatus = Path_ReportView ReportStatus
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportStatus) a)) ((\x -> [(Path_ReportView__reportStatus, _reportStatus x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportValueApproachInfo
    where type Path ReportView ReportValueApproachInfo = Path_ReportView ReportValueApproachInfo
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueApproachInfo) a)) ((\x -> [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportValueTypeInfo
    where type Path ReportView ReportValueTypeInfo = Path_ReportView ReportValueTypeInfo
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueTypeInfo) a)) ((\x -> [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView EUI
    where type Path ReportView EUI = Path_ReportView EUI
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MEUI
    where type Path ReportView MEUI = Path_ReportView MEUI
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MaybeImageFile
    where type Path ReportView MaybeImageFile = Path_ReportView MaybeImageFile
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportImage
    where type Path ReportView ReportImage = Path_ReportView ReportImage
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportImages
    where type Path ReportView ReportImages = Path_ReportView ReportImages
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReadOnlyFilePath
    where type Path ReportView ReadOnlyFilePath = Path_ReportView ReadOnlyFilePath
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: ReadOnlyFilePath) a)) ((\x -> [(Path_ReportView__reportFolder, _reportFolder x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportImageView
    where type Path ReportView ReportImageView = Path_ReportView ReportImageView
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView ReportView
    where type Path ReportView ReportView = Path_ReportView ReportView
          pathsOf s a = [idPath]
instance HasPaths ReportView SaneSizeImageSize
    where type Path ReportView SaneSizeImageSize = Path_ReportView SaneSizeImageSize
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Item
    where type Path ReportView Item = Path_ReportView Item
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView MIM
    where type Path ReportView MIM = Path_ReportView MIM
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView CIString
    where type Path ReportView CIString = Path_ReportView CIString
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView URI
    where type Path ReportView URI = Path_ReportView URI
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView Text
    where type Path ReportView Text = Path_ReportView Text
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportName, _reportName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportDate, _reportDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportContractDate, _reportContractDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionDate, _reportInspectionDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Authors) a)) ((\x -> [(Path_ReportView__reportAuthors, _reportAuthors x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparer, _reportPreparer x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: AbbrevPairs) a)) ((\x -> [(Path_ReportView__reportAbbrevs, _reportAbbrevs x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportTitle, _reportTitle x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportHeader, _reportHeader x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportFooter, _reportFooter x)]) s),
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueTypeInfo) a)) ((\x -> [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportValueApproachInfo) a)) ((\x -> [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientName, _reportClientName x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientAddress, _reportClientAddress x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportClientGreeting, _reportClientGreeting x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportItemsOwner, _reportItemsOwner x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportBriefItems, _reportBriefItems x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: ReportElems) a)) ((\x -> [(Path_ReportView__reportBody, _reportBody x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportGlossary, _reportGlossary x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: MarkupPairs) a)) ((\x -> [(Path_ReportView__reportSources, _reportSources x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportCertification, _reportCertification x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markups) a)) ((\x -> [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((\x -> [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy x)]) s),
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Permissions) a)) ((\x -> [(Path_ReportView__reportPerms, _reportPerms x)]) s),
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Branding) a)) ((\x -> [(Path_ReportView__reportBranding, _reportBranding x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView UserId
    where type Path ReportView UserId = Path_ReportView UserId
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: Permissions) a)) ((\x -> [(Path_ReportView__reportPerms, _reportPerms x)]) s),
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        []]
instance HasPaths ReportView UUID
    where type Path ReportView UUID = Path_ReportView UUID
          pathsOf s a = case s of
                            (ReportView {}) -> mconcat [[],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        [],
                                                        concatMap (\(p, a') -> map p (pathsOf (a' :: UUID) a)) ((\x -> [(Path_ReportView__reportUUID, _reportUUID x)]) s),
                                                        [],
                                                        [],
                                                        []]
instance HasPaths SaneSizeImageSize String
    where type Path SaneSizeImageSize String = Path_SaneSizeImageSize String
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize Double
    where type Path SaneSizeImageSize Double = Path_SaneSizeImageSize Double
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize Dimension
    where type Path SaneSizeImageSize Dimension = Path_SaneSizeImageSize Dimension
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize ImageSize
    where type Path SaneSizeImageSize ImageSize = Path_SaneSizeImageSize ImageSize
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize Units
    where type Path SaneSizeImageSize Units = Path_SaneSizeImageSize Units
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize JSONText
    where type Path SaneSizeImageSize JSONText = Path_SaneSizeImageSize JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: ImageSize) a)) ((\s' -> map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                          a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) s')) s)
instance HasPaths SaneSizeImageSize SaneSizeImageSize
    where type Path SaneSizeImageSize SaneSizeImageSize = Path_SaneSizeImageSize SaneSizeImageSize
          pathsOf s a = [idPath]
instance HasPaths Item String
    where type Path Item String = Path_Item String
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Bool
    where type Path Item Bool = Path_Item Bool
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Double
    where type Path Item Double = Path_Item Double
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Dimension
    where type Path Item Dimension = Path_Item Dimension
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ImageCrop
    where type Path Item ImageCrop = Path_Item ImageCrop
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ImageSize
    where type Path Item ImageSize = Path_Item ImageSize
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Units
    where type Path Item Units = Path_Item Units
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ImageFile
    where type Path Item ImageFile = Path_Item ImageFile
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item JSONText
    where type Path Item JSONText = Path_Item JSONText
          pathsOf s a = case s of
                            (Item {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Item_itemName, itemName x)]) s),
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: MIM) a)) ((\x -> [(Path_Item_fields, fields x)]) s),
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Markup
    where type Path Item Markup = Path_Item Markup
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[],
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: MIM) a)) ((\x -> [(Path_Item_fields, fields x)]) s),
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item EUI
    where type Path Item EUI = Path_Item EUI
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item MEUI
    where type Path Item MEUI = Path_Item MEUI
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item MaybeImageFile
    where type Path Item MaybeImageFile = Path_Item MaybeImageFile
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ReportImage
    where type Path Item ReportImage = Path_Item ReportImage
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ReportImages
    where type Path Item ReportImages = Path_Item ReportImages
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item ReportImageView
    where type Path Item ReportImageView = Path_Item ReportImageView
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item SaneSizeImageSize
    where type Path Item SaneSizeImageSize = Path_Item SaneSizeImageSize
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Item
    where type Path Item Item = Path_Item Item
          pathsOf s a = [idPath]
instance HasPaths Item MIM
    where type Path Item MIM = Path_Item MIM
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], concatMap (\(p, a') -> map p (pathsOf (a' :: MIM) a)) ((\x -> [(Path_Item_fields, fields x)]) s), []]
instance HasPaths Item URI
    where type Path Item URI = Path_Item URI
          pathsOf s a = case s of
                            (Item {}) -> mconcat [[], [], concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths Item Text
    where type Path Item Text = Path_Item Text
          pathsOf s a = case s of
                            (Item {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\x -> [(Path_Item_itemName, itemName x)]) s),
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: MIM) a)) ((\x -> [(Path_Item_fields, fields x)]) s),
                                                  concatMap (\(p, a') -> map p (pathsOf (a' :: ReportImages) a)) ((\x -> [(Path_Item_images, images x)]) s)]
instance HasPaths MIM JSONText
    where type Path MIM JSONText = Path_Map ItemFieldName (Path_Markup JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MIM Markup
    where type Path MIM Markup = Path_Map ItemFieldName (Path_Markup Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MIM MIM
    where type Path MIM MIM = Path_Map ItemFieldName (Path_Markup MIM)
          pathsOf s a = [idPath]
instance HasPaths MIM Text
    where type Path MIM Text = Path_Map ItemFieldName (Path_Markup Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Markup) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR String
    where type Path MRR String = Path_Map ReportID (Path_Report String)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Int64
    where type Path MRR Int64 = Path_Map ReportID (Path_Report Int64)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Bool
    where type Path MRR Bool = Path_Map ReportID (Path_Report Bool)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Double
    where type Path MRR Double = Path_Map ReportID (Path_Report Double)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Int
    where type Path MRR Int = Path_Map ReportID (Path_Report Int)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Dimension
    where type Path MRR Dimension = Path_Map ReportID (Path_Report Dimension)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ImageCrop
    where type Path MRR ImageCrop = Path_Map ReportID (Path_Report ImageCrop)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ImageSize
    where type Path MRR ImageSize = Path_Map ReportID (Path_Report ImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Units
    where type Path MRR Units = Path_Map ReportID (Path_Report Units)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ImageFile
    where type Path MRR ImageFile = Path_Map ReportID (Path_Report ImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Integer
    where type Path MRR Integer = Path_Map ReportID (Path_Report Integer)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR JSONText
    where type Path MRR JSONText = Path_Map ReportID (Path_Report JSONText)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Markup
    where type Path MRR Markup = Path_Map ReportID (Path_Report Markup)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Permissions
    where type Path MRR Permissions = Path_Map ReportID (Path_Report Permissions)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR UserIds
    where type Path MRR UserIds = Path_Map ReportID (Path_Report UserIds)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR AbbrevPair
    where type Path MRR AbbrevPair = Path_Map ReportID (Path_Report AbbrevPair)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR AbbrevPairs
    where type Path MRR AbbrevPairs = Path_Map ReportID (Path_Report AbbrevPairs)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Author
    where type Path MRR Author = Path_Map ReportID (Path_Report Author)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Authors
    where type Path MRR Authors = Path_Map ReportID (Path_Report Authors)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Branding
    where type Path MRR Branding = Path_Map ReportID (Path_Report Branding)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MarkupPair
    where type Path MRR MarkupPair = Path_Map ReportID (Path_Report MarkupPair)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MarkupPairs
    where type Path MRR MarkupPairs = Path_Map ReportID (Path_Report MarkupPairs)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Markups
    where type Path MRR Markups = Path_Map ReportID (Path_Report Markups)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MaybeReportIntendedUse
    where type Path MRR MaybeReportIntendedUse = Path_Map ReportID (Path_Report MaybeReportIntendedUse)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Report
    where type Path MRR Report = Path_Map ReportID (Path_Report Report)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportElem
    where type Path MRR ReportElem = Path_Map ReportID (Path_Report ReportElem)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportElems
    where type Path MRR ReportElems = Path_Map ReportID (Path_Report ReportElems)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportFlags
    where type Path MRR ReportFlags = Path_Map ReportID (Path_Report ReportFlags)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportStandard
    where type Path MRR ReportStandard = Path_Map ReportID (Path_Report ReportStandard)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportStatus
    where type Path MRR ReportStatus = Path_Map ReportID (Path_Report ReportStatus)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportValueApproachInfo
    where type Path MRR ReportValueApproachInfo = Path_Map ReportID (Path_Report ReportValueApproachInfo)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportValueTypeInfo
    where type Path MRR ReportValueTypeInfo = Path_Map ReportID (Path_Report ReportValueTypeInfo)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR EUI
    where type Path MRR EUI = Path_Map ReportID (Path_Report EUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MEUI
    where type Path MRR MEUI = Path_Map ReportID (Path_Report MEUI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MaybeImageFile
    where type Path MRR MaybeImageFile = Path_Map ReportID (Path_Report MaybeImageFile)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportImage
    where type Path MRR ReportImage = Path_Map ReportID (Path_Report ReportImage)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportImages
    where type Path MRR ReportImages = Path_Map ReportID (Path_Report ReportImages)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReadOnlyFilePath
    where type Path MRR ReadOnlyFilePath = Path_Map ReportID (Path_Report ReadOnlyFilePath)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportImageView
    where type Path MRR ReportImageView = Path_Map ReportID (Path_Report ReportImageView)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR ReportView
    where type Path MRR ReportView = Path_Map ReportID (Path_Report ReportView)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR SaneSizeImageSize
    where type Path MRR SaneSizeImageSize = Path_Map ReportID (Path_Report SaneSizeImageSize)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Item
    where type Path MRR Item = Path_Map ReportID (Path_Report Item)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MIM
    where type Path MRR MIM = Path_Map ReportID (Path_Report MIM)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR MRR
    where type Path MRR MRR = Path_Map ReportID (Path_Report MRR)
          pathsOf s a = [idPath]
instance HasPaths MRR CIString
    where type Path MRR CIString = Path_Map ReportID (Path_Report CIString)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR URI
    where type Path MRR URI = Path_Map ReportID (Path_Report URI)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR Text
    where type Path MRR Text = Path_Map ReportID (Path_Report Text)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR UserId
    where type Path MRR UserId = Path_Map ReportID (Path_Report UserId)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths MRR UUID
    where type Path MRR UUID = Path_Map ReportID (Path_Report UUID)
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Report) a)) ((map (\(i, v) -> (Path_Look i, v)) . toList) s)
instance HasPaths ReportMap String
    where type Path ReportMap String = Path_ReportMap String
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Int64
    where type Path ReportMap Int64 = Path_ReportMap Int64
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Bool
    where type Path ReportMap Bool = Path_ReportMap Bool
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Double
    where type Path ReportMap Double = Path_ReportMap Double
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Int
    where type Path ReportMap Int = Path_ReportMap Int
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Dimension
    where type Path ReportMap Dimension = Path_ReportMap Dimension
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ImageCrop
    where type Path ReportMap ImageCrop = Path_ReportMap ImageCrop
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ImageSize
    where type Path ReportMap ImageSize = Path_ReportMap ImageSize
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Units
    where type Path ReportMap Units = Path_ReportMap Units
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ImageFile
    where type Path ReportMap ImageFile = Path_ReportMap ImageFile
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Integer
    where type Path ReportMap Integer = Path_ReportMap Integer
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap JSONText
    where type Path ReportMap JSONText = Path_ReportMap JSONText
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Markup
    where type Path ReportMap Markup = Path_ReportMap Markup
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Permissions
    where type Path ReportMap Permissions = Path_ReportMap Permissions
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap UserIds
    where type Path ReportMap UserIds = Path_ReportMap UserIds
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap AbbrevPair
    where type Path ReportMap AbbrevPair = Path_ReportMap AbbrevPair
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap AbbrevPairs
    where type Path ReportMap AbbrevPairs = Path_ReportMap AbbrevPairs
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Author
    where type Path ReportMap Author = Path_ReportMap Author
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Authors
    where type Path ReportMap Authors = Path_ReportMap Authors
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Branding
    where type Path ReportMap Branding = Path_ReportMap Branding
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MarkupPair
    where type Path ReportMap MarkupPair = Path_ReportMap MarkupPair
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MarkupPairs
    where type Path ReportMap MarkupPairs = Path_ReportMap MarkupPairs
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Markups
    where type Path ReportMap Markups = Path_ReportMap Markups
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MaybeReportIntendedUse
    where type Path ReportMap MaybeReportIntendedUse = Path_ReportMap MaybeReportIntendedUse
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Report
    where type Path ReportMap Report = Path_ReportMap Report
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportElem
    where type Path ReportMap ReportElem = Path_ReportMap ReportElem
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportElems
    where type Path ReportMap ReportElems = Path_ReportMap ReportElems
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportFlags
    where type Path ReportMap ReportFlags = Path_ReportMap ReportFlags
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportStandard
    where type Path ReportMap ReportStandard = Path_ReportMap ReportStandard
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportStatus
    where type Path ReportMap ReportStatus = Path_ReportMap ReportStatus
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportValueApproachInfo
    where type Path ReportMap ReportValueApproachInfo = Path_ReportMap ReportValueApproachInfo
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportValueTypeInfo
    where type Path ReportMap ReportValueTypeInfo = Path_ReportMap ReportValueTypeInfo
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap EUI
    where type Path ReportMap EUI = Path_ReportMap EUI
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MEUI
    where type Path ReportMap MEUI = Path_ReportMap MEUI
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MaybeImageFile
    where type Path ReportMap MaybeImageFile = Path_ReportMap MaybeImageFile
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportImage
    where type Path ReportMap ReportImage = Path_ReportMap ReportImage
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportImages
    where type Path ReportMap ReportImages = Path_ReportMap ReportImages
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReadOnlyFilePath
    where type Path ReportMap ReadOnlyFilePath = Path_ReportMap ReadOnlyFilePath
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportImageView
    where type Path ReportMap ReportImageView = Path_ReportMap ReportImageView
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportView
    where type Path ReportMap ReportView = Path_ReportMap ReportView
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap SaneSizeImageSize
    where type Path ReportMap SaneSizeImageSize = Path_ReportMap SaneSizeImageSize
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Item
    where type Path ReportMap Item = Path_ReportMap Item
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MIM
    where type Path ReportMap MIM = Path_ReportMap MIM
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap MRR
    where type Path ReportMap MRR = Path_ReportMap MRR
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap ReportMap
    where type Path ReportMap ReportMap = Path_ReportMap ReportMap
          pathsOf s a = [idPath]
instance HasPaths ReportMap CIString
    where type Path ReportMap CIString = Path_ReportMap CIString
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap URI
    where type Path ReportMap URI = Path_ReportMap URI
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap Text
    where type Path ReportMap Text = Path_ReportMap Text
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap UserId
    where type Path ReportMap UserId = Path_ReportMap UserId
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths ReportMap UUID
    where type Path ReportMap UUID = Path_ReportMap UUID
          pathsOf s a = case s of
                            (ReportMap {}) -> mconcat [concatMap (\(p, a') -> map p (pathsOf (a' :: MRR) a)) ((\x -> [(Path_ReportMap_unReportMap, unReportMap x)]) s)]
instance HasPaths CIString JSONText
    where type Path CIString JSONText = Path_CIString JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_CIString_View,
                                                                                                     a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Text Text))) s')) s)
instance HasPaths CIString CIString
    where type Path CIString CIString = Path_CIString CIString
          pathsOf s a = [idPath]
instance HasPaths CIString Text
    where type Path CIString Text = Path_CIString Text
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: Text) a)) ((\s' -> map (\a' -> (Path_CIString_View,
                                                                                                     a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Text Text))) s')) s)
instance HasPaths URI URI
    where type Path URI URI = Path_URI URI
          pathsOf s a = [idPath]
instance HasPaths Text JSONText
    where type Path Text JSONText = Path_Text JSONText
          pathsOf s a = concatMap (\(p, a') -> map p (pathsOf (a' :: JSONText) a)) ((\s' -> map (\a' -> (Path_Text_View,
                                                                                                         a')) (toListOf (toLens (Path_Text_View (idPath :: Path JSONText JSONText))) s')) s)
instance HasPaths Text Text
    where type Path Text Text = Path_Text Text
          pathsOf s a = [idPath]
instance HasPaths UserId UserId
    where type Path UserId UserId = Path_UserId UserId
          pathsOf s a = [idPath]
instance HasPaths UUID UUID
    where type Path UUID UUID = Path_UUID UUID
          pathsOf s a = [idPath]
instance HasAuthor Author
    where lens_author = id
          lens_Author_authorCredentials f (Author x1 x2) = fmap (\y1 -> Author x1 y1) (f x2)
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName f (Author x1 x2) = fmap (\y1 -> Author y1 x2) (f x1)
          {-# INLINE lens_Author_authorName #-}
instance HasBool Bool
    where lens_bool = id
instance HasBranding Branding
    where lens_branding = id
instance HasCIString CIString
    where lens_cIString = id
          lens_CIString_unCIString = iso (\(CIString x) -> x) CIString
          {-# INLINE lens_CIString_unCIString #-}
instance HasDimension Dimension
    where lens_dimension = id
instance HasDouble Double
    where lens_double = id
instance HasImageCrop ImageCrop
    where lens_imageCrop = id
          lens_ImageCrop_bottomCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageCrop_topCrop #-}
instance HasImageFile ImageFile
    where lens_imageFile = id
          lens_ImageFile_imageFile f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance HasImageSize ImageSize
    where lens_imageSize = id
          lens_ImageSize_dim f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize y1 x2 x3) (f x1)
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 y1 x3) (f x2)
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 x2 y1) (f x3)
          {-# INLINE lens_ImageSize_units #-}
instance HasInt Int
    where lens_int = id
instance HasInt64 Int64
    where lens_int64 = id
instance HasInteger Integer
    where lens_integer = id
instance HasItem Item
    where lens_item = id
          lens_Item_fields f (Item x1 x2 x3) = fmap (\y1 -> Item x1 y1 x3) (f x2)
          {-# INLINE lens_Item_fields #-}
          lens_Item_images f (Item x1 x2 x3) = fmap (\y1 -> Item x1 x2 y1) (f x3)
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName f (Item x1 x2 x3) = fmap (\y1 -> Item y1 x2 x3) (f x1)
          {-# INLINE lens_Item_itemName #-}
instance HasJSONText JSONText
    where lens_jSONText = id
          lens_JSONText_unJSONText = iso (\(JSONText x) -> x) JSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance HasMarkup Markup
    where lens_markup = id
          lens_Markup_htmlText _ (Markdown x1) = pure (Markdown x1)
          lens_Markup_htmlText f (Html x1) = fmap (\y1 -> Html y1) (f x1)
          lens_Markup_htmlText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_htmlText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_htmlText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText f (Markdown x1) = fmap (\y1 -> Markdown y1) (f x1)
          lens_Markup_markdownText _ (Html x1) = pure (Html x1)
          lens_Markup_markdownText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_markdownText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_markdownText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_markdownText #-}
instance HasPermissions Permissions
    where lens_permissions = id
          lens_Permissions_owner f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions y1 x2 x3) (f x1)
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 x2 y1) (f x3)
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 y1 x3) (f x2)
          {-# INLINE lens_Permissions_writers #-}
instance HasReport Report
    where lens_report = id
          lens_Report_reportAbbrevs f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate f (Report x1
                                                   x2
                                                   x3
                                                   x4
                                                   x5
                                                   x6
                                                   x7
                                                   x8
                                                   x9
                                                   x10
                                                   x11
                                                   x12
                                                   x13
                                                   x14
                                                   x15
                                                   x16
                                                   x17
                                                   x18
                                                   x19
                                                   x20
                                                   x21
                                                   x22
                                                   x23
                                                   x24
                                                   x25
                                                   x26
                                                   x27
                                                   x28
                                                   x29
                                                   x30
                                                   x31
                                                   x32
                                                   x33
                                                   x34
                                                   x35
                                                   x36
                                                   x37
                                                   x38
                                                   x39
                                                   x40
                                                   x41
                                                   x42
                                                   x43
                                                   x44
                                                   x45) = fmap (\y1 -> Report x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal f (Report x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion f (Report x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo f (Report x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance HasReportElem ReportElem
    where lens_reportElem = id
          lens_ReportElem_elemItem f (ReportItem x1) = fmap (\y1 -> ReportItem y1) (f x1)
          lens_ReportElem_elemItem _ (ReportParagraph x1) = pure (ReportParagraph x1)
          lens_ReportElem_elemItem _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText _ (ReportItem x1) = pure (ReportItem x1)
          lens_ReportElem_elemText f (ReportParagraph x1) = fmap (\y1 -> ReportParagraph y1) (f x1)
          lens_ReportElem_elemText _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemText #-}
instance HasReportFlags ReportFlags
    where lens_reportFlags = id
          lens_ReportFlags_hideEmptyItemFields = iso (\(ReportFlags x) -> x) ReportFlags
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance HasReportImage ReportImage
    where lens_reportImage = id
          lens_ReportImage_picCaption f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance HasReportImageView ReportImageView
    where lens_reportImageView = id
          lens_ReportImageView__picCaption f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance HasReportIntendedUse ReportIntendedUse
    where lens_reportIntendedUse = id
instance HasReportMap ReportMap
    where lens_reportMap = id
          lens_ReportMap_unReportMap = iso (\(ReportMap x) -> x) ReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
instance HasReportStandard ReportStandard
    where lens_reportStandard = id
          lens_ReportStandard_unReportStandard = iso (\(ReportStandard x) -> x) ReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance HasReportStatus ReportStatus
    where lens_reportStatus = id
instance HasReportValueApproachInfo ReportValueApproachInfo
    where lens_reportValueApproachInfo = id
          lens_ReportValueApproachInfo_reportValueApproachDescription f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo x1 y1) (f x2)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo y1 x2) (f x1)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance HasReportValueTypeInfo ReportValueTypeInfo
    where lens_reportValueTypeInfo = id
          lens_ReportValueTypeInfo_reportValueTypeDefinition f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 x2 y1) (f x3)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 y1 x3) (f x2)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo y1 x2 x3) (f x1)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance HasReportView ReportView
    where lens_reportView = id
          lens_ReportView__reportAbbrevs f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate f (ReportView x1
                                                            x2
                                                            x3
                                                            x4
                                                            x5
                                                            x6
                                                            x7
                                                            x8
                                                            x9
                                                            x10
                                                            x11
                                                            x12
                                                            x13
                                                            x14
                                                            x15
                                                            x16
                                                            x17
                                                            x18
                                                            x19
                                                            x20
                                                            x21
                                                            x22
                                                            x23
                                                            x24
                                                            x25
                                                            x26
                                                            x27
                                                            x28
                                                            x29
                                                            x30
                                                            x31
                                                            x32
                                                            x33
                                                            x34
                                                            x35
                                                            x36
                                                            x37
                                                            x38
                                                            x39
                                                            x40
                                                            x41
                                                            x42
                                                            x43
                                                            x44
                                                            x45) = fmap (\y1 -> ReportView x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal f (ReportView x1
                                                                   x2
                                                                   x3
                                                                   x4
                                                                   x5
                                                                   x6
                                                                   x7
                                                                   x8
                                                                   x9
                                                                   x10
                                                                   x11
                                                                   x12
                                                                   x13
                                                                   x14
                                                                   x15
                                                                   x16
                                                                   x17
                                                                   x18
                                                                   x19
                                                                   x20
                                                                   x21
                                                                   x22
                                                                   x23
                                                                   x24
                                                                   x25
                                                                   x26
                                                                   x27
                                                                   x28
                                                                   x29
                                                                   x30
                                                                   x31
                                                                   x32
                                                                   x33
                                                                   x34
                                                                   x35
                                                                   x36
                                                                   x37
                                                                   x38
                                                                   x39
                                                                   x40
                                                                   x41
                                                                   x42
                                                                   x43
                                                                   x44
                                                                   x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion f (ReportView x1
                                                                x2
                                                                x3
                                                                x4
                                                                x5
                                                                x6
                                                                x7
                                                                x8
                                                                x9
                                                                x10
                                                                x11
                                                                x12
                                                                x13
                                                                x14
                                                                x15
                                                                x16
                                                                x17
                                                                x18
                                                                x19
                                                                x20
                                                                x21
                                                                x22
                                                                x23
                                                                x24
                                                                x25
                                                                x26
                                                                x27
                                                                x28
                                                                x29
                                                                x30
                                                                x31
                                                                x32
                                                                x33
                                                                x34
                                                                x35
                                                                x36
                                                                x37
                                                                x38
                                                                x39
                                                                x40
                                                                x41
                                                                x42
                                                                x43
                                                                x44
                                                                x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo f (ReportView x1
                                                                 x2
                                                                 x3
                                                                 x4
                                                                 x5
                                                                 x6
                                                                 x7
                                                                 x8
                                                                 x9
                                                                 x10
                                                                 x11
                                                                 x12
                                                                 x13
                                                                 x14
                                                                 x15
                                                                 x16
                                                                 x17
                                                                 x18
                                                                 x19
                                                                 x20
                                                                 x21
                                                                 x22
                                                                 x23
                                                                 x24
                                                                 x25
                                                                 x26
                                                                 x27
                                                                 x28
                                                                 x29
                                                                 x30
                                                                 x31
                                                                 x32
                                                                 x33
                                                                 x34
                                                                 x35
                                                                 x36
                                                                 x37
                                                                 x38
                                                                 x39
                                                                 x40
                                                                 x41
                                                                 x42
                                                                 x43
                                                                 x44
                                                                 x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance HasText Text
    where lens_text = id
instance HasURI URI
    where lens_uRI = id
          lens_URI_uriAuthority f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_URI_uriScheme #-}
instance HasUUID UUID
    where lens_uUID = id
instance HasUnits Units
    where lens_units = id
instance HasUserId UserId
    where lens_userId = id
          lens_UserId__unUserId = iso (\(UserId x) -> x) UserId
          {-# INLINE lens_UserId__unUserId #-}
instance HasIdPath (Path_Author a)
    where idPath = Path_Author
instance HasIdPath (Path_Bool a)
    where idPath = Path_Bool
instance HasIdPath (Path_Branding a)
    where idPath = Path_Branding
instance HasIdPath (Path_CIString a)
    where idPath = Path_CIString
instance HasIdPath (Path_Dimension a)
    where idPath = Path_Dimension
instance HasIdPath (Path_Double a)
    where idPath = Path_Double
instance HasIdPath (Path_ImageCrop a)
    where idPath = Path_ImageCrop
instance HasIdPath (Path_ImageFile a)
    where idPath = Path_ImageFile
instance HasIdPath (Path_ImageSize a)
    where idPath = Path_ImageSize
instance HasIdPath (Path_Int a)
    where idPath = Path_Int
instance HasIdPath (Path_Int64 a)
    where idPath = Path_Int64
instance HasIdPath (Path_Integer a)
    where idPath = Path_Integer
instance HasIdPath (Path_Item a)
    where idPath = Path_Item
instance HasIdPath (Path_JSONText a)
    where idPath = Path_JSONText
instance HasIdPath (Path_Markup a)
    where idPath = Path_Markup
instance HasIdPath (Path_MaybeImageFile a)
    where idPath = Path_MaybeImageFile
instance HasIdPath (Path_MaybeReportIntendedUse a)
    where idPath = Path_MaybeReportIntendedUse
instance HasIdPath (Path_Permissions a)
    where idPath = Path_Permissions
instance HasIdPath (Path_ReadOnlyFilePath a)
    where idPath = Path_ReadOnlyFilePath
instance HasIdPath (Path_Report a)
    where idPath = Path_Report
instance HasIdPath (Path_ReportElem a)
    where idPath = Path_ReportElem
instance HasIdPath (Path_ReportFlags a)
    where idPath = Path_ReportFlags
instance HasIdPath (Path_ReportImage a)
    where idPath = Path_ReportImage
instance HasIdPath (Path_ReportImageView a)
    where idPath = Path_ReportImageView
instance HasIdPath (Path_ReportIntendedUse a)
    where idPath = Path_ReportIntendedUse
instance HasIdPath (Path_ReportMap a)
    where idPath = Path_ReportMap
instance HasIdPath (Path_ReportStandard a)
    where idPath = Path_ReportStandard
instance HasIdPath (Path_ReportStatus a)
    where idPath = Path_ReportStatus
instance HasIdPath (Path_ReportValueApproachInfo a)
    where idPath = Path_ReportValueApproachInfo
instance HasIdPath (Path_ReportValueTypeInfo a)
    where idPath = Path_ReportValueTypeInfo
instance HasIdPath (Path_ReportView a)
    where idPath = Path_ReportView
instance HasIdPath (Path_SaneSizeImageSize a)
    where idPath = Path_SaneSizeImageSize
instance HasIdPath (Path_String a)
    where idPath = Path_String
instance HasIdPath (Path_Text a)
    where idPath = Path_Text
instance HasIdPath (Path_URI a)
    where idPath = Path_URI
instance HasIdPath (Path_UUID a)
    where idPath = Path_UUID
instance HasIdPath (Path_Units a)
    where idPath = Path_Units
instance HasIdPath (Path_UserId a)
    where idPath = Path_UserId
instance HasIdPath (Path_UserIds a)
    where idPath = Path_UserIds
instance IsPathStart (Either URI ImageFile)
    where data Peek (Either URI ImageFile)
              = Peek_EUI_ImageFile (Path (Either URI ImageFile) ImageFile) (Maybe ImageFile)
              | Peek_EUI_EUI (Path (Either URI ImageFile) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_EUI_URI (Path (Either URI ImageFile) URI) (Maybe URI)
              deriving (Eq, Show)
          peek (x@(Left _)) = concat [concatMap (\path -> case path of
                                                              p@(Path_Left _) -> map (\w' -> let wf = peek w' :: Forest (Peek URI)
                                                                                              in Node (Peek_EUI_URI p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                     Peek_URI_URI q z -> Peek_EUI_URI ((Path_Left :: Path URI URI ->
                                                                                                                                                                                                                                     Path (Either URI
                                                                                                                                                                                                                                                  ImageFile)
                                                                                                                                                                                                                                          URI) q) z) wf)) (toListOf (toLens p) x :: [URI])
                                                              _ -> []) (pathsOf x (undefined :: Proxy URI) :: [Path_EUI URI]) :: Forest (Peek (Either URI ImageFile))]
          peek (x@(Right _)) = concat [concatMap (\path -> case path of
                                                               p@(Path_Right _) -> map (\w' -> let wf = peek w' :: Forest (Peek ImageFile)
                                                                                                in Node (Peek_EUI_ImageFile p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                             Peek_ImageFile_ImageFile q
                                                                                                                                                                                                                      z -> Peek_EUI_ImageFile ((Path_Right :: Path ImageFile
                                                                                                                                                                                                                                                                   ImageFile ->
                                                                                                                                                                                                                                                              Path (Either URI
                                                                                                                                                                                                                                                                           ImageFile)
                                                                                                                                                                                                                                                                   ImageFile) q) z) wf)) (toListOf (toLens p) x :: [ImageFile])
                                                               _ -> []) (pathsOf x (undefined :: Proxy ImageFile) :: [Path_EUI ImageFile]) :: Forest (Peek (Either URI ImageFile))]
          hop (x@(Left _)) = concat [concatMap (\path -> case path of
                                                             p@(Path_Left _) -> map (\w' -> Node (Peek_EUI_URI p (Just w')) []) (toListOf (toLens p) x :: [URI])
                                                             _ -> []) (pathsOf x (undefined :: Proxy URI) :: [Path_EUI URI]) :: Forest (Peek (Either URI ImageFile))]
          hop (x@(Right _)) = concat [concatMap (\path -> case path of
                                                              p@(Path_Right _) -> map (\w' -> Node (Peek_EUI_ImageFile p (Just w')) []) (toListOf (toLens p) x :: [ImageFile])
                                                              _ -> []) (pathsOf x (undefined :: Proxy ImageFile) :: [Path_EUI ImageFile]) :: Forest (Peek (Either URI ImageFile))]
instance IsPathStart (Map ItemFieldName Markup)
    where data Peek (Map ItemFieldName Markup)
              = Peek_MIM_JSONText (Path (Map ItemFieldName Markup) JSONText) (Maybe JSONText)
              | Peek_MIM_Markup (Path (Map ItemFieldName Markup) Markup) (Maybe Markup)
              | Peek_MIM_MIM (Path (Map ItemFieldName Markup) (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_MIM_Text (Path (Map ItemFieldName Markup) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Look k _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                     in Node (Peek_MIM_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                               Peek_Markup_JSONText q z -> Peek_MIM_JSONText ((Path_Look k :: Path Markup
                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                              Path (Map ItemFieldName
                                                                                                                                                                                                                                                        Markup)
                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                               Peek_Markup_Markup q z -> Peek_MIM_Markup ((Path_Look k :: Path Markup
                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                          Path (Map ItemFieldName
                                                                                                                                                                                                                                                    Markup)
                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                               Peek_Markup_Text q z -> Peek_MIM_Text ((Path_Look k :: Path Markup Text ->
                                                                                                                                                                                                                                      Path (Map ItemFieldName
                                                                                                                                                                                                                                                Markup)
                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MIM Markup]) :: Forest (Peek (Map ItemFieldName Markup))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Look k _) -> map (\w' -> Node (Peek_MIM_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MIM Markup]) :: Forest (Peek (Map ItemFieldName Markup))]
instance IsPathStart (Map ReportID Report)
    where data Peek (Map ReportID Report)
              = Peek_MRR_String (Path (Map ReportID Report) ([Char])) (Maybe ([Char]))
              | Peek_MRR_Int64 (Path (Map ReportID Report) Int64) (Maybe Int64)
              | Peek_MRR_Int (Path (Map ReportID Report) Int) (Maybe Int)
              | Peek_MRR_Bool (Path (Map ReportID Report) Bool) (Maybe Bool)
              | Peek_MRR_Double (Path (Map ReportID Report) Double) (Maybe Double)
              | Peek_MRR_Dimension (Path (Map ReportID Report) Dimension) (Maybe Dimension)
              | Peek_MRR_ImageCrop (Path (Map ReportID Report) ImageCrop) (Maybe ImageCrop)
              | Peek_MRR_ImageSize (Path (Map ReportID Report) ImageSize) (Maybe ImageSize)
              | Peek_MRR_Units (Path (Map ReportID Report) Units) (Maybe Units)
              | Peek_MRR_ImageFile (Path (Map ReportID Report) ImageFile) (Maybe ImageFile)
              | Peek_MRR_Integer (Path (Map ReportID Report) Integer) (Maybe Integer)
              | Peek_MRR_JSONText (Path (Map ReportID Report) JSONText) (Maybe JSONText)
              | Peek_MRR_Markup (Path (Map ReportID Report) Markup) (Maybe Markup)
              | Peek_MRR_Permissions (Path (Map ReportID Report) Permissions) (Maybe Permissions)
              | Peek_MRR_UserIds (Path (Map ReportID Report) ([UserId])) (Maybe ([UserId]))
              | Peek_MRR_AbbrevPair (Path (Map ReportID Report) ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_MRR_AbbrevPairs (Path (Map ReportID Report) (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_MRR_Author (Path (Map ReportID Report) Author) (Maybe Author)
              | Peek_MRR_Authors (Path (Map ReportID Report) (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_MRR_Branding (Path (Map ReportID Report) Branding) (Maybe Branding)
              | Peek_MRR_MarkupPair (Path (Map ReportID Report) ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_MRR_MarkupPairs (Path (Map ReportID Report) (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_MRR_Markups (Path (Map ReportID Report) (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_MRR_MaybeReportIntendedUse (Path (Map ReportID Report) (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_MRR_Report (Path (Map ReportID Report) Report) (Maybe Report)
              | Peek_MRR_ReportElem (Path (Map ReportID Report) ReportElem) (Maybe ReportElem)
              | Peek_MRR_ReportElems (Path (Map ReportID Report) (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_MRR_ReportFlags (Path (Map ReportID Report) ReportFlags) (Maybe ReportFlags)
              | Peek_MRR_ReportStandard (Path (Map ReportID Report) ReportStandard) (Maybe ReportStandard)
              | Peek_MRR_ReportStatus (Path (Map ReportID Report) ReportStatus) (Maybe ReportStatus)
              | Peek_MRR_ReportValueApproachInfo (Path (Map ReportID Report) ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_MRR_ReportValueTypeInfo (Path (Map ReportID Report) ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_MRR_EUI (Path (Map ReportID Report) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_MRR_MEUI (Path (Map ReportID Report) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_MRR_MaybeImageFile (Path (Map ReportID Report) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_MRR_ReportImage (Path (Map ReportID Report) ReportImage) (Maybe ReportImage)
              | Peek_MRR_ReportImages (Path (Map ReportID Report) (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_MRR_ReadOnlyFilePath (Path (Map ReportID Report) (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_MRR_ReportImageView (Path (Map ReportID Report) ReportImageView) (Maybe ReportImageView)
              | Peek_MRR_ReportView (Path (Map ReportID Report) ReportView) (Maybe ReportView)
              | Peek_MRR_SaneSizeImageSize (Path (Map ReportID Report) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_MRR_Item (Path (Map ReportID Report) Item) (Maybe Item)
              | Peek_MRR_MIM (Path (Map ReportID Report) (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_MRR_MRR (Path (Map ReportID Report) (Map ReportID Report)) (Maybe (Map ReportID Report))
              | Peek_MRR_CIString (Path (Map ReportID Report) CIString) (Maybe CIString)
              | Peek_MRR_URI (Path (Map ReportID Report) URI) (Maybe URI)
              | Peek_MRR_Text (Path (Map ReportID Report) Text) (Maybe Text)
              | Peek_MRR_UserId (Path (Map ReportID Report) UserId) (Maybe UserId)
              | Peek_MRR_UUID (Path (Map ReportID Report) UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Look k _) -> map (\w' -> let wf = peek w' :: Forest (Peek Report)
                                                                                     in Node (Peek_MRR_Report p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                               Peek_Report_String q z -> Peek_MRR_String ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               ([Char]) ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               ([Char])) q) z
                                                                                                                                                                               Peek_Report_Int64 q z -> Peek_MRR_Int64 ((Path_Look k :: Path Report
                                                                                                                                                                                                                                             Int64 ->
                                                                                                                                                                                                                                        Path (Map ReportID
                                                                                                                                                                                                                                                  Report)
                                                                                                                                                                                                                                             Int64) q) z
                                                                                                                                                                               Peek_Report_Int q z -> Peek_MRR_Int ((Path_Look k :: Path Report Int ->
                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                         Int) q) z
                                                                                                                                                                               Peek_Report_Bool q z -> Peek_MRR_Bool ((Path_Look k :: Path Report Bool ->
                                                                                                                                                                                                                                      Path (Map ReportID
                                                                                                                                                                                                                                                Report)
                                                                                                                                                                                                                                           Bool) q) z
                                                                                                                                                                               Peek_Report_Double q z -> Peek_MRR_Double ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               Double ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               Double) q) z
                                                                                                                                                                               Peek_Report_Dimension q
                                                                                                                                                                                                     z -> Peek_MRR_Dimension ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   Dimension ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   Dimension) q) z
                                                                                                                                                                               Peek_Report_ImageCrop q
                                                                                                                                                                                                     z -> Peek_MRR_ImageCrop ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   ImageCrop ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   ImageCrop) q) z
                                                                                                                                                                               Peek_Report_ImageSize q
                                                                                                                                                                                                     z -> Peek_MRR_ImageSize ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   ImageSize ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   ImageSize) q) z
                                                                                                                                                                               Peek_Report_Units q z -> Peek_MRR_Units ((Path_Look k :: Path Report
                                                                                                                                                                                                                                             Units ->
                                                                                                                                                                                                                                        Path (Map ReportID
                                                                                                                                                                                                                                                  Report)
                                                                                                                                                                                                                                             Units) q) z
                                                                                                                                                                               Peek_Report_ImageFile q
                                                                                                                                                                                                     z -> Peek_MRR_ImageFile ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   ImageFile ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   ImageFile) q) z
                                                                                                                                                                               Peek_Report_Integer q z -> Peek_MRR_Integer ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                 Integer ->
                                                                                                                                                                                                                                            Path (Map ReportID
                                                                                                                                                                                                                                                      Report)
                                                                                                                                                                                                                                                 Integer) q) z
                                                                                                                                                                               Peek_Report_JSONText q z -> Peek_MRR_JSONText ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                               Peek_Report_Markup q z -> Peek_MRR_Markup ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                               Peek_Report_Permissions q
                                                                                                                                                                                                       z -> Peek_MRR_Permissions ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       Permissions ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       Permissions) q) z
                                                                                                                                                                               Peek_Report_UserIds q z -> Peek_MRR_UserIds ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                 ([UserId]) ->
                                                                                                                                                                                                                                            Path (Map ReportID
                                                                                                                                                                                                                                                      Report)
                                                                                                                                                                                                                                                 ([UserId])) q) z
                                                                                                                                                                               Peek_Report_AbbrevPair q
                                                                                                                                                                                                      z -> Peek_MRR_AbbrevPair ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                     ((CIString,
                                                                                                                                                                                                                                                       Markup)) ->
                                                                                                                                                                                                                                                Path (Map ReportID
                                                                                                                                                                                                                                                          Report)
                                                                                                                                                                                                                                                     ((CIString,
                                                                                                                                                                                                                                                       Markup))) q) z
                                                                                                                                                                               Peek_Report_AbbrevPairs q
                                                                                                                                                                                                       z -> Peek_MRR_AbbrevPairs ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       (Order AbbrevPairID
                                                                                                                                                                                                                                                              ((CIString,
                                                                                                                                                                                                                                                                Markup))) ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       (Order AbbrevPairID
                                                                                                                                                                                                                                                              ((CIString,
                                                                                                                                                                                                                                                                Markup)))) q) z
                                                                                                                                                                               Peek_Report_Author q z -> Peek_MRR_Author ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               Author ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               Author) q) z
                                                                                                                                                                               Peek_Report_Authors q z -> Peek_MRR_Authors ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                 (Order AuthorID
                                                                                                                                                                                                                                                        Author) ->
                                                                                                                                                                                                                                            Path (Map ReportID
                                                                                                                                                                                                                                                      Report)
                                                                                                                                                                                                                                                 (Order AuthorID
                                                                                                                                                                                                                                                        Author)) q) z
                                                                                                                                                                               Peek_Report_Branding q z -> Peek_MRR_Branding ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   Branding ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   Branding) q) z
                                                                                                                                                                               Peek_Report_MarkupPair q
                                                                                                                                                                                                      z -> Peek_MRR_MarkupPair ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                     ((Markup,
                                                                                                                                                                                                                                                       Markup)) ->
                                                                                                                                                                                                                                                Path (Map ReportID
                                                                                                                                                                                                                                                          Report)
                                                                                                                                                                                                                                                     ((Markup,
                                                                                                                                                                                                                                                       Markup))) q) z
                                                                                                                                                                               Peek_Report_MarkupPairs q
                                                                                                                                                                                                       z -> Peek_MRR_MarkupPairs ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       (Order MarkupPairID
                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                Markup))) ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       (Order MarkupPairID
                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                Markup)))) q) z
                                                                                                                                                                               Peek_Report_Markups q z -> Peek_MRR_Markups ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                 (Order MarkupID
                                                                                                                                                                                                                                                        Markup) ->
                                                                                                                                                                                                                                            Path (Map ReportID
                                                                                                                                                                                                                                                      Report)
                                                                                                                                                                                                                                                 (Order MarkupID
                                                                                                                                                                                                                                                        Markup)) q) z
                                                                                                                                                                               Peek_Report_MaybeReportIntendedUse q
                                                                                                                                                                                                                  z -> Peek_MRR_MaybeReportIntendedUse ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                                             (Maybe ReportIntendedUse) ->
                                                                                                                                                                                                                                                                        Path (Map ReportID
                                                                                                                                                                                                                                                                                  Report)
                                                                                                                                                                                                                                                                             (Maybe ReportIntendedUse)) q) z
                                                                                                                                                                               Peek_Report_Report q z -> Peek_MRR_Report ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               Report ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               Report) q) z
                                                                                                                                                                               Peek_Report_ReportElem q
                                                                                                                                                                                                      z -> Peek_MRR_ReportElem ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                     ReportElem ->
                                                                                                                                                                                                                                                Path (Map ReportID
                                                                                                                                                                                                                                                          Report)
                                                                                                                                                                                                                                                     ReportElem) q) z
                                                                                                                                                                               Peek_Report_ReportElems q
                                                                                                                                                                                                       z -> Peek_MRR_ReportElems ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       (Order ReportElemID
                                                                                                                                                                                                                                                              ReportElem) ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       (Order ReportElemID
                                                                                                                                                                                                                                                              ReportElem)) q) z
                                                                                                                                                                               Peek_Report_ReportFlags q
                                                                                                                                                                                                       z -> Peek_MRR_ReportFlags ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       ReportFlags ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       ReportFlags) q) z
                                                                                                                                                                               Peek_Report_ReportStandard q
                                                                                                                                                                                                          z -> Peek_MRR_ReportStandard ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                             ReportStandard ->
                                                                                                                                                                                                                                                        Path (Map ReportID
                                                                                                                                                                                                                                                                  Report)
                                                                                                                                                                                                                                                             ReportStandard) q) z
                                                                                                                                                                               Peek_Report_ReportStatus q
                                                                                                                                                                                                        z -> Peek_MRR_ReportStatus ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                         ReportStatus ->
                                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                                         ReportStatus) q) z
                                                                                                                                                                               Peek_Report_ReportValueApproachInfo q
                                                                                                                                                                                                                   z -> Peek_MRR_ReportValueApproachInfo ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                                               ReportValueApproachInfo ->
                                                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                                                               ReportValueApproachInfo) q) z
                                                                                                                                                                               Peek_Report_ReportValueTypeInfo q
                                                                                                                                                                                                               z -> Peek_MRR_ReportValueTypeInfo ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                                       ReportValueTypeInfo ->
                                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                                       ReportValueTypeInfo) q) z
                                                                                                                                                                               Peek_Report_EUI q z -> Peek_MRR_EUI ((Path_Look k :: Path Report
                                                                                                                                                                                                                                         (Either URI
                                                                                                                                                                                                                                                 ImageFile) ->
                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                         (Either URI
                                                                                                                                                                                                                                                 ImageFile)) q) z
                                                                                                                                                                               Peek_Report_MEUI q z -> Peek_MRR_MEUI ((Path_Look k :: Path Report
                                                                                                                                                                                                                                           (Maybe (Either URI
                                                                                                                                                                                                                                                          ImageFile)) ->
                                                                                                                                                                                                                                      Path (Map ReportID
                                                                                                                                                                                                                                                Report)
                                                                                                                                                                                                                                           (Maybe (Either URI
                                                                                                                                                                                                                                                          ImageFile))) q) z
                                                                                                                                                                               Peek_Report_MaybeImageFile q
                                                                                                                                                                                                          z -> Peek_MRR_MaybeImageFile ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                             (Maybe ImageFile) ->
                                                                                                                                                                                                                                                        Path (Map ReportID
                                                                                                                                                                                                                                                                  Report)
                                                                                                                                                                                                                                                             (Maybe ImageFile)) q) z
                                                                                                                                                                               Peek_Report_ReportImage q
                                                                                                                                                                                                       z -> Peek_MRR_ReportImage ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                       ReportImage ->
                                                                                                                                                                                                                                                  Path (Map ReportID
                                                                                                                                                                                                                                                            Report)
                                                                                                                                                                                                                                                       ReportImage) q) z
                                                                                                                                                                               Peek_Report_ReportImages q
                                                                                                                                                                                                        z -> Peek_MRR_ReportImages ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                         (Order ReportImageID
                                                                                                                                                                                                                                                                ReportImage) ->
                                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                                         (Order ReportImageID
                                                                                                                                                                                                                                                                ReportImage)) q) z
                                                                                                                                                                               Peek_Report_ReadOnlyFilePath q
                                                                                                                                                                                                            z -> Peek_MRR_ReadOnlyFilePath ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                                 (ReadOnly ([Char])) ->
                                                                                                                                                                                                                                                            Path (Map ReportID
                                                                                                                                                                                                                                                                      Report)
                                                                                                                                                                                                                                                                 (ReadOnly ([Char]))) q) z
                                                                                                                                                                               Peek_Report_ReportImageView q
                                                                                                                                                                                                           z -> Peek_MRR_ReportImageView ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                               ReportImageView ->
                                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                                               ReportImageView) q) z
                                                                                                                                                                               Peek_Report_ReportView q
                                                                                                                                                                                                      z -> Peek_MRR_ReportView ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                     ReportView ->
                                                                                                                                                                                                                                                Path (Map ReportID
                                                                                                                                                                                                                                                          Report)
                                                                                                                                                                                                                                                     ReportView) q) z
                                                                                                                                                                               Peek_Report_SaneSizeImageSize q
                                                                                                                                                                                                             z -> Peek_MRR_SaneSizeImageSize ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                                   (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                                   (SaneSize ImageSize)) q) z
                                                                                                                                                                               Peek_Report_Item q z -> Peek_MRR_Item ((Path_Look k :: Path Report Item ->
                                                                                                                                                                                                                                      Path (Map ReportID
                                                                                                                                                                                                                                                Report)
                                                                                                                                                                                                                                           Item) q) z
                                                                                                                                                                               Peek_Report_MIM q z -> Peek_MRR_MIM ((Path_Look k :: Path Report
                                                                                                                                                                                                                                         (Map ItemFieldName
                                                                                                                                                                                                                                              Markup) ->
                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                         (Map ItemFieldName
                                                                                                                                                                                                                                              Markup)) q) z
                                                                                                                                                                               Peek_Report_CIString q z -> Peek_MRR_CIString ((Path_Look k :: Path Report
                                                                                                                                                                                                                                                   CIString ->
                                                                                                                                                                                                                                              Path (Map ReportID
                                                                                                                                                                                                                                                        Report)
                                                                                                                                                                                                                                                   CIString) q) z
                                                                                                                                                                               Peek_Report_URI q z -> Peek_MRR_URI ((Path_Look k :: Path Report URI ->
                                                                                                                                                                                                                                    Path (Map ReportID
                                                                                                                                                                                                                                              Report)
                                                                                                                                                                                                                                         URI) q) z
                                                                                                                                                                               Peek_Report_Text q z -> Peek_MRR_Text ((Path_Look k :: Path Report Text ->
                                                                                                                                                                                                                                      Path (Map ReportID
                                                                                                                                                                                                                                                Report)
                                                                                                                                                                                                                                           Text) q) z
                                                                                                                                                                               Peek_Report_UserId q z -> Peek_MRR_UserId ((Path_Look k :: Path Report
                                                                                                                                                                                                                                               UserId ->
                                                                                                                                                                                                                                          Path (Map ReportID
                                                                                                                                                                                                                                                    Report)
                                                                                                                                                                                                                                               UserId) q) z
                                                                                                                                                                               Peek_Report_UUID q z -> Peek_MRR_UUID ((Path_Look k :: Path Report UUID ->
                                                                                                                                                                                                                                      Path (Map ReportID
                                                                                                                                                                                                                                                Report)
                                                                                                                                                                                                                                           UUID) q) z) wf)) (toListOf (toLens p) x :: [Report])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Report) :: [Path_MRR Report]) :: Forest (Peek (Map ReportID Report))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Look k _) -> map (\w' -> Node (Peek_MRR_Report p (Just w')) []) (toListOf (toLens p) x :: [Report])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Report) :: [Path_MRR Report]) :: Forest (Peek (Map ReportID Report))]
instance IsPathStart (Order AbbrevPairID ((CIString, Markup)))
    where data Peek (Order AbbrevPairID ((CIString, Markup)))
              = Peek_AbbrevPairs_JSONText (Path (Order AbbrevPairID ((CIString, Markup))) JSONText) (Maybe JSONText)
              | Peek_AbbrevPairs_Markup (Path (Order AbbrevPairID ((CIString, Markup))) Markup) (Maybe Markup)
              | Peek_AbbrevPairs_AbbrevPair (Path (Order AbbrevPairID ((CIString, Markup))) ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_AbbrevPairs_AbbrevPairs (Path (Order AbbrevPairID ((CIString, Markup))) (Order AbbrevPairID ((CIString, Markup))))
                                             (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_AbbrevPairs_CIString (Path (Order AbbrevPairID ((CIString, Markup))) CIString) (Maybe CIString)
              | Peek_AbbrevPairs_Text (Path (Order AbbrevPairID ((CIString, Markup))) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek ((CIString, Markup)))
                                                                                   in Node (Peek_AbbrevPairs_AbbrevPair p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_AbbrevPair_JSONText q
                                                                                                                                                                                                                  z -> Peek_AbbrevPairs_JSONText ((Path_At k :: Path ((CIString,
                                                                                                                                                                                                                                                                       Markup))
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                            ((CIString,
                                                                                                                                                                                                                                                                              Markup)))
                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                         Peek_AbbrevPair_Markup q
                                                                                                                                                                                                                z -> Peek_AbbrevPairs_Markup ((Path_At k :: Path ((CIString,
                                                                                                                                                                                                                                                                   Markup))
                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                            Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                        ((CIString,
                                                                                                                                                                                                                                                                          Markup)))
                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                         Peek_AbbrevPair_AbbrevPair q
                                                                                                                                                                                                                    z -> Peek_AbbrevPairs_AbbrevPair ((Path_At k :: Path ((CIString,
                                                                                                                                                                                                                                                                           Markup))
                                                                                                                                                                                                                                                                         ((CIString,
                                                                                                                                                                                                                                                                           Markup)) ->
                                                                                                                                                                                                                                                                    Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                ((CIString,
                                                                                                                                                                                                                                                                                  Markup)))
                                                                                                                                                                                                                                                                         ((CIString,
                                                                                                                                                                                                                                                                           Markup))) q) z
                                                                                                                                                                                         Peek_AbbrevPair_CIString q
                                                                                                                                                                                                                  z -> Peek_AbbrevPairs_CIString ((Path_At k :: Path ((CIString,
                                                                                                                                                                                                                                                                       Markup))
                                                                                                                                                                                                                                                                     CIString ->
                                                                                                                                                                                                                                                                Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                            ((CIString,
                                                                                                                                                                                                                                                                              Markup)))
                                                                                                                                                                                                                                                                     CIString) q) z
                                                                                                                                                                                         Peek_AbbrevPair_Text q
                                                                                                                                                                                                              z -> Peek_AbbrevPairs_Text ((Path_At k :: Path ((CIString,
                                                                                                                                                                                                                                                               Markup))
                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                        Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                    ((CIString,
                                                                                                                                                                                                                                                                      Markup)))
                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [(CIString,
                                                                                                                                                                                                                                                                                                          Markup)])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ((CIString, Markup))) :: [Path_AbbrevPairs ((CIString, Markup))]) :: Forest (Peek (Order AbbrevPairID ((CIString, Markup))))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_AbbrevPairs_AbbrevPair p (Just w')) []) (toListOf (toLens p) x :: [(CIString, Markup)])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ((CIString, Markup))) :: [Path_AbbrevPairs ((CIString, Markup))]) :: Forest (Peek (Order AbbrevPairID ((CIString, Markup))))]
instance IsPathStart (Order AuthorID Author)
    where data Peek (Order AuthorID Author)
              = Peek_Authors_JSONText (Path (Order AuthorID Author) JSONText) (Maybe JSONText)
              | Peek_Authors_Markup (Path (Order AuthorID Author) Markup) (Maybe Markup)
              | Peek_Authors_Author (Path (Order AuthorID Author) Author) (Maybe Author)
              | Peek_Authors_Authors (Path (Order AuthorID Author) (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_Authors_Text (Path (Order AuthorID Author) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek Author)
                                                                                   in Node (Peek_Authors_Author p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                 Peek_Author_JSONText q
                                                                                                                                                                                                      z -> Peek_Authors_JSONText ((Path_At k :: Path Author
                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                Path (Order AuthorID
                                                                                                                                                                                                                                                            Author)
                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                 Peek_Author_Markup q z -> Peek_Authors_Markup ((Path_At k :: Path Author
                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                              Path (Order AuthorID
                                                                                                                                                                                                                                                          Author)
                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                 Peek_Author_Author q z -> Peek_Authors_Author ((Path_At k :: Path Author
                                                                                                                                                                                                                                                   Author ->
                                                                                                                                                                                                                                              Path (Order AuthorID
                                                                                                                                                                                                                                                          Author)
                                                                                                                                                                                                                                                   Author) q) z
                                                                                                                                                                                 Peek_Author_Text q z -> Peek_Authors_Text ((Path_At k :: Path Author
                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                          Path (Order AuthorID
                                                                                                                                                                                                                                                      Author)
                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Author])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Author) :: [Path_Authors Author]) :: Forest (Peek (Order AuthorID Author))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_Authors_Author p (Just w')) []) (toListOf (toLens p) x :: [Author])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Author) :: [Path_Authors Author]) :: Forest (Peek (Order AuthorID Author))]
instance IsPathStart (Order MarkupID Markup)
    where data Peek (Order MarkupID Markup)
              = Peek_Markups_JSONText (Path (Order MarkupID Markup) JSONText) (Maybe JSONText)
              | Peek_Markups_Markup (Path (Order MarkupID Markup) Markup) (Maybe Markup)
              | Peek_Markups_Markups (Path (Order MarkupID Markup) (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_Markups_Text (Path (Order MarkupID Markup) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                   in Node (Peek_Markups_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                 Peek_Markup_JSONText q
                                                                                                                                                                                                      z -> Peek_Markups_JSONText ((Path_At k :: Path Markup
                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                Path (Order MarkupID
                                                                                                                                                                                                                                                            Markup)
                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                 Peek_Markup_Markup q z -> Peek_Markups_Markup ((Path_At k :: Path Markup
                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                              Path (Order MarkupID
                                                                                                                                                                                                                                                          Markup)
                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                 Peek_Markup_Text q z -> Peek_Markups_Text ((Path_At k :: Path Markup
                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                          Path (Order MarkupID
                                                                                                                                                                                                                                                      Markup)
                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Markups Markup]) :: Forest (Peek (Order MarkupID Markup))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_Markups_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Markups Markup]) :: Forest (Peek (Order MarkupID Markup))]
instance IsPathStart (Order MarkupPairID ((Markup, Markup)))
    where data Peek (Order MarkupPairID ((Markup, Markup)))
              = Peek_MarkupPairs_JSONText (Path (Order MarkupPairID ((Markup, Markup))) JSONText) (Maybe JSONText)
              | Peek_MarkupPairs_Markup (Path (Order MarkupPairID ((Markup, Markup))) Markup) (Maybe Markup)
              | Peek_MarkupPairs_MarkupPair (Path (Order MarkupPairID ((Markup, Markup))) ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_MarkupPairs_MarkupPairs (Path (Order MarkupPairID ((Markup, Markup))) (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_MarkupPairs_Text (Path (Order MarkupPairID ((Markup, Markup))) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek ((Markup, Markup)))
                                                                                   in Node (Peek_MarkupPairs_MarkupPair p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_MarkupPair_JSONText q
                                                                                                                                                                                                                  z -> Peek_MarkupPairs_JSONText ((Path_At k :: Path ((Markup,
                                                                                                                                                                                                                                                                       Markup))
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path (Order MarkupPairID
                                                                                                                                                                                                                                                                            ((Markup,
                                                                                                                                                                                                                                                                              Markup)))
                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                         Peek_MarkupPair_Markup q
                                                                                                                                                                                                                z -> Peek_MarkupPairs_Markup ((Path_At k :: Path ((Markup,
                                                                                                                                                                                                                                                                   Markup))
                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                            Path (Order MarkupPairID
                                                                                                                                                                                                                                                                        ((Markup,
                                                                                                                                                                                                                                                                          Markup)))
                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                         Peek_MarkupPair_MarkupPair q
                                                                                                                                                                                                                    z -> Peek_MarkupPairs_MarkupPair ((Path_At k :: Path ((Markup,
                                                                                                                                                                                                                                                                           Markup))
                                                                                                                                                                                                                                                                         ((Markup,
                                                                                                                                                                                                                                                                           Markup)) ->
                                                                                                                                                                                                                                                                    Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                ((Markup,
                                                                                                                                                                                                                                                                                  Markup)))
                                                                                                                                                                                                                                                                         ((Markup,
                                                                                                                                                                                                                                                                           Markup))) q) z
                                                                                                                                                                                         Peek_MarkupPair_Text q
                                                                                                                                                                                                              z -> Peek_MarkupPairs_Text ((Path_At k :: Path ((Markup,
                                                                                                                                                                                                                                                               Markup))
                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                        Path (Order MarkupPairID
                                                                                                                                                                                                                                                                    ((Markup,
                                                                                                                                                                                                                                                                      Markup)))
                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [(Markup,
                                                                                                                                                                                                                                                                                                          Markup)])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ((Markup, Markup))) :: [Path_MarkupPairs ((Markup, Markup))]) :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_MarkupPairs_MarkupPair p (Just w')) []) (toListOf (toLens p) x :: [(Markup, Markup)])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ((Markup, Markup))) :: [Path_MarkupPairs ((Markup, Markup))]) :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))]
instance IsPathStart (Order ReportElemID ReportElem)
    where data Peek (Order ReportElemID ReportElem)
              = Peek_ReportElems_String (Path (Order ReportElemID ReportElem) ([Char])) (Maybe ([Char]))
              | Peek_ReportElems_Bool (Path (Order ReportElemID ReportElem) Bool) (Maybe Bool)
              | Peek_ReportElems_Double (Path (Order ReportElemID ReportElem) Double) (Maybe Double)
              | Peek_ReportElems_Dimension (Path (Order ReportElemID ReportElem) Dimension) (Maybe Dimension)
              | Peek_ReportElems_ImageCrop (Path (Order ReportElemID ReportElem) ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElems_ImageSize (Path (Order ReportElemID ReportElem) ImageSize) (Maybe ImageSize)
              | Peek_ReportElems_Units (Path (Order ReportElemID ReportElem) Units) (Maybe Units)
              | Peek_ReportElems_ImageFile (Path (Order ReportElemID ReportElem) ImageFile) (Maybe ImageFile)
              | Peek_ReportElems_JSONText (Path (Order ReportElemID ReportElem) JSONText) (Maybe JSONText)
              | Peek_ReportElems_Markup (Path (Order ReportElemID ReportElem) Markup) (Maybe Markup)
              | Peek_ReportElems_ReportElem (Path (Order ReportElemID ReportElem) ReportElem) (Maybe ReportElem)
              | Peek_ReportElems_ReportElems (Path (Order ReportElemID ReportElem) (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_ReportElems_EUI (Path (Order ReportElemID ReportElem) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportElems_MEUI (Path (Order ReportElemID ReportElem) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportElems_MaybeImageFile (Path (Order ReportElemID ReportElem) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportElems_ReportImage (Path (Order ReportElemID ReportElem) ReportImage) (Maybe ReportImage)
              | Peek_ReportElems_ReportImages (Path (Order ReportElemID ReportElem) (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportElems_ReportImageView (Path (Order ReportElemID ReportElem) ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElems_SaneSizeImageSize (Path (Order ReportElemID ReportElem) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportElems_Item (Path (Order ReportElemID ReportElem) Item) (Maybe Item)
              | Peek_ReportElems_MIM (Path (Order ReportElemID ReportElem) (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportElems_URI (Path (Order ReportElemID ReportElem) URI) (Maybe URI)
              | Peek_ReportElems_Text (Path (Order ReportElemID ReportElem) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportElem)
                                                                                   in Node (Peek_ReportElems_ReportElem p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_ReportElem_String q
                                                                                                                                                                                                                z -> Peek_ReportElems_String ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                 ([Char]) ->
                                                                                                                                                                                                                                                            Path (Order ReportElemID
                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                 ([Char])) q) z
                                                                                                                                                                                         Peek_ReportElem_Bool q
                                                                                                                                                                                                              z -> Peek_ReportElems_Bool ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                             Bool ->
                                                                                                                                                                                                                                                        Path (Order ReportElemID
                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                             Bool) q) z
                                                                                                                                                                                         Peek_ReportElem_Double q
                                                                                                                                                                                                                z -> Peek_ReportElems_Double ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                 Double ->
                                                                                                                                                                                                                                                            Path (Order ReportElemID
                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                 Double) q) z
                                                                                                                                                                                         Peek_ReportElem_Dimension q
                                                                                                                                                                                                                   z -> Peek_ReportElems_Dimension ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                       Dimension ->
                                                                                                                                                                                                                                                                  Path (Order ReportElemID
                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                       Dimension) q) z
                                                                                                                                                                                         Peek_ReportElem_ImageCrop q
                                                                                                                                                                                                                   z -> Peek_ReportElems_ImageCrop ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                       ImageCrop ->
                                                                                                                                                                                                                                                                  Path (Order ReportElemID
                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                       ImageCrop) q) z
                                                                                                                                                                                         Peek_ReportElem_ImageSize q
                                                                                                                                                                                                                   z -> Peek_ReportElems_ImageSize ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                       ImageSize ->
                                                                                                                                                                                                                                                                  Path (Order ReportElemID
                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                       ImageSize) q) z
                                                                                                                                                                                         Peek_ReportElem_Units q
                                                                                                                                                                                                               z -> Peek_ReportElems_Units ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                               Units ->
                                                                                                                                                                                                                                                          Path (Order ReportElemID
                                                                                                                                                                                                                                                                      ReportElem)
                                                                                                                                                                                                                                                               Units) q) z
                                                                                                                                                                                         Peek_ReportElem_ImageFile q
                                                                                                                                                                                                                   z -> Peek_ReportElems_ImageFile ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                       ImageFile ->
                                                                                                                                                                                                                                                                  Path (Order ReportElemID
                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                       ImageFile) q) z
                                                                                                                                                                                         Peek_ReportElem_JSONText q
                                                                                                                                                                                                                  z -> Peek_ReportElems_JSONText ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path (Order ReportElemID
                                                                                                                                                                                                                                                                            ReportElem)
                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                         Peek_ReportElem_Markup q
                                                                                                                                                                                                                z -> Peek_ReportElems_Markup ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                            Path (Order ReportElemID
                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                         Peek_ReportElem_ReportElem q
                                                                                                                                                                                                                    z -> Peek_ReportElems_ReportElem ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                         ReportElem ->
                                                                                                                                                                                                                                                                    Path (Order ReportElemID
                                                                                                                                                                                                                                                                                ReportElem)
                                                                                                                                                                                                                                                                         ReportElem) q) z
                                                                                                                                                                                         Peek_ReportElem_EUI q
                                                                                                                                                                                                             z -> Peek_ReportElems_EUI ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                           (Either URI
                                                                                                                                                                                                                                                                   ImageFile) ->
                                                                                                                                                                                                                                                      Path (Order ReportElemID
                                                                                                                                                                                                                                                                  ReportElem)
                                                                                                                                                                                                                                                           (Either URI
                                                                                                                                                                                                                                                                   ImageFile)) q) z
                                                                                                                                                                                         Peek_ReportElem_MEUI q
                                                                                                                                                                                                              z -> Peek_ReportElems_MEUI ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                             (Maybe (Either URI
                                                                                                                                                                                                                                                                            ImageFile)) ->
                                                                                                                                                                                                                                                        Path (Order ReportElemID
                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                             (Maybe (Either URI
                                                                                                                                                                                                                                                                            ImageFile))) q) z
                                                                                                                                                                                         Peek_ReportElem_MaybeImageFile q
                                                                                                                                                                                                                        z -> Peek_ReportElems_MaybeImageFile ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                                 (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                            Path (Order ReportElemID
                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                 (Maybe ImageFile)) q) z
                                                                                                                                                                                         Peek_ReportElem_ReportImage q
                                                                                                                                                                                                                     z -> Peek_ReportElems_ReportImage ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                           ReportImage ->
                                                                                                                                                                                                                                                                      Path (Order ReportElemID
                                                                                                                                                                                                                                                                                  ReportElem)
                                                                                                                                                                                                                                                                           ReportImage) q) z
                                                                                                                                                                                         Peek_ReportElem_ReportImages q
                                                                                                                                                                                                                      z -> Peek_ReportElems_ReportImages ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                             (Order ReportImageID
                                                                                                                                                                                                                                                                                    ReportImage) ->
                                                                                                                                                                                                                                                                        Path (Order ReportElemID
                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                             (Order ReportImageID
                                                                                                                                                                                                                                                                                    ReportImage)) q) z
                                                                                                                                                                                         Peek_ReportElem_ReportImageView q
                                                                                                                                                                                                                         z -> Peek_ReportElems_ReportImageView ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                                   ReportImageView ->
                                                                                                                                                                                                                                                                              Path (Order ReportElemID
                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                   ReportImageView) q) z
                                                                                                                                                                                         Peek_ReportElem_SaneSizeImageSize q
                                                                                                                                                                                                                           z -> Peek_ReportElems_SaneSizeImageSize ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                                                       (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                  Path (Order ReportElemID
                                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                                       (SaneSize ImageSize)) q) z
                                                                                                                                                                                         Peek_ReportElem_Item q
                                                                                                                                                                                                              z -> Peek_ReportElems_Item ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                             Item ->
                                                                                                                                                                                                                                                        Path (Order ReportElemID
                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                             Item) q) z
                                                                                                                                                                                         Peek_ReportElem_MIM q
                                                                                                                                                                                                             z -> Peek_ReportElems_MIM ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                           (Map ItemFieldName
                                                                                                                                                                                                                                                                Markup) ->
                                                                                                                                                                                                                                                      Path (Order ReportElemID
                                                                                                                                                                                                                                                                  ReportElem)
                                                                                                                                                                                                                                                           (Map ItemFieldName
                                                                                                                                                                                                                                                                Markup)) q) z
                                                                                                                                                                                         Peek_ReportElem_URI q
                                                                                                                                                                                                             z -> Peek_ReportElems_URI ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                           URI ->
                                                                                                                                                                                                                                                      Path (Order ReportElemID
                                                                                                                                                                                                                                                                  ReportElem)
                                                                                                                                                                                                                                                           URI) q) z
                                                                                                                                                                                         Peek_ReportElem_Text q
                                                                                                                                                                                                              z -> Peek_ReportElems_Text ((Path_At k :: Path ReportElem
                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                        Path (Order ReportElemID
                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [ReportElem])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ReportElem) :: [Path_ReportElems ReportElem]) :: Forest (Peek (Order ReportElemID ReportElem))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_ReportElems_ReportElem p (Just w')) []) (toListOf (toLens p) x :: [ReportElem])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ReportElem) :: [Path_ReportElems ReportElem]) :: Forest (Peek (Order ReportElemID ReportElem))]
instance IsPathStart (Order ReportImageID ReportImage)
    where data Peek (Order ReportImageID ReportImage)
              = Peek_ReportImages_String (Path (Order ReportImageID ReportImage) ([Char])) (Maybe ([Char]))
              | Peek_ReportImages_Bool (Path (Order ReportImageID ReportImage) Bool) (Maybe Bool)
              | Peek_ReportImages_Double (Path (Order ReportImageID ReportImage) Double) (Maybe Double)
              | Peek_ReportImages_Dimension (Path (Order ReportImageID ReportImage) Dimension) (Maybe Dimension)
              | Peek_ReportImages_ImageCrop (Path (Order ReportImageID ReportImage) ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImages_ImageSize (Path (Order ReportImageID ReportImage) ImageSize) (Maybe ImageSize)
              | Peek_ReportImages_Units (Path (Order ReportImageID ReportImage) Units) (Maybe Units)
              | Peek_ReportImages_ImageFile (Path (Order ReportImageID ReportImage) ImageFile) (Maybe ImageFile)
              | Peek_ReportImages_JSONText (Path (Order ReportImageID ReportImage) JSONText) (Maybe JSONText)
              | Peek_ReportImages_Markup (Path (Order ReportImageID ReportImage) Markup) (Maybe Markup)
              | Peek_ReportImages_EUI (Path (Order ReportImageID ReportImage) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImages_MEUI (Path (Order ReportImageID ReportImage) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImages_MaybeImageFile (Path (Order ReportImageID ReportImage) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImages_ReportImage (Path (Order ReportImageID ReportImage) ReportImage) (Maybe ReportImage)
              | Peek_ReportImages_ReportImages (Path (Order ReportImageID ReportImage) (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportImages_ReportImageView (Path (Order ReportImageID ReportImage) ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImages_SaneSizeImageSize (Path (Order ReportImageID ReportImage) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImages_URI (Path (Order ReportImageID ReportImage) URI) (Maybe URI)
              | Peek_ReportImages_Text (Path (Order ReportImageID ReportImage) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_At k _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportImage)
                                                                                   in Node (Peek_ReportImages_ReportImage p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                           Peek_ReportImage_String q
                                                                                                                                                                                                                   z -> Peek_ReportImages_String ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                Path (Order ReportImageID
                                                                                                                                                                                                                                                                            ReportImage)
                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                           Peek_ReportImage_Bool q
                                                                                                                                                                                                                 z -> Peek_ReportImages_Bool ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                 Bool ->
                                                                                                                                                                                                                                                            Path (Order ReportImageID
                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                 Bool) q) z
                                                                                                                                                                                           Peek_ReportImage_Double q
                                                                                                                                                                                                                   z -> Peek_ReportImages_Double ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                     Double ->
                                                                                                                                                                                                                                                                Path (Order ReportImageID
                                                                                                                                                                                                                                                                            ReportImage)
                                                                                                                                                                                                                                                                     Double) q) z
                                                                                                                                                                                           Peek_ReportImage_Dimension q
                                                                                                                                                                                                                      z -> Peek_ReportImages_Dimension ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                           Dimension ->
                                                                                                                                                                                                                                                                      Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           Dimension) q) z
                                                                                                                                                                                           Peek_ReportImage_ImageCrop q
                                                                                                                                                                                                                      z -> Peek_ReportImages_ImageCrop ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                           ImageCrop ->
                                                                                                                                                                                                                                                                      Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           ImageCrop) q) z
                                                                                                                                                                                           Peek_ReportImage_ImageSize q
                                                                                                                                                                                                                      z -> Peek_ReportImages_ImageSize ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                           ImageSize ->
                                                                                                                                                                                                                                                                      Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           ImageSize) q) z
                                                                                                                                                                                           Peek_ReportImage_Units q
                                                                                                                                                                                                                  z -> Peek_ReportImages_Units ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                   Units ->
                                                                                                                                                                                                                                                              Path (Order ReportImageID
                                                                                                                                                                                                                                                                          ReportImage)
                                                                                                                                                                                                                                                                   Units) q) z
                                                                                                                                                                                           Peek_ReportImage_ImageFile q
                                                                                                                                                                                                                      z -> Peek_ReportImages_ImageFile ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                           ImageFile ->
                                                                                                                                                                                                                                                                      Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           ImageFile) q) z
                                                                                                                                                                                           Peek_ReportImage_JSONText q
                                                                                                                                                                                                                     z -> Peek_ReportImages_JSONText ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                    Path (Order ReportImageID
                                                                                                                                                                                                                                                                                ReportImage)
                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                           Peek_ReportImage_Markup q
                                                                                                                                                                                                                   z -> Peek_ReportImages_Markup ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                     Markup ->
                                                                                                                                                                                                                                                                Path (Order ReportImageID
                                                                                                                                                                                                                                                                            ReportImage)
                                                                                                                                                                                                                                                                     Markup) q) z
                                                                                                                                                                                           Peek_ReportImage_EUI q
                                                                                                                                                                                                                z -> Peek_ReportImages_EUI ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                               (Either URI
                                                                                                                                                                                                                                                                       ImageFile) ->
                                                                                                                                                                                                                                                          Path (Order ReportImageID
                                                                                                                                                                                                                                                                      ReportImage)
                                                                                                                                                                                                                                                               (Either URI
                                                                                                                                                                                                                                                                       ImageFile)) q) z
                                                                                                                                                                                           Peek_ReportImage_MEUI q
                                                                                                                                                                                                                 z -> Peek_ReportImages_MEUI ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                                                ImageFile)) ->
                                                                                                                                                                                                                                                            Path (Order ReportImageID
                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                                                ImageFile))) q) z
                                                                                                                                                                                           Peek_ReportImage_MaybeImageFile q
                                                                                                                                                                                                                           z -> Peek_ReportImages_MaybeImageFile ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                                     (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                Path (Order ReportImageID
                                                                                                                                                                                                                                                                                            ReportImage)
                                                                                                                                                                                                                                                                                     (Maybe ImageFile)) q) z
                                                                                                                                                                                           Peek_ReportImage_ReportImage q
                                                                                                                                                                                                                        z -> Peek_ReportImages_ReportImage ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                               ReportImage ->
                                                                                                                                                                                                                                                                          Path (Order ReportImageID
                                                                                                                                                                                                                                                                                      ReportImage)
                                                                                                                                                                                                                                                                               ReportImage) q) z
                                                                                                                                                                                           Peek_ReportImage_ReportImageView q
                                                                                                                                                                                                                            z -> Peek_ReportImages_ReportImageView ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                                       ReportImageView ->
                                                                                                                                                                                                                                                                                  Path (Order ReportImageID
                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                       ReportImageView) q) z
                                                                                                                                                                                           Peek_ReportImage_SaneSizeImageSize q
                                                                                                                                                                                                                              z -> Peek_ReportImages_SaneSizeImageSize ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                                           (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                      Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                                           (SaneSize ImageSize)) q) z
                                                                                                                                                                                           Peek_ReportImage_URI q
                                                                                                                                                                                                                z -> Peek_ReportImages_URI ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                               URI ->
                                                                                                                                                                                                                                                          Path (Order ReportImageID
                                                                                                                                                                                                                                                                      ReportImage)
                                                                                                                                                                                                                                                               URI) q) z
                                                                                                                                                                                           Peek_ReportImage_Text q
                                                                                                                                                                                                                 z -> Peek_ReportImages_Text ((Path_At k :: Path ReportImage
                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                            Path (Order ReportImageID
                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                 Text) q) z) wf)) (toListOf (toLens p) x :: [ReportImage])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ReportImage) :: [Path_ReportImages ReportImage]) :: Forest (Peek (Order ReportImageID ReportImage))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_At k _) -> map (\w' -> Node (Peek_ReportImages_ReportImage p (Just w')) []) (toListOf (toLens p) x :: [ReportImage])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ReportImage) :: [Path_ReportImages ReportImage]) :: Forest (Peek (Order ReportImageID ReportImage))]
instance IsPathStart ((Markup, Markup))
    where data Peek ((Markup, Markup))
              = Peek_MarkupPair_JSONText (Path ((Markup, Markup)) JSONText) (Maybe JSONText)
              | Peek_MarkupPair_Markup (Path ((Markup, Markup)) Markup) (Maybe Markup)
              | Peek_MarkupPair_MarkupPair (Path ((Markup, Markup)) ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_MarkupPair_Text (Path ((Markup, Markup)) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_First _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                    in Node (Peek_MarkupPair_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                     Peek_Markup_JSONText q
                                                                                                                                                                                                          z -> Peek_MarkupPair_JSONText ((Path_First :: Path Markup
                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                        Path ((Markup,
                                                                                                                                                                                                                                                               Markup))
                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                     Peek_Markup_Markup q
                                                                                                                                                                                                        z -> Peek_MarkupPair_Markup ((Path_First :: Path Markup
                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                    Path ((Markup,
                                                                                                                                                                                                                                                           Markup))
                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                     Peek_Markup_Text q
                                                                                                                                                                                                      z -> Peek_MarkupPair_Text ((Path_First :: Path Markup
                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                Path ((Markup,
                                                                                                                                                                                                                                                       Markup))
                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MarkupPair Markup]) :: Forest (Peek ((Markup, Markup))),
                           concatMap (\path -> case path of
                                                   p@(Path_Second _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                     in Node (Peek_MarkupPair_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                      Peek_Markup_JSONText q
                                                                                                                                                                                                           z -> Peek_MarkupPair_JSONText ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                          Path ((Markup,
                                                                                                                                                                                                                                                                 Markup))
                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                      Peek_Markup_Markup q
                                                                                                                                                                                                         z -> Peek_MarkupPair_Markup ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                      Path ((Markup,
                                                                                                                                                                                                                                                             Markup))
                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                      Peek_Markup_Text q
                                                                                                                                                                                                       z -> Peek_MarkupPair_Text ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                  Path ((Markup,
                                                                                                                                                                                                                                                         Markup))
                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MarkupPair Markup]) :: Forest (Peek ((Markup, Markup)))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_First _) -> map (\w' -> Node (Peek_MarkupPair_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MarkupPair Markup]) :: Forest (Peek ((Markup, Markup))),
                          concatMap (\path -> case path of
                                                  p@(Path_Second _) -> map (\w' -> Node (Peek_MarkupPair_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_MarkupPair Markup]) :: Forest (Peek ((Markup, Markup)))]
instance IsPathStart ((CIString, Markup))
    where data Peek ((CIString, Markup))
              = Peek_AbbrevPair_JSONText (Path ((CIString, Markup)) JSONText) (Maybe JSONText)
              | Peek_AbbrevPair_Markup (Path ((CIString, Markup)) Markup) (Maybe Markup)
              | Peek_AbbrevPair_AbbrevPair (Path ((CIString, Markup)) ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_AbbrevPair_CIString (Path ((CIString, Markup)) CIString) (Maybe CIString)
              | Peek_AbbrevPair_Text (Path ((CIString, Markup)) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_First _) -> map (\w' -> let wf = peek w' :: Forest (Peek CIString)
                                                                                    in Node (Peek_AbbrevPair_CIString p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                       Peek_CIString_JSONText q
                                                                                                                                                                                                              z -> Peek_AbbrevPair_JSONText ((Path_First :: Path CIString
                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                            Path ((CIString,
                                                                                                                                                                                                                                                                   Markup))
                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                       Peek_CIString_CIString q
                                                                                                                                                                                                              z -> Peek_AbbrevPair_CIString ((Path_First :: Path CIString
                                                                                                                                                                                                                                                                 CIString ->
                                                                                                                                                                                                                                                            Path ((CIString,
                                                                                                                                                                                                                                                                   Markup))
                                                                                                                                                                                                                                                                 CIString) q) z
                                                                                                                                                                                       Peek_CIString_Text q
                                                                                                                                                                                                          z -> Peek_AbbrevPair_Text ((Path_First :: Path CIString
                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                    Path ((CIString,
                                                                                                                                                                                                                                                           Markup))
                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [CIString])
                                                   _ -> []) (pathsOf x (undefined :: Proxy CIString) :: [Path_AbbrevPair CIString]) :: Forest (Peek ((CIString, Markup))),
                           concatMap (\path -> case path of
                                                   p@(Path_Second _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                     in Node (Peek_AbbrevPair_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                      Peek_Markup_JSONText q
                                                                                                                                                                                                           z -> Peek_AbbrevPair_JSONText ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                          Path ((CIString,
                                                                                                                                                                                                                                                                 Markup))
                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                      Peek_Markup_Markup q
                                                                                                                                                                                                         z -> Peek_AbbrevPair_Markup ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                      Path ((CIString,
                                                                                                                                                                                                                                                             Markup))
                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                      Peek_Markup_Text q
                                                                                                                                                                                                       z -> Peek_AbbrevPair_Text ((Path_Second :: Path Markup
                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                  Path ((CIString,
                                                                                                                                                                                                                                                         Markup))
                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_AbbrevPair Markup]) :: Forest (Peek ((CIString, Markup)))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_First _) -> map (\w' -> Node (Peek_AbbrevPair_CIString p (Just w')) []) (toListOf (toLens p) x :: [CIString])
                                                  _ -> []) (pathsOf x (undefined :: Proxy CIString) :: [Path_AbbrevPair CIString]) :: Forest (Peek ((CIString, Markup))),
                          concatMap (\path -> case path of
                                                  p@(Path_Second _) -> map (\w' -> Node (Peek_AbbrevPair_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_AbbrevPair Markup]) :: Forest (Peek ((CIString, Markup)))]
instance IsPathStart (Maybe (Either URI ImageFile))
    where data Peek (Maybe (Either URI ImageFile))
              = Peek_MEUI_ImageFile (Path (Maybe (Either URI ImageFile)) ImageFile) (Maybe ImageFile)
              | Peek_MEUI_EUI (Path (Maybe (Either URI ImageFile)) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_MEUI_MEUI (Path (Maybe (Either URI ImageFile)) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_MEUI_URI (Path (Maybe (Either URI ImageFile)) URI) (Maybe URI)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Just _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Either URI ImageFile))
                                                                                   in Node (Peek_MEUI_EUI p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                           Peek_EUI_ImageFile q z -> Peek_MEUI_ImageFile ((Path_Just :: Path (Either URI
                                                                                                                                                                                                                                                     ImageFile)
                                                                                                                                                                                                                                             ImageFile ->
                                                                                                                                                                                                                                        Path (Maybe (Either URI
                                                                                                                                                                                                                                                            ImageFile))
                                                                                                                                                                                                                                             ImageFile) q) z
                                                                                                                                                                           Peek_EUI_EUI q z -> Peek_MEUI_EUI ((Path_Just :: Path (Either URI ImageFile)
                                                                                                                                                                                                                                 (Either URI ImageFile) ->
                                                                                                                                                                                                                            Path (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 (Either URI
                                                                                                                                                                                                                                         ImageFile)) q) z
                                                                                                                                                                           Peek_EUI_URI q z -> Peek_MEUI_URI ((Path_Just :: Path (Either URI ImageFile)
                                                                                                                                                                                                                                 URI ->
                                                                                                                                                                                                                            Path (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 URI) q) z) wf)) (toListOf (toLens p) x :: [Either URI
                                                                                                                                                                                                                                                                                   ImageFile])
                                                   _ -> []) (pathsOf x (undefined :: Proxy (Either URI ImageFile)) :: [Path_MEUI (Either URI ImageFile)]) :: Forest (Peek (Maybe (Either URI ImageFile)))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Just _) -> map (\w' -> Node (Peek_MEUI_EUI p (Just w')) []) (toListOf (toLens p) x :: [Either URI ImageFile])
                                                  _ -> []) (pathsOf x (undefined :: Proxy (Either URI ImageFile)) :: [Path_MEUI (Either URI ImageFile)]) :: Forest (Peek (Maybe (Either URI ImageFile)))]
instance IsPathStart (Maybe ImageFile)
    where data Peek (Maybe ImageFile)
              = Peek_MaybeImageFile_String (Path (Maybe ImageFile) ([Char])) (Maybe ([Char]))
              | Peek_MaybeImageFile_JSONText (Path (Maybe ImageFile) JSONText) (Maybe JSONText)
              | Peek_MaybeImageFile_MaybeImageFile (Path (Maybe ImageFile) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_MaybeImageFile_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                                  in Node (Peek_MaybeImageFile_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                       Peek_String_String q
                                                                                                                                                                                                                          z -> Peek_MaybeImageFile_String ((Path_MaybeImageFile_View :: Path ([Char])
                                                                                                                                                                                                                                                                                             ([Char]) ->
                                                                                                                                                                                                                                                                                        Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                             ([Char])) q) z
                                                                                                                                                                                                       Peek_String_JSONText q
                                                                                                                                                                                                                            z -> Peek_MaybeImageFile_JSONText ((Path_MaybeImageFile_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                            Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                 JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_MaybeImageFile ([Char])]) :: Forest (Peek (Maybe ImageFile))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_MaybeImageFile_View _) -> map (\w' -> Node (Peek_MaybeImageFile_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_MaybeImageFile ([Char])]) :: Forest (Peek (Maybe ImageFile))]
instance IsPathStart (Maybe ReportIntendedUse)
    where data Peek (Maybe ReportIntendedUse)
              = Peek_MaybeReportIntendedUse_String (Path (Maybe ReportIntendedUse) ([Char])) (Maybe ([Char]))
              | Peek_MaybeReportIntendedUse_JSONText (Path (Maybe ReportIntendedUse) JSONText) (Maybe JSONText)
              | Peek_MaybeReportIntendedUse_MaybeReportIntendedUse (Path (Maybe ReportIntendedUse) (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_MaybeReportIntendedUse_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                                          in Node (Peek_MaybeReportIntendedUse_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                       Peek_String_String q
                                                                                                                                                                                                                                          z -> Peek_MaybeReportIntendedUse_String ((Path_MaybeReportIntendedUse_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                                             ([Char]) ->
                                                                                                                                                                                                                                                                                                                        Path (Maybe ReportIntendedUse)
                                                                                                                                                                                                                                                                                                                             ([Char])) q) z
                                                                                                                                                                                                                       Peek_String_JSONText q
                                                                                                                                                                                                                                            z -> Peek_MaybeReportIntendedUse_JSONText ((Path_MaybeReportIntendedUse_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                            Path (Maybe ReportIntendedUse)
                                                                                                                                                                                                                                                                                                                                 JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_MaybeReportIntendedUse ([Char])]) :: Forest (Peek (Maybe ReportIntendedUse))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_MaybeReportIntendedUse_View _) -> map (\w' -> Node (Peek_MaybeReportIntendedUse_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_MaybeReportIntendedUse ([Char])]) :: Forest (Peek (Maybe ReportIntendedUse))]
instance IsPathStart (ReadOnly ([Char]))
    where data Peek (ReadOnly ([Char]))
              = Peek_ReadOnlyFilePath_String (Path (ReadOnly ([Char])) ([Char])) (Maybe ([Char]))
              | Peek_ReadOnlyFilePath_JSONText (Path (ReadOnly ([Char])) JSONText) (Maybe JSONText)
              | Peek_ReadOnlyFilePath_ReadOnlyFilePath (Path (ReadOnly ([Char])) (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_ReadOnlyFilePath_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                                    in Node (Peek_ReadOnlyFilePath_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                           Peek_String_String q
                                                                                                                                                                                                                              z -> Peek_ReadOnlyFilePath_String ((Path_ReadOnlyFilePath_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                                                Path (ReadOnly ([Char]))
                                                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                                           Peek_String_JSONText q
                                                                                                                                                                                                                                z -> Peek_ReadOnlyFilePath_JSONText ((Path_ReadOnlyFilePath_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                    Path (ReadOnly ([Char]))
                                                                                                                                                                                                                                                                                                         JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReadOnlyFilePath ([Char])]) :: Forest (Peek (ReadOnly ([Char])))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_ReadOnlyFilePath_View _) -> map (\w' -> Node (Peek_ReadOnlyFilePath_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReadOnlyFilePath ([Char])]) :: Forest (Peek (ReadOnly ([Char])))]
instance IsPathStart (SaneSize ImageSize)
    where data Peek (SaneSize ImageSize)
              = Peek_SaneSizeImageSize_String (Path (SaneSize ImageSize) ([Char])) (Maybe ([Char]))
              | Peek_SaneSizeImageSize_Double (Path (SaneSize ImageSize) Double) (Maybe Double)
              | Peek_SaneSizeImageSize_Dimension (Path (SaneSize ImageSize) Dimension) (Maybe Dimension)
              | Peek_SaneSizeImageSize_ImageSize (Path (SaneSize ImageSize) ImageSize) (Maybe ImageSize)
              | Peek_SaneSizeImageSize_Units (Path (SaneSize ImageSize) Units) (Maybe Units)
              | Peek_SaneSizeImageSize_JSONText (Path (SaneSize ImageSize) JSONText) (Maybe JSONText)
              | Peek_SaneSizeImageSize_SaneSizeImageSize (Path (SaneSize ImageSize) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_SaneSizeImageSize_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ImageSize)
                                                                                                     in Node (Peek_SaneSizeImageSize_ImageSize p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                Peek_ImageSize_String q
                                                                                                                                                                                                                                      z -> Peek_SaneSizeImageSize_String ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                               ([Char]) ->
                                                                                                                                                                                                                                                                                                          Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                               ([Char])) q) z
                                                                                                                                                                                                                Peek_ImageSize_Double q
                                                                                                                                                                                                                                      z -> Peek_SaneSizeImageSize_Double ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                               Double ->
                                                                                                                                                                                                                                                                                                          Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                               Double) q) z
                                                                                                                                                                                                                Peek_ImageSize_Dimension q
                                                                                                                                                                                                                                         z -> Peek_SaneSizeImageSize_Dimension ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                                     Dimension ->
                                                                                                                                                                                                                                                                                                                Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                     Dimension) q) z
                                                                                                                                                                                                                Peek_ImageSize_ImageSize q
                                                                                                                                                                                                                                         z -> Peek_SaneSizeImageSize_ImageSize ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                                     ImageSize ->
                                                                                                                                                                                                                                                                                                                Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                     ImageSize) q) z
                                                                                                                                                                                                                Peek_ImageSize_Units q
                                                                                                                                                                                                                                     z -> Peek_SaneSizeImageSize_Units ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                             Units ->
                                                                                                                                                                                                                                                                                                        Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                             Units) q) z
                                                                                                                                                                                                                Peek_ImageSize_JSONText q
                                                                                                                                                                                                                                        z -> Peek_SaneSizeImageSize_JSONText ((Path_SaneSizeImageSize_View :: Path ImageSize
                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                              Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                   JSONText) q) z) wf)) (toListOf (toLens p) x :: [ImageSize])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ImageSize) :: [Path_SaneSizeImageSize ImageSize]) :: Forest (Peek (SaneSize ImageSize))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_SaneSizeImageSize_View _) -> map (\w' -> Node (Peek_SaneSizeImageSize_ImageSize p (Just w')) []) (toListOf (toLens p) x :: [ImageSize])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ImageSize) :: [Path_SaneSizeImageSize ImageSize]) :: Forest (Peek (SaneSize ImageSize))]
instance IsPathStart ([Char])
    where data Peek ([Char])
              = Peek_String_String (Path ([Char]) ([Char])) (Maybe ([Char])) | Peek_String_JSONText (Path ([Char]) JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_String_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek JSONText)
                                                                                          in Node (Peek_String_JSONText p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_JSONText_JSONText q
                                                                                                                                                                                                                z -> Peek_String_JSONText ((Path_String_View :: Path JSONText
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path ([Char])
                                                                                                                                                                                                                                                                     JSONText) q) z) wf)) (toListOf (toLens p) x :: [JSONText])
                                                   _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_String JSONText]) :: Forest (Peek ([Char]))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_String_View _) -> map (\w' -> Node (Peek_String_JSONText p (Just w')) []) (toListOf (toLens p) x :: [JSONText])
                                                  _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_String JSONText]) :: Forest (Peek ([Char]))]
instance IsPathStart ([UserId])
    where data Peek ([UserId])
              = Peek_UserIds_JSONText (Path ([UserId]) JSONText) (Maybe JSONText)
              | Peek_UserIds_UserIds (Path ([UserId]) ([UserId])) (Maybe ([UserId]))
              | Peek_UserIds_Text (Path ([UserId]) Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_UserIds_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                           in Node (Peek_UserIds_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                       Peek_Text_JSONText q
                                                                                                                                                                                                          z -> Peek_UserIds_JSONText ((Path_UserIds_View :: Path Text
                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                            Path ([UserId])
                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                       Peek_Text_Text q
                                                                                                                                                                                                      z -> Peek_UserIds_Text ((Path_UserIds_View :: Path Text
                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                    Path ([UserId])
                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_UserIds Text]) :: Forest (Peek ([UserId]))]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_UserIds_View _) -> map (\w' -> Node (Peek_UserIds_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_UserIds Text]) :: Forest (Peek ([UserId]))]
instance IsPathStart Int64
    where data Peek Int64 = Peek_Int64_Int64 (Path Int64 Int64) (Maybe Int64) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart Bool
    where data Peek Bool
              = Peek_Bool_String (Path Bool ([Char])) (Maybe ([Char])) | Peek_Bool_Bool (Path Bool Bool) (Maybe Bool) | Peek_Bool_JSONText (Path Bool JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Bool_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                        in Node (Peek_Bool_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                   Peek_String_String q
                                                                                                                                                                                                      z -> Peek_Bool_String ((Path_Bool_View :: Path ([Char])
                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                Path Bool
                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                   Peek_String_JSONText q
                                                                                                                                                                                                        z -> Peek_Bool_JSONText ((Path_Bool_View :: Path ([Char])
                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                    Path Bool
                                                                                                                                                                                                                                                         JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_Bool ([Char])]) :: Forest (Peek Bool)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Bool_View _) -> map (\w' -> Node (Peek_Bool_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_Bool ([Char])]) :: Forest (Peek Bool)]
instance IsPathStart Double
    where data Peek Double
              = Peek_Double_String (Path Double ([Char])) (Maybe ([Char]))
              | Peek_Double_Double (Path Double Double) (Maybe Double)
              | Peek_Double_JSONText (Path Double JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Double_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                          in Node (Peek_Double_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                       Peek_String_String q
                                                                                                                                                                                                          z -> Peek_Double_String ((Path_Double_View :: Path ([Char])
                                                                                                                                                                                                                                                             ([Char]) ->
                                                                                                                                                                                                                                                        Path Double
                                                                                                                                                                                                                                                             ([Char])) q) z
                                                                                                                                                                                       Peek_String_JSONText q
                                                                                                                                                                                                            z -> Peek_Double_JSONText ((Path_Double_View :: Path ([Char])
                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                            Path Double
                                                                                                                                                                                                                                                                 JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_Double ([Char])]) :: Forest (Peek Double)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Double_View _) -> map (\w' -> Node (Peek_Double_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_Double ([Char])]) :: Forest (Peek Double)]
instance IsPathStart Int
    where data Peek Int = Peek_Int_Int (Path Int Int) (Maybe Int) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart Dimension
    where data Peek Dimension
              = Peek_Dimension_Dimension (Path Dimension Dimension) (Maybe Dimension) | Peek_Dimension_JSONText (Path Dimension JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Dimension_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek JSONText)
                                                                                             in Node (Peek_Dimension_JSONText p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                               Peek_JSONText_JSONText q
                                                                                                                                                                                                                      z -> Peek_Dimension_JSONText ((Path_Dimension_View :: Path JSONText
                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                            Path Dimension
                                                                                                                                                                                                                                                                                 JSONText) q) z) wf)) (toListOf (toLens p) x :: [JSONText])
                                                   _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Dimension JSONText]) :: Forest (Peek Dimension)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Dimension_View _) -> map (\w' -> Node (Peek_Dimension_JSONText p (Just w')) []) (toListOf (toLens p) x :: [JSONText])
                                                  _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Dimension JSONText]) :: Forest (Peek Dimension)]
instance IsPathStart ImageCrop
    where data Peek ImageCrop = Peek_ImageCrop_ImageCrop (Path ImageCrop ImageCrop) (Maybe ImageCrop) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart ImageSize
    where data Peek ImageSize
              = Peek_ImageSize_String (Path ImageSize ([Char])) (Maybe ([Char]))
              | Peek_ImageSize_Double (Path ImageSize Double) (Maybe Double)
              | Peek_ImageSize_Dimension (Path ImageSize Dimension) (Maybe Dimension)
              | Peek_ImageSize_ImageSize (Path ImageSize ImageSize) (Maybe ImageSize)
              | Peek_ImageSize_Units (Path ImageSize Units) (Maybe Units)
              | Peek_ImageSize_JSONText (Path ImageSize JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek (x@(ImageSize {})) = concat [concatMap (\path -> case path of
                                                                    p@(Path_ImageSize_dim _) -> map (\w' -> let wf = peek w' :: Forest (Peek Dimension)
                                                                                                             in Node (Peek_ImageSize_Dimension p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                Peek_Dimension_Dimension q
                                                                                                                                                                                                                                         z -> Peek_ImageSize_Dimension ((Path_ImageSize_dim :: Path Dimension
                                                                                                                                                                                                                                                                                                    Dimension ->
                                                                                                                                                                                                                                                                                               Path ImageSize
                                                                                                                                                                                                                                                                                                    Dimension) q) z
                                                                                                                                                                                                                Peek_Dimension_JSONText q
                                                                                                                                                                                                                                        z -> Peek_ImageSize_JSONText ((Path_ImageSize_dim :: Path Dimension
                                                                                                                                                                                                                                                                                                  JSONText ->
                                                                                                                                                                                                                                                                                             Path ImageSize
                                                                                                                                                                                                                                                                                                  JSONText) q) z) wf)) (toListOf (toLens p) x :: [Dimension])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Dimension) :: [Path_ImageSize Dimension]) :: Forest (Peek ImageSize),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ImageSize_size _) -> map (\w' -> let wf = peek w' :: Forest (Peek Double)
                                                                                                              in Node (Peek_ImageSize_Double p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                              Peek_Double_String q
                                                                                                                                                                                                                                 z -> Peek_ImageSize_String ((Path_ImageSize_size :: Path Double
                                                                                                                                                                                                                                                                                          ([Char]) ->
                                                                                                                                                                                                                                                                                     Path ImageSize
                                                                                                                                                                                                                                                                                          ([Char])) q) z
                                                                                                                                                                                                              Peek_Double_Double q
                                                                                                                                                                                                                                 z -> Peek_ImageSize_Double ((Path_ImageSize_size :: Path Double
                                                                                                                                                                                                                                                                                          Double ->
                                                                                                                                                                                                                                                                                     Path ImageSize
                                                                                                                                                                                                                                                                                          Double) q) z
                                                                                                                                                                                                              Peek_Double_JSONText q
                                                                                                                                                                                                                                   z -> Peek_ImageSize_JSONText ((Path_ImageSize_size :: Path Double
                                                                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                                                                         Path ImageSize
                                                                                                                                                                                                                                                                                              JSONText) q) z) wf)) (toListOf (toLens p) x :: [Double])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Double) :: [Path_ImageSize Double]) :: Forest (Peek ImageSize),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ImageSize_units _) -> map (\w' -> let wf = peek w' :: Forest (Peek Units)
                                                                                                               in Node (Peek_ImageSize_Units p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                              Peek_Units_Units q
                                                                                                                                                                                                                               z -> Peek_ImageSize_Units ((Path_ImageSize_units :: Path Units
                                                                                                                                                                                                                                                                                        Units ->
                                                                                                                                                                                                                                                                                   Path ImageSize
                                                                                                                                                                                                                                                                                        Units) q) z
                                                                                                                                                                                                              Peek_Units_JSONText q
                                                                                                                                                                                                                                  z -> Peek_ImageSize_JSONText ((Path_ImageSize_units :: Path Units
                                                                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                                                                         Path ImageSize
                                                                                                                                                                                                                                                                                              JSONText) q) z) wf)) (toListOf (toLens p) x :: [Units])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Units) :: [Path_ImageSize Units]) :: Forest (Peek ImageSize)]
          hop (x@(ImageSize {})) = concat [concatMap (\path -> case path of
                                                                   p@(Path_ImageSize_dim _) -> map (\w' -> Node (Peek_ImageSize_Dimension p (Just w')) []) (toListOf (toLens p) x :: [Dimension])
                                                                   _ -> []) (pathsOf x (undefined :: Proxy Dimension) :: [Path_ImageSize Dimension]) :: Forest (Peek ImageSize),
                                           concatMap (\path -> case path of
                                                                   p@(Path_ImageSize_size _) -> map (\w' -> Node (Peek_ImageSize_Double p (Just w')) []) (toListOf (toLens p) x :: [Double])
                                                                   _ -> []) (pathsOf x (undefined :: Proxy Double) :: [Path_ImageSize Double]) :: Forest (Peek ImageSize),
                                           concatMap (\path -> case path of
                                                                   p@(Path_ImageSize_units _) -> map (\w' -> Node (Peek_ImageSize_Units p (Just w')) []) (toListOf (toLens p) x :: [Units])
                                                                   _ -> []) (pathsOf x (undefined :: Proxy Units) :: [Path_ImageSize Units]) :: Forest (Peek ImageSize)]
instance IsPathStart Units
    where data Peek Units = Peek_Units_Units (Path Units Units) (Maybe Units) | Peek_Units_JSONText (Path Units JSONText) (Maybe JSONText) deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Units_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek JSONText)
                                                                                         in Node (Peek_Units_JSONText p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                       Peek_JSONText_JSONText q
                                                                                                                                                                                                              z -> Peek_Units_JSONText ((Path_Units_View :: Path JSONText
                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                            Path Units
                                                                                                                                                                                                                                                                 JSONText) q) z) wf)) (toListOf (toLens p) x :: [JSONText])
                                                   _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Units JSONText]) :: Forest (Peek Units)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Units_View _) -> map (\w' -> Node (Peek_Units_JSONText p (Just w')) []) (toListOf (toLens p) x :: [JSONText])
                                                  _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Units JSONText]) :: Forest (Peek Units)]
instance IsPathStart ImageFile
    where data Peek ImageFile = Peek_ImageFile_ImageFile (Path ImageFile ImageFile) (Maybe ImageFile) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart Integer
    where data Peek Integer = Peek_Integer_Integer (Path Integer Integer) (Maybe Integer) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart JSONText
    where data Peek JSONText = Peek_JSONText_JSONText (Path JSONText JSONText) (Maybe JSONText) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart Markup
    where data Peek Markup
              = Peek_Markup_JSONText (Path Markup JSONText) (Maybe JSONText)
              | Peek_Markup_Markup (Path Markup Markup) (Maybe Markup)
              | Peek_Markup_Text (Path Markup Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(Markdown {})) = concat [concatMap (\path -> case path of
                                                                   p@(Path_Markup_markdownText _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                                                  in Node (Peek_Markup_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                             Peek_Text_JSONText q
                                                                                                                                                                                                                                z -> Peek_Markup_JSONText ((Path_Markup_markdownText :: Path Text
                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                        Path Markup
                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                             Peek_Text_Text q
                                                                                                                                                                                                                            z -> Peek_Markup_Text ((Path_Markup_markdownText :: Path Text
                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                Path Markup
                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                                   _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Markup Text]) :: Forest (Peek Markup)]
          peek (x@(Html {})) = concat [concatMap (\path -> case path of
                                                               p@(Path_Markup_htmlText _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                                          in Node (Peek_Markup_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                     Peek_Text_JSONText q
                                                                                                                                                                                                                        z -> Peek_Markup_JSONText ((Path_Markup_htmlText :: Path Text
                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                            Path Markup
                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                     Peek_Text_Text q
                                                                                                                                                                                                                    z -> Peek_Markup_Text ((Path_Markup_htmlText :: Path Text
                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                    Path Markup
                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                               _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Markup Text]) :: Forest (Peek Markup)]
          hop (x@(Markdown {})) = concat [concatMap (\path -> case path of
                                                                  p@(Path_Markup_markdownText _) -> map (\w' -> Node (Peek_Markup_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                                  _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Markup Text]) :: Forest (Peek Markup)]
          hop (x@(Html {})) = concat [concatMap (\path -> case path of
                                                              p@(Path_Markup_htmlText _) -> map (\w' -> Node (Peek_Markup_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                              _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Markup Text]) :: Forest (Peek Markup)]
instance IsPathStart Permissions
    where data Peek Permissions
              = Peek_Permissions_JSONText (Path Permissions JSONText) (Maybe JSONText)
              | Peek_Permissions_Permissions (Path Permissions Permissions) (Maybe Permissions)
              | Peek_Permissions_UserIds (Path Permissions ([UserId])) (Maybe ([UserId]))
              | Peek_Permissions_Text (Path Permissions Text) (Maybe Text)
              | Peek_Permissions_UserId (Path Permissions UserId) (Maybe UserId)
              deriving (Eq, Show)
          peek (x@(Permissions {})) = concat [concatMap (\path -> case path of
                                                                      p@(Path_Permissions_owner _) -> map (\w' -> let wf = peek w' :: Forest (Peek UserId)
                                                                                                                   in Node (Peek_Permissions_UserId p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                     Peek_UserId_UserId q
                                                                                                                                                                                                                                        z -> Peek_Permissions_UserId ((Path_Permissions_owner :: Path UserId
                                                                                                                                                                                                                                                                                                      UserId ->
                                                                                                                                                                                                                                                                                                 Path Permissions
                                                                                                                                                                                                                                                                                                      UserId) q) z) wf)) (toListOf (toLens p) x :: [UserId])
                                                                      _ -> []) (pathsOf x (undefined :: Proxy UserId) :: [Path_Permissions UserId]) :: Forest (Peek Permissions),
                                              concatMap (\path -> case path of
                                                                      p@(Path_Permissions_writers _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([UserId]))
                                                                                                                     in Node (Peek_Permissions_UserIds p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                        Peek_UserIds_JSONText q
                                                                                                                                                                                                                                              z -> Peek_Permissions_JSONText ((Path_Permissions_writers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                                                                                           Path Permissions
                                                                                                                                                                                                                                                                                                                JSONText) q) z
                                                                                                                                                                                                                        Peek_UserIds_UserIds q
                                                                                                                                                                                                                                             z -> Peek_Permissions_UserIds ((Path_Permissions_writers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                              ([UserId]) ->
                                                                                                                                                                                                                                                                                                         Path Permissions
                                                                                                                                                                                                                                                                                                              ([UserId])) q) z
                                                                                                                                                                                                                        Peek_UserIds_Text q
                                                                                                                                                                                                                                          z -> Peek_Permissions_Text ((Path_Permissions_writers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                                                                                   Path Permissions
                                                                                                                                                                                                                                                                                                        Text) q) z) wf)) (toListOf (toLens p) x :: [[UserId]])
                                                                      _ -> []) (pathsOf x (undefined :: Proxy ([UserId])) :: [Path_Permissions ([UserId])]) :: Forest (Peek Permissions),
                                              concatMap (\path -> case path of
                                                                      p@(Path_Permissions_readers _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([UserId]))
                                                                                                                     in Node (Peek_Permissions_UserIds p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                        Peek_UserIds_JSONText q
                                                                                                                                                                                                                                              z -> Peek_Permissions_JSONText ((Path_Permissions_readers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                                                                                           Path Permissions
                                                                                                                                                                                                                                                                                                                JSONText) q) z
                                                                                                                                                                                                                        Peek_UserIds_UserIds q
                                                                                                                                                                                                                                             z -> Peek_Permissions_UserIds ((Path_Permissions_readers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                              ([UserId]) ->
                                                                                                                                                                                                                                                                                                         Path Permissions
                                                                                                                                                                                                                                                                                                              ([UserId])) q) z
                                                                                                                                                                                                                        Peek_UserIds_Text q
                                                                                                                                                                                                                                          z -> Peek_Permissions_Text ((Path_Permissions_readers :: Path ([UserId])
                                                                                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                                                                                   Path Permissions
                                                                                                                                                                                                                                                                                                        Text) q) z) wf)) (toListOf (toLens p) x :: [[UserId]])
                                                                      _ -> []) (pathsOf x (undefined :: Proxy ([UserId])) :: [Path_Permissions ([UserId])]) :: Forest (Peek Permissions)]
          hop (x@(Permissions {})) = concat [concatMap (\path -> case path of
                                                                     p@(Path_Permissions_owner _) -> map (\w' -> Node (Peek_Permissions_UserId p (Just w')) []) (toListOf (toLens p) x :: [UserId])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy UserId) :: [Path_Permissions UserId]) :: Forest (Peek Permissions),
                                             concatMap (\path -> case path of
                                                                     p@(Path_Permissions_writers _) -> map (\w' -> Node (Peek_Permissions_UserIds p (Just w')) []) (toListOf (toLens p) x :: [[UserId]])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ([UserId])) :: [Path_Permissions ([UserId])]) :: Forest (Peek Permissions),
                                             concatMap (\path -> case path of
                                                                     p@(Path_Permissions_readers _) -> map (\w' -> Node (Peek_Permissions_UserIds p (Just w')) []) (toListOf (toLens p) x :: [[UserId]])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ([UserId])) :: [Path_Permissions ([UserId])]) :: Forest (Peek Permissions)]
instance IsPathStart Author
    where data Peek Author
              = Peek_Author_JSONText (Path Author JSONText) (Maybe JSONText)
              | Peek_Author_Markup (Path Author Markup) (Maybe Markup)
              | Peek_Author_Author (Path Author Author) (Maybe Author)
              | Peek_Author_Text (Path Author Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(Author {})) = concat [concatMap (\path -> case path of
                                                                 p@(Path_Author_authorName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                              in Node (Peek_Author_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                           Peek_Markup_JSONText q
                                                                                                                                                                                                                                z -> Peek_Author_JSONText ((Path_Author_authorName :: Path Markup
                                                                                                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                                                                                                      Path Author
                                                                                                                                                                                                                                                                                           JSONText) q) z
                                                                                                                                                                                                           Peek_Markup_Markup q
                                                                                                                                                                                                                              z -> Peek_Author_Markup ((Path_Author_authorName :: Path Markup
                                                                                                                                                                                                                                                                                       Markup ->
                                                                                                                                                                                                                                                                                  Path Author
                                                                                                                                                                                                                                                                                       Markup) q) z
                                                                                                                                                                                                           Peek_Markup_Text q
                                                                                                                                                                                                                            z -> Peek_Author_Text ((Path_Author_authorName :: Path Markup
                                                                                                                                                                                                                                                                                   Text ->
                                                                                                                                                                                                                                                                              Path Author
                                                                                                                                                                                                                                                                                   Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                 _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Author Markup]) :: Forest (Peek Author),
                                         concatMap (\path -> case path of
                                                                 p@(Path_Author_authorCredentials _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                     in Node (Peek_Author_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                  Peek_Markup_JSONText q
                                                                                                                                                                                                                                       z -> Peek_Author_JSONText ((Path_Author_authorCredentials :: Path Markup
                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                    Path Author
                                                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                                  Peek_Markup_Markup q
                                                                                                                                                                                                                                     z -> Peek_Author_Markup ((Path_Author_authorCredentials :: Path Markup
                                                                                                                                                                                                                                                                                                     Markup ->
                                                                                                                                                                                                                                                                                                Path Author
                                                                                                                                                                                                                                                                                                     Markup) q) z
                                                                                                                                                                                                                  Peek_Markup_Text q
                                                                                                                                                                                                                                   z -> Peek_Author_Text ((Path_Author_authorCredentials :: Path Markup
                                                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                                                            Path Author
                                                                                                                                                                                                                                                                                                 Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                 _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Author Markup]) :: Forest (Peek Author)]
          hop (x@(Author {})) = concat [concatMap (\path -> case path of
                                                                p@(Path_Author_authorName _) -> map (\w' -> Node (Peek_Author_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Author Markup]) :: Forest (Peek Author),
                                        concatMap (\path -> case path of
                                                                p@(Path_Author_authorCredentials _) -> map (\w' -> Node (Peek_Author_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_Author Markup]) :: Forest (Peek Author)]
instance IsPathStart Branding
    where data Peek Branding
              = Peek_Branding_JSONText (Path Branding JSONText) (Maybe JSONText)
              | Peek_Branding_Branding (Path Branding Branding) (Maybe Branding)
              | Peek_Branding_Text (Path Branding Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Branding_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                            in Node (Peek_Branding_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_Text_JSONText q
                                                                                                                                                                                                            z -> Peek_Branding_JSONText ((Path_Branding_View :: Path Text
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path Branding
                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                         Peek_Text_Text q
                                                                                                                                                                                                        z -> Peek_Branding_Text ((Path_Branding_View :: Path Text
                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                        Path Branding
                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Branding Text]) :: Forest (Peek Branding)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Branding_View _) -> map (\w' -> Node (Peek_Branding_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Branding Text]) :: Forest (Peek Branding)]
instance IsPathStart Report
    where data Peek Report
              = Peek_Report_String (Path Report ([Char])) (Maybe ([Char]))
              | Peek_Report_Int64 (Path Report Int64) (Maybe Int64)
              | Peek_Report_Int (Path Report Int) (Maybe Int)
              | Peek_Report_Bool (Path Report Bool) (Maybe Bool)
              | Peek_Report_Double (Path Report Double) (Maybe Double)
              | Peek_Report_Dimension (Path Report Dimension) (Maybe Dimension)
              | Peek_Report_ImageCrop (Path Report ImageCrop) (Maybe ImageCrop)
              | Peek_Report_ImageSize (Path Report ImageSize) (Maybe ImageSize)
              | Peek_Report_Units (Path Report Units) (Maybe Units)
              | Peek_Report_ImageFile (Path Report ImageFile) (Maybe ImageFile)
              | Peek_Report_Integer (Path Report Integer) (Maybe Integer)
              | Peek_Report_JSONText (Path Report JSONText) (Maybe JSONText)
              | Peek_Report_Markup (Path Report Markup) (Maybe Markup)
              | Peek_Report_Permissions (Path Report Permissions) (Maybe Permissions)
              | Peek_Report_UserIds (Path Report ([UserId])) (Maybe ([UserId]))
              | Peek_Report_AbbrevPair (Path Report ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_Report_AbbrevPairs (Path Report (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_Report_Author (Path Report Author) (Maybe Author)
              | Peek_Report_Authors (Path Report (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_Report_Branding (Path Report Branding) (Maybe Branding)
              | Peek_Report_MarkupPair (Path Report ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_Report_MarkupPairs (Path Report (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_Report_Markups (Path Report (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_Report_MaybeReportIntendedUse (Path Report (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_Report_Report (Path Report Report) (Maybe Report)
              | Peek_Report_ReportElem (Path Report ReportElem) (Maybe ReportElem)
              | Peek_Report_ReportElems (Path Report (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_Report_ReportFlags (Path Report ReportFlags) (Maybe ReportFlags)
              | Peek_Report_ReportStandard (Path Report ReportStandard) (Maybe ReportStandard)
              | Peek_Report_ReportStatus (Path Report ReportStatus) (Maybe ReportStatus)
              | Peek_Report_ReportValueApproachInfo (Path Report ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_Report_ReportValueTypeInfo (Path Report ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_Report_EUI (Path Report (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_Report_MEUI (Path Report (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_Report_MaybeImageFile (Path Report (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_Report_ReportImage (Path Report ReportImage) (Maybe ReportImage)
              | Peek_Report_ReportImages (Path Report (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_Report_ReadOnlyFilePath (Path Report (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_Report_ReportImageView (Path Report ReportImageView) (Maybe ReportImageView)
              | Peek_Report_ReportView (Path Report ReportView) (Maybe ReportView)
              | Peek_Report_SaneSizeImageSize (Path Report (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_Report_Item (Path Report Item) (Maybe Item)
              | Peek_Report_MIM (Path Report (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_Report_CIString (Path Report CIString) (Maybe CIString)
              | Peek_Report_URI (Path Report URI) (Maybe URI)
              | Peek_Report_Text (Path Report Text) (Maybe Text)
              | Peek_Report_UserId (Path Report UserId) (Maybe UserId)
              | Peek_Report_UUID (Path Report UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Report_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportView)
                                                                                          in Node (Peek_Report_ReportView p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                           Peek_ReportView_String q
                                                                                                                                                                                                                  z -> Peek_Report_String ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                           Peek_ReportView_Int64 q
                                                                                                                                                                                                                 z -> Peek_Report_Int64 ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                   Int64 ->
                                                                                                                                                                                                                                                              Path Report
                                                                                                                                                                                                                                                                   Int64) q) z
                                                                                                                                                                                           Peek_ReportView_Int q
                                                                                                                                                                                                               z -> Peek_Report_Int ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                               Int ->
                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                               Int) q) z
                                                                                                                                                                                           Peek_ReportView_Bool q
                                                                                                                                                                                                                z -> Peek_Report_Bool ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                 Bool ->
                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                 Bool) q) z
                                                                                                                                                                                           Peek_ReportView_Double q
                                                                                                                                                                                                                  z -> Peek_Report_Double ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                     Double ->
                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                     Double) q) z
                                                                                                                                                                                           Peek_ReportView_Dimension q
                                                                                                                                                                                                                     z -> Peek_Report_Dimension ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                           Dimension ->
                                                                                                                                                                                                                                                                      Path Report
                                                                                                                                                                                                                                                                           Dimension) q) z
                                                                                                                                                                                           Peek_ReportView_ImageCrop q
                                                                                                                                                                                                                     z -> Peek_Report_ImageCrop ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                           ImageCrop ->
                                                                                                                                                                                                                                                                      Path Report
                                                                                                                                                                                                                                                                           ImageCrop) q) z
                                                                                                                                                                                           Peek_ReportView_ImageSize q
                                                                                                                                                                                                                     z -> Peek_Report_ImageSize ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                           ImageSize ->
                                                                                                                                                                                                                                                                      Path Report
                                                                                                                                                                                                                                                                           ImageSize) q) z
                                                                                                                                                                                           Peek_ReportView_Units q
                                                                                                                                                                                                                 z -> Peek_Report_Units ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                   Units ->
                                                                                                                                                                                                                                                              Path Report
                                                                                                                                                                                                                                                                   Units) q) z
                                                                                                                                                                                           Peek_ReportView_ImageFile q
                                                                                                                                                                                                                     z -> Peek_Report_ImageFile ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                           ImageFile ->
                                                                                                                                                                                                                                                                      Path Report
                                                                                                                                                                                                                                                                           ImageFile) q) z
                                                                                                                                                                                           Peek_ReportView_Integer q
                                                                                                                                                                                                                   z -> Peek_Report_Integer ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                       Integer ->
                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                       Integer) q) z
                                                                                                                                                                                           Peek_ReportView_JSONText q
                                                                                                                                                                                                                    z -> Peek_Report_JSONText ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                    Path Report
                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                           Peek_ReportView_Markup q
                                                                                                                                                                                                                  z -> Peek_Report_Markup ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                     Markup ->
                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                     Markup) q) z
                                                                                                                                                                                           Peek_ReportView_Permissions q
                                                                                                                                                                                                                       z -> Peek_Report_Permissions ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               Permissions ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               Permissions) q) z
                                                                                                                                                                                           Peek_ReportView_UserIds q
                                                                                                                                                                                                                   z -> Peek_Report_UserIds ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                       ([UserId]) ->
                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                       ([UserId])) q) z
                                                                                                                                                                                           Peek_ReportView_AbbrevPair q
                                                                                                                                                                                                                      z -> Peek_Report_AbbrevPair ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                             ((CIString,
                                                                                                                                                                                                                                                                               Markup)) ->
                                                                                                                                                                                                                                                                        Path Report
                                                                                                                                                                                                                                                                             ((CIString,
                                                                                                                                                                                                                                                                               Markup))) q) z
                                                                                                                                                                                           Peek_ReportView_AbbrevPairs q
                                                                                                                                                                                                                       z -> Peek_Report_AbbrevPairs ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               (Order AbbrevPairID
                                                                                                                                                                                                                                                                                      ((CIString,
                                                                                                                                                                                                                                                                                        Markup))) ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               (Order AbbrevPairID
                                                                                                                                                                                                                                                                                      ((CIString,
                                                                                                                                                                                                                                                                                        Markup)))) q) z
                                                                                                                                                                                           Peek_ReportView_Author q
                                                                                                                                                                                                                  z -> Peek_Report_Author ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                     Author ->
                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                     Author) q) z
                                                                                                                                                                                           Peek_ReportView_Authors q
                                                                                                                                                                                                                   z -> Peek_Report_Authors ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                       (Order AuthorID
                                                                                                                                                                                                                                                                              Author) ->
                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                       (Order AuthorID
                                                                                                                                                                                                                                                                              Author)) q) z
                                                                                                                                                                                           Peek_ReportView_Branding q
                                                                                                                                                                                                                    z -> Peek_Report_Branding ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                         Branding ->
                                                                                                                                                                                                                                                                    Path Report
                                                                                                                                                                                                                                                                         Branding) q) z
                                                                                                                                                                                           Peek_ReportView_MarkupPair q
                                                                                                                                                                                                                      z -> Peek_Report_MarkupPair ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                             ((Markup,
                                                                                                                                                                                                                                                                               Markup)) ->
                                                                                                                                                                                                                                                                        Path Report
                                                                                                                                                                                                                                                                             ((Markup,
                                                                                                                                                                                                                                                                               Markup))) q) z
                                                                                                                                                                                           Peek_ReportView_MarkupPairs q
                                                                                                                                                                                                                       z -> Peek_Report_MarkupPairs ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               (Order MarkupPairID
                                                                                                                                                                                                                                                                                      ((Markup,
                                                                                                                                                                                                                                                                                        Markup))) ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               (Order MarkupPairID
                                                                                                                                                                                                                                                                                      ((Markup,
                                                                                                                                                                                                                                                                                        Markup)))) q) z
                                                                                                                                                                                           Peek_ReportView_Markups q
                                                                                                                                                                                                                   z -> Peek_Report_Markups ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                       (Order MarkupID
                                                                                                                                                                                                                                                                              Markup) ->
                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                       (Order MarkupID
                                                                                                                                                                                                                                                                              Markup)) q) z
                                                                                                                                                                                           Peek_ReportView_MaybeReportIntendedUse q
                                                                                                                                                                                                                                  z -> Peek_Report_MaybeReportIntendedUse ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                                     (Maybe ReportIntendedUse) ->
                                                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                                                     (Maybe ReportIntendedUse)) q) z
                                                                                                                                                                                           Peek_ReportView_ReportElem q
                                                                                                                                                                                                                      z -> Peek_Report_ReportElem ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                             ReportElem ->
                                                                                                                                                                                                                                                                        Path Report
                                                                                                                                                                                                                                                                             ReportElem) q) z
                                                                                                                                                                                           Peek_ReportView_ReportElems q
                                                                                                                                                                                                                       z -> Peek_Report_ReportElems ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               (Order ReportElemID
                                                                                                                                                                                                                                                                                      ReportElem) ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               (Order ReportElemID
                                                                                                                                                                                                                                                                                      ReportElem)) q) z
                                                                                                                                                                                           Peek_ReportView_ReportFlags q
                                                                                                                                                                                                                       z -> Peek_Report_ReportFlags ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               ReportFlags ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               ReportFlags) q) z
                                                                                                                                                                                           Peek_ReportView_ReportStandard q
                                                                                                                                                                                                                          z -> Peek_Report_ReportStandard ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                     ReportStandard ->
                                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                                     ReportStandard) q) z
                                                                                                                                                                                           Peek_ReportView_ReportStatus q
                                                                                                                                                                                                                        z -> Peek_Report_ReportStatus ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                 ReportStatus ->
                                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                                 ReportStatus) q) z
                                                                                                                                                                                           Peek_ReportView_ReportValueApproachInfo q
                                                                                                                                                                                                                                   z -> Peek_Report_ReportValueApproachInfo ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                                       ReportValueApproachInfo ->
                                                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                                                       ReportValueApproachInfo) q) z
                                                                                                                                                                                           Peek_ReportView_ReportValueTypeInfo q
                                                                                                                                                                                                                               z -> Peek_Report_ReportValueTypeInfo ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                               ReportValueTypeInfo ->
                                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                                               ReportValueTypeInfo) q) z
                                                                                                                                                                                           Peek_ReportView_EUI q
                                                                                                                                                                                                               z -> Peek_Report_EUI ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                               (Either URI
                                                                                                                                                                                                                                                                       ImageFile) ->
                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                               (Either URI
                                                                                                                                                                                                                                                                       ImageFile)) q) z
                                                                                                                                                                                           Peek_ReportView_MEUI q
                                                                                                                                                                                                                z -> Peek_Report_MEUI ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                                                ImageFile)) ->
                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                                                ImageFile))) q) z
                                                                                                                                                                                           Peek_ReportView_MaybeImageFile q
                                                                                                                                                                                                                          z -> Peek_Report_MaybeImageFile ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                     (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                                     (Maybe ImageFile)) q) z
                                                                                                                                                                                           Peek_ReportView_ReportImage q
                                                                                                                                                                                                                       z -> Peek_Report_ReportImage ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                               ReportImage ->
                                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                                               ReportImage) q) z
                                                                                                                                                                                           Peek_ReportView_ReportImages q
                                                                                                                                                                                                                        z -> Peek_Report_ReportImages ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                 (Order ReportImageID
                                                                                                                                                                                                                                                                                        ReportImage) ->
                                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                                 (Order ReportImageID
                                                                                                                                                                                                                                                                                        ReportImage)) q) z
                                                                                                                                                                                           Peek_ReportView_ReadOnlyFilePath q
                                                                                                                                                                                                                            z -> Peek_Report_ReadOnlyFilePath ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                         (ReadOnly ([Char])) ->
                                                                                                                                                                                                                                                                                    Path Report
                                                                                                                                                                                                                                                                                         (ReadOnly ([Char]))) q) z
                                                                                                                                                                                           Peek_ReportView_ReportImageView q
                                                                                                                                                                                                                           z -> Peek_Report_ReportImageView ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                       ReportImageView ->
                                                                                                                                                                                                                                                                                  Path Report
                                                                                                                                                                                                                                                                                       ReportImageView) q) z
                                                                                                                                                                                           Peek_ReportView_ReportView q
                                                                                                                                                                                                                      z -> Peek_Report_ReportView ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                             ReportView ->
                                                                                                                                                                                                                                                                        Path Report
                                                                                                                                                                                                                                                                             ReportView) q) z
                                                                                                                                                                                           Peek_ReportView_SaneSizeImageSize q
                                                                                                                                                                                                                             z -> Peek_Report_SaneSizeImageSize ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                                           (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                      Path Report
                                                                                                                                                                                                                                                                                           (SaneSize ImageSize)) q) z
                                                                                                                                                                                           Peek_ReportView_Item q
                                                                                                                                                                                                                z -> Peek_Report_Item ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                 Item ->
                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                 Item) q) z
                                                                                                                                                                                           Peek_ReportView_MIM q
                                                                                                                                                                                                               z -> Peek_Report_MIM ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                               (Map ItemFieldName
                                                                                                                                                                                                                                                                    Markup) ->
                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                               (Map ItemFieldName
                                                                                                                                                                                                                                                                    Markup)) q) z
                                                                                                                                                                                           Peek_ReportView_CIString q
                                                                                                                                                                                                                    z -> Peek_Report_CIString ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                         CIString ->
                                                                                                                                                                                                                                                                    Path Report
                                                                                                                                                                                                                                                                         CIString) q) z
                                                                                                                                                                                           Peek_ReportView_URI q
                                                                                                                                                                                                               z -> Peek_Report_URI ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                               URI ->
                                                                                                                                                                                                                                                          Path Report
                                                                                                                                                                                                                                                               URI) q) z
                                                                                                                                                                                           Peek_ReportView_Text q
                                                                                                                                                                                                                z -> Peek_Report_Text ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                 Text) q) z
                                                                                                                                                                                           Peek_ReportView_UserId q
                                                                                                                                                                                                                  z -> Peek_Report_UserId ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                     UserId ->
                                                                                                                                                                                                                                                                Path Report
                                                                                                                                                                                                                                                                     UserId) q) z
                                                                                                                                                                                           Peek_ReportView_UUID q
                                                                                                                                                                                                                z -> Peek_Report_UUID ((Path_Report_View :: Path ReportView
                                                                                                                                                                                                                                                                 UUID ->
                                                                                                                                                                                                                                                            Path Report
                                                                                                                                                                                                                                                                 UUID) q) z) wf)) (toListOf (toLens p) x :: [ReportView])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ReportView) :: [Path_Report ReportView]) :: Forest (Peek Report)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Report_View _) -> map (\w' -> Node (Peek_Report_ReportView p (Just w')) []) (toListOf (toLens p) x :: [ReportView])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ReportView) :: [Path_Report ReportView]) :: Forest (Peek Report)]
instance IsPathStart ReportElem
    where data Peek ReportElem
              = Peek_ReportElem_String (Path ReportElem ([Char])) (Maybe ([Char]))
              | Peek_ReportElem_Bool (Path ReportElem Bool) (Maybe Bool)
              | Peek_ReportElem_Double (Path ReportElem Double) (Maybe Double)
              | Peek_ReportElem_Dimension (Path ReportElem Dimension) (Maybe Dimension)
              | Peek_ReportElem_ImageCrop (Path ReportElem ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElem_ImageSize (Path ReportElem ImageSize) (Maybe ImageSize)
              | Peek_ReportElem_Units (Path ReportElem Units) (Maybe Units)
              | Peek_ReportElem_ImageFile (Path ReportElem ImageFile) (Maybe ImageFile)
              | Peek_ReportElem_JSONText (Path ReportElem JSONText) (Maybe JSONText)
              | Peek_ReportElem_Markup (Path ReportElem Markup) (Maybe Markup)
              | Peek_ReportElem_ReportElem (Path ReportElem ReportElem) (Maybe ReportElem)
              | Peek_ReportElem_EUI (Path ReportElem (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportElem_MEUI (Path ReportElem (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportElem_MaybeImageFile (Path ReportElem (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportElem_ReportImage (Path ReportElem ReportImage) (Maybe ReportImage)
              | Peek_ReportElem_ReportImages (Path ReportElem (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportElem_ReportImageView (Path ReportElem ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElem_SaneSizeImageSize (Path ReportElem (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportElem_Item (Path ReportElem Item) (Maybe Item)
              | Peek_ReportElem_MIM (Path ReportElem (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportElem_URI (Path ReportElem URI) (Maybe URI)
              | Peek_ReportElem_Text (Path ReportElem Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(ReportItem {})) = concat [concatMap (\path -> case path of
                                                                     p@(Path_ReportElem_elemItem _) -> map (\w' -> let wf = peek w' :: Forest (Peek Item)
                                                                                                                    in Node (Peek_ReportElem_Item p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                   Peek_Item_String q
                                                                                                                                                                                                                                    z -> Peek_ReportElem_String ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                   ([Char]) ->
                                                                                                                                                                                                                                                                                              Path ReportElem
                                                                                                                                                                                                                                                                                                   ([Char])) q) z
                                                                                                                                                                                                                   Peek_Item_Bool q
                                                                                                                                                                                                                                  z -> Peek_ReportElem_Bool ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                               Bool ->
                                                                                                                                                                                                                                                                                          Path ReportElem
                                                                                                                                                                                                                                                                                               Bool) q) z
                                                                                                                                                                                                                   Peek_Item_Double q
                                                                                                                                                                                                                                    z -> Peek_ReportElem_Double ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                   Double ->
                                                                                                                                                                                                                                                                                              Path ReportElem
                                                                                                                                                                                                                                                                                                   Double) q) z
                                                                                                                                                                                                                   Peek_Item_Dimension q
                                                                                                                                                                                                                                       z -> Peek_ReportElem_Dimension ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                         Dimension ->
                                                                                                                                                                                                                                                                                                    Path ReportElem
                                                                                                                                                                                                                                                                                                         Dimension) q) z
                                                                                                                                                                                                                   Peek_Item_ImageCrop q
                                                                                                                                                                                                                                       z -> Peek_ReportElem_ImageCrop ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                         ImageCrop ->
                                                                                                                                                                                                                                                                                                    Path ReportElem
                                                                                                                                                                                                                                                                                                         ImageCrop) q) z
                                                                                                                                                                                                                   Peek_Item_ImageSize q
                                                                                                                                                                                                                                       z -> Peek_ReportElem_ImageSize ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                         ImageSize ->
                                                                                                                                                                                                                                                                                                    Path ReportElem
                                                                                                                                                                                                                                                                                                         ImageSize) q) z
                                                                                                                                                                                                                   Peek_Item_Units q
                                                                                                                                                                                                                                   z -> Peek_ReportElem_Units ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                 Units ->
                                                                                                                                                                                                                                                                                            Path ReportElem
                                                                                                                                                                                                                                                                                                 Units) q) z
                                                                                                                                                                                                                   Peek_Item_ImageFile q
                                                                                                                                                                                                                                       z -> Peek_ReportElem_ImageFile ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                         ImageFile ->
                                                                                                                                                                                                                                                                                                    Path ReportElem
                                                                                                                                                                                                                                                                                                         ImageFile) q) z
                                                                                                                                                                                                                   Peek_Item_JSONText q
                                                                                                                                                                                                                                      z -> Peek_ReportElem_JSONText ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                  Path ReportElem
                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                                   Peek_Item_Markup q
                                                                                                                                                                                                                                    z -> Peek_ReportElem_Markup ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                                                              Path ReportElem
                                                                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                                                   Peek_Item_EUI q
                                                                                                                                                                                                                                 z -> Peek_ReportElem_EUI ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                             (Either URI
                                                                                                                                                                                                                                                                                                     ImageFile) ->
                                                                                                                                                                                                                                                                                        Path ReportElem
                                                                                                                                                                                                                                                                                             (Either URI
                                                                                                                                                                                                                                                                                                     ImageFile)) q) z
                                                                                                                                                                                                                   Peek_Item_MEUI q
                                                                                                                                                                                                                                  z -> Peek_ReportElem_MEUI ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                               (Maybe (Either URI
                                                                                                                                                                                                                                                                                                              ImageFile)) ->
                                                                                                                                                                                                                                                                                          Path ReportElem
                                                                                                                                                                                                                                                                                               (Maybe (Either URI
                                                                                                                                                                                                                                                                                                              ImageFile))) q) z
                                                                                                                                                                                                                   Peek_Item_MaybeImageFile q
                                                                                                                                                                                                                                            z -> Peek_ReportElem_MaybeImageFile ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                              Path ReportElem
                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile)) q) z
                                                                                                                                                                                                                   Peek_Item_ReportImage q
                                                                                                                                                                                                                                         z -> Peek_ReportElem_ReportImage ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                             ReportImage ->
                                                                                                                                                                                                                                                                                                        Path ReportElem
                                                                                                                                                                                                                                                                                                             ReportImage) q) z
                                                                                                                                                                                                                   Peek_Item_ReportImages q
                                                                                                                                                                                                                                          z -> Peek_ReportElem_ReportImages ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                               (Order ReportImageID
                                                                                                                                                                                                                                                                                                                      ReportImage) ->
                                                                                                                                                                                                                                                                                                          Path ReportElem
                                                                                                                                                                                                                                                                                                               (Order ReportImageID
                                                                                                                                                                                                                                                                                                                      ReportImage)) q) z
                                                                                                                                                                                                                   Peek_Item_ReportImageView q
                                                                                                                                                                                                                                             z -> Peek_ReportElem_ReportImageView ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                                     ReportImageView ->
                                                                                                                                                                                                                                                                                                                Path ReportElem
                                                                                                                                                                                                                                                                                                                     ReportImageView) q) z
                                                                                                                                                                                                                   Peek_Item_SaneSizeImageSize q
                                                                                                                                                                                                                                               z -> Peek_ReportElem_SaneSizeImageSize ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                                                         (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                                    Path ReportElem
                                                                                                                                                                                                                                                                                                                         (SaneSize ImageSize)) q) z
                                                                                                                                                                                                                   Peek_Item_Item q
                                                                                                                                                                                                                                  z -> Peek_ReportElem_Item ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                               Item ->
                                                                                                                                                                                                                                                                                          Path ReportElem
                                                                                                                                                                                                                                                                                               Item) q) z
                                                                                                                                                                                                                   Peek_Item_MIM q
                                                                                                                                                                                                                                 z -> Peek_ReportElem_MIM ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                             (Map ItemFieldName
                                                                                                                                                                                                                                                                                                  Markup) ->
                                                                                                                                                                                                                                                                                        Path ReportElem
                                                                                                                                                                                                                                                                                             (Map ItemFieldName
                                                                                                                                                                                                                                                                                                  Markup)) q) z
                                                                                                                                                                                                                   Peek_Item_URI q
                                                                                                                                                                                                                                 z -> Peek_ReportElem_URI ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                             URI ->
                                                                                                                                                                                                                                                                                        Path ReportElem
                                                                                                                                                                                                                                                                                             URI) q) z
                                                                                                                                                                                                                   Peek_Item_Text q
                                                                                                                                                                                                                                  z -> Peek_ReportElem_Text ((Path_ReportElem_elemItem :: Path Item
                                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                                          Path ReportElem
                                                                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Item])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Item) :: [Path_ReportElem Item]) :: Forest (Peek ReportElem)]
          peek (x@(ReportParagraph {})) = concat [concatMap (\path -> case path of
                                                                          p@(Path_ReportElem_elemText _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                         in Node (Peek_ReportElem_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                          Peek_Markup_JSONText q
                                                                                                                                                                                                                                               z -> Peek_ReportElem_JSONText ((Path_ReportElem_elemText :: Path Markup
                                                                                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                                                                                           Path ReportElem
                                                                                                                                                                                                                                                                                                                JSONText) q) z
                                                                                                                                                                                                                          Peek_Markup_Markup q
                                                                                                                                                                                                                                             z -> Peek_ReportElem_Markup ((Path_ReportElem_elemText :: Path Markup
                                                                                                                                                                                                                                                                                                            Markup ->
                                                                                                                                                                                                                                                                                                       Path ReportElem
                                                                                                                                                                                                                                                                                                            Markup) q) z
                                                                                                                                                                                                                          Peek_Markup_Text q
                                                                                                                                                                                                                                           z -> Peek_ReportElem_Text ((Path_ReportElem_elemText :: Path Markup
                                                                                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                                                                                   Path ReportElem
                                                                                                                                                                                                                                                                                                        Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportElem Markup]) :: Forest (Peek ReportElem)]
          hop (x@(ReportItem {})) = concat [concatMap (\path -> case path of
                                                                    p@(Path_ReportElem_elemItem _) -> map (\w' -> Node (Peek_ReportElem_Item p (Just w')) []) (toListOf (toLens p) x :: [Item])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Item) :: [Path_ReportElem Item]) :: Forest (Peek ReportElem)]
          hop (x@(ReportParagraph {})) = concat [concatMap (\path -> case path of
                                                                         p@(Path_ReportElem_elemText _) -> map (\w' -> Node (Peek_ReportElem_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportElem Markup]) :: Forest (Peek ReportElem)]
instance IsPathStart ReportFlags
    where data Peek ReportFlags
              = Peek_ReportFlags_String (Path ReportFlags ([Char])) (Maybe ([Char]))
              | Peek_ReportFlags_Bool (Path ReportFlags Bool) (Maybe Bool)
              | Peek_ReportFlags_JSONText (Path ReportFlags JSONText) (Maybe JSONText)
              | Peek_ReportFlags_ReportFlags (Path ReportFlags ReportFlags) (Maybe ReportFlags)
              deriving (Eq, Show)
          peek (x@(ReportFlags {})) = concat [concatMap (\path -> case path of
                                                                      p@(Path_ReportFlags_hideEmptyItemFields _) -> map (\w' -> let wf = peek w' :: Forest (Peek Bool)
                                                                                                                                 in Node (Peek_ReportFlags_Bool p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Bool_String q
                                                                                                                                                                                                                                                  z -> Peek_ReportFlags_String ((Path_ReportFlags_hideEmptyItemFields :: Path Bool
                                                                                                                                                                                                                                                                                                                              ([Char]) ->
                                                                                                                                                                                                                                                                                                                         Path ReportFlags
                                                                                                                                                                                                                                                                                                                              ([Char])) q) z
                                                                                                                                                                                                                                 Peek_Bool_Bool q
                                                                                                                                                                                                                                                z -> Peek_ReportFlags_Bool ((Path_ReportFlags_hideEmptyItemFields :: Path Bool
                                                                                                                                                                                                                                                                                                                          Bool ->
                                                                                                                                                                                                                                                                                                                     Path ReportFlags
                                                                                                                                                                                                                                                                                                                          Bool) q) z
                                                                                                                                                                                                                                 Peek_Bool_JSONText q
                                                                                                                                                                                                                                                    z -> Peek_ReportFlags_JSONText ((Path_ReportFlags_hideEmptyItemFields :: Path Bool
                                                                                                                                                                                                                                                                                                                                  JSONText ->
                                                                                                                                                                                                                                                                                                                             Path ReportFlags
                                                                                                                                                                                                                                                                                                                                  JSONText) q) z) wf)) (toListOf (toLens p) x :: [Bool])
                                                                      _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportFlags Bool]) :: Forest (Peek ReportFlags)]
          hop (x@(ReportFlags {})) = concat [concatMap (\path -> case path of
                                                                     p@(Path_ReportFlags_hideEmptyItemFields _) -> map (\w' -> Node (Peek_ReportFlags_Bool p (Just w')) []) (toListOf (toLens p) x :: [Bool])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportFlags Bool]) :: Forest (Peek ReportFlags)]
instance IsPathStart ReportIntendedUse
    where data Peek ReportIntendedUse
              = Peek_ReportIntendedUse_String (Path ReportIntendedUse ([Char])) (Maybe ([Char]))
              | Peek_ReportIntendedUse_JSONText (Path ReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_ReportIntendedUse_ReportIntendedUse (Path ReportIntendedUse ReportIntendedUse) (Maybe ReportIntendedUse)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_ReportIntendedUse_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                                     in Node (Peek_ReportIntendedUse_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                             Peek_String_String q
                                                                                                                                                                                                                                z -> Peek_ReportIntendedUse_String ((Path_ReportIntendedUse_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                         ([Char]) ->
                                                                                                                                                                                                                                                                                                    Path ReportIntendedUse
                                                                                                                                                                                                                                                                                                         ([Char])) q) z
                                                                                                                                                                                                             Peek_String_JSONText q
                                                                                                                                                                                                                                  z -> Peek_ReportIntendedUse_JSONText ((Path_ReportIntendedUse_View :: Path ([Char])
                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                        Path ReportIntendedUse
                                                                                                                                                                                                                                                                                                             JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReportIntendedUse ([Char])]) :: Forest (Peek ReportIntendedUse)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_ReportIntendedUse_View _) -> map (\w' -> Node (Peek_ReportIntendedUse_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReportIntendedUse ([Char])]) :: Forest (Peek ReportIntendedUse)]
instance IsPathStart ReportStandard
    where data Peek ReportStandard
              = Peek_ReportStandard_Int (Path ReportStandard Int) (Maybe Int) | Peek_ReportStandard_ReportStandard (Path ReportStandard ReportStandard) (Maybe ReportStandard)
              deriving (Eq, Show)
          peek (x@(ReportStandard {})) = concat [concatMap (\path -> case path of
                                                                         p@(Path_ReportStandard_unReportStandard _) -> map (\w' -> let wf = peek w' :: Forest (Peek Int)
                                                                                                                                    in Node (Peek_ReportStandard_Int p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                      Peek_Int_Int q
                                                                                                                                                                                                                                                   z -> Peek_ReportStandard_Int ((Path_ReportStandard_unReportStandard :: Path Int
                                                                                                                                                                                                                                                                                                                               Int ->
                                                                                                                                                                                                                                                                                                                          Path ReportStandard
                                                                                                                                                                                                                                                                                                                               Int) q) z) wf)) (toListOf (toLens p) x :: [Int])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy Int) :: [Path_ReportStandard Int]) :: Forest (Peek ReportStandard)]
          hop (x@(ReportStandard {})) = concat [concatMap (\path -> case path of
                                                                        p@(Path_ReportStandard_unReportStandard _) -> map (\w' -> Node (Peek_ReportStandard_Int p (Just w')) []) (toListOf (toLens p) x :: [Int])
                                                                        _ -> []) (pathsOf x (undefined :: Proxy Int) :: [Path_ReportStandard Int]) :: Forest (Peek ReportStandard)]
instance IsPathStart ReportStatus
    where data Peek ReportStatus
              = Peek_ReportStatus_String (Path ReportStatus ([Char])) (Maybe ([Char]))
              | Peek_ReportStatus_JSONText (Path ReportStatus JSONText) (Maybe JSONText)
              | Peek_ReportStatus_ReportStatus (Path ReportStatus ReportStatus) (Maybe ReportStatus)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_ReportStatus_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ([Char]))
                                                                                                in Node (Peek_ReportStatus_String p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                   Peek_String_String q
                                                                                                                                                                                                                      z -> Peek_ReportStatus_String ((Path_ReportStatus_View :: Path ([Char])
                                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                                Path ReportStatus
                                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                                   Peek_String_JSONText q
                                                                                                                                                                                                                        z -> Peek_ReportStatus_JSONText ((Path_ReportStatus_View :: Path ([Char])
                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                    Path ReportStatus
                                                                                                                                                                                                                                                                                         JSONText) q) z) wf)) (toListOf (toLens p) x :: [[Char]])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReportStatus ([Char])]) :: Forest (Peek ReportStatus)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_ReportStatus_View _) -> map (\w' -> Node (Peek_ReportStatus_String p (Just w')) []) (toListOf (toLens p) x :: [[Char]])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ([Char])) :: [Path_ReportStatus ([Char])]) :: Forest (Peek ReportStatus)]
instance IsPathStart ReportValueApproachInfo
    where data Peek ReportValueApproachInfo
              = Peek_ReportValueApproachInfo_JSONText (Path ReportValueApproachInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueApproachInfo_Markup (Path ReportValueApproachInfo Markup) (Maybe Markup)
              | Peek_ReportValueApproachInfo_ReportValueApproachInfo (Path ReportValueApproachInfo ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportValueApproachInfo_Text (Path ReportValueApproachInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(ReportValueApproachInfo {})) = concat [concatMap (\path -> case path of
                                                                                  p@(Path_ReportValueApproachInfo_reportValueApproachName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                                             in Node (Peek_ReportValueApproachInfo_Markup p (if null wf
                                                                                                                                                                                                              then Just w'
                                                                                                                                                                                                              else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                                    Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                         z -> Peek_ReportValueApproachInfo_JSONText ((Path_ReportValueApproachInfo_reportValueApproachName :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                                                                              Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                                    Peek_Markup_Markup q
                                                                                                                                                                                                                                                                       z -> Peek_ReportValueApproachInfo_Markup ((Path_ReportValueApproachInfo_reportValueApproachName :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                                                                          Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                                    Peek_Markup_Text q
                                                                                                                                                                                                                                                                     z -> Peek_ReportValueApproachInfo_Text ((Path_ReportValueApproachInfo_reportValueApproachName :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                                                                      Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueApproachInfo Markup]) :: Forest (Peek ReportValueApproachInfo),
                                                          concatMap (\path -> case path of
                                                                                  p@(Path_ReportValueApproachInfo_reportValueApproachDescription _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                                                    in Node (Peek_ReportValueApproachInfo_Markup p (if null wf
                                                                                                                                                                                                                     then Just w'
                                                                                                                                                                                                                     else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                                           Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                                z -> Peek_ReportValueApproachInfo_JSONText ((Path_ReportValueApproachInfo_reportValueApproachDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                                                                                            Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                                                           Peek_Markup_Markup q
                                                                                                                                                                                                                                                                              z -> Peek_ReportValueApproachInfo_Markup ((Path_ReportValueApproachInfo_reportValueApproachDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                                                                                                        Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                                                           Peek_Markup_Text q
                                                                                                                                                                                                                                                                            z -> Peek_ReportValueApproachInfo_Text ((Path_ReportValueApproachInfo_reportValueApproachDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                                                                                                    Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                                  _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueApproachInfo Markup]) :: Forest (Peek ReportValueApproachInfo)]
          hop (x@(ReportValueApproachInfo {})) = concat [concatMap (\path -> case path of
                                                                                 p@(Path_ReportValueApproachInfo_reportValueApproachName _) -> map (\w' -> Node (Peek_ReportValueApproachInfo_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                                 _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueApproachInfo Markup]) :: Forest (Peek ReportValueApproachInfo),
                                                         concatMap (\path -> case path of
                                                                                 p@(Path_ReportValueApproachInfo_reportValueApproachDescription _) -> map (\w' -> Node (Peek_ReportValueApproachInfo_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                                 _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueApproachInfo Markup]) :: Forest (Peek ReportValueApproachInfo)]
instance IsPathStart ReportValueTypeInfo
    where data Peek ReportValueTypeInfo
              = Peek_ReportValueTypeInfo_JSONText (Path ReportValueTypeInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueTypeInfo_Markup (Path ReportValueTypeInfo Markup) (Maybe Markup)
              | Peek_ReportValueTypeInfo_ReportValueTypeInfo (Path ReportValueTypeInfo ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportValueTypeInfo_Text (Path ReportValueTypeInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(ReportValueTypeInfo {})) = concat [concatMap (\path -> case path of
                                                                              p@(Path_ReportValueTypeInfo_reportValueTypeName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                                 in Node (Peek_ReportValueTypeInfo_Markup p (if null wf
                                                                                                                                                                                              then Just w'
                                                                                                                                                                                              else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                    Peek_Markup_JSONText q
                                                                                                                                                                                                                                                         z -> Peek_ReportValueTypeInfo_JSONText ((Path_ReportValueTypeInfo_reportValueTypeName :: Path Markup
                                                                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                                                                  Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                                                    Peek_Markup_Markup q
                                                                                                                                                                                                                                                       z -> Peek_ReportValueTypeInfo_Markup ((Path_ReportValueTypeInfo_reportValueTypeName :: Path Markup
                                                                                                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                                                                                                              Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                                                                    Peek_Markup_Text q
                                                                                                                                                                                                                                                     z -> Peek_ReportValueTypeInfo_Text ((Path_ReportValueTypeInfo_reportValueTypeName :: Path Markup
                                                                                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                                                                                          Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                              _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo),
                                                      concatMap (\path -> case path of
                                                                              p@(Path_ReportValueTypeInfo_reportValueTypeDescription _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                                        in Node (Peek_ReportValueTypeInfo_Markup p (if null wf
                                                                                                                                                                                                     then Just w'
                                                                                                                                                                                                     else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                           Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                z -> Peek_ReportValueTypeInfo_JSONText ((Path_ReportValueTypeInfo_reportValueTypeDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                                                Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                           Peek_Markup_Markup q
                                                                                                                                                                                                                                                              z -> Peek_ReportValueTypeInfo_Markup ((Path_ReportValueTypeInfo_reportValueTypeDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                                                                            Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                                           Peek_Markup_Text q
                                                                                                                                                                                                                                                            z -> Peek_ReportValueTypeInfo_Text ((Path_ReportValueTypeInfo_reportValueTypeDescription :: Path Markup
                                                                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                                                                        Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                              _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo),
                                                      concatMap (\path -> case path of
                                                                              p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                                       in Node (Peek_ReportValueTypeInfo_Markup p (if null wf
                                                                                                                                                                                                    then Just w'
                                                                                                                                                                                                    else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                          Peek_Markup_JSONText q
                                                                                                                                                                                                                                                               z -> Peek_ReportValueTypeInfo_JSONText ((Path_ReportValueTypeInfo_reportValueTypeDefinition :: Path Markup
                                                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                                                              Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                          Peek_Markup_Markup q
                                                                                                                                                                                                                                                             z -> Peek_ReportValueTypeInfo_Markup ((Path_ReportValueTypeInfo_reportValueTypeDefinition :: Path Markup
                                                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                                                          Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                          Peek_Markup_Text q
                                                                                                                                                                                                                                                           z -> Peek_ReportValueTypeInfo_Text ((Path_ReportValueTypeInfo_reportValueTypeDefinition :: Path Markup
                                                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                                                      Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                              _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo)]
          hop (x@(ReportValueTypeInfo {})) = concat [concatMap (\path -> case path of
                                                                             p@(Path_ReportValueTypeInfo_reportValueTypeName _) -> map (\w' -> Node (Peek_ReportValueTypeInfo_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                             _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo),
                                                     concatMap (\path -> case path of
                                                                             p@(Path_ReportValueTypeInfo_reportValueTypeDescription _) -> map (\w' -> Node (Peek_ReportValueTypeInfo_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                             _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo),
                                                     concatMap (\path -> case path of
                                                                             p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _) -> map (\w' -> Node (Peek_ReportValueTypeInfo_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                             _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportValueTypeInfo Markup]) :: Forest (Peek ReportValueTypeInfo)]
instance IsPathStart ReportImage
    where data Peek ReportImage
              = Peek_ReportImage_String (Path ReportImage ([Char])) (Maybe ([Char]))
              | Peek_ReportImage_Bool (Path ReportImage Bool) (Maybe Bool)
              | Peek_ReportImage_Double (Path ReportImage Double) (Maybe Double)
              | Peek_ReportImage_Dimension (Path ReportImage Dimension) (Maybe Dimension)
              | Peek_ReportImage_ImageCrop (Path ReportImage ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImage_ImageSize (Path ReportImage ImageSize) (Maybe ImageSize)
              | Peek_ReportImage_Units (Path ReportImage Units) (Maybe Units)
              | Peek_ReportImage_ImageFile (Path ReportImage ImageFile) (Maybe ImageFile)
              | Peek_ReportImage_JSONText (Path ReportImage JSONText) (Maybe JSONText)
              | Peek_ReportImage_Markup (Path ReportImage Markup) (Maybe Markup)
              | Peek_ReportImage_EUI (Path ReportImage (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImage_MEUI (Path ReportImage (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImage_MaybeImageFile (Path ReportImage (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImage_ReportImage (Path ReportImage ReportImage) (Maybe ReportImage)
              | Peek_ReportImage_ReportImageView (Path ReportImage ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImage_SaneSizeImageSize (Path ReportImage (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImage_URI (Path ReportImage URI) (Maybe URI)
              | Peek_ReportImage_Text (Path ReportImage Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_ReportImage_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportImageView)
                                                                                               in Node (Peek_ReportImage_ReportImageView p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                          Peek_ReportImageView_String q
                                                                                                                                                                                                                                      z -> Peek_ReportImage_String ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                   ([Char]) ->
                                                                                                                                                                                                                                                                                              Path ReportImage
                                                                                                                                                                                                                                                                                                   ([Char])) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Bool q
                                                                                                                                                                                                                                    z -> Peek_ReportImage_Bool ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                               Bool ->
                                                                                                                                                                                                                                                                                          Path ReportImage
                                                                                                                                                                                                                                                                                               Bool) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Double q
                                                                                                                                                                                                                                      z -> Peek_ReportImage_Double ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                   Double ->
                                                                                                                                                                                                                                                                                              Path ReportImage
                                                                                                                                                                                                                                                                                                   Double) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Dimension q
                                                                                                                                                                                                                                         z -> Peek_ReportImage_Dimension ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                         Dimension ->
                                                                                                                                                                                                                                                                                                    Path ReportImage
                                                                                                                                                                                                                                                                                                         Dimension) q) z
                                                                                                                                                                                                          Peek_ReportImageView_ImageCrop q
                                                                                                                                                                                                                                         z -> Peek_ReportImage_ImageCrop ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                         ImageCrop ->
                                                                                                                                                                                                                                                                                                    Path ReportImage
                                                                                                                                                                                                                                                                                                         ImageCrop) q) z
                                                                                                                                                                                                          Peek_ReportImageView_ImageSize q
                                                                                                                                                                                                                                         z -> Peek_ReportImage_ImageSize ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                         ImageSize ->
                                                                                                                                                                                                                                                                                                    Path ReportImage
                                                                                                                                                                                                                                                                                                         ImageSize) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Units q
                                                                                                                                                                                                                                     z -> Peek_ReportImage_Units ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                 Units ->
                                                                                                                                                                                                                                                                                            Path ReportImage
                                                                                                                                                                                                                                                                                                 Units) q) z
                                                                                                                                                                                                          Peek_ReportImageView_ImageFile q
                                                                                                                                                                                                                                         z -> Peek_ReportImage_ImageFile ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                         ImageFile ->
                                                                                                                                                                                                                                                                                                    Path ReportImage
                                                                                                                                                                                                                                                                                                         ImageFile) q) z
                                                                                                                                                                                                          Peek_ReportImageView_JSONText q
                                                                                                                                                                                                                                        z -> Peek_ReportImage_JSONText ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                  Path ReportImage
                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Markup q
                                                                                                                                                                                                                                      z -> Peek_ReportImage_Markup ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                                                              Path ReportImage
                                                                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                                          Peek_ReportImageView_EUI q
                                                                                                                                                                                                                                   z -> Peek_ReportImage_EUI ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                             (Either URI
                                                                                                                                                                                                                                                                                                     ImageFile) ->
                                                                                                                                                                                                                                                                                        Path ReportImage
                                                                                                                                                                                                                                                                                             (Either URI
                                                                                                                                                                                                                                                                                                     ImageFile)) q) z
                                                                                                                                                                                                          Peek_ReportImageView_MEUI q
                                                                                                                                                                                                                                    z -> Peek_ReportImage_MEUI ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                               (Maybe (Either URI
                                                                                                                                                                                                                                                                                                              ImageFile)) ->
                                                                                                                                                                                                                                                                                          Path ReportImage
                                                                                                                                                                                                                                                                                               (Maybe (Either URI
                                                                                                                                                                                                                                                                                                              ImageFile))) q) z
                                                                                                                                                                                                          Peek_ReportImageView_MaybeImageFile q
                                                                                                                                                                                                                                              z -> Peek_ReportImage_MaybeImageFile ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                              Path ReportImage
                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile)) q) z
                                                                                                                                                                                                          Peek_ReportImageView_ReportImageView q
                                                                                                                                                                                                                                               z -> Peek_ReportImage_ReportImageView ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                                     ReportImageView ->
                                                                                                                                                                                                                                                                                                                Path ReportImage
                                                                                                                                                                                                                                                                                                                     ReportImageView) q) z
                                                                                                                                                                                                          Peek_ReportImageView_SaneSizeImageSize q
                                                                                                                                                                                                                                                 z -> Peek_ReportImage_SaneSizeImageSize ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                                                         (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                                    Path ReportImage
                                                                                                                                                                                                                                                                                                                         (SaneSize ImageSize)) q) z
                                                                                                                                                                                                          Peek_ReportImageView_URI q
                                                                                                                                                                                                                                   z -> Peek_ReportImage_URI ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                             URI ->
                                                                                                                                                                                                                                                                                        Path ReportImage
                                                                                                                                                                                                                                                                                             URI) q) z
                                                                                                                                                                                                          Peek_ReportImageView_Text q
                                                                                                                                                                                                                                    z -> Peek_ReportImage_Text ((Path_ReportImage_View :: Path ReportImageView
                                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                                          Path ReportImage
                                                                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [ReportImageView])
                                                   _ -> []) (pathsOf x (undefined :: Proxy ReportImageView) :: [Path_ReportImage ReportImageView]) :: Forest (Peek ReportImage)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_ReportImage_View _) -> map (\w' -> Node (Peek_ReportImage_ReportImageView p (Just w')) []) (toListOf (toLens p) x :: [ReportImageView])
                                                  _ -> []) (pathsOf x (undefined :: Proxy ReportImageView) :: [Path_ReportImage ReportImageView]) :: Forest (Peek ReportImage)]
instance IsPathStart ReportImageView
    where data Peek ReportImageView
              = Peek_ReportImageView_String (Path ReportImageView ([Char])) (Maybe ([Char]))
              | Peek_ReportImageView_Bool (Path ReportImageView Bool) (Maybe Bool)
              | Peek_ReportImageView_Double (Path ReportImageView Double) (Maybe Double)
              | Peek_ReportImageView_Dimension (Path ReportImageView Dimension) (Maybe Dimension)
              | Peek_ReportImageView_ImageCrop (Path ReportImageView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImageView_ImageSize (Path ReportImageView ImageSize) (Maybe ImageSize)
              | Peek_ReportImageView_Units (Path ReportImageView Units) (Maybe Units)
              | Peek_ReportImageView_ImageFile (Path ReportImageView ImageFile) (Maybe ImageFile)
              | Peek_ReportImageView_JSONText (Path ReportImageView JSONText) (Maybe JSONText)
              | Peek_ReportImageView_Markup (Path ReportImageView Markup) (Maybe Markup)
              | Peek_ReportImageView_EUI (Path ReportImageView (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImageView_MEUI (Path ReportImageView (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImageView_MaybeImageFile (Path ReportImageView (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImageView_ReportImageView (Path ReportImageView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImageView_SaneSizeImageSize (Path ReportImageView (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImageView_URI (Path ReportImageView URI) (Maybe URI)
              | Peek_ReportImageView_Text (Path ReportImageView Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(ReportImageView {})) = concat [concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picSize _) -> map (\w' -> let wf = peek w' :: Forest (Peek (SaneSize ImageSize))
                                                                                                                              in Node (Peek_ReportImageView_SaneSizeImageSize p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_String q
                                                                                                                                                                                                                                                                             z -> Peek_ReportImageView_String ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                      ([Char]) ->
                                                                                                                                                                                                                                                                                                                                                 Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                      ([Char])) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Double q
                                                                                                                                                                                                                                                                             z -> Peek_ReportImageView_Double ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                      Double ->
                                                                                                                                                                                                                                                                                                                                                 Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                      Double) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Dimension q
                                                                                                                                                                                                                                                                                z -> Peek_ReportImageView_Dimension ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                            Dimension ->
                                                                                                                                                                                                                                                                                                                                                       Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                            Dimension) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_ImageSize q
                                                                                                                                                                                                                                                                                z -> Peek_ReportImageView_ImageSize ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                            ImageSize ->
                                                                                                                                                                                                                                                                                                                                                       Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                            ImageSize) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Units q
                                                                                                                                                                                                                                                                            z -> Peek_ReportImageView_Units ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                    Units ->
                                                                                                                                                                                                                                                                                                                                               Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                    Units) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_JSONText q
                                                                                                                                                                                                                                                                               z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                                                                                                                                     Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                          JSONText) q) z
                                                                                                                                                                                                                                               Peek_SaneSizeImageSize_SaneSizeImageSize q
                                                                                                                                                                                                                                                                                        z -> Peek_ReportImageView_SaneSizeImageSize ((Path_ReportImageView__picSize :: Path (SaneSize ImageSize)
                                                                                                                                                                                                                                                                                                                                                                            (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                                                                                       Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                                            (SaneSize ImageSize)) q) z) wf)) (toListOf (toLens p) x :: [SaneSize ImageSize])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (SaneSize ImageSize)) :: [Path_ReportImageView (SaneSize ImageSize)]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picCrop _) -> map (\w' -> let wf = peek w' :: Forest (Peek ImageCrop)
                                                                                                                              in Node (Peek_ReportImageView_ImageCrop p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                       Peek_ImageCrop_ImageCrop q
                                                                                                                                                                                                                                                                z -> Peek_ReportImageView_ImageCrop ((Path_ReportImageView__picCrop :: Path ImageCrop
                                                                                                                                                                                                                                                                                                                                            ImageCrop ->
                                                                                                                                                                                                                                                                                                                                       Path ReportImageView
                                                                                                                                                                                                                                                                                                                                            ImageCrop) q) z) wf)) (toListOf (toLens p) x :: [ImageCrop])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy ImageCrop) :: [Path_ReportImageView ImageCrop]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picCaption _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                 in Node (Peek_ReportImageView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                       Peek_Markup_JSONText q
                                                                                                                                                                                                                                                            z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picCaption :: Path Markup
                                                                                                                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                                                                                                                     Path ReportImageView
                                                                                                                                                                                                                                                                                                                                          JSONText) q) z
                                                                                                                                                                                                                                       Peek_Markup_Markup q
                                                                                                                                                                                                                                                          z -> Peek_ReportImageView_Markup ((Path_ReportImageView__picCaption :: Path Markup
                                                                                                                                                                                                                                                                                                                                      Markup ->
                                                                                                                                                                                                                                                                                                                                 Path ReportImageView
                                                                                                                                                                                                                                                                                                                                      Markup) q) z
                                                                                                                                                                                                                                       Peek_Markup_Text q
                                                                                                                                                                                                                                                        z -> Peek_ReportImageView_Text ((Path_ReportImageView__picCaption :: Path Markup
                                                                                                                                                                                                                                                                                                                                  Text ->
                                                                                                                                                                                                                                                                                                                             Path ReportImageView
                                                                                                                                                                                                                                                                                                                                  Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportImageView Markup]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picOriginal _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe (Either URI ImageFile)))
                                                                                                                                  in Node (Peek_ReportImageView_MEUI p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                      Peek_MEUI_ImageFile q
                                                                                                                                                                                                                                                          z -> Peek_ReportImageView_ImageFile ((Path_ReportImageView__picOriginal :: Path (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                                         ImageFile))
                                                                                                                                                                                                                                                                                                                                          ImageFile ->
                                                                                                                                                                                                                                                                                                                                     Path ReportImageView
                                                                                                                                                                                                                                                                                                                                          ImageFile) q) z
                                                                                                                                                                                                                                      Peek_MEUI_EUI q
                                                                                                                                                                                                                                                    z -> Peek_ReportImageView_EUI ((Path_ReportImageView__picOriginal :: Path (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                             ImageFile))
                                                                                                                                                                                                                                                                                                                              (Either URI
                                                                                                                                                                                                                                                                                                                                      ImageFile) ->
                                                                                                                                                                                                                                                                                                                         Path ReportImageView
                                                                                                                                                                                                                                                                                                                              (Either URI
                                                                                                                                                                                                                                                                                                                                      ImageFile)) q) z
                                                                                                                                                                                                                                      Peek_MEUI_MEUI q
                                                                                                                                                                                                                                                     z -> Peek_ReportImageView_MEUI ((Path_ReportImageView__picOriginal :: Path (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                               ImageFile))
                                                                                                                                                                                                                                                                                                                                (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                               ImageFile)) ->
                                                                                                                                                                                                                                                                                                                           Path ReportImageView
                                                                                                                                                                                                                                                                                                                                (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                               ImageFile))) q) z
                                                                                                                                                                                                                                      Peek_MEUI_URI q
                                                                                                                                                                                                                                                    z -> Peek_ReportImageView_URI ((Path_ReportImageView__picOriginal :: Path (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                             ImageFile))
                                                                                                                                                                                                                                                                                                                              URI ->
                                                                                                                                                                                                                                                                                                                         Path ReportImageView
                                                                                                                                                                                                                                                                                                                              URI) q) z) wf)) (toListOf (toLens p) x :: [Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                                                                       ImageFile)])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (Maybe (Either URI ImageFile))) :: [Path_ReportImageView (Maybe (Either URI ImageFile))]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picEditedDeprecated _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe ImageFile))
                                                                                                                                          in Node (Peek_ReportImageView_MaybeImageFile p (if null wf
                                                                                                                                                                                           then Just w'
                                                                                                                                                                                           else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                            z -> Peek_ReportImageView_String ((Path_ReportImageView__picEditedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                 ([Char]) ->
                                                                                                                                                                                                                                                                                                                                            Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                 ([Char])) q) z
                                                                                                                                                                                                                                 Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                              z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picEditedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                                Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                 Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                    z -> Peek_ReportImageView_MaybeImageFile ((Path_ReportImageView__picEditedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                                 (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                                                                            Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                                 (Maybe ImageFile)) q) z) wf)) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picThumbDeprecated _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe ImageFile))
                                                                                                                                         in Node (Peek_ReportImageView_MaybeImageFile p (if null wf
                                                                                                                                                                                          then Just w'
                                                                                                                                                                                          else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                           z -> Peek_ReportImageView_String ((Path_ReportImageView__picThumbDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                               ([Char]) ->
                                                                                                                                                                                                                                                                                                                                          Path ReportImageView
                                                                                                                                                                                                                                                                                                                                               ([Char])) q) z
                                                                                                                                                                                                                                Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                             z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picThumbDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                                              Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                   z -> Peek_ReportImageView_MaybeImageFile ((Path_ReportImageView__picThumbDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                               (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                                                                          Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                               (Maybe ImageFile)) q) z) wf)) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picPrinterDeprecated _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe ImageFile))
                                                                                                                                           in Node (Peek_ReportImageView_MaybeImageFile p (if null wf
                                                                                                                                                                                            then Just w'
                                                                                                                                                                                            else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                  Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                             z -> Peek_ReportImageView_String ((Path_ReportImageView__picPrinterDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                   ([Char]) ->
                                                                                                                                                                                                                                                                                                                                              Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                   ([Char])) q) z
                                                                                                                                                                                                                                  Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                               z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picPrinterDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                                                                  Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                                                  Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                     z -> Peek_ReportImageView_MaybeImageFile ((Path_ReportImageView__picPrinterDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                                                                              Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                                   (Maybe ImageFile)) q) z) wf)) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picMustEnlarge _) -> map (\w' -> let wf = peek w' :: Forest (Peek Bool)
                                                                                                                                     in Node (Peek_ReportImageView_Bool p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                         Peek_Bool_String q
                                                                                                                                                                                                                                                          z -> Peek_ReportImageView_String ((Path_ReportImageView__picMustEnlarge :: Path Bool
                                                                                                                                                                                                                                                                                                                                          ([Char]) ->
                                                                                                                                                                                                                                                                                                                                     Path ReportImageView
                                                                                                                                                                                                                                                                                                                                          ([Char])) q) z
                                                                                                                                                                                                                                         Peek_Bool_Bool q
                                                                                                                                                                                                                                                        z -> Peek_ReportImageView_Bool ((Path_ReportImageView__picMustEnlarge :: Path Bool
                                                                                                                                                                                                                                                                                                                                      Bool ->
                                                                                                                                                                                                                                                                                                                                 Path ReportImageView
                                                                                                                                                                                                                                                                                                                                      Bool) q) z
                                                                                                                                                                                                                                         Peek_Bool_JSONText q
                                                                                                                                                                                                                                                            z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picMustEnlarge :: Path Bool
                                                                                                                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                                                                                                                         Path ReportImageView
                                                                                                                                                                                                                                                                                                                                              JSONText) q) z) wf)) (toListOf (toLens p) x :: [Bool])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportImageView Bool]) :: Forest (Peek ReportImageView),
                                                  concatMap (\path -> case path of
                                                                          p@(Path_ReportImageView__picEnlargedDeprecated _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe ImageFile))
                                                                                                                                            in Node (Peek_ReportImageView_MaybeImageFile p (if null wf
                                                                                                                                                                                             then Just w'
                                                                                                                                                                                             else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                   Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                              z -> Peek_ReportImageView_String ((Path_ReportImageView__picEnlargedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                                                                                                Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                                                                   Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                                z -> Peek_ReportImageView_JSONText ((Path_ReportImageView__picEnlargedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                                                                    Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                                                   Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                      z -> Peek_ReportImageView_MaybeImageFile ((Path_ReportImageView__picEnlargedDeprecated :: Path (Maybe ImageFile)
                                                                                                                                                                                                                                                                                                                                                                     (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                                                                                Path ReportImageView
                                                                                                                                                                                                                                                                                                                                                                     (Maybe ImageFile)) q) z) wf)) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                          _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView)]
          hop (x@(ReportImageView {})) = concat [concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picSize _) -> map (\w' -> Node (Peek_ReportImageView_SaneSizeImageSize p (Just w')) []) (toListOf (toLens p) x :: [SaneSize ImageSize])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (SaneSize ImageSize)) :: [Path_ReportImageView (SaneSize ImageSize)]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picCrop _) -> map (\w' -> Node (Peek_ReportImageView_ImageCrop p (Just w')) []) (toListOf (toLens p) x :: [ImageCrop])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy ImageCrop) :: [Path_ReportImageView ImageCrop]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picCaption _) -> map (\w' -> Node (Peek_ReportImageView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportImageView Markup]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picOriginal _) -> map (\w' -> Node (Peek_ReportImageView_MEUI p (Just w')) []) (toListOf (toLens p) x :: [Maybe (Either URI ImageFile)])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (Maybe (Either URI ImageFile))) :: [Path_ReportImageView (Maybe (Either URI ImageFile))]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picEditedDeprecated _) -> map (\w' -> Node (Peek_ReportImageView_MaybeImageFile p (Just w')) []) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picThumbDeprecated _) -> map (\w' -> Node (Peek_ReportImageView_MaybeImageFile p (Just w')) []) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picPrinterDeprecated _) -> map (\w' -> Node (Peek_ReportImageView_MaybeImageFile p (Just w')) []) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picMustEnlarge _) -> map (\w' -> Node (Peek_ReportImageView_Bool p (Just w')) []) (toListOf (toLens p) x :: [Bool])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportImageView Bool]) :: Forest (Peek ReportImageView),
                                                 concatMap (\path -> case path of
                                                                         p@(Path_ReportImageView__picEnlargedDeprecated _) -> map (\w' -> Node (Peek_ReportImageView_MaybeImageFile p (Just w')) []) (toListOf (toLens p) x :: [Maybe ImageFile])
                                                                         _ -> []) (pathsOf x (undefined :: Proxy (Maybe ImageFile)) :: [Path_ReportImageView (Maybe ImageFile)]) :: Forest (Peek ReportImageView)]
instance IsPathStart ReportView
    where data Peek ReportView
              = Peek_ReportView_String (Path ReportView ([Char])) (Maybe ([Char]))
              | Peek_ReportView_Int64 (Path ReportView Int64) (Maybe Int64)
              | Peek_ReportView_Int (Path ReportView Int) (Maybe Int)
              | Peek_ReportView_Bool (Path ReportView Bool) (Maybe Bool)
              | Peek_ReportView_Double (Path ReportView Double) (Maybe Double)
              | Peek_ReportView_Dimension (Path ReportView Dimension) (Maybe Dimension)
              | Peek_ReportView_ImageCrop (Path ReportView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportView_ImageSize (Path ReportView ImageSize) (Maybe ImageSize)
              | Peek_ReportView_Units (Path ReportView Units) (Maybe Units)
              | Peek_ReportView_ImageFile (Path ReportView ImageFile) (Maybe ImageFile)
              | Peek_ReportView_Integer (Path ReportView Integer) (Maybe Integer)
              | Peek_ReportView_JSONText (Path ReportView JSONText) (Maybe JSONText)
              | Peek_ReportView_Markup (Path ReportView Markup) (Maybe Markup)
              | Peek_ReportView_Permissions (Path ReportView Permissions) (Maybe Permissions)
              | Peek_ReportView_UserIds (Path ReportView ([UserId])) (Maybe ([UserId]))
              | Peek_ReportView_AbbrevPair (Path ReportView ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_ReportView_AbbrevPairs (Path ReportView (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_ReportView_Author (Path ReportView Author) (Maybe Author)
              | Peek_ReportView_Authors (Path ReportView (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_ReportView_Branding (Path ReportView Branding) (Maybe Branding)
              | Peek_ReportView_MarkupPair (Path ReportView ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_ReportView_MarkupPairs (Path ReportView (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_ReportView_Markups (Path ReportView (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_ReportView_MaybeReportIntendedUse (Path ReportView (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_ReportView_ReportElem (Path ReportView ReportElem) (Maybe ReportElem)
              | Peek_ReportView_ReportElems (Path ReportView (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_ReportView_ReportFlags (Path ReportView ReportFlags) (Maybe ReportFlags)
              | Peek_ReportView_ReportStandard (Path ReportView ReportStandard) (Maybe ReportStandard)
              | Peek_ReportView_ReportStatus (Path ReportView ReportStatus) (Maybe ReportStatus)
              | Peek_ReportView_ReportValueApproachInfo (Path ReportView ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportView_ReportValueTypeInfo (Path ReportView ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportView_EUI (Path ReportView (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportView_MEUI (Path ReportView (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportView_MaybeImageFile (Path ReportView (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportView_ReportImage (Path ReportView ReportImage) (Maybe ReportImage)
              | Peek_ReportView_ReportImages (Path ReportView (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportView_ReadOnlyFilePath (Path ReportView (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_ReportView_ReportImageView (Path ReportView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportView_ReportView (Path ReportView ReportView) (Maybe ReportView)
              | Peek_ReportView_SaneSizeImageSize (Path ReportView (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportView_Item (Path ReportView Item) (Maybe Item)
              | Peek_ReportView_MIM (Path ReportView (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportView_CIString (Path ReportView CIString) (Maybe CIString)
              | Peek_ReportView_URI (Path ReportView URI) (Maybe URI)
              | Peek_ReportView_Text (Path ReportView Text) (Maybe Text)
              | Peek_ReportView_UserId (Path ReportView UserId) (Maybe UserId)
              | Peek_ReportView_UUID (Path ReportView UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek (x@(ReportView {})) = concat [concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportFolder _) -> map (\w' -> let wf = peek w' :: Forest (Peek (ReadOnly ([Char])))
                                                                                                                         in Node (Peek_ReportView_ReadOnlyFilePath p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                    Peek_ReadOnlyFilePath_String q
                                                                                                                                                                                                                                                                 z -> Peek_ReportView_String ((Path_ReportView__reportFolder :: Path (ReadOnly ([Char]))
                                                                                                                                                                                                                                                                                                                                     ([Char]) ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     ([Char])) q) z
                                                                                                                                                                                                                                    Peek_ReadOnlyFilePath_JSONText q
                                                                                                                                                                                                                                                                   z -> Peek_ReportView_JSONText ((Path_ReportView__reportFolder :: Path (ReadOnly ([Char]))
                                                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                                                    Peek_ReadOnlyFilePath_ReadOnlyFilePath q
                                                                                                                                                                                                                                                                           z -> Peek_ReportView_ReadOnlyFilePath ((Path_ReportView__reportFolder :: Path (ReadOnly ([Char]))
                                                                                                                                                                                                                                                                                                                                                         (ReadOnly ([Char])) ->
                                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                                         (ReadOnly ([Char]))) q) z) wf)) (toListOf (toLens p) x :: [ReadOnly ([Char])])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (ReadOnly ([Char]))) :: [Path_ReportView (ReadOnly ([Char]))]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                       in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                        Peek_Markup_JSONText q
                                                                                                                                                                                                                                             z -> Peek_ReportView_JSONText ((Path_ReportView__reportName :: Path Markup
                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                        Peek_Markup_Markup q
                                                                                                                                                                                                                                           z -> Peek_ReportView_Markup ((Path_ReportView__reportName :: Path Markup
                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                        Peek_Markup_Text q
                                                                                                                                                                                                                                         z -> Peek_ReportView_Text ((Path_ReportView__reportName :: Path Markup
                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportDate _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                       in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                        Peek_Markup_JSONText q
                                                                                                                                                                                                                                             z -> Peek_ReportView_JSONText ((Path_ReportView__reportDate :: Path Markup
                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                        Peek_Markup_Markup q
                                                                                                                                                                                                                                           z -> Peek_ReportView_Markup ((Path_ReportView__reportDate :: Path Markup
                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                        Peek_Markup_Text q
                                                                                                                                                                                                                                         z -> Peek_ReportView_Text ((Path_ReportView__reportDate :: Path Markup
                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportContractDate _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                               in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                Peek_Markup_JSONText q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_JSONText ((Path_ReportView__reportContractDate :: Path Markup
                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                                Peek_Markup_Markup q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Markup ((Path_ReportView__reportContractDate :: Path Markup
                                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                                Peek_Markup_Text q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Text ((Path_ReportView__reportContractDate :: Path Markup
                                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportInspectionDate _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                 in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                  Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_JSONText ((Path_ReportView__reportInspectionDate :: Path Markup
                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                  Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Markup ((Path_ReportView__reportInspectionDate :: Path Markup
                                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                                  Peek_Markup_Text q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Text ((Path_ReportView__reportInspectionDate :: Path Markup
                                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportEffectiveDate _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_JSONText ((Path_ReportView__reportEffectiveDate :: Path Markup
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                 Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Markup ((Path_ReportView__reportEffectiveDate :: Path Markup
                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                 Peek_Markup_Text q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Text ((Path_ReportView__reportEffectiveDate :: Path Markup
                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportAuthors _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order AuthorID Author))
                                                                                                                          in Node (Peek_ReportView_Authors p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                            Peek_Authors_JSONText q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_JSONText ((Path_ReportView__reportAuthors :: Path (Order AuthorID
                                                                                                                                                                                                                                                                                                                                Author)
                                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                                            Peek_Authors_Markup q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Markup ((Path_ReportView__reportAuthors :: Path (Order AuthorID
                                                                                                                                                                                                                                                                                                                            Author)
                                                                                                                                                                                                                                                                                                                     Markup ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Markup) q) z
                                                                                                                                                                                                                            Peek_Authors_Author q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Author ((Path_ReportView__reportAuthors :: Path (Order AuthorID
                                                                                                                                                                                                                                                                                                                            Author)
                                                                                                                                                                                                                                                                                                                     Author ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Author) q) z
                                                                                                                                                                                                                            Peek_Authors_Authors q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Authors ((Path_ReportView__reportAuthors :: Path (Order AuthorID
                                                                                                                                                                                                                                                                                                                              Author)
                                                                                                                                                                                                                                                                                                                       (Order AuthorID
                                                                                                                                                                                                                                                                                                                              Author) ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       (Order AuthorID
                                                                                                                                                                                                                                                                                                                              Author)) q) z
                                                                                                                                                                                                                            Peek_Authors_Text q
                                                                                                                                                                                                                                              z -> Peek_ReportView_Text ((Path_ReportView__reportAuthors :: Path (Order AuthorID
                                                                                                                                                                                                                                                                                                                        Author)
                                                                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 Text) q) z) wf)) (toListOf (toLens p) x :: [Order AuthorID
                                                                                                                                                                                                                                                                                                                                                                   Author])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order AuthorID Author)) :: [Path_ReportView (Order AuthorID Author)]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPreparer _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                           in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                            Peek_Markup_JSONText q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_JSONText ((Path_ReportView__reportPreparer :: Path Markup
                                                                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                                            Peek_Markup_Markup q
                                                                                                                                                                                                                                               z -> Peek_ReportView_Markup ((Path_ReportView__reportPreparer :: Path Markup
                                                                                                                                                                                                                                                                                                                     Markup ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Markup) q) z
                                                                                                                                                                                                                            Peek_Markup_Text q
                                                                                                                                                                                                                                             z -> Peek_ReportView_Text ((Path_ReportView__reportPreparer :: Path Markup
                                                                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPreparerEIN _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                              in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                               Peek_Markup_JSONText q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_JSONText ((Path_ReportView__reportPreparerEIN :: Path Markup
                                                                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                                                               Peek_Markup_Markup q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Markup ((Path_ReportView__reportPreparerEIN :: Path Markup
                                                                                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                                                               Peek_Markup_Text q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Text ((Path_ReportView__reportPreparerEIN :: Path Markup
                                                                                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPreparerAddress _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                  in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                   Peek_Markup_JSONText q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_JSONText ((Path_ReportView__reportPreparerAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                                                   Peek_Markup_Markup q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_Markup ((Path_ReportView__reportPreparerAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                                                                   Peek_Markup_Text q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Text ((Path_ReportView__reportPreparerAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPreparerEMail _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_JSONText ((Path_ReportView__reportPreparerEMail :: Path Markup
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                 Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Markup ((Path_ReportView__reportPreparerEMail :: Path Markup
                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                 Peek_Markup_Text q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Text ((Path_ReportView__reportPreparerEMail :: Path Markup
                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPreparerWebsite _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                  in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                   Peek_Markup_JSONText q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_JSONText ((Path_ReportView__reportPreparerWebsite :: Path Markup
                                                                                                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       JSONText) q) z
                                                                                                                                                                                                                                   Peek_Markup_Markup q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_Markup ((Path_ReportView__reportPreparerWebsite :: Path Markup
                                                                                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   Markup) q) z
                                                                                                                                                                                                                                   Peek_Markup_Text q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Text ((Path_ReportView__reportPreparerWebsite :: Path Markup
                                                                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportAbbrevs _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order AbbrevPairID ((CIString, Markup))))
                                                                                                                          in Node (Peek_ReportView_AbbrevPairs p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                Peek_AbbrevPairs_JSONText q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_JSONText ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                        ((CIString,
                                                                                                                                                                                                                                                                                                                                          Markup)))
                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                                Peek_AbbrevPairs_Markup q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_Markup ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                    ((CIString,
                                                                                                                                                                                                                                                                                                                                      Markup)))
                                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                                Peek_AbbrevPairs_AbbrevPair q
                                                                                                                                                                                                                                                            z -> Peek_ReportView_AbbrevPair ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                            ((CIString,
                                                                                                                                                                                                                                                                                                                                              Markup)))
                                                                                                                                                                                                                                                                                                                                     ((CIString,
                                                                                                                                                                                                                                                                                                                                       Markup)) ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     ((CIString,
                                                                                                                                                                                                                                                                                                                                       Markup))) q) z
                                                                                                                                                                                                                                Peek_AbbrevPairs_AbbrevPairs q
                                                                                                                                                                                                                                                             z -> Peek_ReportView_AbbrevPairs ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                              ((CIString,
                                                                                                                                                                                                                                                                                                                                                Markup)))
                                                                                                                                                                                                                                                                                                                                       (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                              ((CIString,
                                                                                                                                                                                                                                                                                                                                                Markup))) ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                              ((CIString,
                                                                                                                                                                                                                                                                                                                                                Markup)))) q) z
                                                                                                                                                                                                                                Peek_AbbrevPairs_CIString q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_CIString ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                        ((CIString,
                                                                                                                                                                                                                                                                                                                                          Markup)))
                                                                                                                                                                                                                                                                                                                                 CIString ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 CIString) q) z
                                                                                                                                                                                                                                Peek_AbbrevPairs_Text q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_Text ((Path_ReportView__reportAbbrevs :: Path (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                ((CIString,
                                                                                                                                                                                                                                                                                                                                  Markup)))
                                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                                                                           ((CIString,
                                                                                                                                                                                                                                                                                                                                                                             Markup))])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order AbbrevPairID ((CIString, Markup)))) :: [Path_ReportView (Order AbbrevPairID
                                                                                                                                                                                   ((CIString, Markup)))]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportTitle _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                        in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                         Peek_Markup_JSONText q
                                                                                                                                                                                                                                              z -> Peek_ReportView_JSONText ((Path_ReportView__reportTitle :: Path Markup
                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                         Peek_Markup_Markup q
                                                                                                                                                                                                                                            z -> Peek_ReportView_Markup ((Path_ReportView__reportTitle :: Path Markup
                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                         Peek_Markup_Text q
                                                                                                                                                                                                                                          z -> Peek_ReportView_Text ((Path_ReportView__reportTitle :: Path Markup
                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportHeader _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                         in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                          Peek_Markup_JSONText q
                                                                                                                                                                                                                                               z -> Peek_ReportView_JSONText ((Path_ReportView__reportHeader :: Path Markup
                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                          Peek_Markup_Markup q
                                                                                                                                                                                                                                             z -> Peek_ReportView_Markup ((Path_ReportView__reportHeader :: Path Markup
                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                          Peek_Markup_Text q
                                                                                                                                                                                                                                           z -> Peek_ReportView_Text ((Path_ReportView__reportHeader :: Path Markup
                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportFooter _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                         in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                          Peek_Markup_JSONText q
                                                                                                                                                                                                                                               z -> Peek_ReportView_JSONText ((Path_ReportView__reportFooter :: Path Markup
                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                          Peek_Markup_Markup q
                                                                                                                                                                                                                                             z -> Peek_ReportView_Markup ((Path_ReportView__reportFooter :: Path Markup
                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                          Peek_Markup_Text q
                                                                                                                                                                                                                                           z -> Peek_ReportView_Text ((Path_ReportView__reportFooter :: Path Markup
                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportIntendedUse _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Maybe ReportIntendedUse))
                                                                                                                              in Node (Peek_ReportView_MaybeReportIntendedUse p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_String q
                                                                                                                                                                                                                                                                                  z -> Peek_ReportView_String ((Path_ReportView__reportIntendedUse :: Path (Maybe ReportIntendedUse)
                                                                                                                                                                                                                                                                                                                                                           ([Char]) ->
                                                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                                                           ([Char])) q) z
                                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_JSONText q
                                                                                                                                                                                                                                                                                    z -> Peek_ReportView_JSONText ((Path_ReportView__reportIntendedUse :: Path (Maybe ReportIntendedUse)
                                                                                                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_MaybeReportIntendedUse q
                                                                                                                                                                                                                                                                                                  z -> Peek_ReportView_MaybeReportIntendedUse ((Path_ReportView__reportIntendedUse :: Path (Maybe ReportIntendedUse)
                                                                                                                                                                                                                                                                                                                                                                                           (Maybe ReportIntendedUse) ->
                                                                                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                                                                                           (Maybe ReportIntendedUse)) q) z) wf)) (toListOf (toLens p) x :: [Maybe ReportIntendedUse])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Maybe ReportIntendedUse)) :: [Path_ReportView (Maybe ReportIntendedUse)]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportValueTypeInfo _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportValueTypeInfo)
                                                                                                                                in Node (Peek_ReportView_ReportValueTypeInfo p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                              Peek_ReportValueTypeInfo_JSONText q
                                                                                                                                                                                                                                                                                z -> Peek_ReportView_JSONText ((Path_ReportView__reportValueTypeInfo :: Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                                              Peek_ReportValueTypeInfo_Markup q
                                                                                                                                                                                                                                                                              z -> Peek_ReportView_Markup ((Path_ReportView__reportValueTypeInfo :: Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                                                                              Peek_ReportValueTypeInfo_ReportValueTypeInfo q
                                                                                                                                                                                                                                                                                           z -> Peek_ReportView_ReportValueTypeInfo ((Path_ReportView__reportValueTypeInfo :: Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                                   ReportValueTypeInfo ->
                                                                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                                                                   ReportValueTypeInfo) q) z
                                                                                                                                                                                                                                              Peek_ReportValueTypeInfo_Text q
                                                                                                                                                                                                                                                                            z -> Peek_ReportView_Text ((Path_ReportView__reportValueTypeInfo :: Path ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [ReportValueTypeInfo])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ReportValueTypeInfo) :: [Path_ReportView ReportValueTypeInfo]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportValueApproachInfo _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportValueApproachInfo)
                                                                                                                                    in Node (Peek_ReportView_ReportValueApproachInfo p (if null wf
                                                                                                                                                                                         then Just w'
                                                                                                                                                                                         else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                               Peek_ReportValueApproachInfo_JSONText q
                                                                                                                                                                                                                                                                     z -> Peek_ReportView_JSONText ((Path_ReportView__reportValueApproachInfo :: Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                                                                                                                                 Path ReportView
                                                                                                                                                                                                                                                                                                                                                      JSONText) q) z
                                                                                                                                                                                                                               Peek_ReportValueApproachInfo_Markup q
                                                                                                                                                                                                                                                                   z -> Peek_ReportView_Markup ((Path_ReportView__reportValueApproachInfo :: Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                  Markup ->
                                                                                                                                                                                                                                                                                                                                             Path ReportView
                                                                                                                                                                                                                                                                                                                                                  Markup) q) z
                                                                                                                                                                                                                               Peek_ReportValueApproachInfo_ReportValueApproachInfo q
                                                                                                                                                                                                                                                                                    z -> Peek_ReportView_ReportValueApproachInfo ((Path_ReportView__reportValueApproachInfo :: Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                    ReportValueApproachInfo ->
                                                                                                                                                                                                                                                                                                                                                                               Path ReportView
                                                                                                                                                                                                                                                                                                                                                                                    ReportValueApproachInfo) q) z
                                                                                                                                                                                                                               Peek_ReportValueApproachInfo_Text q
                                                                                                                                                                                                                                                                 z -> Peek_ReportView_Text ((Path_ReportView__reportValueApproachInfo :: Path ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                              Text ->
                                                                                                                                                                                                                                                                                                                                         Path ReportView
                                                                                                                                                                                                                                                                                                                                              Text) q) z) wf)) (toListOf (toLens p) x :: [ReportValueApproachInfo])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ReportValueApproachInfo) :: [Path_ReportView ReportValueApproachInfo]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportClientName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                             in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_JSONText ((Path_ReportView__reportClientName :: Path Markup
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Markup ((Path_ReportView__reportClientName :: Path Markup
                                                                                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                                                              Peek_Markup_Text q
                                                                                                                                                                                                                                               z -> Peek_ReportView_Text ((Path_ReportView__reportClientName :: Path Markup
                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportClientAddress _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_JSONText ((Path_ReportView__reportClientAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                 Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Markup ((Path_ReportView__reportClientAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                 Peek_Markup_Text q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Text ((Path_ReportView__reportClientAddress :: Path Markup
                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportClientGreeting _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                 in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                  Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_JSONText ((Path_ReportView__reportClientGreeting :: Path Markup
                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                  Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Markup ((Path_ReportView__reportClientGreeting :: Path Markup
                                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                                  Peek_Markup_Text q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Text ((Path_ReportView__reportClientGreeting :: Path Markup
                                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportItemsOwnerFull _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                 in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                  Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_JSONText ((Path_ReportView__reportItemsOwnerFull :: Path Markup
                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                  Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Markup ((Path_ReportView__reportItemsOwnerFull :: Path Markup
                                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                                  Peek_Markup_Text q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Text ((Path_ReportView__reportItemsOwnerFull :: Path Markup
                                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportItemsOwner _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                             in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_JSONText ((Path_ReportView__reportItemsOwner :: Path Markup
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Markup ((Path_ReportView__reportItemsOwner :: Path Markup
                                                                                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                                                              Peek_Markup_Text q
                                                                                                                                                                                                                                               z -> Peek_ReportView_Text ((Path_ReportView__reportItemsOwner :: Path Markup
                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportBriefItems _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                             in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_JSONText ((Path_ReportView__reportBriefItems :: Path Markup
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Markup ((Path_ReportView__reportBriefItems :: Path Markup
                                                                                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                                                              Peek_Markup_Text q
                                                                                                                                                                                                                                               z -> Peek_ReportView_Text ((Path_ReportView__reportBriefItems :: Path Markup
                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportInspectionLocation _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                     in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                      Peek_Markup_JSONText q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_JSONText ((Path_ReportView__reportInspectionLocation :: Path Markup
                                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                                      Peek_Markup_Markup q
                                                                                                                                                                                                                                                         z -> Peek_ReportView_Markup ((Path_ReportView__reportInspectionLocation :: Path Markup
                                                                                                                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                         Markup) q) z
                                                                                                                                                                                                                                      Peek_Markup_Text q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_Text ((Path_ReportView__reportInspectionLocation :: Path Markup
                                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportBody _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order ReportElemID ReportElem))
                                                                                                                       in Node (Peek_ReportView_ReportElems p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                             Peek_ReportElems_String q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_String ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                                                                       ([Char]) ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       ([Char])) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Bool q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Bool ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                                                   Bool ->
                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                   Bool) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Double q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Double ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                                                                       Double ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       Double) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Dimension q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_Dimension ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                                                                             Dimension ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Dimension) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ImageCrop q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_ImageCrop ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                                                                             ImageCrop ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             ImageCrop) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ImageSize q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_ImageSize ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                                                                             ImageSize ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             ImageSize) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Units q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Units ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                            ReportElem)
                                                                                                                                                                                                                                                                                                                     Units ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Units) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ImageFile q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_ImageFile ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                                                                             ImageFile ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             ImageFile) q) z
                                                                                                                                                                                                                             Peek_ReportElems_JSONText q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_JSONText ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                  ReportElem)
                                                                                                                                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           JSONText) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Markup q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Markup ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                                                                       Markup ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       Markup) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ReportElem q
                                                                                                                                                                                                                                                         z -> Peek_ReportView_ReportElem ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                      ReportElem)
                                                                                                                                                                                                                                                                                                                               ReportElem ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               ReportElem) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ReportElems q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_ReportElems ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                                                                 (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                        ReportElem) ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                        ReportElem)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_EUI q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_EUI ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                                                 (Either URI
                                                                                                                                                                                                                                                                                                                         ImageFile) ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 (Either URI
                                                                                                                                                                                                                                                                                                                         ImageFile)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_MEUI q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_MEUI ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                                                   (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                  ImageFile)) ->
                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                   (Maybe (Either URI
                                                                                                                                                                                                                                                                                                                                  ImageFile))) q) z
                                                                                                                                                                                                                             Peek_ReportElems_MaybeImageFile q
                                                                                                                                                                                                                                                             z -> Peek_ReportView_MaybeImageFile ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                              ReportElem)
                                                                                                                                                                                                                                                                                                                                       (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       (Maybe ImageFile)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ReportImage q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_ReportImage ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                                                                 ReportImage ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 ReportImage) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ReportImages q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_ReportImages ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                                                                   (Order ReportImageID
                                                                                                                                                                                                                                                                                                                                          ReportImage) ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   (Order ReportImageID
                                                                                                                                                                                                                                                                                                                                          ReportImage)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_ReportImageView q
                                                                                                                                                                                                                                                              z -> Peek_ReportView_ReportImageView ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                                ReportElem)
                                                                                                                                                                                                                                                                                                                                         ReportImageView ->
                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                         ReportImageView) q) z
                                                                                                                                                                                                                             Peek_ReportElems_SaneSizeImageSize q
                                                                                                                                                                                                                                                                z -> Peek_ReportView_SaneSizeImageSize ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                                                    ReportElem)
                                                                                                                                                                                                                                                                                                                                             (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                                             (SaneSize ImageSize)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Item q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Item ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                                                   Item ->
                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                   Item) q) z
                                                                                                                                                                                                                             Peek_ReportElems_MIM q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_MIM ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                                                 (Map ItemFieldName
                                                                                                                                                                                                                                                                                                                      Markup) ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 (Map ItemFieldName
                                                                                                                                                                                                                                                                                                                      Markup)) q) z
                                                                                                                                                                                                                             Peek_ReportElems_URI q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_URI ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                        ReportElem)
                                                                                                                                                                                                                                                                                                                 URI ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 URI) q) z
                                                                                                                                                                                                                             Peek_ReportElems_Text q
                                                                                                                                                                                                                                                   z -> Peek_ReportView_Text ((Path_ReportView__reportBody :: Path (Order ReportElemID
                                                                                                                                                                                                                                                                                                                          ReportElem)
                                                                                                                                                                                                                                                                                                                   Text ->
                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                   Text) q) z) wf)) (toListOf (toLens p) x :: [Order ReportElemID
                                                                                                                                                                                                                                                                                                                                                                     ReportElem])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order ReportElemID ReportElem)) :: [Path_ReportView (Order ReportElemID ReportElem)]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportGlossary _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))
                                                                                                                           in Node (Peek_ReportView_MarkupPairs p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_MarkupPairs_JSONText q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_JSONText ((Path_ReportView__reportGlossary :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                          ((Markup,
                                                                                                                                                                                                                                                                                                                                            Markup)))
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                 Peek_MarkupPairs_Markup q
                                                                                                                                                                                                                                                         z -> Peek_ReportView_Markup ((Path_ReportView__reportGlossary :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                      ((Markup,
                                                                                                                                                                                                                                                                                                                                        Markup)))
                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                 Peek_MarkupPairs_MarkupPair q
                                                                                                                                                                                                                                                             z -> Peek_ReportView_MarkupPair ((Path_ReportView__reportGlossary :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                                                                                                Markup)))
                                                                                                                                                                                                                                                                                                                                       ((Markup,
                                                                                                                                                                                                                                                                                                                                         Markup)) ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       ((Markup,
                                                                                                                                                                                                                                                                                                                                         Markup))) q) z
                                                                                                                                                                                                                                 Peek_MarkupPairs_MarkupPairs q
                                                                                                                                                                                                                                                              z -> Peek_ReportView_MarkupPairs ((Path_ReportView__reportGlossary :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                                ((Markup,
                                                                                                                                                                                                                                                                                                                                                  Markup)))
                                                                                                                                                                                                                                                                                                                                         (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                                ((Markup,
                                                                                                                                                                                                                                                                                                                                                  Markup))) ->
                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                         (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                                ((Markup,
                                                                                                                                                                                                                                                                                                                                                  Markup)))) q) z
                                                                                                                                                                                                                                 Peek_MarkupPairs_Text q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_Text ((Path_ReportView__reportGlossary :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                  ((Markup,
                                                                                                                                                                                                                                                                                                                                    Markup)))
                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                                                             ((Markup,
                                                                                                                                                                                                                                                                                                                                                                               Markup))])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupPairID ((Markup, Markup)))) :: [Path_ReportView (Order MarkupPairID
                                                                                                                                                                                 ((Markup, Markup)))]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportSources _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))
                                                                                                                          in Node (Peek_ReportView_MarkupPairs p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                Peek_MarkupPairs_JSONText q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_JSONText ((Path_ReportView__reportSources :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                        ((Markup,
                                                                                                                                                                                                                                                                                                                                          Markup)))
                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                                Peek_MarkupPairs_Markup q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_Markup ((Path_ReportView__reportSources :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                    ((Markup,
                                                                                                                                                                                                                                                                                                                                      Markup)))
                                                                                                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Markup) q) z
                                                                                                                                                                                                                                Peek_MarkupPairs_MarkupPair q
                                                                                                                                                                                                                                                            z -> Peek_ReportView_MarkupPair ((Path_ReportView__reportSources :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                            ((Markup,
                                                                                                                                                                                                                                                                                                                                              Markup)))
                                                                                                                                                                                                                                                                                                                                     ((Markup,
                                                                                                                                                                                                                                                                                                                                       Markup)) ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     ((Markup,
                                                                                                                                                                                                                                                                                                                                       Markup))) q) z
                                                                                                                                                                                                                                Peek_MarkupPairs_MarkupPairs q
                                                                                                                                                                                                                                                             z -> Peek_ReportView_MarkupPairs ((Path_ReportView__reportSources :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                                                                                                Markup)))
                                                                                                                                                                                                                                                                                                                                       (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                                                                                                Markup))) ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                              ((Markup,
                                                                                                                                                                                                                                                                                                                                                Markup)))) q) z
                                                                                                                                                                                                                                Peek_MarkupPairs_Text q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_Text ((Path_ReportView__reportSources :: Path (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                ((Markup,
                                                                                                                                                                                                                                                                                                                                  Markup)))
                                                                                                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Text) q) z) wf)) (toListOf (toLens p) x :: [Order MarkupPairID
                                                                                                                                                                                                                                                                                                                                                                           ((Markup,
                                                                                                                                                                                                                                                                                                                                                                             Markup))])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupPairID ((Markup, Markup)))) :: [Path_ReportView (Order MarkupPairID
                                                                                                                                                                                 ((Markup, Markup)))]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportLetterOfTransmittal _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                      in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                       Peek_Markup_JSONText q
                                                                                                                                                                                                                                                            z -> Peek_ReportView_JSONText ((Path_ReportView__reportLetterOfTransmittal :: Path Markup
                                                                                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                                                                       Peek_Markup_Markup q
                                                                                                                                                                                                                                                          z -> Peek_ReportView_Markup ((Path_ReportView__reportLetterOfTransmittal :: Path Markup
                                                                                                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                                                                       Peek_Markup_Text q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_Text ((Path_ReportView__reportLetterOfTransmittal :: Path Markup
                                                                                                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportScopeOfWork _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                              in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                               Peek_Markup_JSONText q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_JSONText ((Path_ReportView__reportScopeOfWork :: Path Markup
                                                                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                                                               Peek_Markup_Markup q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Markup ((Path_ReportView__reportScopeOfWork :: Path Markup
                                                                                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                                                               Peek_Markup_Text q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Text ((Path_ReportView__reportScopeOfWork :: Path Markup
                                                                                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportCertification _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order MarkupID Markup))
                                                                                                                                in Node (Peek_ReportView_Markups p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                  Peek_Markups_JSONText q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_JSONText ((Path_ReportView__reportCertification :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                            Markup)
                                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                                                  Peek_Markups_Markup q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_Markup ((Path_ReportView__reportCertification :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                        Markup)
                                                                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                                                  Peek_Markups_Markups q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_Markups ((Path_ReportView__reportCertification :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                          Markup)
                                                                                                                                                                                                                                                                                                                                   (Order MarkupID
                                                                                                                                                                                                                                                                                                                                          Markup) ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   (Order MarkupID
                                                                                                                                                                                                                                                                                                                                          Markup)) q) z
                                                                                                                                                                                                                                  Peek_Markups_Text q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Text ((Path_ReportView__reportCertification :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                    Markup)
                                                                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Order MarkupID
                                                                                                                                                                                                                                                                                                                                                                               Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupID Markup)) :: [Path_ReportView (Order MarkupID Markup)]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportLimitingConditions _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order MarkupID Markup))
                                                                                                                                     in Node (Peek_ReportView_Markups p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                       Peek_Markups_JSONText q
                                                                                                                                                                                                                                                             z -> Peek_ReportView_JSONText ((Path_ReportView__reportLimitingConditions :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                                      Markup)
                                                                                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                                               JSONText) q) z
                                                                                                                                                                                                                                       Peek_Markups_Markup q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_Markup ((Path_ReportView__reportLimitingConditions :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                                  Markup)
                                                                                                                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                                           Markup) q) z
                                                                                                                                                                                                                                       Peek_Markups_Markups q
                                                                                                                                                                                                                                                            z -> Peek_ReportView_Markups ((Path_ReportView__reportLimitingConditions :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                                    Markup)
                                                                                                                                                                                                                                                                                                                                             (Order MarkupID
                                                                                                                                                                                                                                                                                                                                                    Markup) ->
                                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                                             (Order MarkupID
                                                                                                                                                                                                                                                                                                                                                    Markup)) q) z
                                                                                                                                                                                                                                       Peek_Markups_Text q
                                                                                                                                                                                                                                                         z -> Peek_ReportView_Text ((Path_ReportView__reportLimitingConditions :: Path (Order MarkupID
                                                                                                                                                                                                                                                                                                                                              Markup)
                                                                                                                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                                                                                                                  Path ReportView
                                                                                                                                                                                                                                                                                                                                       Text) q) z) wf)) (toListOf (toLens p) x :: [Order MarkupID
                                                                                                                                                                                                                                                                                                                                                                                         Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupID Markup)) :: [Path_ReportView (Order MarkupID Markup)]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPrivacyPolicy _) -> map (\w' -> let wf = peek w' :: Forest (Peek Markup)
                                                                                                                                in Node (Peek_ReportView_Markup p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_JSONText ((Path_ReportView__reportPrivacyPolicy :: Path Markup
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                                                                 Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Markup ((Path_ReportView__reportPrivacyPolicy :: Path Markup
                                                                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                                                                 Peek_Markup_Text q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Text ((Path_ReportView__reportPrivacyPolicy :: Path Markup
                                                                                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Markup])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportPerms _) -> map (\w' -> let wf = peek w' :: Forest (Peek Permissions)
                                                                                                                        in Node (Peek_ReportView_Permissions p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_Permissions_JSONText q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_JSONText ((Path_ReportView__reportPerms :: Path Permissions
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_Permissions_Permissions q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_Permissions ((Path_ReportView__reportPerms :: Path Permissions
                                                                                                                                                                                                                                                                                                                                   Permissions ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   Permissions) q) z
                                                                                                                                                                                                                              Peek_Permissions_UserIds q
                                                                                                                                                                                                                                                       z -> Peek_ReportView_UserIds ((Path_ReportView__reportPerms :: Path Permissions
                                                                                                                                                                                                                                                                                                                           ([UserId]) ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           ([UserId])) q) z
                                                                                                                                                                                                                              Peek_Permissions_Text q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Text ((Path_ReportView__reportPerms :: Path Permissions
                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Text) q) z
                                                                                                                                                                                                                              Peek_Permissions_UserId q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_UserId ((Path_ReportView__reportPerms :: Path Permissions
                                                                                                                                                                                                                                                                                                                         UserId ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         UserId) q) z) wf)) (toListOf (toLens p) x :: [Permissions])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Permissions) :: [Path_ReportView Permissions]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportRevision _) -> map (\w' -> let wf = peek w' :: Forest (Peek Integer)
                                                                                                                           in Node (Peek_ReportView_Integer p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                             Peek_Integer_Integer q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_Integer ((Path_ReportView__reportRevision :: Path Integer
                                                                                                                                                                                                                                                                                                                         Integer ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         Integer) q) z) wf)) (toListOf (toLens p) x :: [Integer])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Integer) :: [Path_ReportView Integer]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportCreated _) -> map (\w' -> let wf = peek w' :: Forest (Peek Int64)
                                                                                                                          in Node (Peek_ReportView_Int64 p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                          Peek_Int64_Int64 q
                                                                                                                                                                                                                                           z -> Peek_ReportView_Int64 ((Path_ReportView__reportCreated :: Path Int64
                                                                                                                                                                                                                                                                                                               Int64 ->
                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                               Int64) q) z) wf)) (toListOf (toLens p) x :: [Int64])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Int64) :: [Path_ReportView Int64]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportBranding _) -> map (\w' -> let wf = peek w' :: Forest (Peek Branding)
                                                                                                                           in Node (Peek_ReportView_Branding p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_Branding_JSONText q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_JSONText ((Path_ReportView__reportBranding :: Path Branding
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_Branding_Branding q
                                                                                                                                                                                                                                                     z -> Peek_ReportView_Branding ((Path_ReportView__reportBranding :: Path Branding
                                                                                                                                                                                                                                                                                                                             Branding ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             Branding) q) z
                                                                                                                                                                                                                              Peek_Branding_Text q
                                                                                                                                                                                                                                                 z -> Peek_ReportView_Text ((Path_ReportView__reportBranding :: Path Branding
                                                                                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Text) q) z) wf)) (toListOf (toLens p) x :: [Branding])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Branding) :: [Path_ReportView Branding]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportStatus _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportStatus)
                                                                                                                         in Node (Peek_ReportView_ReportStatus p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                Peek_ReportStatus_String q
                                                                                                                                                                                                                                                         z -> Peek_ReportView_String ((Path_ReportView__reportStatus :: Path ReportStatus
                                                                                                                                                                                                                                                                                                                             ([Char]) ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             ([Char])) q) z
                                                                                                                                                                                                                                Peek_ReportStatus_JSONText q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_JSONText ((Path_ReportView__reportStatus :: Path ReportStatus
                                                                                                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                                 JSONText) q) z
                                                                                                                                                                                                                                Peek_ReportStatus_ReportStatus q
                                                                                                                                                                                                                                                               z -> Peek_ReportView_ReportStatus ((Path_ReportView__reportStatus :: Path ReportStatus
                                                                                                                                                                                                                                                                                                                                         ReportStatus ->
                                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                                         ReportStatus) q) z) wf)) (toListOf (toLens p) x :: [ReportStatus])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ReportStatus) :: [Path_ReportView ReportStatus]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportRedacted _) -> map (\w' -> let wf = peek w' :: Forest (Peek Bool)
                                                                                                                           in Node (Peek_ReportView_Bool p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                          Peek_Bool_String q
                                                                                                                                                                                                                                           z -> Peek_ReportView_String ((Path_ReportView__reportRedacted :: Path Bool
                                                                                                                                                                                                                                                                                                                 ([Char]) ->
                                                                                                                                                                                                                                                                                                            Path ReportView
                                                                                                                                                                                                                                                                                                                 ([Char])) q) z
                                                                                                                                                                                                                          Peek_Bool_Bool q
                                                                                                                                                                                                                                         z -> Peek_ReportView_Bool ((Path_ReportView__reportRedacted :: Path Bool
                                                                                                                                                                                                                                                                                                             Bool ->
                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                             Bool) q) z
                                                                                                                                                                                                                          Peek_Bool_JSONText q
                                                                                                                                                                                                                                             z -> Peek_ReportView_JSONText ((Path_ReportView__reportRedacted :: Path Bool
                                                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     JSONText) q) z) wf)) (toListOf (toLens p) x :: [Bool])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportFlags _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportFlags)
                                                                                                                        in Node (Peek_ReportView_ReportFlags p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                              Peek_ReportFlags_String q
                                                                                                                                                                                                                                                      z -> Peek_ReportView_String ((Path_ReportView__reportFlags :: Path ReportFlags
                                                                                                                                                                                                                                                                                                                         ([Char]) ->
                                                                                                                                                                                                                                                                                                                    Path ReportView
                                                                                                                                                                                                                                                                                                                         ([Char])) q) z
                                                                                                                                                                                                                              Peek_ReportFlags_Bool q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_Bool ((Path_ReportView__reportFlags :: Path ReportFlags
                                                                                                                                                                                                                                                                                                                     Bool ->
                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                     Bool) q) z
                                                                                                                                                                                                                              Peek_ReportFlags_JSONText q
                                                                                                                                                                                                                                                        z -> Peek_ReportView_JSONText ((Path_ReportView__reportFlags :: Path ReportFlags
                                                                                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                                                                                        Path ReportView
                                                                                                                                                                                                                                                                                                                             JSONText) q) z
                                                                                                                                                                                                                              Peek_ReportFlags_ReportFlags q
                                                                                                                                                                                                                                                           z -> Peek_ReportView_ReportFlags ((Path_ReportView__reportFlags :: Path ReportFlags
                                                                                                                                                                                                                                                                                                                                   ReportFlags ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   ReportFlags) q) z) wf)) (toListOf (toLens p) x :: [ReportFlags])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ReportFlags) :: [Path_ReportView ReportFlags]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportUUID _) -> map (\w' -> let wf = peek w' :: Forest (Peek UUID)
                                                                                                                       in Node (Peek_ReportView_UUID p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                      Peek_UUID_UUID q
                                                                                                                                                                                                                                     z -> Peek_ReportView_UUID ((Path_ReportView__reportUUID :: Path UUID
                                                                                                                                                                                                                                                                                                     UUID ->
                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                     UUID) q) z) wf)) (toListOf (toLens p) x :: [UUID])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy UUID) :: [Path_ReportView UUID]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportOrderByItemName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Bool)
                                                                                                                                  in Node (Peek_ReportView_Bool p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Bool_String q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_String ((Path_ReportView__reportOrderByItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                               ([Char]) ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               ([Char])) q) z
                                                                                                                                                                                                                                 Peek_Bool_Bool q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Bool ((Path_ReportView__reportOrderByItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                           Bool ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Bool) q) z
                                                                                                                                                                                                                                 Peek_Bool_JSONText q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_JSONText ((Path_ReportView__reportOrderByItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z) wf)) (toListOf (toLens p) x :: [Bool])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportDisplayItemName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Bool)
                                                                                                                                  in Node (Peek_ReportView_Bool p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                 Peek_Bool_String q
                                                                                                                                                                                                                                                  z -> Peek_ReportView_String ((Path_ReportView__reportDisplayItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                               ([Char]) ->
                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                               ([Char])) q) z
                                                                                                                                                                                                                                 Peek_Bool_Bool q
                                                                                                                                                                                                                                                z -> Peek_ReportView_Bool ((Path_ReportView__reportDisplayItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                           Bool ->
                                                                                                                                                                                                                                                                                                                      Path ReportView
                                                                                                                                                                                                                                                                                                                           Bool) q) z
                                                                                                                                                                                                                                 Peek_Bool_JSONText q
                                                                                                                                                                                                                                                    z -> Peek_ReportView_JSONText ((Path_ReportView__reportDisplayItemName :: Path Bool
                                                                                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                                                                                              Path ReportView
                                                                                                                                                                                                                                                                                                                                   JSONText) q) z) wf)) (toListOf (toLens p) x :: [Bool])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                             concatMap (\path -> case path of
                                                                     p@(Path_ReportView__reportStandardsVersion _) -> map (\w' -> let wf = peek w' :: Forest (Peek ReportStandard)
                                                                                                                                   in Node (Peek_ReportView_ReportStandard p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                                            Peek_ReportStandard_Int q
                                                                                                                                                                                                                                                                    z -> Peek_ReportView_Int ((Path_ReportView__reportStandardsVersion :: Path ReportStandard
                                                                                                                                                                                                                                                                                                                                               Int ->
                                                                                                                                                                                                                                                                                                                                          Path ReportView
                                                                                                                                                                                                                                                                                                                                               Int) q) z
                                                                                                                                                                                                                                            Peek_ReportStandard_ReportStandard q
                                                                                                                                                                                                                                                                               z -> Peek_ReportView_ReportStandard ((Path_ReportView__reportStandardsVersion :: Path ReportStandard
                                                                                                                                                                                                                                                                                                                                                                     ReportStandard ->
                                                                                                                                                                                                                                                                                                                                                                Path ReportView
                                                                                                                                                                                                                                                                                                                                                                     ReportStandard) q) z) wf)) (toListOf (toLens p) x :: [ReportStandard])
                                                                     _ -> []) (pathsOf x (undefined :: Proxy ReportStandard) :: [Path_ReportView ReportStandard]) :: Forest (Peek ReportView)]
          hop (x@(ReportView {})) = concat [concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportFolder _) -> map (\w' -> Node (Peek_ReportView_ReadOnlyFilePath p (Just w')) []) (toListOf (toLens p) x :: [ReadOnly ([Char])])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (ReadOnly ([Char]))) :: [Path_ReportView (ReadOnly ([Char]))]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportName _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportDate _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportContractDate _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportInspectionDate _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportEffectiveDate _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportAuthors _) -> map (\w' -> Node (Peek_ReportView_Authors p (Just w')) []) (toListOf (toLens p) x :: [Order AuthorID Author])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order AuthorID Author)) :: [Path_ReportView (Order AuthorID Author)]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPreparer _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPreparerEIN _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPreparerAddress _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPreparerEMail _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPreparerWebsite _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportAbbrevs _) -> map (\w' -> Node (Peek_ReportView_AbbrevPairs p (Just w')) []) (toListOf (toLens p) x :: [Order AbbrevPairID
                                                                                                                                                                                                            ((CIString, Markup))])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order AbbrevPairID ((CIString, Markup)))) :: [Path_ReportView (Order AbbrevPairID
                                                                                                                                                                                  ((CIString, Markup)))]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportTitle _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportHeader _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportFooter _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportIntendedUse _) -> map (\w' -> Node (Peek_ReportView_MaybeReportIntendedUse p (Just w')) []) (toListOf (toLens p) x :: [Maybe ReportIntendedUse])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Maybe ReportIntendedUse)) :: [Path_ReportView (Maybe ReportIntendedUse)]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportValueTypeInfo _) -> map (\w' -> Node (Peek_ReportView_ReportValueTypeInfo p (Just w')) []) (toListOf (toLens p) x :: [ReportValueTypeInfo])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy ReportValueTypeInfo) :: [Path_ReportView ReportValueTypeInfo]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportValueApproachInfo _) -> map (\w' -> Node (Peek_ReportView_ReportValueApproachInfo p (Just w')) []) (toListOf (toLens p) x :: [ReportValueApproachInfo])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy ReportValueApproachInfo) :: [Path_ReportView ReportValueApproachInfo]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportClientName _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportClientAddress _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportClientGreeting _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportItemsOwnerFull _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportItemsOwner _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportBriefItems _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportInspectionLocation _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportBody _) -> map (\w' -> Node (Peek_ReportView_ReportElems p (Just w')) []) (toListOf (toLens p) x :: [Order ReportElemID ReportElem])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order ReportElemID ReportElem)) :: [Path_ReportView (Order ReportElemID ReportElem)]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportGlossary _) -> map (\w' -> Node (Peek_ReportView_MarkupPairs p (Just w')) []) (toListOf (toLens p) x :: [Order MarkupPairID
                                                                                                                                                                                                             ((Markup, Markup))])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupPairID ((Markup, Markup)))) :: [Path_ReportView (Order MarkupPairID
                                                                                                                                                                                ((Markup, Markup)))]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportSources _) -> map (\w' -> Node (Peek_ReportView_MarkupPairs p (Just w')) []) (toListOf (toLens p) x :: [Order MarkupPairID
                                                                                                                                                                                                            ((Markup, Markup))])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupPairID ((Markup, Markup)))) :: [Path_ReportView (Order MarkupPairID
                                                                                                                                                                                ((Markup, Markup)))]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportLetterOfTransmittal _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportScopeOfWork _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportCertification _) -> map (\w' -> Node (Peek_ReportView_Markups p (Just w')) []) (toListOf (toLens p) x :: [Order MarkupID Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupID Markup)) :: [Path_ReportView (Order MarkupID Markup)]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportLimitingConditions _) -> map (\w' -> Node (Peek_ReportView_Markups p (Just w')) []) (toListOf (toLens p) x :: [Order MarkupID Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Order MarkupID Markup)) :: [Path_ReportView (Order MarkupID Markup)]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPrivacyPolicy _) -> map (\w' -> Node (Peek_ReportView_Markup p (Just w')) []) (toListOf (toLens p) x :: [Markup])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Markup) :: [Path_ReportView Markup]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportPerms _) -> map (\w' -> Node (Peek_ReportView_Permissions p (Just w')) []) (toListOf (toLens p) x :: [Permissions])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Permissions) :: [Path_ReportView Permissions]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportRevision _) -> map (\w' -> Node (Peek_ReportView_Integer p (Just w')) []) (toListOf (toLens p) x :: [Integer])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Integer) :: [Path_ReportView Integer]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportCreated _) -> map (\w' -> Node (Peek_ReportView_Int64 p (Just w')) []) (toListOf (toLens p) x :: [Int64])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Int64) :: [Path_ReportView Int64]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportBranding _) -> map (\w' -> Node (Peek_ReportView_Branding p (Just w')) []) (toListOf (toLens p) x :: [Branding])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Branding) :: [Path_ReportView Branding]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportStatus _) -> map (\w' -> Node (Peek_ReportView_ReportStatus p (Just w')) []) (toListOf (toLens p) x :: [ReportStatus])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy ReportStatus) :: [Path_ReportView ReportStatus]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportRedacted _) -> map (\w' -> Node (Peek_ReportView_Bool p (Just w')) []) (toListOf (toLens p) x :: [Bool])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportFlags _) -> map (\w' -> Node (Peek_ReportView_ReportFlags p (Just w')) []) (toListOf (toLens p) x :: [ReportFlags])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy ReportFlags) :: [Path_ReportView ReportFlags]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportUUID _) -> map (\w' -> Node (Peek_ReportView_UUID p (Just w')) []) (toListOf (toLens p) x :: [UUID])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy UUID) :: [Path_ReportView UUID]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportOrderByItemName _) -> map (\w' -> Node (Peek_ReportView_Bool p (Just w')) []) (toListOf (toLens p) x :: [Bool])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportDisplayItemName _) -> map (\w' -> Node (Peek_ReportView_Bool p (Just w')) []) (toListOf (toLens p) x :: [Bool])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy Bool) :: [Path_ReportView Bool]) :: Forest (Peek ReportView),
                                            concatMap (\path -> case path of
                                                                    p@(Path_ReportView__reportStandardsVersion _) -> map (\w' -> Node (Peek_ReportView_ReportStandard p (Just w')) []) (toListOf (toLens p) x :: [ReportStandard])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy ReportStandard) :: [Path_ReportView ReportStandard]) :: Forest (Peek ReportView)]
instance IsPathStart Item
    where data Peek Item
              = Peek_Item_String (Path Item ([Char])) (Maybe ([Char]))
              | Peek_Item_Bool (Path Item Bool) (Maybe Bool)
              | Peek_Item_Double (Path Item Double) (Maybe Double)
              | Peek_Item_Dimension (Path Item Dimension) (Maybe Dimension)
              | Peek_Item_ImageCrop (Path Item ImageCrop) (Maybe ImageCrop)
              | Peek_Item_ImageSize (Path Item ImageSize) (Maybe ImageSize)
              | Peek_Item_Units (Path Item Units) (Maybe Units)
              | Peek_Item_ImageFile (Path Item ImageFile) (Maybe ImageFile)
              | Peek_Item_JSONText (Path Item JSONText) (Maybe JSONText)
              | Peek_Item_Markup (Path Item Markup) (Maybe Markup)
              | Peek_Item_EUI (Path Item (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_Item_MEUI (Path Item (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_Item_MaybeImageFile (Path Item (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_Item_ReportImage (Path Item ReportImage) (Maybe ReportImage)
              | Peek_Item_ReportImages (Path Item (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_Item_ReportImageView (Path Item ReportImageView) (Maybe ReportImageView)
              | Peek_Item_SaneSizeImageSize (Path Item (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_Item_Item (Path Item Item) (Maybe Item)
              | Peek_Item_MIM (Path Item (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_Item_URI (Path Item URI) (Maybe URI)
              | Peek_Item_Text (Path Item Text) (Maybe Text)
              deriving (Eq, Show)
          peek (x@(Item {})) = concat [concatMap (\path -> case path of
                                                               p@(Path_Item_itemName _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                                        in Node (Peek_Item_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                 Peek_Text_JSONText q
                                                                                                                                                                                                                    z -> Peek_Item_JSONText ((Path_Item_itemName :: Path Text
                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                    Path Item
                                                                                                                                                                                                                                                                         JSONText) q) z
                                                                                                                                                                                                 Peek_Text_Text q
                                                                                                                                                                                                                z -> Peek_Item_Text ((Path_Item_itemName :: Path Text
                                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                                            Path Item
                                                                                                                                                                                                                                                                 Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                               _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Item Text]) :: Forest (Peek Item),
                                       concatMap (\path -> case path of
                                                               p@(Path_Item_fields _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Map ItemFieldName Markup))
                                                                                                      in Node (Peek_Item_MIM p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                              Peek_MIM_JSONText q
                                                                                                                                                                                                                z -> Peek_Item_JSONText ((Path_Item_fields :: Path (Map ItemFieldName
                                                                                                                                                                                                                                                                        Markup)
                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                              Path Item
                                                                                                                                                                                                                                                                   JSONText) q) z
                                                                                                                                                                                              Peek_MIM_Markup q
                                                                                                                                                                                                              z -> Peek_Item_Markup ((Path_Item_fields :: Path (Map ItemFieldName
                                                                                                                                                                                                                                                                    Markup)
                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                          Path Item
                                                                                                                                                                                                                                                               Markup) q) z
                                                                                                                                                                                              Peek_MIM_MIM q
                                                                                                                                                                                                           z -> Peek_Item_MIM ((Path_Item_fields :: Path (Map ItemFieldName
                                                                                                                                                                                                                                                              Markup)
                                                                                                                                                                                                                                                         (Map ItemFieldName
                                                                                                                                                                                                                                                              Markup) ->
                                                                                                                                                                                                                                                    Path Item
                                                                                                                                                                                                                                                         (Map ItemFieldName
                                                                                                                                                                                                                                                              Markup)) q) z
                                                                                                                                                                                              Peek_MIM_Text q
                                                                                                                                                                                                            z -> Peek_Item_Text ((Path_Item_fields :: Path (Map ItemFieldName
                                                                                                                                                                                                                                                                Markup)
                                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                                      Path Item
                                                                                                                                                                                                                                                           Text) q) z) wf)) (toListOf (toLens p) x :: [Map ItemFieldName
                                                                                                                                                                                                                                                                                                           Markup])
                                                               _ -> []) (pathsOf x (undefined :: Proxy (Map ItemFieldName Markup)) :: [Path_Item (Map ItemFieldName Markup)]) :: Forest (Peek Item),
                                       concatMap (\path -> case path of
                                                               p@(Path_Item_images _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Order ReportImageID ReportImage))
                                                                                                      in Node (Peek_Item_ReportImages p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                       Peek_ReportImages_String q
                                                                                                                                                                                                                                z -> Peek_Item_String ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                                 ([Char]) ->
                                                                                                                                                                                                                                                                            Path Item
                                                                                                                                                                                                                                                                                 ([Char])) q) z
                                                                                                                                                                                                       Peek_ReportImages_Bool q
                                                                                                                                                                                                                              z -> Peek_Item_Bool ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                    ReportImage)
                                                                                                                                                                                                                                                                             Bool ->
                                                                                                                                                                                                                                                                        Path Item
                                                                                                                                                                                                                                                                             Bool) q) z
                                                                                                                                                                                                       Peek_ReportImages_Double q
                                                                                                                                                                                                                                z -> Peek_Item_Double ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                                 Double ->
                                                                                                                                                                                                                                                                            Path Item
                                                                                                                                                                                                                                                                                 Double) q) z
                                                                                                                                                                                                       Peek_ReportImages_Dimension q
                                                                                                                                                                                                                                   z -> Peek_Item_Dimension ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                       Dimension ->
                                                                                                                                                                                                                                                                                  Path Item
                                                                                                                                                                                                                                                                                       Dimension) q) z
                                                                                                                                                                                                       Peek_ReportImages_ImageCrop q
                                                                                                                                                                                                                                   z -> Peek_Item_ImageCrop ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                       ImageCrop ->
                                                                                                                                                                                                                                                                                  Path Item
                                                                                                                                                                                                                                                                                       ImageCrop) q) z
                                                                                                                                                                                                       Peek_ReportImages_ImageSize q
                                                                                                                                                                                                                                   z -> Peek_Item_ImageSize ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                       ImageSize ->
                                                                                                                                                                                                                                                                                  Path Item
                                                                                                                                                                                                                                                                                       ImageSize) q) z
                                                                                                                                                                                                       Peek_ReportImages_Units q
                                                                                                                                                                                                                               z -> Peek_Item_Units ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                      ReportImage)
                                                                                                                                                                                                                                                                               Units ->
                                                                                                                                                                                                                                                                          Path Item
                                                                                                                                                                                                                                                                               Units) q) z
                                                                                                                                                                                                       Peek_ReportImages_ImageFile q
                                                                                                                                                                                                                                   z -> Peek_Item_ImageFile ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                       ImageFile ->
                                                                                                                                                                                                                                                                                  Path Item
                                                                                                                                                                                                                                                                                       ImageFile) q) z
                                                                                                                                                                                                       Peek_ReportImages_JSONText q
                                                                                                                                                                                                                                  z -> Peek_Item_JSONText ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                            ReportImage)
                                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                                Path Item
                                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                                       Peek_ReportImages_Markup q
                                                                                                                                                                                                                                z -> Peek_Item_Markup ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                                                            Path Item
                                                                                                                                                                                                                                                                                 Markup) q) z
                                                                                                                                                                                                       Peek_ReportImages_EUI q
                                                                                                                                                                                                                             z -> Peek_Item_EUI ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           (Either URI
                                                                                                                                                                                                                                                                                   ImageFile) ->
                                                                                                                                                                                                                                                                      Path Item
                                                                                                                                                                                                                                                                           (Either URI
                                                                                                                                                                                                                                                                                   ImageFile)) q) z
                                                                                                                                                                                                       Peek_ReportImages_MEUI q
                                                                                                                                                                                                                              z -> Peek_Item_MEUI ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                    ReportImage)
                                                                                                                                                                                                                                                                             (Maybe (Either URI
                                                                                                                                                                                                                                                                                            ImageFile)) ->
                                                                                                                                                                                                                                                                        Path Item
                                                                                                                                                                                                                                                                             (Maybe (Either URI
                                                                                                                                                                                                                                                                                            ImageFile))) q) z
                                                                                                                                                                                                       Peek_ReportImages_MaybeImageFile q
                                                                                                                                                                                                                                        z -> Peek_Item_MaybeImageFile ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                        ReportImage)
                                                                                                                                                                                                                                                                                                 (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                            Path Item
                                                                                                                                                                                                                                                                                                 (Maybe ImageFile)) q) z
                                                                                                                                                                                                       Peek_ReportImages_ReportImage q
                                                                                                                                                                                                                                     z -> Peek_Item_ReportImage ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                                           ReportImage ->
                                                                                                                                                                                                                                                                                      Path Item
                                                                                                                                                                                                                                                                                           ReportImage) q) z
                                                                                                                                                                                                       Peek_ReportImages_ReportImages q
                                                                                                                                                                                                                                      z -> Peek_Item_ReportImages ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                    ReportImage)
                                                                                                                                                                                                                                                                                             (Order ReportImageID
                                                                                                                                                                                                                                                                                                    ReportImage) ->
                                                                                                                                                                                                                                                                                        Path Item
                                                                                                                                                                                                                                                                                             (Order ReportImageID
                                                                                                                                                                                                                                                                                                    ReportImage)) q) z
                                                                                                                                                                                                       Peek_ReportImages_ReportImageView q
                                                                                                                                                                                                                                         z -> Peek_Item_ReportImageView ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                          ReportImage)
                                                                                                                                                                                                                                                                                                   ReportImageView ->
                                                                                                                                                                                                                                                                                              Path Item
                                                                                                                                                                                                                                                                                                   ReportImageView) q) z
                                                                                                                                                                                                       Peek_ReportImages_SaneSizeImageSize q
                                                                                                                                                                                                                                           z -> Peek_Item_SaneSizeImageSize ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                                              ReportImage)
                                                                                                                                                                                                                                                                                                       (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                  Path Item
                                                                                                                                                                                                                                                                                                       (SaneSize ImageSize)) q) z
                                                                                                                                                                                                       Peek_ReportImages_URI q
                                                                                                                                                                                                                             z -> Peek_Item_URI ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                  ReportImage)
                                                                                                                                                                                                                                                                           URI ->
                                                                                                                                                                                                                                                                      Path Item
                                                                                                                                                                                                                                                                           URI) q) z
                                                                                                                                                                                                       Peek_ReportImages_Text q
                                                                                                                                                                                                                              z -> Peek_Item_Text ((Path_Item_images :: Path (Order ReportImageID
                                                                                                                                                                                                                                                                                    ReportImage)
                                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                                        Path Item
                                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Order ReportImageID
                                                                                                                                                                                                                                                                                                                               ReportImage])
                                                               _ -> []) (pathsOf x (undefined :: Proxy (Order ReportImageID ReportImage)) :: [Path_Item (Order ReportImageID ReportImage)]) :: Forest (Peek Item)]
          hop (x@(Item {})) = concat [concatMap (\path -> case path of
                                                              p@(Path_Item_itemName _) -> map (\w' -> Node (Peek_Item_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                              _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_Item Text]) :: Forest (Peek Item),
                                      concatMap (\path -> case path of
                                                              p@(Path_Item_fields _) -> map (\w' -> Node (Peek_Item_MIM p (Just w')) []) (toListOf (toLens p) x :: [Map ItemFieldName Markup])
                                                              _ -> []) (pathsOf x (undefined :: Proxy (Map ItemFieldName Markup)) :: [Path_Item (Map ItemFieldName Markup)]) :: Forest (Peek Item),
                                      concatMap (\path -> case path of
                                                              p@(Path_Item_images _) -> map (\w' -> Node (Peek_Item_ReportImages p (Just w')) []) (toListOf (toLens p) x :: [Order ReportImageID ReportImage])
                                                              _ -> []) (pathsOf x (undefined :: Proxy (Order ReportImageID ReportImage)) :: [Path_Item (Order ReportImageID ReportImage)]) :: Forest (Peek Item)]
instance IsPathStart ReportMap
    where data Peek ReportMap
              = Peek_ReportMap_String (Path ReportMap ([Char])) (Maybe ([Char]))
              | Peek_ReportMap_Int64 (Path ReportMap Int64) (Maybe Int64)
              | Peek_ReportMap_Int (Path ReportMap Int) (Maybe Int)
              | Peek_ReportMap_Bool (Path ReportMap Bool) (Maybe Bool)
              | Peek_ReportMap_Double (Path ReportMap Double) (Maybe Double)
              | Peek_ReportMap_Dimension (Path ReportMap Dimension) (Maybe Dimension)
              | Peek_ReportMap_ImageCrop (Path ReportMap ImageCrop) (Maybe ImageCrop)
              | Peek_ReportMap_ImageSize (Path ReportMap ImageSize) (Maybe ImageSize)
              | Peek_ReportMap_Units (Path ReportMap Units) (Maybe Units)
              | Peek_ReportMap_ImageFile (Path ReportMap ImageFile) (Maybe ImageFile)
              | Peek_ReportMap_Integer (Path ReportMap Integer) (Maybe Integer)
              | Peek_ReportMap_JSONText (Path ReportMap JSONText) (Maybe JSONText)
              | Peek_ReportMap_Markup (Path ReportMap Markup) (Maybe Markup)
              | Peek_ReportMap_Permissions (Path ReportMap Permissions) (Maybe Permissions)
              | Peek_ReportMap_UserIds (Path ReportMap ([UserId])) (Maybe ([UserId]))
              | Peek_ReportMap_AbbrevPair (Path ReportMap ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_ReportMap_AbbrevPairs (Path ReportMap (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_ReportMap_Author (Path ReportMap Author) (Maybe Author)
              | Peek_ReportMap_Authors (Path ReportMap (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_ReportMap_Branding (Path ReportMap Branding) (Maybe Branding)
              | Peek_ReportMap_MarkupPair (Path ReportMap ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_ReportMap_MarkupPairs (Path ReportMap (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_ReportMap_Markups (Path ReportMap (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_ReportMap_MaybeReportIntendedUse (Path ReportMap (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_ReportMap_Report (Path ReportMap Report) (Maybe Report)
              | Peek_ReportMap_ReportElem (Path ReportMap ReportElem) (Maybe ReportElem)
              | Peek_ReportMap_ReportElems (Path ReportMap (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_ReportMap_ReportFlags (Path ReportMap ReportFlags) (Maybe ReportFlags)
              | Peek_ReportMap_ReportStandard (Path ReportMap ReportStandard) (Maybe ReportStandard)
              | Peek_ReportMap_ReportStatus (Path ReportMap ReportStatus) (Maybe ReportStatus)
              | Peek_ReportMap_ReportValueApproachInfo (Path ReportMap ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportMap_ReportValueTypeInfo (Path ReportMap ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportMap_EUI (Path ReportMap (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportMap_MEUI (Path ReportMap (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportMap_MaybeImageFile (Path ReportMap (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportMap_ReportImage (Path ReportMap ReportImage) (Maybe ReportImage)
              | Peek_ReportMap_ReportImages (Path ReportMap (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportMap_ReadOnlyFilePath (Path ReportMap (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_ReportMap_ReportImageView (Path ReportMap ReportImageView) (Maybe ReportImageView)
              | Peek_ReportMap_ReportView (Path ReportMap ReportView) (Maybe ReportView)
              | Peek_ReportMap_SaneSizeImageSize (Path ReportMap (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportMap_Item (Path ReportMap Item) (Maybe Item)
              | Peek_ReportMap_MIM (Path ReportMap (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportMap_MRR (Path ReportMap (Map ReportID Report)) (Maybe (Map ReportID Report))
              | Peek_ReportMap_ReportMap (Path ReportMap ReportMap) (Maybe ReportMap)
              | Peek_ReportMap_CIString (Path ReportMap CIString) (Maybe CIString)
              | Peek_ReportMap_URI (Path ReportMap URI) (Maybe URI)
              | Peek_ReportMap_Text (Path ReportMap Text) (Maybe Text)
              | Peek_ReportMap_UserId (Path ReportMap UserId) (Maybe UserId)
              | Peek_ReportMap_UUID (Path ReportMap UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek (x@(ReportMap {})) = concat [concatMap (\path -> case path of
                                                                    p@(Path_ReportMap_unReportMap _) -> map (\w' -> let wf = peek w' :: Forest (Peek (Map ReportID Report))
                                                                                                                     in Node (Peek_ReportMap_MRR p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                                                  Peek_MRR_String q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_String ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  ([Char]) ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  ([Char])) q) z
                                                                                                                                                                                                                  Peek_MRR_Int64 q
                                                                                                                                                                                                                                 z -> Peek_ReportMap_Int64 ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                     Report)
                                                                                                                                                                                                                                                                                                Int64 ->
                                                                                                                                                                                                                                                                                           Path ReportMap
                                                                                                                                                                                                                                                                                                Int64) q) z
                                                                                                                                                                                                                  Peek_MRR_Int q
                                                                                                                                                                                                                               z -> Peek_ReportMap_Int ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                            Int ->
                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                            Int) q) z
                                                                                                                                                                                                                  Peek_MRR_Bool q
                                                                                                                                                                                                                                z -> Peek_ReportMap_Bool ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                              Bool ->
                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                              Bool) q) z
                                                                                                                                                                                                                  Peek_MRR_Double q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_Double ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  Double ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  Double) q) z
                                                                                                                                                                                                                  Peek_MRR_Dimension q
                                                                                                                                                                                                                                     z -> Peek_ReportMap_Dimension ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                             Report)
                                                                                                                                                                                                                                                                                                        Dimension ->
                                                                                                                                                                                                                                                                                                   Path ReportMap
                                                                                                                                                                                                                                                                                                        Dimension) q) z
                                                                                                                                                                                                                  Peek_MRR_ImageCrop q
                                                                                                                                                                                                                                     z -> Peek_ReportMap_ImageCrop ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                             Report)
                                                                                                                                                                                                                                                                                                        ImageCrop ->
                                                                                                                                                                                                                                                                                                   Path ReportMap
                                                                                                                                                                                                                                                                                                        ImageCrop) q) z
                                                                                                                                                                                                                  Peek_MRR_ImageSize q
                                                                                                                                                                                                                                     z -> Peek_ReportMap_ImageSize ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                             Report)
                                                                                                                                                                                                                                                                                                        ImageSize ->
                                                                                                                                                                                                                                                                                                   Path ReportMap
                                                                                                                                                                                                                                                                                                        ImageSize) q) z
                                                                                                                                                                                                                  Peek_MRR_Units q
                                                                                                                                                                                                                                 z -> Peek_ReportMap_Units ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                     Report)
                                                                                                                                                                                                                                                                                                Units ->
                                                                                                                                                                                                                                                                                           Path ReportMap
                                                                                                                                                                                                                                                                                                Units) q) z
                                                                                                                                                                                                                  Peek_MRR_ImageFile q
                                                                                                                                                                                                                                     z -> Peek_ReportMap_ImageFile ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                             Report)
                                                                                                                                                                                                                                                                                                        ImageFile ->
                                                                                                                                                                                                                                                                                                   Path ReportMap
                                                                                                                                                                                                                                                                                                        ImageFile) q) z
                                                                                                                                                                                                                  Peek_MRR_Integer q
                                                                                                                                                                                                                                   z -> Peek_ReportMap_Integer ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                    Integer ->
                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                    Integer) q) z
                                                                                                                                                                                                                  Peek_MRR_JSONText q
                                                                                                                                                                                                                                    z -> Peek_ReportMap_JSONText ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                           Report)
                                                                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                                                                                 Path ReportMap
                                                                                                                                                                                                                                                                                                      JSONText) q) z
                                                                                                                                                                                                                  Peek_MRR_Markup q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_Markup ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  Markup ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  Markup) q) z
                                                                                                                                                                                                                  Peek_MRR_Permissions q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_Permissions ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            Permissions ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            Permissions) q) z
                                                                                                                                                                                                                  Peek_MRR_UserIds q
                                                                                                                                                                                                                                   z -> Peek_ReportMap_UserIds ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                    ([UserId]) ->
                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                    ([UserId])) q) z
                                                                                                                                                                                                                  Peek_MRR_AbbrevPair q
                                                                                                                                                                                                                                      z -> Peek_ReportMap_AbbrevPair ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                               Report)
                                                                                                                                                                                                                                                                                                          ((CIString,
                                                                                                                                                                                                                                                                                                            Markup)) ->
                                                                                                                                                                                                                                                                                                     Path ReportMap
                                                                                                                                                                                                                                                                                                          ((CIString,
                                                                                                                                                                                                                                                                                                            Markup))) q) z
                                                                                                                                                                                                                  Peek_MRR_AbbrevPairs q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_AbbrevPairs ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                   ((CIString,
                                                                                                                                                                                                                                                                                                                     Markup))) ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            (Order AbbrevPairID
                                                                                                                                                                                                                                                                                                                   ((CIString,
                                                                                                                                                                                                                                                                                                                     Markup)))) q) z
                                                                                                                                                                                                                  Peek_MRR_Author q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_Author ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  Author ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  Author) q) z
                                                                                                                                                                                                                  Peek_MRR_Authors q
                                                                                                                                                                                                                                   z -> Peek_ReportMap_Authors ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                    (Order AuthorID
                                                                                                                                                                                                                                                                                                           Author) ->
                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                    (Order AuthorID
                                                                                                                                                                                                                                                                                                           Author)) q) z
                                                                                                                                                                                                                  Peek_MRR_Branding q
                                                                                                                                                                                                                                    z -> Peek_ReportMap_Branding ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                           Report)
                                                                                                                                                                                                                                                                                                      Branding ->
                                                                                                                                                                                                                                                                                                 Path ReportMap
                                                                                                                                                                                                                                                                                                      Branding) q) z
                                                                                                                                                                                                                  Peek_MRR_MarkupPair q
                                                                                                                                                                                                                                      z -> Peek_ReportMap_MarkupPair ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                               Report)
                                                                                                                                                                                                                                                                                                          ((Markup,
                                                                                                                                                                                                                                                                                                            Markup)) ->
                                                                                                                                                                                                                                                                                                     Path ReportMap
                                                                                                                                                                                                                                                                                                          ((Markup,
                                                                                                                                                                                                                                                                                                            Markup))) q) z
                                                                                                                                                                                                                  Peek_MRR_MarkupPairs q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_MarkupPairs ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                   ((Markup,
                                                                                                                                                                                                                                                                                                                     Markup))) ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            (Order MarkupPairID
                                                                                                                                                                                                                                                                                                                   ((Markup,
                                                                                                                                                                                                                                                                                                                     Markup)))) q) z
                                                                                                                                                                                                                  Peek_MRR_Markups q
                                                                                                                                                                                                                                   z -> Peek_ReportMap_Markups ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                    (Order MarkupID
                                                                                                                                                                                                                                                                                                           Markup) ->
                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                    (Order MarkupID
                                                                                                                                                                                                                                                                                                           Markup)) q) z
                                                                                                                                                                                                                  Peek_MRR_MaybeReportIntendedUse q
                                                                                                                                                                                                                                                  z -> Peek_ReportMap_MaybeReportIntendedUse ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                                                  (Maybe ReportIntendedUse) ->
                                                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                                                  (Maybe ReportIntendedUse)) q) z
                                                                                                                                                                                                                  Peek_MRR_Report q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_Report ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  Report ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  Report) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportElem q
                                                                                                                                                                                                                                      z -> Peek_ReportMap_ReportElem ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                               Report)
                                                                                                                                                                                                                                                                                                          ReportElem ->
                                                                                                                                                                                                                                                                                                     Path ReportMap
                                                                                                                                                                                                                                                                                                          ReportElem) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportElems q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_ReportElems ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            (Order ReportElemID
                                                                                                                                                                                                                                                                                                                   ReportElem) ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            (Order ReportElemID
                                                                                                                                                                                                                                                                                                                   ReportElem)) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportFlags q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_ReportFlags ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            ReportFlags ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            ReportFlags) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportStandard q
                                                                                                                                                                                                                                          z -> Peek_ReportMap_ReportStandard ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                                  ReportStandard ->
                                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                                  ReportStandard) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportStatus q
                                                                                                                                                                                                                                        z -> Peek_ReportMap_ReportStatus ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                                              ReportStatus ->
                                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                                              ReportStatus) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportValueApproachInfo q
                                                                                                                                                                                                                                                   z -> Peek_ReportMap_ReportValueApproachInfo ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                                                    ReportValueApproachInfo ->
                                                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                                                    ReportValueApproachInfo) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportValueTypeInfo q
                                                                                                                                                                                                                                               z -> Peek_ReportMap_ReportValueTypeInfo ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                                            ReportValueTypeInfo ->
                                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                                            ReportValueTypeInfo) q) z
                                                                                                                                                                                                                  Peek_MRR_EUI q
                                                                                                                                                                                                                               z -> Peek_ReportMap_EUI ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                            (Either URI
                                                                                                                                                                                                                                                                                                    ImageFile) ->
                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                            (Either URI
                                                                                                                                                                                                                                                                                                    ImageFile)) q) z
                                                                                                                                                                                                                  Peek_MRR_MEUI q
                                                                                                                                                                                                                                z -> Peek_ReportMap_MEUI ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                              (Maybe (Either URI
                                                                                                                                                                                                                                                                                                             ImageFile)) ->
                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                              (Maybe (Either URI
                                                                                                                                                                                                                                                                                                             ImageFile))) q) z
                                                                                                                                                                                                                  Peek_MRR_MaybeImageFile q
                                                                                                                                                                                                                                          z -> Peek_ReportMap_MaybeImageFile ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                                  (Maybe ImageFile) ->
                                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                                  (Maybe ImageFile)) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportImage q
                                                                                                                                                                                                                                       z -> Peek_ReportMap_ReportImage ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                                            ReportImage ->
                                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                                            ReportImage) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportImages q
                                                                                                                                                                                                                                        z -> Peek_ReportMap_ReportImages ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                                              (Order ReportImageID
                                                                                                                                                                                                                                                                                                                     ReportImage) ->
                                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                                              (Order ReportImageID
                                                                                                                                                                                                                                                                                                                     ReportImage)) q) z
                                                                                                                                                                                                                  Peek_MRR_ReadOnlyFilePath q
                                                                                                                                                                                                                                            z -> Peek_ReportMap_ReadOnlyFilePath ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                           Report)
                                                                                                                                                                                                                                                                                                                      (ReadOnly ([Char])) ->
                                                                                                                                                                                                                                                                                                                 Path ReportMap
                                                                                                                                                                                                                                                                                                                      (ReadOnly ([Char]))) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportImageView q
                                                                                                                                                                                                                                           z -> Peek_ReportMap_ReportImageView ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                         Report)
                                                                                                                                                                                                                                                                                                                    ReportImageView ->
                                                                                                                                                                                                                                                                                                               Path ReportMap
                                                                                                                                                                                                                                                                                                                    ReportImageView) q) z
                                                                                                                                                                                                                  Peek_MRR_ReportView q
                                                                                                                                                                                                                                      z -> Peek_ReportMap_ReportView ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                               Report)
                                                                                                                                                                                                                                                                                                          ReportView ->
                                                                                                                                                                                                                                                                                                     Path ReportMap
                                                                                                                                                                                                                                                                                                          ReportView) q) z
                                                                                                                                                                                                                  Peek_MRR_SaneSizeImageSize q
                                                                                                                                                                                                                                             z -> Peek_ReportMap_SaneSizeImageSize ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                                             Report)
                                                                                                                                                                                                                                                                                                                        (SaneSize ImageSize) ->
                                                                                                                                                                                                                                                                                                                   Path ReportMap
                                                                                                                                                                                                                                                                                                                        (SaneSize ImageSize)) q) z
                                                                                                                                                                                                                  Peek_MRR_Item q
                                                                                                                                                                                                                                z -> Peek_ReportMap_Item ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                              Item ->
                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                              Item) q) z
                                                                                                                                                                                                                  Peek_MRR_MIM q
                                                                                                                                                                                                                               z -> Peek_ReportMap_MIM ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                            (Map ItemFieldName
                                                                                                                                                                                                                                                                                                 Markup) ->
                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                            (Map ItemFieldName
                                                                                                                                                                                                                                                                                                 Markup)) q) z
                                                                                                                                                                                                                  Peek_MRR_MRR q
                                                                                                                                                                                                                               z -> Peek_ReportMap_MRR ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                            (Map ReportID
                                                                                                                                                                                                                                                                                                 Report) ->
                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                            (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)) q) z
                                                                                                                                                                                                                  Peek_MRR_CIString q
                                                                                                                                                                                                                                    z -> Peek_ReportMap_CIString ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                           Report)
                                                                                                                                                                                                                                                                                                      CIString ->
                                                                                                                                                                                                                                                                                                 Path ReportMap
                                                                                                                                                                                                                                                                                                      CIString) q) z
                                                                                                                                                                                                                  Peek_MRR_URI q
                                                                                                                                                                                                                               z -> Peek_ReportMap_URI ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                 Report)
                                                                                                                                                                                                                                                                                            URI ->
                                                                                                                                                                                                                                                                                       Path ReportMap
                                                                                                                                                                                                                                                                                            URI) q) z
                                                                                                                                                                                                                  Peek_MRR_Text q
                                                                                                                                                                                                                                z -> Peek_ReportMap_Text ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                              Text ->
                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                              Text) q) z
                                                                                                                                                                                                                  Peek_MRR_UserId q
                                                                                                                                                                                                                                  z -> Peek_ReportMap_UserId ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                       Report)
                                                                                                                                                                                                                                                                                                  UserId ->
                                                                                                                                                                                                                                                                                             Path ReportMap
                                                                                                                                                                                                                                                                                                  UserId) q) z
                                                                                                                                                                                                                  Peek_MRR_UUID q
                                                                                                                                                                                                                                z -> Peek_ReportMap_UUID ((Path_ReportMap_unReportMap :: Path (Map ReportID
                                                                                                                                                                                                                                                                                                   Report)
                                                                                                                                                                                                                                                                                              UUID ->
                                                                                                                                                                                                                                                                                         Path ReportMap
                                                                                                                                                                                                                                                                                              UUID) q) z) wf)) (toListOf (toLens p) x :: [Map ReportID
                                                                                                                                                                                                                                                                                                                                              Report])
                                                                    _ -> []) (pathsOf x (undefined :: Proxy (Map ReportID Report)) :: [Path_ReportMap (Map ReportID Report)]) :: Forest (Peek ReportMap)]
          hop (x@(ReportMap {})) = concat [concatMap (\path -> case path of
                                                                   p@(Path_ReportMap_unReportMap _) -> map (\w' -> Node (Peek_ReportMap_MRR p (Just w')) []) (toListOf (toLens p) x :: [Map ReportID Report])
                                                                   _ -> []) (pathsOf x (undefined :: Proxy (Map ReportID Report)) :: [Path_ReportMap (Map ReportID Report)]) :: Forest (Peek ReportMap)]
instance IsPathStart CIString
    where data Peek CIString
              = Peek_CIString_JSONText (Path CIString JSONText) (Maybe JSONText)
              | Peek_CIString_CIString (Path CIString CIString) (Maybe CIString)
              | Peek_CIString_Text (Path CIString Text) (Maybe Text)
              deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_CIString_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek Text)
                                                                                            in Node (Peek_CIString_Text p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                         Peek_Text_JSONText q
                                                                                                                                                                                                            z -> Peek_CIString_JSONText ((Path_CIString_View :: Path Text
                                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                                                Path CIString
                                                                                                                                                                                                                                                                     JSONText) q) z
                                                                                                                                                                                         Peek_Text_Text q
                                                                                                                                                                                                        z -> Peek_CIString_Text ((Path_CIString_View :: Path Text
                                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                                        Path CIString
                                                                                                                                                                                                                                                             Text) q) z) wf)) (toListOf (toLens p) x :: [Text])
                                                   _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_CIString Text]) :: Forest (Peek CIString)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_CIString_View _) -> map (\w' -> Node (Peek_CIString_Text p (Just w')) []) (toListOf (toLens p) x :: [Text])
                                                  _ -> []) (pathsOf x (undefined :: Proxy Text) :: [Path_CIString Text]) :: Forest (Peek CIString)]
instance IsPathStart URI
    where data Peek URI = Peek_URI_URI (Path URI URI) (Maybe URI) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart Text
    where data Peek Text = Peek_Text_JSONText (Path Text JSONText) (Maybe JSONText) | Peek_Text_Text (Path Text Text) (Maybe Text) deriving (Eq, Show)
          peek x = concat [concatMap (\path -> case path of
                                                   p@(Path_Text_View _) -> map (\w' -> let wf = peek w' :: Forest (Peek JSONText)
                                                                                        in Node (Peek_Text_JSONText p (if null wf then Just w' else Nothing)) (forestMap (\wp -> case wp of
                                                                                                                                                                                     Peek_JSONText_JSONText q
                                                                                                                                                                                                            z -> Peek_Text_JSONText ((Path_Text_View :: Path JSONText
                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                        Path Text
                                                                                                                                                                                                                                                             JSONText) q) z) wf)) (toListOf (toLens p) x :: [JSONText])
                                                   _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Text JSONText]) :: Forest (Peek Text)]
          hop x = concat [concatMap (\path -> case path of
                                                  p@(Path_Text_View _) -> map (\w' -> Node (Peek_Text_JSONText p (Just w')) []) (toListOf (toLens p) x :: [JSONText])
                                                  _ -> []) (pathsOf x (undefined :: Proxy JSONText) :: [Path_Text JSONText]) :: Forest (Peek Text)]
instance IsPathStart UserId
    where data Peek UserId = Peek_UserId_UserId (Path UserId UserId) (Maybe UserId) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance IsPathStart UUID
    where data Peek UUID = Peek_UUID_UUID (Path UUID UUID) (Maybe UUID) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance ToLens (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
    where type S (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = EUI
          type A (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = ImageFile
          toLens (Path_Right _) = _Right
instance ToLens (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
    where type S (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          type A (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          toLens _ = id
instance ToLens (Path_Either (Path_URI URI) (Path_ImageFile URI))
    where type S (Path_Either (Path_URI URI) (Path_ImageFile URI)) = EUI
          type A (Path_Either (Path_URI URI) (Path_ImageFile URI)) = URI
          toLens (Path_Left _) = _Left
instance ToLens (Path_Map ItemFieldName (Path_Markup JSONText))
    where type S (Path_Map ItemFieldName (Path_Markup JSONText)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup Markup))
    where type S (Path_Map ItemFieldName (Path_Markup Markup)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Markup)) = Markup
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ItemFieldName (Path_Markup MIM))
    where type S (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          toLens _ = id
instance ToLens (Path_Map ItemFieldName (Path_Markup Text))
    where type S (Path_Map ItemFieldName (Path_Markup Text)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report String))
    where type S (Path_Map ReportID (Path_Report String)) = MRR
          type A (Path_Map ReportID (Path_Report String)) = String
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int64))
    where type S (Path_Map ReportID (Path_Report Int64)) = MRR
          type A (Path_Map ReportID (Path_Report Int64)) = Int64
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Bool))
    where type S (Path_Map ReportID (Path_Report Bool)) = MRR
          type A (Path_Map ReportID (Path_Report Bool)) = Bool
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Double))
    where type S (Path_Map ReportID (Path_Report Double)) = MRR
          type A (Path_Map ReportID (Path_Report Double)) = Double
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int))
    where type S (Path_Map ReportID (Path_Report Int)) = MRR
          type A (Path_Map ReportID (Path_Report Int)) = Int
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Dimension))
    where type S (Path_Map ReportID (Path_Report Dimension)) = MRR
          type A (Path_Map ReportID (Path_Report Dimension)) = Dimension
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageCrop))
    where type S (Path_Map ReportID (Path_Report ImageCrop)) = MRR
          type A (Path_Map ReportID (Path_Report ImageCrop)) = ImageCrop
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageSize))
    where type S (Path_Map ReportID (Path_Report ImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report ImageSize)) = ImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Units))
    where type S (Path_Map ReportID (Path_Report Units)) = MRR
          type A (Path_Map ReportID (Path_Report Units)) = Units
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageFile))
    where type S (Path_Map ReportID (Path_Report ImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report ImageFile)) = ImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Integer))
    where type S (Path_Map ReportID (Path_Report Integer)) = MRR
          type A (Path_Map ReportID (Path_Report Integer)) = Integer
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report JSONText))
    where type S (Path_Map ReportID (Path_Report JSONText)) = MRR
          type A (Path_Map ReportID (Path_Report JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markup))
    where type S (Path_Map ReportID (Path_Report Markup)) = MRR
          type A (Path_Map ReportID (Path_Report Markup)) = Markup
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Permissions))
    where type S (Path_Map ReportID (Path_Report Permissions)) = MRR
          type A (Path_Map ReportID (Path_Report Permissions)) = Permissions
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserIds))
    where type S (Path_Map ReportID (Path_Report UserIds)) = MRR
          type A (Path_Map ReportID (Path_Report UserIds)) = UserIds
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPair))
    where type S (Path_Map ReportID (Path_Report AbbrevPair)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPair)) = AbbrevPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPairs))
    where type S (Path_Map ReportID (Path_Report AbbrevPairs)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPairs)) = AbbrevPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Author))
    where type S (Path_Map ReportID (Path_Report Author)) = MRR
          type A (Path_Map ReportID (Path_Report Author)) = Author
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Authors))
    where type S (Path_Map ReportID (Path_Report Authors)) = MRR
          type A (Path_Map ReportID (Path_Report Authors)) = Authors
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Branding))
    where type S (Path_Map ReportID (Path_Report Branding)) = MRR
          type A (Path_Map ReportID (Path_Report Branding)) = Branding
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPair))
    where type S (Path_Map ReportID (Path_Report MarkupPair)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPair)) = MarkupPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPairs))
    where type S (Path_Map ReportID (Path_Report MarkupPairs)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPairs)) = MarkupPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markups))
    where type S (Path_Map ReportID (Path_Report Markups)) = MRR
          type A (Path_Map ReportID (Path_Report Markups)) = Markups
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeReportIntendedUse))
    where type S (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MaybeReportIntendedUse
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Report))
    where type S (Path_Map ReportID (Path_Report Report)) = MRR
          type A (Path_Map ReportID (Path_Report Report)) = Report
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ReportID (Path_Report ReportElem))
    where type S (Path_Map ReportID (Path_Report ReportElem)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElem)) = ReportElem
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportElems))
    where type S (Path_Map ReportID (Path_Report ReportElems)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElems)) = ReportElems
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportFlags))
    where type S (Path_Map ReportID (Path_Report ReportFlags)) = MRR
          type A (Path_Map ReportID (Path_Report ReportFlags)) = ReportFlags
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStandard))
    where type S (Path_Map ReportID (Path_Report ReportStandard)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStandard)) = ReportStandard
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStatus))
    where type S (Path_Map ReportID (Path_Report ReportStatus)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStatus)) = ReportStatus
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueApproachInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = ReportValueApproachInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueTypeInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = ReportValueTypeInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report EUI))
    where type S (Path_Map ReportID (Path_Report EUI)) = MRR
          type A (Path_Map ReportID (Path_Report EUI)) = EUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MEUI))
    where type S (Path_Map ReportID (Path_Report MEUI)) = MRR
          type A (Path_Map ReportID (Path_Report MEUI)) = MEUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeImageFile))
    where type S (Path_Map ReportID (Path_Report MaybeImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeImageFile)) = MaybeImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImage))
    where type S (Path_Map ReportID (Path_Report ReportImage)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImage)) = ReportImage
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImages))
    where type S (Path_Map ReportID (Path_Report ReportImages)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImages)) = ReportImages
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReadOnlyFilePath))
    where type S (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = MRR
          type A (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = ReadOnlyFilePath
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImageView))
    where type S (Path_Map ReportID (Path_Report ReportImageView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImageView)) = ReportImageView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportView))
    where type S (Path_Map ReportID (Path_Report ReportView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportView)) = ReportView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report SaneSizeImageSize))
    where type S (Path_Map ReportID (Path_Report SaneSizeImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Item))
    where type S (Path_Map ReportID (Path_Report Item)) = MRR
          type A (Path_Map ReportID (Path_Report Item)) = Item
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MIM))
    where type S (Path_Map ReportID (Path_Report MIM)) = MRR
          type A (Path_Map ReportID (Path_Report MIM)) = MIM
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MRR))
    where type S (Path_Map ReportID (Path_Report MRR)) = MRR
          type A (Path_Map ReportID (Path_Report MRR)) = MRR
          toLens _ = id
instance ToLens (Path_Map ReportID (Path_Report CIString))
    where type S (Path_Map ReportID (Path_Report CIString)) = MRR
          type A (Path_Map ReportID (Path_Report CIString)) = CIString
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report URI))
    where type S (Path_Map ReportID (Path_Report URI)) = MRR
          type A (Path_Map ReportID (Path_Report URI)) = URI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Text))
    where type S (Path_Map ReportID (Path_Report Text)) = MRR
          type A (Path_Map ReportID (Path_Report Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserId))
    where type S (Path_Map ReportID (Path_Report UserId)) = MRR
          type A (Path_Map ReportID (Path_Report UserId)) = UserId
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UUID))
    where type S (Path_Map ReportID (Path_Report UUID)) = MRR
          type A (Path_Map ReportID (Path_Report UUID)) = UUID
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = AbbrevPair
          type A (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = AbbrevPair
          type A (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = Markup
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
    where type S (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          type A (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          toLens _ = id
instance ToLens (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
    where type S (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = AbbrevPair
          type A (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = CIString
          toLens (Path_First _) = _1
instance ToLens (Path_Pair (Path_CIString Text) (Path_Markup Text))
    where type S (Path_Pair (Path_CIString Text) (Path_Markup Text)) = AbbrevPair
          type A (Path_Pair (Path_CIString Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = MarkupPair
          type A (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = MarkupPair
          type A (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = Markup
          toLens (Path_First _) = _1
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
    where type S (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          type A (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          toLens _ = id
instance ToLens (Path_Pair (Path_Markup Text) (Path_Markup Text))
    where type S (Path_Pair (Path_Markup Text) (Path_Markup Text)) = MarkupPair
          type A (Path_Pair (Path_Markup Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          toLens _ = id
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = CIString
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author JSONText))
    where type S (Path_OMap AuthorID (Path_Author JSONText)) = Authors
          type A (Path_OMap AuthorID (Path_Author JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Markup))
    where type S (Path_OMap AuthorID (Path_Author Markup)) = Authors
          type A (Path_OMap AuthorID (Path_Author Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Author))
    where type S (Path_OMap AuthorID (Path_Author Author)) = Authors
          type A (Path_OMap AuthorID (Path_Author Author)) = Author
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AuthorID (Path_Author Authors))
    where type S (Path_OMap AuthorID (Path_Author Authors)) = Authors
          type A (Path_OMap AuthorID (Path_Author Authors)) = Authors
          toLens _ = id
instance ToLens (Path_OMap AuthorID (Path_Author Text))
    where type S (Path_OMap AuthorID (Path_Author Text)) = Authors
          type A (Path_OMap AuthorID (Path_Author Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup JSONText))
    where type S (Path_OMap MarkupID (Path_Markup JSONText)) = Markups
          type A (Path_OMap MarkupID (Path_Markup JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup Markup))
    where type S (Path_OMap MarkupID (Path_Markup Markup)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markup)) = Markup
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupID (Path_Markup Markups))
    where type S (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          toLens _ = id
instance ToLens (Path_OMap MarkupID (Path_Markup Text))
    where type S (Path_OMap MarkupID (Path_Markup Text)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          toLens _ = id
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem String))
    where type S (Path_OMap ReportElemID (Path_ReportElem String)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Bool))
    where type S (Path_OMap ReportElemID (Path_ReportElem Bool)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Double))
    where type S (Path_OMap ReportElemID (Path_ReportElem Double)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Dimension))
    where type S (Path_OMap ReportElemID (Path_ReportElem Dimension)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageCrop))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Units))
    where type S (Path_OMap ReportElemID (Path_ReportElem Units)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem JSONText))
    where type S (Path_OMap ReportElemID (Path_ReportElem JSONText)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Markup))
    where type S (Path_OMap ReportElemID (Path_ReportElem Markup)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElem))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElem
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElems))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          toLens _ = id
instance ToLens (Path_OMap ReportElemID (Path_ReportElem EUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem EUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MEUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem MEUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImage))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportImage
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImages))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportImages
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImageView))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Item))
    where type S (Path_OMap ReportElemID (Path_ReportElem Item)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Item)) = Item
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MIM))
    where type S (Path_OMap ReportElemID (Path_ReportElem MIM)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MIM)) = MIM
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem URI))
    where type S (Path_OMap ReportElemID (Path_ReportElem URI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Text))
    where type S (Path_OMap ReportElemID (Path_ReportElem Text)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage String))
    where type S (Path_OMap ReportImageID (Path_ReportImage String)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Bool))
    where type S (Path_OMap ReportImageID (Path_ReportImage Bool)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Double))
    where type S (Path_OMap ReportImageID (Path_ReportImage Double)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Dimension))
    where type S (Path_OMap ReportImageID (Path_ReportImage Dimension)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageCrop))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Units))
    where type S (Path_OMap ReportImageID (Path_ReportImage Units)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage JSONText))
    where type S (Path_OMap ReportImageID (Path_ReportImage JSONText)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Markup))
    where type S (Path_OMap ReportImageID (Path_ReportImage Markup)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage EUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage EUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MEUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage MEUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImage))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImage
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImages))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          toLens _ = id
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImageView))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage URI))
    where type S (Path_OMap ReportImageID (Path_ReportImage URI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Text))
    where type S (Path_OMap ReportImageID (Path_ReportImage Text)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_Author JSONText)
    where type S (Path_Author JSONText) = Author
          type A (Path_Author JSONText) = JSONText
          toLens (Path_Author_authorName _x) = (\f x -> fmap (\y -> x{authorName = y}) (f (authorName x))) . toLens _x
          toLens (Path_Author_authorCredentials _x) = (\f x -> fmap (\y -> x{authorCredentials = y}) (f (authorCredentials x))) . toLens _x
instance ToLens (Path_Author Markup)
    where type S (Path_Author Markup) = Author
          type A (Path_Author Markup) = Markup
          toLens (Path_Author_authorName _x) = \f x -> fmap (\y -> x{authorName = y}) (f (authorName x))
          toLens (Path_Author_authorCredentials _x) = \f x -> fmap (\y -> x{authorCredentials = y}) (f (authorCredentials x))
instance ToLens (Path_Author Author)
    where type S (Path_Author Author) = Author
          type A (Path_Author Author) = Author
          toLens _ = id
instance ToLens (Path_Author Text)
    where type S (Path_Author Text) = Author
          type A (Path_Author Text) = Text
          toLens (Path_Author_authorName _x) = (\f x -> fmap (\y -> x{authorName = y}) (f (authorName x))) . toLens _x
          toLens (Path_Author_authorCredentials _x) = (\f x -> fmap (\y -> x{authorCredentials = y}) (f (authorCredentials x))) . toLens _x
instance ToLens (Path_Bool String)
    where type S (Path_Bool String) = Bool
          type A (Path_Bool String) = String
          toLens (Path_Bool_View _) = viewLens :: Lens' Bool ([Char])
instance ToLens (Path_Bool Bool)
    where type S (Path_Bool Bool) = Bool
          type A (Path_Bool Bool) = Bool
          toLens _ = id
instance ToLens (Path_Bool JSONText)
    where type S (Path_Bool JSONText) = Bool
          type A (Path_Bool JSONText) = JSONText
          toLens (Path_Bool_View v) = (viewLens :: Lens' Bool ([Char])) . toLens v
instance ToLens (Path_Branding JSONText)
    where type S (Path_Branding JSONText) = Branding
          type A (Path_Branding JSONText) = JSONText
          toLens (Path_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens (Path_Branding Branding)
    where type S (Path_Branding Branding) = Branding
          type A (Path_Branding Branding) = Branding
          toLens _ = id
instance ToLens (Path_Branding Text)
    where type S (Path_Branding Text) = Branding
          type A (Path_Branding Text) = Text
          toLens (Path_Branding_View _) = viewLens :: Lens' Branding Text
instance ToLens (Path_CIString JSONText)
    where type S (Path_CIString JSONText) = CIString
          type A (Path_CIString JSONText) = JSONText
          toLens (Path_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens (Path_CIString CIString)
    where type S (Path_CIString CIString) = CIString
          type A (Path_CIString CIString) = CIString
          toLens _ = id
instance ToLens (Path_CIString Text)
    where type S (Path_CIString Text) = CIString
          type A (Path_CIString Text) = Text
          toLens (Path_CIString_View _) = viewLens :: Lens' CIString Text
instance ToLens (Path_Dimension Dimension)
    where type S (Path_Dimension Dimension) = Dimension
          type A (Path_Dimension Dimension) = Dimension
          toLens _ = id
instance ToLens (Path_Dimension JSONText)
    where type S (Path_Dimension JSONText) = Dimension
          type A (Path_Dimension JSONText) = JSONText
          toLens (Path_Dimension_View _) = viewLens :: Lens' Dimension JSONText
instance ToLens (Path_Double String)
    where type S (Path_Double String) = Double
          type A (Path_Double String) = String
          toLens (Path_Double_View _) = viewLens :: Lens' Double ([Char])
instance ToLens (Path_Double Double)
    where type S (Path_Double Double) = Double
          type A (Path_Double Double) = Double
          toLens _ = id
instance ToLens (Path_Double JSONText)
    where type S (Path_Double JSONText) = Double
          type A (Path_Double JSONText) = JSONText
          toLens (Path_Double_View v) = (viewLens :: Lens' Double ([Char])) . toLens v
instance ToLens (Path_ImageCrop ImageCrop)
    where type S (Path_ImageCrop ImageCrop) = ImageCrop
          type A (Path_ImageCrop ImageCrop) = ImageCrop
          toLens _ = id
instance ToLens (Path_ImageFile ImageFile)
    where type S (Path_ImageFile ImageFile) = ImageFile
          type A (Path_ImageFile ImageFile) = ImageFile
          toLens _ = id
instance ToLens (Path_ImageSize String)
    where type S (Path_ImageSize String) = ImageSize
          type A (Path_ImageSize String) = String
          toLens (Path_ImageSize_size _x) = (\f x -> fmap (\y -> x{size = y}) (f (size x))) . toLens _x
instance ToLens (Path_ImageSize Double)
    where type S (Path_ImageSize Double) = ImageSize
          type A (Path_ImageSize Double) = Double
          toLens (Path_ImageSize_size _x) = \f x -> fmap (\y -> x{size = y}) (f (size x))
instance ToLens (Path_ImageSize Dimension)
    where type S (Path_ImageSize Dimension) = ImageSize
          type A (Path_ImageSize Dimension) = Dimension
          toLens (Path_ImageSize_dim _x) = \f x -> fmap (\y -> x{dim = y}) (f (dim x))
instance ToLens (Path_ImageSize ImageSize)
    where type S (Path_ImageSize ImageSize) = ImageSize
          type A (Path_ImageSize ImageSize) = ImageSize
          toLens _ = id
instance ToLens (Path_ImageSize Units)
    where type S (Path_ImageSize Units) = ImageSize
          type A (Path_ImageSize Units) = Units
          toLens (Path_ImageSize_units _x) = \f x -> fmap (\y -> x{units = y}) (f (units x))
instance ToLens (Path_ImageSize JSONText)
    where type S (Path_ImageSize JSONText) = ImageSize
          type A (Path_ImageSize JSONText) = JSONText
          toLens (Path_ImageSize_dim _x) = (\f x -> fmap (\y -> x{dim = y}) (f (dim x))) . toLens _x
          toLens (Path_ImageSize_size _x) = (\f x -> fmap (\y -> x{size = y}) (f (size x))) . toLens _x
          toLens (Path_ImageSize_units _x) = (\f x -> fmap (\y -> x{units = y}) (f (units x))) . toLens _x
instance ToLens (Path_Int Int)
    where type S (Path_Int Int) = Int
          type A (Path_Int Int) = Int
          toLens _ = id
instance ToLens (Path_Int64 Int64)
    where type S (Path_Int64 Int64) = Int64
          type A (Path_Int64 Int64) = Int64
          toLens _ = id
instance ToLens (Path_Integer Integer)
    where type S (Path_Integer Integer) = Integer
          type A (Path_Integer Integer) = Integer
          toLens _ = id
instance ToLens (Path_Item String)
    where type S (Path_Item String) = Item
          type A (Path_Item String) = String
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Bool)
    where type S (Path_Item Bool) = Item
          type A (Path_Item Bool) = Bool
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Double)
    where type S (Path_Item Double) = Item
          type A (Path_Item Double) = Double
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Dimension)
    where type S (Path_Item Dimension) = Item
          type A (Path_Item Dimension) = Dimension
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item ImageCrop)
    where type S (Path_Item ImageCrop) = Item
          type A (Path_Item ImageCrop) = ImageCrop
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item ImageSize)
    where type S (Path_Item ImageSize) = Item
          type A (Path_Item ImageSize) = ImageSize
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Units)
    where type S (Path_Item Units) = Item
          type A (Path_Item Units) = Units
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item ImageFile)
    where type S (Path_Item ImageFile) = Item
          type A (Path_Item ImageFile) = ImageFile
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item JSONText)
    where type S (Path_Item JSONText) = Item
          type A (Path_Item JSONText) = JSONText
          toLens (Path_Item_itemName _x) = (\f x -> fmap (\y -> x{itemName = y}) (f (itemName x))) . toLens _x
          toLens (Path_Item_fields _x) = (\f x -> fmap (\y -> x{fields = y}) (f (fields x))) . toLens _x
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Markup)
    where type S (Path_Item Markup) = Item
          type A (Path_Item Markup) = Markup
          toLens (Path_Item_fields _x) = (\f x -> fmap (\y -> x{fields = y}) (f (fields x))) . toLens _x
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item EUI)
    where type S (Path_Item EUI) = Item
          type A (Path_Item EUI) = EUI
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item MEUI)
    where type S (Path_Item MEUI) = Item
          type A (Path_Item MEUI) = MEUI
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item MaybeImageFile)
    where type S (Path_Item MaybeImageFile) = Item
          type A (Path_Item MaybeImageFile) = MaybeImageFile
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item ReportImage)
    where type S (Path_Item ReportImage) = Item
          type A (Path_Item ReportImage) = ReportImage
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item ReportImages)
    where type S (Path_Item ReportImages) = Item
          type A (Path_Item ReportImages) = ReportImages
          toLens (Path_Item_images _x) = \f x -> fmap (\y -> x{images = y}) (f (images x))
instance ToLens (Path_Item ReportImageView)
    where type S (Path_Item ReportImageView) = Item
          type A (Path_Item ReportImageView) = ReportImageView
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item SaneSizeImageSize)
    where type S (Path_Item SaneSizeImageSize) = Item
          type A (Path_Item SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Item)
    where type S (Path_Item Item) = Item
          type A (Path_Item Item) = Item
          toLens _ = id
instance ToLens (Path_Item MIM)
    where type S (Path_Item MIM) = Item
          type A (Path_Item MIM) = MIM
          toLens (Path_Item_fields _x) = \f x -> fmap (\y -> x{fields = y}) (f (fields x))
instance ToLens (Path_Item URI)
    where type S (Path_Item URI) = Item
          type A (Path_Item URI) = URI
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_Item Text)
    where type S (Path_Item Text) = Item
          type A (Path_Item Text) = Text
          toLens (Path_Item_itemName _x) = \f x -> fmap (\y -> x{itemName = y}) (f (itemName x))
          toLens (Path_Item_fields _x) = (\f x -> fmap (\y -> x{fields = y}) (f (fields x))) . toLens _x
          toLens (Path_Item_images _x) = (\f x -> fmap (\y -> x{images = y}) (f (images x))) . toLens _x
instance ToLens (Path_JSONText JSONText)
    where type S (Path_JSONText JSONText) = JSONText
          type A (Path_JSONText JSONText) = JSONText
          toLens _ = id
instance ToLens (Path_Markup JSONText)
    where type S (Path_Markup JSONText) = Markup
          type A (Path_Markup JSONText) = JSONText
          toLens (Path_Markup_markdownText _x) = (\f x -> fmap (\y -> x{markdownText = y}) (f (markdownText x))) . toLens _x
          toLens (Path_Markup_htmlText _x) = (\f x -> fmap (\y -> x{htmlText = y}) (f (htmlText x))) . toLens _x
instance ToLens (Path_Markup Markup)
    where type S (Path_Markup Markup) = Markup
          type A (Path_Markup Markup) = Markup
          toLens _ = id
instance ToLens (Path_Markup Text)
    where type S (Path_Markup Text) = Markup
          type A (Path_Markup Text) = Text
          toLens (Path_Markup_markdownText _x) = \f x -> fmap (\y -> x{markdownText = y}) (f (markdownText x))
          toLens (Path_Markup_htmlText _x) = \f x -> fmap (\y -> x{htmlText = y}) (f (htmlText x))
instance ToLens (Path_MaybeImageFile String)
    where type S (Path_MaybeImageFile String) = MaybeImageFile
          type A (Path_MaybeImageFile String) = String
          toLens (Path_MaybeImageFile_View _) = viewLens :: Lens' (Maybe ImageFile) ([Char])
instance ToLens (Path_MaybeImageFile JSONText)
    where type S (Path_MaybeImageFile JSONText) = MaybeImageFile
          type A (Path_MaybeImageFile JSONText) = JSONText
          toLens (Path_MaybeImageFile_View v) = (viewLens :: Lens' (Maybe ImageFile) ([Char])) . toLens v
instance ToLens (Path_MaybeImageFile MaybeImageFile)
    where type S (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          type A (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          toLens _ = id
instance ToLens (Path_MaybeReportIntendedUse String)
    where type S (Path_MaybeReportIntendedUse String) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse String) = String
          toLens (Path_MaybeReportIntendedUse_View _) = viewLens :: Lens' (Maybe ReportIntendedUse) ([Char])
instance ToLens (Path_MaybeReportIntendedUse JSONText)
    where type S (Path_MaybeReportIntendedUse JSONText) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse JSONText) = JSONText
          toLens (Path_MaybeReportIntendedUse_View v) = (viewLens :: Lens' (Maybe ReportIntendedUse) ([Char])) . toLens v
instance ToLens (Path_MaybeReportIntendedUse MaybeReportIntendedUse)
    where type S (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens _ = id
instance ToLens (Path_Permissions JSONText)
    where type S (Path_Permissions JSONText) = Permissions
          type A (Path_Permissions JSONText) = JSONText
          toLens (Path_Permissions_writers _x) = (\f x -> fmap (\y -> x{writers = y}) (f (writers x))) . toLens _x
          toLens (Path_Permissions_readers _x) = (\f x -> fmap (\y -> x{readers = y}) (f (readers x))) . toLens _x
instance ToLens (Path_Permissions Permissions)
    where type S (Path_Permissions Permissions) = Permissions
          type A (Path_Permissions Permissions) = Permissions
          toLens _ = id
instance ToLens (Path_Permissions UserIds)
    where type S (Path_Permissions UserIds) = Permissions
          type A (Path_Permissions UserIds) = UserIds
          toLens (Path_Permissions_writers _x) = \f x -> fmap (\y -> x{writers = y}) (f (writers x))
          toLens (Path_Permissions_readers _x) = \f x -> fmap (\y -> x{readers = y}) (f (readers x))
instance ToLens (Path_Permissions Text)
    where type S (Path_Permissions Text) = Permissions
          type A (Path_Permissions Text) = Text
          toLens (Path_Permissions_writers _x) = (\f x -> fmap (\y -> x{writers = y}) (f (writers x))) . toLens _x
          toLens (Path_Permissions_readers _x) = (\f x -> fmap (\y -> x{readers = y}) (f (readers x))) . toLens _x
instance ToLens (Path_Permissions UserId)
    where type S (Path_Permissions UserId) = Permissions
          type A (Path_Permissions UserId) = UserId
          toLens (Path_Permissions_owner _x) = \f x -> fmap (\y -> x{owner = y}) (f (owner x))
instance ToLens (Path_ReadOnlyFilePath String)
    where type S (Path_ReadOnlyFilePath String) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath String) = String
          toLens (Path_ReadOnlyFilePath_View _) = viewLens :: Lens' (ReadOnly ([Char])) ([Char])
instance ToLens (Path_ReadOnlyFilePath JSONText)
    where type S (Path_ReadOnlyFilePath JSONText) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath JSONText) = JSONText
          toLens (Path_ReadOnlyFilePath_View v) = (viewLens :: Lens' (ReadOnly ([Char])) ([Char])) . toLens v
instance ToLens (Path_ReadOnlyFilePath ReadOnlyFilePath)
    where type S (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          toLens _ = id
instance ToLens (Path_Report String)
    where type S (Path_Report String) = Report
          type A (Path_Report String) = String
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int64)
    where type S (Path_Report Int64) = Report
          type A (Path_Report Int64) = Int64
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Bool)
    where type S (Path_Report Bool) = Report
          type A (Path_Report Bool) = Bool
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Double)
    where type S (Path_Report Double) = Report
          type A (Path_Report Double) = Double
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int)
    where type S (Path_Report Int) = Report
          type A (Path_Report Int) = Int
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Dimension)
    where type S (Path_Report Dimension) = Report
          type A (Path_Report Dimension) = Dimension
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageCrop)
    where type S (Path_Report ImageCrop) = Report
          type A (Path_Report ImageCrop) = ImageCrop
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageSize)
    where type S (Path_Report ImageSize) = Report
          type A (Path_Report ImageSize) = ImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Units)
    where type S (Path_Report Units) = Report
          type A (Path_Report Units) = Units
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageFile)
    where type S (Path_Report ImageFile) = Report
          type A (Path_Report ImageFile) = ImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Integer)
    where type S (Path_Report Integer) = Report
          type A (Path_Report Integer) = Integer
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report JSONText)
    where type S (Path_Report JSONText) = Report
          type A (Path_Report JSONText) = JSONText
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markup)
    where type S (Path_Report Markup) = Report
          type A (Path_Report Markup) = Markup
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Permissions)
    where type S (Path_Report Permissions) = Report
          type A (Path_Report Permissions) = Permissions
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserIds)
    where type S (Path_Report UserIds) = Report
          type A (Path_Report UserIds) = UserIds
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPair)
    where type S (Path_Report AbbrevPair) = Report
          type A (Path_Report AbbrevPair) = AbbrevPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPairs)
    where type S (Path_Report AbbrevPairs) = Report
          type A (Path_Report AbbrevPairs) = AbbrevPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Author)
    where type S (Path_Report Author) = Report
          type A (Path_Report Author) = Author
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Authors)
    where type S (Path_Report Authors) = Report
          type A (Path_Report Authors) = Authors
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Branding)
    where type S (Path_Report Branding) = Report
          type A (Path_Report Branding) = Branding
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPair)
    where type S (Path_Report MarkupPair) = Report
          type A (Path_Report MarkupPair) = MarkupPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPairs)
    where type S (Path_Report MarkupPairs) = Report
          type A (Path_Report MarkupPairs) = MarkupPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markups)
    where type S (Path_Report Markups) = Report
          type A (Path_Report Markups) = Markups
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeReportIntendedUse)
    where type S (Path_Report MaybeReportIntendedUse) = Report
          type A (Path_Report MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Report)
    where type S (Path_Report Report) = Report
          type A (Path_Report Report) = Report
          toLens _ = id
instance ToLens (Path_Report ReportElem)
    where type S (Path_Report ReportElem) = Report
          type A (Path_Report ReportElem) = ReportElem
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportElems)
    where type S (Path_Report ReportElems) = Report
          type A (Path_Report ReportElems) = ReportElems
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportFlags)
    where type S (Path_Report ReportFlags) = Report
          type A (Path_Report ReportFlags) = ReportFlags
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStandard)
    where type S (Path_Report ReportStandard) = Report
          type A (Path_Report ReportStandard) = ReportStandard
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStatus)
    where type S (Path_Report ReportStatus) = Report
          type A (Path_Report ReportStatus) = ReportStatus
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueApproachInfo)
    where type S (Path_Report ReportValueApproachInfo) = Report
          type A (Path_Report ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueTypeInfo)
    where type S (Path_Report ReportValueTypeInfo) = Report
          type A (Path_Report ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report EUI)
    where type S (Path_Report EUI) = Report
          type A (Path_Report EUI) = EUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MEUI)
    where type S (Path_Report MEUI) = Report
          type A (Path_Report MEUI) = MEUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeImageFile)
    where type S (Path_Report MaybeImageFile) = Report
          type A (Path_Report MaybeImageFile) = MaybeImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImage)
    where type S (Path_Report ReportImage) = Report
          type A (Path_Report ReportImage) = ReportImage
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImages)
    where type S (Path_Report ReportImages) = Report
          type A (Path_Report ReportImages) = ReportImages
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReadOnlyFilePath)
    where type S (Path_Report ReadOnlyFilePath) = Report
          type A (Path_Report ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImageView)
    where type S (Path_Report ReportImageView) = Report
          type A (Path_Report ReportImageView) = ReportImageView
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportView)
    where type S (Path_Report ReportView) = Report
          type A (Path_Report ReportView) = ReportView
          toLens (Path_Report_View _) = viewLens :: Lens' Report ReportView
instance ToLens (Path_Report SaneSizeImageSize)
    where type S (Path_Report SaneSizeImageSize) = Report
          type A (Path_Report SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Item)
    where type S (Path_Report Item) = Report
          type A (Path_Report Item) = Item
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MIM)
    where type S (Path_Report MIM) = Report
          type A (Path_Report MIM) = MIM
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report CIString)
    where type S (Path_Report CIString) = Report
          type A (Path_Report CIString) = CIString
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report URI)
    where type S (Path_Report URI) = Report
          type A (Path_Report URI) = URI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Text)
    where type S (Path_Report Text) = Report
          type A (Path_Report Text) = Text
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserId)
    where type S (Path_Report UserId) = Report
          type A (Path_Report UserId) = UserId
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UUID)
    where type S (Path_Report UUID) = Report
          type A (Path_Report UUID) = UUID
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_ReportElem String)
    where type S (Path_ReportElem String) = ReportElem
          type A (Path_ReportElem String) = String
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Bool)
    where type S (Path_ReportElem Bool) = ReportElem
          type A (Path_ReportElem Bool) = Bool
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Double)
    where type S (Path_ReportElem Double) = ReportElem
          type A (Path_ReportElem Double) = Double
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Dimension)
    where type S (Path_ReportElem Dimension) = ReportElem
          type A (Path_ReportElem Dimension) = Dimension
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ImageCrop)
    where type S (Path_ReportElem ImageCrop) = ReportElem
          type A (Path_ReportElem ImageCrop) = ImageCrop
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ImageSize)
    where type S (Path_ReportElem ImageSize) = ReportElem
          type A (Path_ReportElem ImageSize) = ImageSize
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Units)
    where type S (Path_ReportElem Units) = ReportElem
          type A (Path_ReportElem Units) = Units
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ImageFile)
    where type S (Path_ReportElem ImageFile) = ReportElem
          type A (Path_ReportElem ImageFile) = ImageFile
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem JSONText)
    where type S (Path_ReportElem JSONText) = ReportElem
          type A (Path_ReportElem JSONText) = JSONText
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
          toLens (Path_ReportElem_elemText _x) = (\f x -> fmap (\y -> x{elemText = y}) (f (elemText x))) . toLens _x
instance ToLens (Path_ReportElem Markup)
    where type S (Path_ReportElem Markup) = ReportElem
          type A (Path_ReportElem Markup) = Markup
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
          toLens (Path_ReportElem_elemText _x) = \f x -> fmap (\y -> x{elemText = y}) (f (elemText x))
instance ToLens (Path_ReportElem ReportElem)
    where type S (Path_ReportElem ReportElem) = ReportElem
          type A (Path_ReportElem ReportElem) = ReportElem
          toLens _ = id
instance ToLens (Path_ReportElem EUI)
    where type S (Path_ReportElem EUI) = ReportElem
          type A (Path_ReportElem EUI) = EUI
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem MEUI)
    where type S (Path_ReportElem MEUI) = ReportElem
          type A (Path_ReportElem MEUI) = MEUI
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem MaybeImageFile)
    where type S (Path_ReportElem MaybeImageFile) = ReportElem
          type A (Path_ReportElem MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ReportImage)
    where type S (Path_ReportElem ReportImage) = ReportElem
          type A (Path_ReportElem ReportImage) = ReportImage
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ReportImages)
    where type S (Path_ReportElem ReportImages) = ReportElem
          type A (Path_ReportElem ReportImages) = ReportImages
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem ReportImageView)
    where type S (Path_ReportElem ReportImageView) = ReportElem
          type A (Path_ReportElem ReportImageView) = ReportImageView
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem SaneSizeImageSize)
    where type S (Path_ReportElem SaneSizeImageSize) = ReportElem
          type A (Path_ReportElem SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Item)
    where type S (Path_ReportElem Item) = ReportElem
          type A (Path_ReportElem Item) = Item
          toLens (Path_ReportElem_elemItem _x) = \f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))
instance ToLens (Path_ReportElem MIM)
    where type S (Path_ReportElem MIM) = ReportElem
          type A (Path_ReportElem MIM) = MIM
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem URI)
    where type S (Path_ReportElem URI) = ReportElem
          type A (Path_ReportElem URI) = URI
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
instance ToLens (Path_ReportElem Text)
    where type S (Path_ReportElem Text) = ReportElem
          type A (Path_ReportElem Text) = Text
          toLens (Path_ReportElem_elemItem _x) = (\f x -> fmap (\y -> x{elemItem = y}) (f (elemItem x))) . toLens _x
          toLens (Path_ReportElem_elemText _x) = (\f x -> fmap (\y -> x{elemText = y}) (f (elemText x))) . toLens _x
instance ToLens (Path_ReportFlags String)
    where type S (Path_ReportFlags String) = ReportFlags
          type A (Path_ReportFlags String) = String
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = (\f x -> fmap (\y -> x{hideEmptyItemFields = y}) (f (hideEmptyItemFields x))) . toLens _x
instance ToLens (Path_ReportFlags Bool)
    where type S (Path_ReportFlags Bool) = ReportFlags
          type A (Path_ReportFlags Bool) = Bool
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = \f x -> fmap (\y -> x{hideEmptyItemFields = y}) (f (hideEmptyItemFields x))
instance ToLens (Path_ReportFlags JSONText)
    where type S (Path_ReportFlags JSONText) = ReportFlags
          type A (Path_ReportFlags JSONText) = JSONText
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = (\f x -> fmap (\y -> x{hideEmptyItemFields = y}) (f (hideEmptyItemFields x))) . toLens _x
instance ToLens (Path_ReportFlags ReportFlags)
    where type S (Path_ReportFlags ReportFlags) = ReportFlags
          type A (Path_ReportFlags ReportFlags) = ReportFlags
          toLens _ = id
instance ToLens (Path_ReportImage String)
    where type S (Path_ReportImage String) = ReportImage
          type A (Path_ReportImage String) = String
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Bool)
    where type S (Path_ReportImage Bool) = ReportImage
          type A (Path_ReportImage Bool) = Bool
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Double)
    where type S (Path_ReportImage Double) = ReportImage
          type A (Path_ReportImage Double) = Double
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Dimension)
    where type S (Path_ReportImage Dimension) = ReportImage
          type A (Path_ReportImage Dimension) = Dimension
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageCrop)
    where type S (Path_ReportImage ImageCrop) = ReportImage
          type A (Path_ReportImage ImageCrop) = ImageCrop
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageSize)
    where type S (Path_ReportImage ImageSize) = ReportImage
          type A (Path_ReportImage ImageSize) = ImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Units)
    where type S (Path_ReportImage Units) = ReportImage
          type A (Path_ReportImage Units) = Units
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageFile)
    where type S (Path_ReportImage ImageFile) = ReportImage
          type A (Path_ReportImage ImageFile) = ImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage JSONText)
    where type S (Path_ReportImage JSONText) = ReportImage
          type A (Path_ReportImage JSONText) = JSONText
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Markup)
    where type S (Path_ReportImage Markup) = ReportImage
          type A (Path_ReportImage Markup) = Markup
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage EUI)
    where type S (Path_ReportImage EUI) = ReportImage
          type A (Path_ReportImage EUI) = EUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MEUI)
    where type S (Path_ReportImage MEUI) = ReportImage
          type A (Path_ReportImage MEUI) = MEUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MaybeImageFile)
    where type S (Path_ReportImage MaybeImageFile) = ReportImage
          type A (Path_ReportImage MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ReportImage)
    where type S (Path_ReportImage ReportImage) = ReportImage
          type A (Path_ReportImage ReportImage) = ReportImage
          toLens _ = id
instance ToLens (Path_ReportImage ReportImageView)
    where type S (Path_ReportImage ReportImageView) = ReportImage
          type A (Path_ReportImage ReportImageView) = ReportImageView
          toLens (Path_ReportImage_View _) = viewLens :: Lens' ReportImage ReportImageView
instance ToLens (Path_ReportImage SaneSizeImageSize)
    where type S (Path_ReportImage SaneSizeImageSize) = ReportImage
          type A (Path_ReportImage SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage URI)
    where type S (Path_ReportImage URI) = ReportImage
          type A (Path_ReportImage URI) = URI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Text)
    where type S (Path_ReportImage Text) = ReportImage
          type A (Path_ReportImage Text) = Text
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImageView String)
    where type S (Path_ReportImageView String) = ReportImageView
          type A (Path_ReportImageView String) = String
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = (\f x -> fmap (\y -> x{_picEditedDeprecated = y}) (f (_picEditedDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = (\f x -> fmap (\y -> x{_picThumbDeprecated = y}) (f (_picThumbDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = (\f x -> fmap (\y -> x{_picPrinterDeprecated = y}) (f (_picPrinterDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = (\f x -> fmap (\y -> x{_picMustEnlarge = y}) (f (_picMustEnlarge x))) . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = (\f x -> fmap (\y -> x{_picEnlargedDeprecated = y}) (f (_picEnlargedDeprecated x))) . toLens _x
instance ToLens (Path_ReportImageView Bool)
    where type S (Path_ReportImageView Bool) = ReportImageView
          type A (Path_ReportImageView Bool) = Bool
          toLens (Path_ReportImageView__picMustEnlarge _x) = \f x -> fmap (\y -> x{_picMustEnlarge = y}) (f (_picMustEnlarge x))
instance ToLens (Path_ReportImageView Double)
    where type S (Path_ReportImageView Double) = ReportImageView
          type A (Path_ReportImageView Double) = Double
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
instance ToLens (Path_ReportImageView Dimension)
    where type S (Path_ReportImageView Dimension) = ReportImageView
          type A (Path_ReportImageView Dimension) = Dimension
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
instance ToLens (Path_ReportImageView ImageCrop)
    where type S (Path_ReportImageView ImageCrop) = ReportImageView
          type A (Path_ReportImageView ImageCrop) = ImageCrop
          toLens (Path_ReportImageView__picCrop _x) = \f x -> fmap (\y -> x{_picCrop = y}) (f (_picCrop x))
instance ToLens (Path_ReportImageView ImageSize)
    where type S (Path_ReportImageView ImageSize) = ReportImageView
          type A (Path_ReportImageView ImageSize) = ImageSize
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
instance ToLens (Path_ReportImageView Units)
    where type S (Path_ReportImageView Units) = ReportImageView
          type A (Path_ReportImageView Units) = Units
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
instance ToLens (Path_ReportImageView ImageFile)
    where type S (Path_ReportImageView ImageFile) = ReportImageView
          type A (Path_ReportImageView ImageFile) = ImageFile
          toLens (Path_ReportImageView__picOriginal _x) = (\f x -> fmap (\y -> x{_picOriginal = y}) (f (_picOriginal x))) . toLens _x
instance ToLens (Path_ReportImageView JSONText)
    where type S (Path_ReportImageView JSONText) = ReportImageView
          type A (Path_ReportImageView JSONText) = JSONText
          toLens (Path_ReportImageView__picSize _x) = (\f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))) . toLens _x
          toLens (Path_ReportImageView__picCaption _x) = (\f x -> fmap (\y -> x{_picCaption = y}) (f (_picCaption x))) . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = (\f x -> fmap (\y -> x{_picEditedDeprecated = y}) (f (_picEditedDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = (\f x -> fmap (\y -> x{_picThumbDeprecated = y}) (f (_picThumbDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = (\f x -> fmap (\y -> x{_picPrinterDeprecated = y}) (f (_picPrinterDeprecated x))) . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = (\f x -> fmap (\y -> x{_picMustEnlarge = y}) (f (_picMustEnlarge x))) . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = (\f x -> fmap (\y -> x{_picEnlargedDeprecated = y}) (f (_picEnlargedDeprecated x))) . toLens _x
instance ToLens (Path_ReportImageView Markup)
    where type S (Path_ReportImageView Markup) = ReportImageView
          type A (Path_ReportImageView Markup) = Markup
          toLens (Path_ReportImageView__picCaption _x) = \f x -> fmap (\y -> x{_picCaption = y}) (f (_picCaption x))
instance ToLens (Path_ReportImageView EUI)
    where type S (Path_ReportImageView EUI) = ReportImageView
          type A (Path_ReportImageView EUI) = EUI
          toLens (Path_ReportImageView__picOriginal _x) = (\f x -> fmap (\y -> x{_picOriginal = y}) (f (_picOriginal x))) . toLens _x
instance ToLens (Path_ReportImageView MEUI)
    where type S (Path_ReportImageView MEUI) = ReportImageView
          type A (Path_ReportImageView MEUI) = MEUI
          toLens (Path_ReportImageView__picOriginal _x) = \f x -> fmap (\y -> x{_picOriginal = y}) (f (_picOriginal x))
instance ToLens (Path_ReportImageView MaybeImageFile)
    where type S (Path_ReportImageView MaybeImageFile) = ReportImageView
          type A (Path_ReportImageView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImageView__picEditedDeprecated _x) = \f x -> fmap (\y -> x{_picEditedDeprecated = y}) (f (_picEditedDeprecated x))
          toLens (Path_ReportImageView__picThumbDeprecated _x) = \f x -> fmap (\y -> x{_picThumbDeprecated = y}) (f (_picThumbDeprecated x))
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = \f x -> fmap (\y -> x{_picPrinterDeprecated = y}) (f (_picPrinterDeprecated x))
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = \f x -> fmap (\y -> x{_picEnlargedDeprecated = y}) (f (_picEnlargedDeprecated x))
instance ToLens (Path_ReportImageView ReportImageView)
    where type S (Path_ReportImageView ReportImageView) = ReportImageView
          type A (Path_ReportImageView ReportImageView) = ReportImageView
          toLens _ = id
instance ToLens (Path_ReportImageView SaneSizeImageSize)
    where type S (Path_ReportImageView SaneSizeImageSize) = ReportImageView
          type A (Path_ReportImageView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImageView__picSize _x) = \f x -> fmap (\y -> x{_picSize = y}) (f (_picSize x))
instance ToLens (Path_ReportImageView URI)
    where type S (Path_ReportImageView URI) = ReportImageView
          type A (Path_ReportImageView URI) = URI
          toLens (Path_ReportImageView__picOriginal _x) = (\f x -> fmap (\y -> x{_picOriginal = y}) (f (_picOriginal x))) . toLens _x
instance ToLens (Path_ReportImageView Text)
    where type S (Path_ReportImageView Text) = ReportImageView
          type A (Path_ReportImageView Text) = Text
          toLens (Path_ReportImageView__picCaption _x) = (\f x -> fmap (\y -> x{_picCaption = y}) (f (_picCaption x))) . toLens _x
instance ToLens (Path_ReportIntendedUse String)
    where type S (Path_ReportIntendedUse String) = ReportIntendedUse
          type A (Path_ReportIntendedUse String) = String
          toLens (Path_ReportIntendedUse_View _) = viewLens :: Lens' ReportIntendedUse ([Char])
instance ToLens (Path_ReportIntendedUse JSONText)
    where type S (Path_ReportIntendedUse JSONText) = ReportIntendedUse
          type A (Path_ReportIntendedUse JSONText) = JSONText
          toLens (Path_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse ([Char])) . toLens v
instance ToLens (Path_ReportIntendedUse ReportIntendedUse)
    where type S (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          type A (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          toLens _ = id
instance ToLens (Path_ReportMap String)
    where type S (Path_ReportMap String) = ReportMap
          type A (Path_ReportMap String) = String
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Int64)
    where type S (Path_ReportMap Int64) = ReportMap
          type A (Path_ReportMap Int64) = Int64
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Bool)
    where type S (Path_ReportMap Bool) = ReportMap
          type A (Path_ReportMap Bool) = Bool
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Double)
    where type S (Path_ReportMap Double) = ReportMap
          type A (Path_ReportMap Double) = Double
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Int)
    where type S (Path_ReportMap Int) = ReportMap
          type A (Path_ReportMap Int) = Int
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Dimension)
    where type S (Path_ReportMap Dimension) = ReportMap
          type A (Path_ReportMap Dimension) = Dimension
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ImageCrop)
    where type S (Path_ReportMap ImageCrop) = ReportMap
          type A (Path_ReportMap ImageCrop) = ImageCrop
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ImageSize)
    where type S (Path_ReportMap ImageSize) = ReportMap
          type A (Path_ReportMap ImageSize) = ImageSize
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Units)
    where type S (Path_ReportMap Units) = ReportMap
          type A (Path_ReportMap Units) = Units
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ImageFile)
    where type S (Path_ReportMap ImageFile) = ReportMap
          type A (Path_ReportMap ImageFile) = ImageFile
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Integer)
    where type S (Path_ReportMap Integer) = ReportMap
          type A (Path_ReportMap Integer) = Integer
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap JSONText)
    where type S (Path_ReportMap JSONText) = ReportMap
          type A (Path_ReportMap JSONText) = JSONText
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Markup)
    where type S (Path_ReportMap Markup) = ReportMap
          type A (Path_ReportMap Markup) = Markup
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Permissions)
    where type S (Path_ReportMap Permissions) = ReportMap
          type A (Path_ReportMap Permissions) = Permissions
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap UserIds)
    where type S (Path_ReportMap UserIds) = ReportMap
          type A (Path_ReportMap UserIds) = UserIds
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap AbbrevPair)
    where type S (Path_ReportMap AbbrevPair) = ReportMap
          type A (Path_ReportMap AbbrevPair) = AbbrevPair
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap AbbrevPairs)
    where type S (Path_ReportMap AbbrevPairs) = ReportMap
          type A (Path_ReportMap AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Author)
    where type S (Path_ReportMap Author) = ReportMap
          type A (Path_ReportMap Author) = Author
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Authors)
    where type S (Path_ReportMap Authors) = ReportMap
          type A (Path_ReportMap Authors) = Authors
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Branding)
    where type S (Path_ReportMap Branding) = ReportMap
          type A (Path_ReportMap Branding) = Branding
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MarkupPair)
    where type S (Path_ReportMap MarkupPair) = ReportMap
          type A (Path_ReportMap MarkupPair) = MarkupPair
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MarkupPairs)
    where type S (Path_ReportMap MarkupPairs) = ReportMap
          type A (Path_ReportMap MarkupPairs) = MarkupPairs
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Markups)
    where type S (Path_ReportMap Markups) = ReportMap
          type A (Path_ReportMap Markups) = Markups
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MaybeReportIntendedUse)
    where type S (Path_ReportMap MaybeReportIntendedUse) = ReportMap
          type A (Path_ReportMap MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Report)
    where type S (Path_ReportMap Report) = ReportMap
          type A (Path_ReportMap Report) = Report
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportElem)
    where type S (Path_ReportMap ReportElem) = ReportMap
          type A (Path_ReportMap ReportElem) = ReportElem
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportElems)
    where type S (Path_ReportMap ReportElems) = ReportMap
          type A (Path_ReportMap ReportElems) = ReportElems
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportFlags)
    where type S (Path_ReportMap ReportFlags) = ReportMap
          type A (Path_ReportMap ReportFlags) = ReportFlags
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportStandard)
    where type S (Path_ReportMap ReportStandard) = ReportMap
          type A (Path_ReportMap ReportStandard) = ReportStandard
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportStatus)
    where type S (Path_ReportMap ReportStatus) = ReportMap
          type A (Path_ReportMap ReportStatus) = ReportStatus
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportValueApproachInfo)
    where type S (Path_ReportMap ReportValueApproachInfo) = ReportMap
          type A (Path_ReportMap ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportValueTypeInfo)
    where type S (Path_ReportMap ReportValueTypeInfo) = ReportMap
          type A (Path_ReportMap ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap EUI)
    where type S (Path_ReportMap EUI) = ReportMap
          type A (Path_ReportMap EUI) = EUI
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MEUI)
    where type S (Path_ReportMap MEUI) = ReportMap
          type A (Path_ReportMap MEUI) = MEUI
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MaybeImageFile)
    where type S (Path_ReportMap MaybeImageFile) = ReportMap
          type A (Path_ReportMap MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportImage)
    where type S (Path_ReportMap ReportImage) = ReportMap
          type A (Path_ReportMap ReportImage) = ReportImage
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportImages)
    where type S (Path_ReportMap ReportImages) = ReportMap
          type A (Path_ReportMap ReportImages) = ReportImages
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReadOnlyFilePath)
    where type S (Path_ReportMap ReadOnlyFilePath) = ReportMap
          type A (Path_ReportMap ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportImageView)
    where type S (Path_ReportMap ReportImageView) = ReportMap
          type A (Path_ReportMap ReportImageView) = ReportImageView
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap ReportView)
    where type S (Path_ReportMap ReportView) = ReportMap
          type A (Path_ReportMap ReportView) = ReportView
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap SaneSizeImageSize)
    where type S (Path_ReportMap SaneSizeImageSize) = ReportMap
          type A (Path_ReportMap SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Item)
    where type S (Path_ReportMap Item) = ReportMap
          type A (Path_ReportMap Item) = Item
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MIM)
    where type S (Path_ReportMap MIM) = ReportMap
          type A (Path_ReportMap MIM) = MIM
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap MRR)
    where type S (Path_ReportMap MRR) = ReportMap
          type A (Path_ReportMap MRR) = MRR
          toLens (Path_ReportMap_unReportMap _x) = \f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))
instance ToLens (Path_ReportMap ReportMap)
    where type S (Path_ReportMap ReportMap) = ReportMap
          type A (Path_ReportMap ReportMap) = ReportMap
          toLens _ = id
instance ToLens (Path_ReportMap CIString)
    where type S (Path_ReportMap CIString) = ReportMap
          type A (Path_ReportMap CIString) = CIString
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap URI)
    where type S (Path_ReportMap URI) = ReportMap
          type A (Path_ReportMap URI) = URI
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap Text)
    where type S (Path_ReportMap Text) = ReportMap
          type A (Path_ReportMap Text) = Text
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap UserId)
    where type S (Path_ReportMap UserId) = ReportMap
          type A (Path_ReportMap UserId) = UserId
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportMap UUID)
    where type S (Path_ReportMap UUID) = ReportMap
          type A (Path_ReportMap UUID) = UUID
          toLens (Path_ReportMap_unReportMap _x) = (\f x -> fmap (\y -> x{unReportMap = y}) (f (unReportMap x))) . toLens _x
instance ToLens (Path_ReportStandard Int)
    where type S (Path_ReportStandard Int) = ReportStandard
          type A (Path_ReportStandard Int) = Int
          toLens (Path_ReportStandard_unReportStandard _x) = \f x -> fmap (\y -> x{unReportStandard = y}) (f (unReportStandard x))
instance ToLens (Path_ReportStandard ReportStandard)
    where type S (Path_ReportStandard ReportStandard) = ReportStandard
          type A (Path_ReportStandard ReportStandard) = ReportStandard
          toLens _ = id
instance ToLens (Path_ReportStatus String)
    where type S (Path_ReportStatus String) = ReportStatus
          type A (Path_ReportStatus String) = String
          toLens (Path_ReportStatus_View _) = viewLens :: Lens' ReportStatus ([Char])
instance ToLens (Path_ReportStatus JSONText)
    where type S (Path_ReportStatus JSONText) = ReportStatus
          type A (Path_ReportStatus JSONText) = JSONText
          toLens (Path_ReportStatus_View v) = (viewLens :: Lens' ReportStatus ([Char])) . toLens v
instance ToLens (Path_ReportStatus ReportStatus)
    where type S (Path_ReportStatus ReportStatus) = ReportStatus
          type A (Path_ReportStatus ReportStatus) = ReportStatus
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo JSONText)
    where type S (Path_ReportValueApproachInfo JSONText) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo JSONText) = JSONText
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = (\f x -> fmap (\y -> x{reportValueApproachName = y}) (f (reportValueApproachName x))) . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = (\f x -> fmap (\y -> x{reportValueApproachDescription = y}) (f (reportValueApproachDescription x))) . toLens _x
instance ToLens (Path_ReportValueApproachInfo Markup)
    where type S (Path_ReportValueApproachInfo Markup) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Markup) = Markup
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = \f x -> fmap (\y -> x{reportValueApproachName = y}) (f (reportValueApproachName x))
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = \f x -> fmap (\y -> x{reportValueApproachDescription = y}) (f (reportValueApproachDescription x))
instance ToLens (Path_ReportValueApproachInfo ReportValueApproachInfo)
    where type S (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo Text)
    where type S (Path_ReportValueApproachInfo Text) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Text) = Text
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = (\f x -> fmap (\y -> x{reportValueApproachName = y}) (f (reportValueApproachName x))) . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = (\f x -> fmap (\y -> x{reportValueApproachDescription = y}) (f (reportValueApproachDescription x))) . toLens _x
instance ToLens (Path_ReportValueTypeInfo JSONText)
    where type S (Path_ReportValueTypeInfo JSONText) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo JSONText) = JSONText
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = (\f x -> fmap (\y -> x{reportValueTypeName = y}) (f (reportValueTypeName x))) . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = (\f x -> fmap (\y -> x{reportValueTypeDescription = y}) (f (reportValueTypeDescription x))) . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = (\f x -> fmap (\y -> x{reportValueTypeDefinition = y}) (f (reportValueTypeDefinition x))) . toLens _x
instance ToLens (Path_ReportValueTypeInfo Markup)
    where type S (Path_ReportValueTypeInfo Markup) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Markup) = Markup
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = \f x -> fmap (\y -> x{reportValueTypeName = y}) (f (reportValueTypeName x))
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = \f x -> fmap (\y -> x{reportValueTypeDescription = y}) (f (reportValueTypeDescription x))
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = \f x -> fmap (\y -> x{reportValueTypeDefinition = y}) (f (reportValueTypeDefinition x))
instance ToLens (Path_ReportValueTypeInfo ReportValueTypeInfo)
    where type S (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          toLens _ = id
instance ToLens (Path_ReportValueTypeInfo Text)
    where type S (Path_ReportValueTypeInfo Text) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Text) = Text
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = (\f x -> fmap (\y -> x{reportValueTypeName = y}) (f (reportValueTypeName x))) . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = (\f x -> fmap (\y -> x{reportValueTypeDescription = y}) (f (reportValueTypeDescription x))) . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = (\f x -> fmap (\y -> x{reportValueTypeDefinition = y}) (f (reportValueTypeDefinition x))) . toLens _x
instance ToLens (Path_ReportView String)
    where type S (Path_ReportView String) = ReportView
          type A (Path_ReportView String) = String
          toLens (Path_ReportView__reportFolder _x) = (\f x -> fmap (\y -> x{_reportFolder = y}) (f (_reportFolder x))) . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = (\f x -> fmap (\y -> x{_reportIntendedUse = y}) (f (_reportIntendedUse x))) . toLens _x
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
          toLens (Path_ReportView__reportStatus _x) = (\f x -> fmap (\y -> x{_reportStatus = y}) (f (_reportStatus x))) . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = (\f x -> fmap (\y -> x{_reportRedacted = y}) (f (_reportRedacted x))) . toLens _x
          toLens (Path_ReportView__reportFlags _x) = (\f x -> fmap (\y -> x{_reportFlags = y}) (f (_reportFlags x))) . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = (\f x -> fmap (\y -> x{_reportOrderByItemName = y}) (f (_reportOrderByItemName x))) . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = (\f x -> fmap (\y -> x{_reportDisplayItemName = y}) (f (_reportDisplayItemName x))) . toLens _x
instance ToLens (Path_ReportView Int64)
    where type S (Path_ReportView Int64) = ReportView
          type A (Path_ReportView Int64) = Int64
          toLens (Path_ReportView__reportCreated _x) = \f x -> fmap (\y -> x{_reportCreated = y}) (f (_reportCreated x))
instance ToLens (Path_ReportView Bool)
    where type S (Path_ReportView Bool) = ReportView
          type A (Path_ReportView Bool) = Bool
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = \f x -> fmap (\y -> x{_reportRedacted = y}) (f (_reportRedacted x))
          toLens (Path_ReportView__reportFlags _x) = (\f x -> fmap (\y -> x{_reportFlags = y}) (f (_reportFlags x))) . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = \f x -> fmap (\y -> x{_reportOrderByItemName = y}) (f (_reportOrderByItemName x))
          toLens (Path_ReportView__reportDisplayItemName _x) = \f x -> fmap (\y -> x{_reportDisplayItemName = y}) (f (_reportDisplayItemName x))
instance ToLens (Path_ReportView Double)
    where type S (Path_ReportView Double) = ReportView
          type A (Path_ReportView Double) = Double
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView Int)
    where type S (Path_ReportView Int) = ReportView
          type A (Path_ReportView Int) = Int
          toLens (Path_ReportView__reportStandardsVersion _x) = (\f x -> fmap (\y -> x{_reportStandardsVersion = y}) (f (_reportStandardsVersion x))) . toLens _x
instance ToLens (Path_ReportView Dimension)
    where type S (Path_ReportView Dimension) = ReportView
          type A (Path_ReportView Dimension) = Dimension
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ImageCrop)
    where type S (Path_ReportView ImageCrop) = ReportView
          type A (Path_ReportView ImageCrop) = ImageCrop
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ImageSize)
    where type S (Path_ReportView ImageSize) = ReportView
          type A (Path_ReportView ImageSize) = ImageSize
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView Units)
    where type S (Path_ReportView Units) = ReportView
          type A (Path_ReportView Units) = Units
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ImageFile)
    where type S (Path_ReportView ImageFile) = ReportView
          type A (Path_ReportView ImageFile) = ImageFile
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView Integer)
    where type S (Path_ReportView Integer) = ReportView
          type A (Path_ReportView Integer) = Integer
          toLens (Path_ReportView__reportRevision _x) = \f x -> fmap (\y -> x{_reportRevision = y}) (f (_reportRevision x))
instance ToLens (Path_ReportView JSONText)
    where type S (Path_ReportView JSONText) = ReportView
          type A (Path_ReportView JSONText) = JSONText
          toLens (Path_ReportView__reportFolder _x) = (\f x -> fmap (\y -> x{_reportFolder = y}) (f (_reportFolder x))) . toLens _x
          toLens (Path_ReportView__reportName _x) = (\f x -> fmap (\y -> x{_reportName = y}) (f (_reportName x))) . toLens _x
          toLens (Path_ReportView__reportDate _x) = (\f x -> fmap (\y -> x{_reportDate = y}) (f (_reportDate x))) . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = (\f x -> fmap (\y -> x{_reportContractDate = y}) (f (_reportContractDate x))) . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = (\f x -> fmap (\y -> x{_reportInspectionDate = y}) (f (_reportInspectionDate x))) . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = (\f x -> fmap (\y -> x{_reportEffectiveDate = y}) (f (_reportEffectiveDate x))) . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = (\f x -> fmap (\y -> x{_reportAuthors = y}) (f (_reportAuthors x))) . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = (\f x -> fmap (\y -> x{_reportPreparer = y}) (f (_reportPreparer x))) . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = (\f x -> fmap (\y -> x{_reportPreparerEIN = y}) (f (_reportPreparerEIN x))) . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = (\f x -> fmap (\y -> x{_reportPreparerAddress = y}) (f (_reportPreparerAddress x))) . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = (\f x -> fmap (\y -> x{_reportPreparerEMail = y}) (f (_reportPreparerEMail x))) . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = (\f x -> fmap (\y -> x{_reportPreparerWebsite = y}) (f (_reportPreparerWebsite x))) . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = (\f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))) . toLens _x
          toLens (Path_ReportView__reportTitle _x) = (\f x -> fmap (\y -> x{_reportTitle = y}) (f (_reportTitle x))) . toLens _x
          toLens (Path_ReportView__reportHeader _x) = (\f x -> fmap (\y -> x{_reportHeader = y}) (f (_reportHeader x))) . toLens _x
          toLens (Path_ReportView__reportFooter _x) = (\f x -> fmap (\y -> x{_reportFooter = y}) (f (_reportFooter x))) . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = (\f x -> fmap (\y -> x{_reportIntendedUse = y}) (f (_reportIntendedUse x))) . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = (\f x -> fmap (\y -> x{_reportValueTypeInfo = y}) (f (_reportValueTypeInfo x))) . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = (\f x -> fmap (\y -> x{_reportValueApproachInfo = y}) (f (_reportValueApproachInfo x))) . toLens _x
          toLens (Path_ReportView__reportClientName _x) = (\f x -> fmap (\y -> x{_reportClientName = y}) (f (_reportClientName x))) . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = (\f x -> fmap (\y -> x{_reportClientAddress = y}) (f (_reportClientAddress x))) . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = (\f x -> fmap (\y -> x{_reportClientGreeting = y}) (f (_reportClientGreeting x))) . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = (\f x -> fmap (\y -> x{_reportItemsOwnerFull = y}) (f (_reportItemsOwnerFull x))) . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = (\f x -> fmap (\y -> x{_reportItemsOwner = y}) (f (_reportItemsOwner x))) . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = (\f x -> fmap (\y -> x{_reportBriefItems = y}) (f (_reportBriefItems x))) . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = (\f x -> fmap (\y -> x{_reportInspectionLocation = y}) (f (_reportInspectionLocation x))) . toLens _x
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = (\f x -> fmap (\y -> x{_reportGlossary = y}) (f (_reportGlossary x))) . toLens _x
          toLens (Path_ReportView__reportSources _x) = (\f x -> fmap (\y -> x{_reportSources = y}) (f (_reportSources x))) . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = (\f x -> fmap (\y -> x{_reportLetterOfTransmittal = y}) (f (_reportLetterOfTransmittal x))) . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = (\f x -> fmap (\y -> x{_reportScopeOfWork = y}) (f (_reportScopeOfWork x))) . toLens _x
          toLens (Path_ReportView__reportCertification _x) = (\f x -> fmap (\y -> x{_reportCertification = y}) (f (_reportCertification x))) . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = (\f x -> fmap (\y -> x{_reportLimitingConditions = y}) (f (_reportLimitingConditions x))) . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = (\f x -> fmap (\y -> x{_reportPrivacyPolicy = y}) (f (_reportPrivacyPolicy x))) . toLens _x
          toLens (Path_ReportView__reportPerms _x) = (\f x -> fmap (\y -> x{_reportPerms = y}) (f (_reportPerms x))) . toLens _x
          toLens (Path_ReportView__reportBranding _x) = (\f x -> fmap (\y -> x{_reportBranding = y}) (f (_reportBranding x))) . toLens _x
          toLens (Path_ReportView__reportStatus _x) = (\f x -> fmap (\y -> x{_reportStatus = y}) (f (_reportStatus x))) . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = (\f x -> fmap (\y -> x{_reportRedacted = y}) (f (_reportRedacted x))) . toLens _x
          toLens (Path_ReportView__reportFlags _x) = (\f x -> fmap (\y -> x{_reportFlags = y}) (f (_reportFlags x))) . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = (\f x -> fmap (\y -> x{_reportOrderByItemName = y}) (f (_reportOrderByItemName x))) . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = (\f x -> fmap (\y -> x{_reportDisplayItemName = y}) (f (_reportDisplayItemName x))) . toLens _x
instance ToLens (Path_ReportView Markup)
    where type S (Path_ReportView Markup) = ReportView
          type A (Path_ReportView Markup) = Markup
          toLens (Path_ReportView__reportName _x) = \f x -> fmap (\y -> x{_reportName = y}) (f (_reportName x))
          toLens (Path_ReportView__reportDate _x) = \f x -> fmap (\y -> x{_reportDate = y}) (f (_reportDate x))
          toLens (Path_ReportView__reportContractDate _x) = \f x -> fmap (\y -> x{_reportContractDate = y}) (f (_reportContractDate x))
          toLens (Path_ReportView__reportInspectionDate _x) = \f x -> fmap (\y -> x{_reportInspectionDate = y}) (f (_reportInspectionDate x))
          toLens (Path_ReportView__reportEffectiveDate _x) = \f x -> fmap (\y -> x{_reportEffectiveDate = y}) (f (_reportEffectiveDate x))
          toLens (Path_ReportView__reportAuthors _x) = (\f x -> fmap (\y -> x{_reportAuthors = y}) (f (_reportAuthors x))) . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = \f x -> fmap (\y -> x{_reportPreparer = y}) (f (_reportPreparer x))
          toLens (Path_ReportView__reportPreparerEIN _x) = \f x -> fmap (\y -> x{_reportPreparerEIN = y}) (f (_reportPreparerEIN x))
          toLens (Path_ReportView__reportPreparerAddress _x) = \f x -> fmap (\y -> x{_reportPreparerAddress = y}) (f (_reportPreparerAddress x))
          toLens (Path_ReportView__reportPreparerEMail _x) = \f x -> fmap (\y -> x{_reportPreparerEMail = y}) (f (_reportPreparerEMail x))
          toLens (Path_ReportView__reportPreparerWebsite _x) = \f x -> fmap (\y -> x{_reportPreparerWebsite = y}) (f (_reportPreparerWebsite x))
          toLens (Path_ReportView__reportAbbrevs _x) = (\f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))) . toLens _x
          toLens (Path_ReportView__reportTitle _x) = \f x -> fmap (\y -> x{_reportTitle = y}) (f (_reportTitle x))
          toLens (Path_ReportView__reportHeader _x) = \f x -> fmap (\y -> x{_reportHeader = y}) (f (_reportHeader x))
          toLens (Path_ReportView__reportFooter _x) = \f x -> fmap (\y -> x{_reportFooter = y}) (f (_reportFooter x))
          toLens (Path_ReportView__reportValueTypeInfo _x) = (\f x -> fmap (\y -> x{_reportValueTypeInfo = y}) (f (_reportValueTypeInfo x))) . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = (\f x -> fmap (\y -> x{_reportValueApproachInfo = y}) (f (_reportValueApproachInfo x))) . toLens _x
          toLens (Path_ReportView__reportClientName _x) = \f x -> fmap (\y -> x{_reportClientName = y}) (f (_reportClientName x))
          toLens (Path_ReportView__reportClientAddress _x) = \f x -> fmap (\y -> x{_reportClientAddress = y}) (f (_reportClientAddress x))
          toLens (Path_ReportView__reportClientGreeting _x) = \f x -> fmap (\y -> x{_reportClientGreeting = y}) (f (_reportClientGreeting x))
          toLens (Path_ReportView__reportItemsOwnerFull _x) = \f x -> fmap (\y -> x{_reportItemsOwnerFull = y}) (f (_reportItemsOwnerFull x))
          toLens (Path_ReportView__reportItemsOwner _x) = \f x -> fmap (\y -> x{_reportItemsOwner = y}) (f (_reportItemsOwner x))
          toLens (Path_ReportView__reportBriefItems _x) = \f x -> fmap (\y -> x{_reportBriefItems = y}) (f (_reportBriefItems x))
          toLens (Path_ReportView__reportInspectionLocation _x) = \f x -> fmap (\y -> x{_reportInspectionLocation = y}) (f (_reportInspectionLocation x))
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = (\f x -> fmap (\y -> x{_reportGlossary = y}) (f (_reportGlossary x))) . toLens _x
          toLens (Path_ReportView__reportSources _x) = (\f x -> fmap (\y -> x{_reportSources = y}) (f (_reportSources x))) . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = \f x -> fmap (\y -> x{_reportLetterOfTransmittal = y}) (f (_reportLetterOfTransmittal x))
          toLens (Path_ReportView__reportScopeOfWork _x) = \f x -> fmap (\y -> x{_reportScopeOfWork = y}) (f (_reportScopeOfWork x))
          toLens (Path_ReportView__reportCertification _x) = (\f x -> fmap (\y -> x{_reportCertification = y}) (f (_reportCertification x))) . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = (\f x -> fmap (\y -> x{_reportLimitingConditions = y}) (f (_reportLimitingConditions x))) . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = \f x -> fmap (\y -> x{_reportPrivacyPolicy = y}) (f (_reportPrivacyPolicy x))
instance ToLens (Path_ReportView Permissions)
    where type S (Path_ReportView Permissions) = ReportView
          type A (Path_ReportView Permissions) = Permissions
          toLens (Path_ReportView__reportPerms _x) = \f x -> fmap (\y -> x{_reportPerms = y}) (f (_reportPerms x))
instance ToLens (Path_ReportView UserIds)
    where type S (Path_ReportView UserIds) = ReportView
          type A (Path_ReportView UserIds) = UserIds
          toLens (Path_ReportView__reportPerms _x) = (\f x -> fmap (\y -> x{_reportPerms = y}) (f (_reportPerms x))) . toLens _x
instance ToLens (Path_ReportView AbbrevPair)
    where type S (Path_ReportView AbbrevPair) = ReportView
          type A (Path_ReportView AbbrevPair) = AbbrevPair
          toLens (Path_ReportView__reportAbbrevs _x) = (\f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))) . toLens _x
instance ToLens (Path_ReportView AbbrevPairs)
    where type S (Path_ReportView AbbrevPairs) = ReportView
          type A (Path_ReportView AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportView__reportAbbrevs _x) = \f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))
instance ToLens (Path_ReportView Author)
    where type S (Path_ReportView Author) = ReportView
          type A (Path_ReportView Author) = Author
          toLens (Path_ReportView__reportAuthors _x) = (\f x -> fmap (\y -> x{_reportAuthors = y}) (f (_reportAuthors x))) . toLens _x
instance ToLens (Path_ReportView Authors)
    where type S (Path_ReportView Authors) = ReportView
          type A (Path_ReportView Authors) = Authors
          toLens (Path_ReportView__reportAuthors _x) = \f x -> fmap (\y -> x{_reportAuthors = y}) (f (_reportAuthors x))
instance ToLens (Path_ReportView Branding)
    where type S (Path_ReportView Branding) = ReportView
          type A (Path_ReportView Branding) = Branding
          toLens (Path_ReportView__reportBranding _x) = \f x -> fmap (\y -> x{_reportBranding = y}) (f (_reportBranding x))
instance ToLens (Path_ReportView MarkupPair)
    where type S (Path_ReportView MarkupPair) = ReportView
          type A (Path_ReportView MarkupPair) = MarkupPair
          toLens (Path_ReportView__reportGlossary _x) = (\f x -> fmap (\y -> x{_reportGlossary = y}) (f (_reportGlossary x))) . toLens _x
          toLens (Path_ReportView__reportSources _x) = (\f x -> fmap (\y -> x{_reportSources = y}) (f (_reportSources x))) . toLens _x
instance ToLens (Path_ReportView MarkupPairs)
    where type S (Path_ReportView MarkupPairs) = ReportView
          type A (Path_ReportView MarkupPairs) = MarkupPairs
          toLens (Path_ReportView__reportGlossary _x) = \f x -> fmap (\y -> x{_reportGlossary = y}) (f (_reportGlossary x))
          toLens (Path_ReportView__reportSources _x) = \f x -> fmap (\y -> x{_reportSources = y}) (f (_reportSources x))
instance ToLens (Path_ReportView Markups)
    where type S (Path_ReportView Markups) = ReportView
          type A (Path_ReportView Markups) = Markups
          toLens (Path_ReportView__reportCertification _x) = \f x -> fmap (\y -> x{_reportCertification = y}) (f (_reportCertification x))
          toLens (Path_ReportView__reportLimitingConditions _x) = \f x -> fmap (\y -> x{_reportLimitingConditions = y}) (f (_reportLimitingConditions x))
instance ToLens (Path_ReportView MaybeReportIntendedUse)
    where type S (Path_ReportView MaybeReportIntendedUse) = ReportView
          type A (Path_ReportView MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportView__reportIntendedUse _x) = \f x -> fmap (\y -> x{_reportIntendedUse = y}) (f (_reportIntendedUse x))
instance ToLens (Path_ReportView ReportElem)
    where type S (Path_ReportView ReportElem) = ReportView
          type A (Path_ReportView ReportElem) = ReportElem
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ReportElems)
    where type S (Path_ReportView ReportElems) = ReportView
          type A (Path_ReportView ReportElems) = ReportElems
          toLens (Path_ReportView__reportBody _x) = \f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))
instance ToLens (Path_ReportView ReportFlags)
    where type S (Path_ReportView ReportFlags) = ReportView
          type A (Path_ReportView ReportFlags) = ReportFlags
          toLens (Path_ReportView__reportFlags _x) = \f x -> fmap (\y -> x{_reportFlags = y}) (f (_reportFlags x))
instance ToLens (Path_ReportView ReportStandard)
    where type S (Path_ReportView ReportStandard) = ReportView
          type A (Path_ReportView ReportStandard) = ReportStandard
          toLens (Path_ReportView__reportStandardsVersion _x) = \f x -> fmap (\y -> x{_reportStandardsVersion = y}) (f (_reportStandardsVersion x))
instance ToLens (Path_ReportView ReportStatus)
    where type S (Path_ReportView ReportStatus) = ReportView
          type A (Path_ReportView ReportStatus) = ReportStatus
          toLens (Path_ReportView__reportStatus _x) = \f x -> fmap (\y -> x{_reportStatus = y}) (f (_reportStatus x))
instance ToLens (Path_ReportView ReportValueApproachInfo)
    where type S (Path_ReportView ReportValueApproachInfo) = ReportView
          type A (Path_ReportView ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportView__reportValueApproachInfo _x) = \f x -> fmap (\y -> x{_reportValueApproachInfo = y}) (f (_reportValueApproachInfo x))
instance ToLens (Path_ReportView ReportValueTypeInfo)
    where type S (Path_ReportView ReportValueTypeInfo) = ReportView
          type A (Path_ReportView ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportView__reportValueTypeInfo _x) = \f x -> fmap (\y -> x{_reportValueTypeInfo = y}) (f (_reportValueTypeInfo x))
instance ToLens (Path_ReportView EUI)
    where type S (Path_ReportView EUI) = ReportView
          type A (Path_ReportView EUI) = EUI
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView MEUI)
    where type S (Path_ReportView MEUI) = ReportView
          type A (Path_ReportView MEUI) = MEUI
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView MaybeImageFile)
    where type S (Path_ReportView MaybeImageFile) = ReportView
          type A (Path_ReportView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ReportImage)
    where type S (Path_ReportView ReportImage) = ReportView
          type A (Path_ReportView ReportImage) = ReportImage
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ReportImages)
    where type S (Path_ReportView ReportImages) = ReportView
          type A (Path_ReportView ReportImages) = ReportImages
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ReadOnlyFilePath)
    where type S (Path_ReportView ReadOnlyFilePath) = ReportView
          type A (Path_ReportView ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportView__reportFolder _x) = \f x -> fmap (\y -> x{_reportFolder = y}) (f (_reportFolder x))
instance ToLens (Path_ReportView ReportImageView)
    where type S (Path_ReportView ReportImageView) = ReportView
          type A (Path_ReportView ReportImageView) = ReportImageView
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView ReportView)
    where type S (Path_ReportView ReportView) = ReportView
          type A (Path_ReportView ReportView) = ReportView
          toLens _ = id
instance ToLens (Path_ReportView SaneSizeImageSize)
    where type S (Path_ReportView SaneSizeImageSize) = ReportView
          type A (Path_ReportView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView Item)
    where type S (Path_ReportView Item) = ReportView
          type A (Path_ReportView Item) = Item
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView MIM)
    where type S (Path_ReportView MIM) = ReportView
          type A (Path_ReportView MIM) = MIM
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView CIString)
    where type S (Path_ReportView CIString) = ReportView
          type A (Path_ReportView CIString) = CIString
          toLens (Path_ReportView__reportAbbrevs _x) = (\f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))) . toLens _x
instance ToLens (Path_ReportView URI)
    where type S (Path_ReportView URI) = ReportView
          type A (Path_ReportView URI) = URI
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
instance ToLens (Path_ReportView Text)
    where type S (Path_ReportView Text) = ReportView
          type A (Path_ReportView Text) = Text
          toLens (Path_ReportView__reportName _x) = (\f x -> fmap (\y -> x{_reportName = y}) (f (_reportName x))) . toLens _x
          toLens (Path_ReportView__reportDate _x) = (\f x -> fmap (\y -> x{_reportDate = y}) (f (_reportDate x))) . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = (\f x -> fmap (\y -> x{_reportContractDate = y}) (f (_reportContractDate x))) . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = (\f x -> fmap (\y -> x{_reportInspectionDate = y}) (f (_reportInspectionDate x))) . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = (\f x -> fmap (\y -> x{_reportEffectiveDate = y}) (f (_reportEffectiveDate x))) . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = (\f x -> fmap (\y -> x{_reportAuthors = y}) (f (_reportAuthors x))) . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = (\f x -> fmap (\y -> x{_reportPreparer = y}) (f (_reportPreparer x))) . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = (\f x -> fmap (\y -> x{_reportPreparerEIN = y}) (f (_reportPreparerEIN x))) . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = (\f x -> fmap (\y -> x{_reportPreparerAddress = y}) (f (_reportPreparerAddress x))) . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = (\f x -> fmap (\y -> x{_reportPreparerEMail = y}) (f (_reportPreparerEMail x))) . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = (\f x -> fmap (\y -> x{_reportPreparerWebsite = y}) (f (_reportPreparerWebsite x))) . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = (\f x -> fmap (\y -> x{_reportAbbrevs = y}) (f (_reportAbbrevs x))) . toLens _x
          toLens (Path_ReportView__reportTitle _x) = (\f x -> fmap (\y -> x{_reportTitle = y}) (f (_reportTitle x))) . toLens _x
          toLens (Path_ReportView__reportHeader _x) = (\f x -> fmap (\y -> x{_reportHeader = y}) (f (_reportHeader x))) . toLens _x
          toLens (Path_ReportView__reportFooter _x) = (\f x -> fmap (\y -> x{_reportFooter = y}) (f (_reportFooter x))) . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = (\f x -> fmap (\y -> x{_reportValueTypeInfo = y}) (f (_reportValueTypeInfo x))) . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = (\f x -> fmap (\y -> x{_reportValueApproachInfo = y}) (f (_reportValueApproachInfo x))) . toLens _x
          toLens (Path_ReportView__reportClientName _x) = (\f x -> fmap (\y -> x{_reportClientName = y}) (f (_reportClientName x))) . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = (\f x -> fmap (\y -> x{_reportClientAddress = y}) (f (_reportClientAddress x))) . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = (\f x -> fmap (\y -> x{_reportClientGreeting = y}) (f (_reportClientGreeting x))) . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = (\f x -> fmap (\y -> x{_reportItemsOwnerFull = y}) (f (_reportItemsOwnerFull x))) . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = (\f x -> fmap (\y -> x{_reportItemsOwner = y}) (f (_reportItemsOwner x))) . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = (\f x -> fmap (\y -> x{_reportBriefItems = y}) (f (_reportBriefItems x))) . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = (\f x -> fmap (\y -> x{_reportInspectionLocation = y}) (f (_reportInspectionLocation x))) . toLens _x
          toLens (Path_ReportView__reportBody _x) = (\f x -> fmap (\y -> x{_reportBody = y}) (f (_reportBody x))) . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = (\f x -> fmap (\y -> x{_reportGlossary = y}) (f (_reportGlossary x))) . toLens _x
          toLens (Path_ReportView__reportSources _x) = (\f x -> fmap (\y -> x{_reportSources = y}) (f (_reportSources x))) . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = (\f x -> fmap (\y -> x{_reportLetterOfTransmittal = y}) (f (_reportLetterOfTransmittal x))) . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = (\f x -> fmap (\y -> x{_reportScopeOfWork = y}) (f (_reportScopeOfWork x))) . toLens _x
          toLens (Path_ReportView__reportCertification _x) = (\f x -> fmap (\y -> x{_reportCertification = y}) (f (_reportCertification x))) . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = (\f x -> fmap (\y -> x{_reportLimitingConditions = y}) (f (_reportLimitingConditions x))) . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = (\f x -> fmap (\y -> x{_reportPrivacyPolicy = y}) (f (_reportPrivacyPolicy x))) . toLens _x
          toLens (Path_ReportView__reportPerms _x) = (\f x -> fmap (\y -> x{_reportPerms = y}) (f (_reportPerms x))) . toLens _x
          toLens (Path_ReportView__reportBranding _x) = (\f x -> fmap (\y -> x{_reportBranding = y}) (f (_reportBranding x))) . toLens _x
instance ToLens (Path_ReportView UserId)
    where type S (Path_ReportView UserId) = ReportView
          type A (Path_ReportView UserId) = UserId
          toLens (Path_ReportView__reportPerms _x) = (\f x -> fmap (\y -> x{_reportPerms = y}) (f (_reportPerms x))) . toLens _x
instance ToLens (Path_ReportView UUID)
    where type S (Path_ReportView UUID) = ReportView
          type A (Path_ReportView UUID) = UUID
          toLens (Path_ReportView__reportUUID _x) = \f x -> fmap (\y -> x{_reportUUID = y}) (f (_reportUUID x))
instance ToLens (Path_SaneSizeImageSize String)
    where type S (Path_SaneSizeImageSize String) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize String) = String
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Double)
    where type S (Path_SaneSizeImageSize Double) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Double) = Double
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Dimension)
    where type S (Path_SaneSizeImageSize Dimension) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Dimension) = Dimension
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize ImageSize)
    where type S (Path_SaneSizeImageSize ImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize ImageSize) = ImageSize
          toLens (Path_SaneSizeImageSize_View _) = viewLens :: Lens' (SaneSize ImageSize) ImageSize
instance ToLens (Path_SaneSizeImageSize Units)
    where type S (Path_SaneSizeImageSize Units) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Units) = Units
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize JSONText)
    where type S (Path_SaneSizeImageSize JSONText) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize JSONText) = JSONText
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize SaneSizeImageSize)
    where type S (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          toLens _ = id
instance ToLens (Path_String String)
    where type S (Path_String String) = String
          type A (Path_String String) = String
          toLens _ = id
instance ToLens (Path_String JSONText)
    where type S (Path_String JSONText) = String
          type A (Path_String JSONText) = JSONText
          toLens (Path_String_View _) = viewLens :: Lens' ([Char]) JSONText
instance ToLens (Path_Text JSONText)
    where type S (Path_Text JSONText) = Text
          type A (Path_Text JSONText) = JSONText
          toLens (Path_Text_View _) = viewLens :: Lens' Text JSONText
instance ToLens (Path_Text Text)
    where type S (Path_Text Text) = Text
          type A (Path_Text Text) = Text
          toLens _ = id
instance ToLens (Path_URI URI)
    where type S (Path_URI URI) = URI
          type A (Path_URI URI) = URI
          toLens _ = id
instance ToLens (Path_UUID UUID)
    where type S (Path_UUID UUID) = UUID
          type A (Path_UUID UUID) = UUID
          toLens _ = id
instance ToLens (Path_Units Units)
    where type S (Path_Units Units) = Units
          type A (Path_Units Units) = Units
          toLens _ = id
instance ToLens (Path_Units JSONText)
    where type S (Path_Units JSONText) = Units
          type A (Path_Units JSONText) = JSONText
          toLens (Path_Units_View _) = viewLens :: Lens' Units JSONText
instance ToLens (Path_UserId UserId)
    where type S (Path_UserId UserId) = UserId
          type A (Path_UserId UserId) = UserId
          toLens _ = id
instance ToLens (Path_UserIds JSONText)
    where type S (Path_UserIds JSONText) = UserIds
          type A (Path_UserIds JSONText) = JSONText
          toLens (Path_UserIds_View v) = (viewLens :: Lens' ([UserId]) Text) . toLens v
instance ToLens (Path_UserIds UserIds)
    where type S (Path_UserIds UserIds) = UserIds
          type A (Path_UserIds UserIds) = UserIds
          toLens _ = id
instance ToLens (Path_UserIds Text)
    where type S (Path_UserIds Text) = UserIds
          type A (Path_UserIds Text) = Text
          toLens (Path_UserIds_View _) = viewLens :: Lens' ([UserId]) Text
instance ToLens (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)))
    where type S (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = ImageFile
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI)))
    where type S (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = EUI
          toLens (Path_Just _) = _Just
instance ToLens (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI)))
    where type S (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          toLens _ = id
instance ToLens (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI)))
    where type S (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = URI
          toLens (Path_Just v) = _Just . toLens v
