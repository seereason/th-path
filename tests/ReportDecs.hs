-- | Use template haskell functions to generate the path types for appraisalscribe.
{-# LANGUAGE CPP #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wall -fno-warn-orphans -fno-warn-incomplete-patterns #-}
module ReportDecs where

import Appraisal.File (File)
import Appraisal.Image
import Appraisal.ImageFile
import Appraisal.IntJS
import Appraisal.Markup (Markup(..))
import Appraisal.Permissions
import Appraisal.Report
import Appraisal.ReportImage
import Appraisal.ReportInstances
import Appraisal.ReportItem
import Appraisal.ReportMap (ReportID(..), ReportMap(..), MRR)
import Appraisal.Utils.CIString (CIString(..))
import Control.Lens (iso, lens, _Just, _1, _2, _Left, _Right, Lens', toListOf, Traversal')
import Data.Generics (Data, Typeable)
import Data.Int (Int64)
import Data.Map (toList)
import Data.Maybe (fromJust, mapMaybe)
import Data.Proxy
import Data.Text (Text)
import Data.Tree (Tree(Node), Forest)
import Data.UserId (UserId(UserId))
import Data.UUID (UUID)
import Data.UUID.Orphans ()
import Language.Haskell.TH.Path.Core
import Language.Haskell.TH.Path.Order (lens_omat, Path_OMap(Path_At), toPairs)
import Language.Haskell.TH.Path.View (View(viewLens))
import Network.URI (URI(URI), URIAuth)

data Path_Author _a
    = Path_Author_authorName (Path_Markup _a) | Path_Author_authorCredentials (Path_Markup _a) | Path_Author
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Bool _a = Path_Bool_View (Path_String _a) | Path_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Branding _a = Path_Branding_View (Path_Text _a) | Path_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_CIString _a = Path_CIString_View (Path_Text _a) | Path_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Dimension _a = Path_Dimension_View (Path_JSONText _a) | Path_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Double _a = Path_Double_View (Path_String _a) | Path_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageCrop _a = Path_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageFile _a = Path_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageSize _a
    = Path_ImageSize_dim (Path_Dimension _a) | Path_ImageSize_size (Path_Double _a) | Path_ImageSize_units (Path_Units _a) | Path_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int _a = Path_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int64 _a = Path_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Integer _a = Path_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Item _a
    = Path_Item_itemName (Path_Text _a) | Path_Item_fields (Path_MIM _a) | Path_Item_images (Path_ReportImages _a) | Path_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_JSONText _a = Path_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Markup _a = Path_Markup_markdownText (Path_Text _a) | Path_Markup_htmlText (Path_Text _a) | Path_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeImageFile _a = Path_MaybeImageFile_View (Path_String _a) | Path_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeReportIntendedUse _a = Path_MaybeReportIntendedUse_View (Path_String _a) | Path_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Permissions _a
    = Path_Permissions_owner (Path_UserId _a) | Path_Permissions_writers (Path_UserIds _a) | Path_Permissions_readers (Path_UserIds _a) | Path_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReadOnlyFilePath _a = Path_ReadOnlyFilePath_View (Path_String _a) | Path_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Report _a = Path_Report_View (Path_ReportView _a) | Path_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportElem _a
    = Path_ReportElem_elemItem (Path_Item _a) | Path_ReportElem_elemText (Path_Markup _a) | Path_ReportElem
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportFlags _a = Path_ReportFlags_hideEmptyItemFields (Path_Bool _a) | Path_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImage _a = Path_ReportImage_View (Path_ReportImageView _a) | Path_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImageView _a
    = Path_ReportImageView__picSize (Path_SaneSizeImageSize _a)
    | Path_ReportImageView__picCrop (Path_ImageCrop _a)
    | Path_ReportImageView__picCaption (Path_Markup _a)
    | Path_ReportImageView__picOriginal (Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a)))
    | Path_ReportImageView__picEditedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picThumbDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picPrinterDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picMustEnlarge (Path_Bool _a)
    | Path_ReportImageView__picEnlargedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportIntendedUse _a = Path_ReportIntendedUse_View (Path_String _a) | Path_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportMap _a = Path_ReportMap_unReportMap (Path_MRR _a) | Path_ReportMap deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStandard _a = Path_ReportStandard_unReportStandard (Path_Int _a) | Path_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStatus _a = Path_ReportStatus_View (Path_String _a) | Path_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueApproachInfo _a
    = Path_ReportValueApproachInfo_reportValueApproachName (Path_Markup _a)
    | Path_ReportValueApproachInfo_reportValueApproachDescription (Path_Markup _a)
    | Path_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueTypeInfo _a
    = Path_ReportValueTypeInfo_reportValueTypeName (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDescription (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDefinition (Path_Markup _a)
    | Path_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportView _a
    = Path_ReportView__reportFolder (Path_ReadOnlyFilePath _a)
    | Path_ReportView__reportName (Path_Markup _a)
    | Path_ReportView__reportDate (Path_Markup _a)
    | Path_ReportView__reportContractDate (Path_Markup _a)
    | Path_ReportView__reportInspectionDate (Path_Markup _a)
    | Path_ReportView__reportEffectiveDate (Path_Markup _a)
    | Path_ReportView__reportAuthors (Path_Authors _a)
    | Path_ReportView__reportPreparer (Path_Markup _a)
    | Path_ReportView__reportPreparerEIN (Path_Markup _a)
    | Path_ReportView__reportPreparerAddress (Path_Markup _a)
    | Path_ReportView__reportPreparerEMail (Path_Markup _a)
    | Path_ReportView__reportPreparerWebsite (Path_Markup _a)
    | Path_ReportView__reportAbbrevs (Path_AbbrevPairs _a)
    | Path_ReportView__reportTitle (Path_Markup _a)
    | Path_ReportView__reportHeader (Path_Markup _a)
    | Path_ReportView__reportFooter (Path_Markup _a)
    | Path_ReportView__reportIntendedUse (Path_MaybeReportIntendedUse _a)
    | Path_ReportView__reportValueTypeInfo (Path_ReportValueTypeInfo _a)
    | Path_ReportView__reportValueApproachInfo (Path_ReportValueApproachInfo _a)
    | Path_ReportView__reportClientName (Path_Markup _a)
    | Path_ReportView__reportClientAddress (Path_Markup _a)
    | Path_ReportView__reportClientGreeting (Path_Markup _a)
    | Path_ReportView__reportItemsOwnerFull (Path_Markup _a)
    | Path_ReportView__reportItemsOwner (Path_Markup _a)
    | Path_ReportView__reportBriefItems (Path_Markup _a)
    | Path_ReportView__reportInspectionLocation (Path_Markup _a)
    | Path_ReportView__reportBody (Path_ReportElems _a)
    | Path_ReportView__reportGlossary (Path_MarkupPairs _a)
    | Path_ReportView__reportSources (Path_MarkupPairs _a)
    | Path_ReportView__reportLetterOfTransmittal (Path_Markup _a)
    | Path_ReportView__reportScopeOfWork (Path_Markup _a)
    | Path_ReportView__reportCertification (Path_Markups _a)
    | Path_ReportView__reportLimitingConditions (Path_Markups _a)
    | Path_ReportView__reportPrivacyPolicy (Path_Markup _a)
    | Path_ReportView__reportPerms (Path_Permissions _a)
    | Path_ReportView__reportRevision (Path_Integer _a)
    | Path_ReportView__reportCreated (Path_EpochMilli _a)
    | Path_ReportView__reportBranding (Path_Branding _a)
    | Path_ReportView__reportStatus (Path_ReportStatus _a)
    | Path_ReportView__reportRedacted (Path_Bool _a)
    | Path_ReportView__reportFlags (Path_ReportFlags _a)
    | Path_ReportView__reportUUID (Path_UUID _a)
    | Path_ReportView__reportOrderByItemName (Path_Bool _a)
    | Path_ReportView__reportDisplayItemName (Path_Bool _a)
    | Path_ReportView__reportStandardsVersion (Path_ReportStandard _a)
    | Path_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_SaneSizeImageSize _a = Path_SaneSizeImageSize_View (Path_ImageSize _a) | Path_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_String _a = Path_String_View (Path_JSONText _a) | Path_String deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Text _a = Path_Text_View (Path_JSONText _a) | Path_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_URI _a = Path_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UUID _a = Path_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Units _a = Path_Units_View (Path_JSONText _a) | Path_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserId _a = Path_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserIds _a = Path_UserIds_View (Path_Text _a) | Path_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Author = UPath_Author_authorName UPath_Markup | UPath_Author_authorCredentials UPath_Markup | UPath_Author deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Bool = UPath_Bool_View UPath_String | UPath_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Branding = UPath_Branding_View UPath_Text | UPath_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_CIString = UPath_CIString_View UPath_Text | UPath_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Dimension = UPath_Dimension_View UPath_JSONText | UPath_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Double = UPath_Double_View UPath_String | UPath_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ImageCrop = UPath_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ImageFile = UPath_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ImageSize
    = UPath_ImageSize_dim UPath_Dimension | UPath_ImageSize_size UPath_Double | UPath_ImageSize_units UPath_Units | UPath_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Int = UPath_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Int64 = UPath_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Integer = UPath_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Item
    = UPath_Item_itemName UPath_Text | UPath_Item_fields UPath_MIM | UPath_Item_images UPath_ReportImages | UPath_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_JSONText = UPath_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Markup = UPath_Markup_markdownText UPath_Text | UPath_Markup_htmlText UPath_Text | UPath_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_MaybeImageFile = UPath_MaybeImageFile_View UPath_String | UPath_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_MaybeReportIntendedUse = UPath_MaybeReportIntendedUse_View UPath_String | UPath_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Permissions
    = UPath_Permissions_owner UPath_UserId | UPath_Permissions_writers UPath_UserIds | UPath_Permissions_readers UPath_UserIds | UPath_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReadOnlyFilePath = UPath_ReadOnlyFilePath_View UPath_String | UPath_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Report = UPath_Report_View UPath_ReportView | UPath_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportElem = UPath_ReportElem_elemItem UPath_Item | UPath_ReportElem_elemText UPath_Markup | UPath_ReportElem deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportFlags = UPath_ReportFlags_hideEmptyItemFields UPath_Bool | UPath_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportImage = UPath_ReportImage_View UPath_ReportImageView | UPath_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportImageView
    = UPath_ReportImageView__picSize UPath_SaneSizeImageSize
    | UPath_ReportImageView__picCrop UPath_ImageCrop
    | UPath_ReportImageView__picCaption UPath_Markup
    | UPath_ReportImageView__picOriginal (Path_Maybe (Path_Either UPath_URI UPath_ImageFile))
    | UPath_ReportImageView__picEditedDeprecated UPath_MaybeImageFile
    | UPath_ReportImageView__picThumbDeprecated UPath_MaybeImageFile
    | UPath_ReportImageView__picPrinterDeprecated UPath_MaybeImageFile
    | UPath_ReportImageView__picMustEnlarge UPath_Bool
    | UPath_ReportImageView__picEnlargedDeprecated UPath_MaybeImageFile
    | UPath_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportIntendedUse = UPath_ReportIntendedUse_View UPath_String | UPath_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportMap = UPath_ReportMap_unReportMap UPath_MRR | UPath_ReportMap deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportStandard = UPath_ReportStandard_unReportStandard UPath_Int | UPath_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportStatus = UPath_ReportStatus_View UPath_String | UPath_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportValueApproachInfo
    = UPath_ReportValueApproachInfo_reportValueApproachName UPath_Markup
    | UPath_ReportValueApproachInfo_reportValueApproachDescription UPath_Markup
    | UPath_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportValueTypeInfo
    = UPath_ReportValueTypeInfo_reportValueTypeName UPath_Markup
    | UPath_ReportValueTypeInfo_reportValueTypeDescription UPath_Markup
    | UPath_ReportValueTypeInfo_reportValueTypeDefinition UPath_Markup
    | UPath_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_ReportView
    = UPath_ReportView__reportFolder UPath_ReadOnlyFilePath
    | UPath_ReportView__reportName UPath_Markup
    | UPath_ReportView__reportDate UPath_Markup
    | UPath_ReportView__reportContractDate UPath_Markup
    | UPath_ReportView__reportInspectionDate UPath_Markup
    | UPath_ReportView__reportEffectiveDate UPath_Markup
    | UPath_ReportView__reportAuthors UPath_Authors
    | UPath_ReportView__reportPreparer UPath_Markup
    | UPath_ReportView__reportPreparerEIN UPath_Markup
    | UPath_ReportView__reportPreparerAddress UPath_Markup
    | UPath_ReportView__reportPreparerEMail UPath_Markup
    | UPath_ReportView__reportPreparerWebsite UPath_Markup
    | UPath_ReportView__reportAbbrevs UPath_AbbrevPairs
    | UPath_ReportView__reportTitle UPath_Markup
    | UPath_ReportView__reportHeader UPath_Markup
    | UPath_ReportView__reportFooter UPath_Markup
    | UPath_ReportView__reportIntendedUse UPath_MaybeReportIntendedUse
    | UPath_ReportView__reportValueTypeInfo UPath_ReportValueTypeInfo
    | UPath_ReportView__reportValueApproachInfo UPath_ReportValueApproachInfo
    | UPath_ReportView__reportClientName UPath_Markup
    | UPath_ReportView__reportClientAddress UPath_Markup
    | UPath_ReportView__reportClientGreeting UPath_Markup
    | UPath_ReportView__reportItemsOwnerFull UPath_Markup
    | UPath_ReportView__reportItemsOwner UPath_Markup
    | UPath_ReportView__reportBriefItems UPath_Markup
    | UPath_ReportView__reportInspectionLocation UPath_Markup
    | UPath_ReportView__reportBody UPath_ReportElems
    | UPath_ReportView__reportGlossary UPath_MarkupPairs
    | UPath_ReportView__reportSources UPath_MarkupPairs
    | UPath_ReportView__reportLetterOfTransmittal UPath_Markup
    | UPath_ReportView__reportScopeOfWork UPath_Markup
    | UPath_ReportView__reportCertification UPath_Markups
    | UPath_ReportView__reportLimitingConditions UPath_Markups
    | UPath_ReportView__reportPrivacyPolicy UPath_Markup
    | UPath_ReportView__reportPerms UPath_Permissions
    | UPath_ReportView__reportRevision UPath_Integer
    | UPath_ReportView__reportCreated UPath_EpochMilli
    | UPath_ReportView__reportBranding UPath_Branding
    | UPath_ReportView__reportStatus UPath_ReportStatus
    | UPath_ReportView__reportRedacted UPath_Bool
    | UPath_ReportView__reportFlags UPath_ReportFlags
    | UPath_ReportView__reportUUID UPath_UUID
    | UPath_ReportView__reportOrderByItemName UPath_Bool
    | UPath_ReportView__reportDisplayItemName UPath_Bool
    | UPath_ReportView__reportStandardsVersion UPath_ReportStandard
    | UPath_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_SaneSizeImageSize = UPath_SaneSizeImageSize_View UPath_ImageSize | UPath_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_String = UPath_String_View UPath_JSONText | UPath_String deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Text = UPath_Text_View UPath_JSONText | UPath_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_URI = UPath_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_UUID = UPath_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_Units = UPath_Units_View UPath_JSONText | UPath_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_UserId = UPath_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
data UPath_UserIds = UPath_UserIds_View UPath_Text | UPath_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
data Univ
    = U1 String
    | U2 Int64
    | U3 Int
    | U4 Bool
    | U5 Double
    | U6 Dimension
    | U7 ImageCrop
    | U8 ImageSize
    | U9 Units
    | U10 ImageFile
    | U11 Integer
    | U12 JSONText
    | U13 Markup
    | U14 Permissions
    | U15 UserIds
    | U16 AbbrevPair
    | U17 AbbrevPairs
    | U18 Author
    | U19 Authors
    | U20 Branding
    | U21 MarkupPair
    | U22 MarkupPairs
    | U23 Markups
    | U24 MaybeReportIntendedUse
    | U25 Report
    | U26 ReportElem
    | U27 ReportElems
    | U28 ReportFlags
    | U29 ReportIntendedUse
    | U30 ReportStandard
    | U31 ReportStatus
    | U32 ReportValueApproachInfo
    | U33 ReportValueTypeInfo
    | U34 EUI
    | U35 MEUI
    | U36 MaybeImageFile
    | U37 ReportImage
    | U38 ReportImages
    | U39 ReadOnlyFilePath
    | U40 ReportImageView
    | U41 ReportView
    | U42 SaneSizeImageSize
    | U43 Item
    | U44 MIM
    | U45 MRR
    | U46 ReportMap
    | U47 CIString
    | U48 URI
    | U49 Text
    | U50 UserId
    | U51 UUID
    deriving (Eq, Show)
type Path_AbbrevPair _a = Path_Pair (Path_CIString _a) (Path_Markup _a)
type Path_AbbrevPairs _a = Path_OMap AbbrevPairID (Path_Pair (Path_CIString _a) (Path_Markup _a))
type Path_Authors _a = Path_OMap AuthorID (Path_Author _a)
type Path_Checksum _a = Path_String _a
type Path_EUI _a = Path_Either (Path_URI _a) (Path_ImageFile _a)
type Path_EpochMilli _a = Path_Int64 _a
type Path_FilePath _a = Path_String _a
type Path_MEUI _a = Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a))
type Path_MIM _a = Path_Map ItemFieldName (Path_Markup _a)
type Path_MRR _a = Path_Map ReportID (Path_Report _a)
type Path_MarkupPair _a = Path_Pair (Path_Markup _a) (Path_Markup _a)
type Path_MarkupPairs _a = Path_OMap MarkupPairID (Path_Pair (Path_Markup _a) (Path_Markup _a))
type Path_Markups _a = Path_OMap MarkupID (Path_Markup _a)
type Path_ReportElems _a = Path_OMap ReportElemID (Path_ReportElem _a)
type Path_ReportImages _a = Path_OMap ReportImageID (Path_ReportImage _a)
type Path_Size _a = Path_Int _a
type UPath_AbbrevPair = Path_Pair UPath_CIString UPath_Markup
type UPath_AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair UPath_CIString UPath_Markup)
type UPath_Authors = Path_OMap AuthorID UPath_Author
type UPath_Checksum = UPath_String
type UPath_EUI = Path_Either UPath_URI UPath_ImageFile
type UPath_EpochMilli = UPath_Int64
type UPath_FilePath = UPath_String
type UPath_MEUI = Path_Maybe (Path_Either UPath_URI UPath_ImageFile)
type UPath_MIM = Path_Map ItemFieldName UPath_Markup
type UPath_MRR = Path_Map ReportID UPath_Report
type UPath_MarkupPair = Path_Pair UPath_Markup UPath_Markup
type UPath_MarkupPairs = Path_OMap MarkupPairID (Path_Pair UPath_Markup UPath_Markup)
type UPath_Markups = Path_OMap MarkupID UPath_Markup
type UPath_ReportElems = Path_OMap ReportElemID UPath_ReportElem
type UPath_ReportImages = Path_OMap ReportImageID UPath_ReportImage
type UPath_Size = UPath_Int
class HasAuthor c
    where lens_author :: Lens' c Author
          lens_Author_authorCredentials :: forall . Lens' c Markup
          lens_Author_authorCredentials = (.) lens_author lens_Author_authorCredentials
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName :: forall . Lens' c Markup
          lens_Author_authorName = (.) lens_author lens_Author_authorName
          {-# INLINE lens_Author_authorName #-}
class HasBool c
    where lens_bool :: Lens' c Bool
class HasBranding c
    where lens_branding :: Lens' c Branding
class HasCIString c
    where lens_cIString :: Lens' c CIString
          lens_CIString_unCIString :: forall . Lens' c String
          lens_CIString_unCIString = (.) lens_cIString lens_CIString_unCIString
          {-# INLINE lens_CIString_unCIString #-}
class HasDimension c
    where lens_dimension :: Lens' c Dimension
class HasDouble c
    where lens_double :: Lens' c Double
class HasImageCrop c
    where lens_imageCrop :: Lens' c ImageCrop
          lens_ImageCrop_bottomCrop :: forall . Lens' c Int
          lens_ImageCrop_bottomCrop = (.) lens_imageCrop lens_ImageCrop_bottomCrop
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop :: forall . Lens' c Int
          lens_ImageCrop_leftCrop = (.) lens_imageCrop lens_ImageCrop_leftCrop
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop :: forall . Lens' c Int
          lens_ImageCrop_rightCrop = (.) lens_imageCrop lens_ImageCrop_rightCrop
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation :: forall . Lens' c Int
          lens_ImageCrop_rotation = (.) lens_imageCrop lens_ImageCrop_rotation
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop :: forall . Lens' c Int
          lens_ImageCrop_topCrop = (.) lens_imageCrop lens_ImageCrop_topCrop
          {-# INLINE lens_ImageCrop_topCrop #-}
class HasImageFile c
    where lens_imageFile :: Lens' c ImageFile
          lens_ImageFile_imageFile :: forall . Lens' c File
          lens_ImageFile_imageFile = (.) lens_imageFile lens_ImageFile_imageFile
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight :: forall . Lens' c Int
          lens_ImageFile_imageFileHeight = (.) lens_imageFile lens_ImageFile_imageFileHeight
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal :: forall . Lens' c Int
          lens_ImageFile_imageFileMaxVal = (.) lens_imageFile lens_ImageFile_imageFileMaxVal
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType :: forall . Lens' c ImageType
          lens_ImageFile_imageFileType = (.) lens_imageFile lens_ImageFile_imageFileType
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth :: forall . Lens' c Int
          lens_ImageFile_imageFileWidth = (.) lens_imageFile lens_ImageFile_imageFileWidth
          {-# INLINE lens_ImageFile_imageFileWidth #-}
class HasImageSize c
    where lens_imageSize :: Lens' c ImageSize
          lens_ImageSize_dim :: forall . Lens' c Dimension
          lens_ImageSize_dim = (.) lens_imageSize lens_ImageSize_dim
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size :: forall . Lens' c Double
          lens_ImageSize_size = (.) lens_imageSize lens_ImageSize_size
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units :: forall . Lens' c Units
          lens_ImageSize_units = (.) lens_imageSize lens_ImageSize_units
          {-# INLINE lens_ImageSize_units #-}
class HasInt c
    where lens_int :: Lens' c Int
class HasInt64 c
    where lens_int64 :: Lens' c Int64
class HasInteger c
    where lens_integer :: Lens' c Integer
class HasItem c
    where lens_item :: Lens' c Item
          lens_Item_fields :: forall . Lens' c MIM
          lens_Item_fields = (.) lens_item lens_Item_fields
          {-# INLINE lens_Item_fields #-}
          lens_Item_images :: forall . Lens' c ReportImages
          lens_Item_images = (.) lens_item lens_Item_images
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName :: forall . Lens' c Text
          lens_Item_itemName = (.) lens_item lens_Item_itemName
          {-# INLINE lens_Item_itemName #-}
class HasJSONText c
    where lens_jSONText :: Lens' c JSONText
          lens_JSONText_unJSONText :: forall . Lens' c String
          lens_JSONText_unJSONText = (.) lens_jSONText lens_JSONText_unJSONText
          {-# INLINE lens_JSONText_unJSONText #-}
class HasMarkup c
    where lens_markup :: Lens' c Markup
          lens_Markup_htmlText :: forall . Traversal' c Text
          lens_Markup_htmlText = (.) lens_markup lens_Markup_htmlText
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText :: forall . Traversal' c Text
          lens_Markup_markdownText = (.) lens_markup lens_Markup_markdownText
          {-# INLINE lens_Markup_markdownText #-}
class HasPermissions c
    where lens_permissions :: Lens' c Permissions
          lens_Permissions_owner :: forall . Lens' c UserId
          lens_Permissions_owner = (.) lens_permissions lens_Permissions_owner
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers :: forall . Lens' c UserIds
          lens_Permissions_readers = (.) lens_permissions lens_Permissions_readers
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers :: forall . Lens' c UserIds
          lens_Permissions_writers = (.) lens_permissions lens_Permissions_writers
          {-# INLINE lens_Permissions_writers #-}
class HasReport c
    where lens_report :: Lens' c Report
          lens_Report_reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_Report_reportAbbrevs = (.) lens_report lens_Report_reportAbbrevs
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors :: forall . Lens' c Authors
          lens_Report_reportAuthors = (.) lens_report lens_Report_reportAuthors
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody :: forall . Lens' c ReportElems
          lens_Report_reportBody = (.) lens_report lens_Report_reportBody
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding :: forall . Lens' c Branding
          lens_Report_reportBranding = (.) lens_report lens_Report_reportBranding
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems :: forall . Lens' c Markup
          lens_Report_reportBriefItems = (.) lens_report lens_Report_reportBriefItems
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification :: forall . Lens' c Markups
          lens_Report_reportCertification = (.) lens_report lens_Report_reportCertification
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress :: forall . Lens' c Markup
          lens_Report_reportClientAddress = (.) lens_report lens_Report_reportClientAddress
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting :: forall . Lens' c Markup
          lens_Report_reportClientGreeting = (.) lens_report lens_Report_reportClientGreeting
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName :: forall . Lens' c Markup
          lens_Report_reportClientName = (.) lens_report lens_Report_reportClientName
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate :: forall . Lens' c Markup
          lens_Report_reportContractDate = (.) lens_report lens_Report_reportContractDate
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated :: forall . Lens' c EpochMilli
          lens_Report_reportCreated = (.) lens_report lens_Report_reportCreated
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate :: forall . Lens' c Markup
          lens_Report_reportDate = (.) lens_report lens_Report_reportDate
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName :: forall . Lens' c Bool
          lens_Report_reportDisplayItemName = (.) lens_report lens_Report_reportDisplayItemName
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate :: forall . Lens' c Markup
          lens_Report_reportEffectiveDate = (.) lens_report lens_Report_reportEffectiveDate
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags :: forall . Lens' c ReportFlags
          lens_Report_reportFlags = (.) lens_report lens_Report_reportFlags
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder :: forall . Lens' c FilePath
          lens_Report_reportFolder = (.) lens_report lens_Report_reportFolder
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter :: forall . Lens' c Markup
          lens_Report_reportFooter = (.) lens_report lens_Report_reportFooter
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary :: forall . Lens' c MarkupPairs
          lens_Report_reportGlossary = (.) lens_report lens_Report_reportGlossary
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader :: forall . Lens' c Markup
          lens_Report_reportHeader = (.) lens_report lens_Report_reportHeader
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate :: forall . Lens' c Markup
          lens_Report_reportInspectionDate = (.) lens_report lens_Report_reportInspectionDate
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation :: forall . Lens' c Markup
          lens_Report_reportInspectionLocation = (.) lens_report lens_Report_reportInspectionLocation
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_Report_reportIntendedUse = (.) lens_report lens_Report_reportIntendedUse
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner :: forall . Lens' c Markup
          lens_Report_reportItemsOwner = (.) lens_report lens_Report_reportItemsOwner
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull :: forall . Lens' c Markup
          lens_Report_reportItemsOwnerFull = (.) lens_report lens_Report_reportItemsOwnerFull
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_Report_reportLetterOfTransmittal = (.) lens_report lens_Report_reportLetterOfTransmittal
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions :: forall . Lens' c Markups
          lens_Report_reportLimitingConditions = (.) lens_report lens_Report_reportLimitingConditions
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName :: forall . Lens' c Markup
          lens_Report_reportName = (.) lens_report lens_Report_reportName
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName :: forall . Lens' c Bool
          lens_Report_reportOrderByItemName = (.) lens_report lens_Report_reportOrderByItemName
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms :: forall . Lens' c Permissions
          lens_Report_reportPerms = (.) lens_report lens_Report_reportPerms
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer :: forall . Lens' c Markup
          lens_Report_reportPreparer = (.) lens_report lens_Report_reportPreparer
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress :: forall . Lens' c Markup
          lens_Report_reportPreparerAddress = (.) lens_report lens_Report_reportPreparerAddress
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN :: forall . Lens' c Markup
          lens_Report_reportPreparerEIN = (.) lens_report lens_Report_reportPreparerEIN
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail :: forall . Lens' c Markup
          lens_Report_reportPreparerEMail = (.) lens_report lens_Report_reportPreparerEMail
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite :: forall . Lens' c Markup
          lens_Report_reportPreparerWebsite = (.) lens_report lens_Report_reportPreparerWebsite
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy :: forall . Lens' c Markup
          lens_Report_reportPrivacyPolicy = (.) lens_report lens_Report_reportPrivacyPolicy
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted :: forall . Lens' c Bool
          lens_Report_reportRedacted = (.) lens_report lens_Report_reportRedacted
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision :: forall . Lens' c Integer
          lens_Report_reportRevision = (.) lens_report lens_Report_reportRevision
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork :: forall . Lens' c Markup
          lens_Report_reportScopeOfWork = (.) lens_report lens_Report_reportScopeOfWork
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources :: forall . Lens' c MarkupPairs
          lens_Report_reportSources = (.) lens_report lens_Report_reportSources
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_Report_reportStandardsVersion = (.) lens_report lens_Report_reportStandardsVersion
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus :: forall . Lens' c ReportStatus
          lens_Report_reportStatus = (.) lens_report lens_Report_reportStatus
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle :: forall . Lens' c Markup
          lens_Report_reportTitle = (.) lens_report lens_Report_reportTitle
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID :: forall . Lens' c UUID
          lens_Report_reportUUID = (.) lens_report lens_Report_reportUUID
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_Report_reportValueApproachInfo = (.) lens_report lens_Report_reportValueApproachInfo
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_Report_reportValueTypeInfo = (.) lens_report lens_Report_reportValueTypeInfo
          {-# INLINE lens_Report_reportValueTypeInfo #-}
class HasReportElem c
    where lens_reportElem :: Lens' c ReportElem
          lens_ReportElem_elemItem :: forall . Traversal' c Item
          lens_ReportElem_elemItem = (.) lens_reportElem lens_ReportElem_elemItem
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText :: forall . Traversal' c Markup
          lens_ReportElem_elemText = (.) lens_reportElem lens_ReportElem_elemText
          {-# INLINE lens_ReportElem_elemText #-}
class HasReportFlags c
    where lens_reportFlags :: Lens' c ReportFlags
          lens_ReportFlags_hideEmptyItemFields :: forall . Lens' c Bool
          lens_ReportFlags_hideEmptyItemFields = (.) lens_reportFlags lens_ReportFlags_hideEmptyItemFields
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
class HasReportImage c
    where lens_reportImage :: Lens' c ReportImage
          lens_ReportImage_picCaption :: forall . Lens' c Markup
          lens_ReportImage_picCaption = (.) lens_reportImage lens_ReportImage_picCaption
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop :: forall . Lens' c ImageCrop
          lens_ReportImage_picCrop = (.) lens_reportImage lens_ReportImage_picCrop
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEditedDeprecated = (.) lens_reportImage lens_ReportImage_picEditedDeprecated
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEnlargedDeprecated = (.) lens_reportImage lens_ReportImage_picEnlargedDeprecated
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImage_picMustEnlarge = (.) lens_reportImage lens_ReportImage_picMustEnlarge
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal :: forall . Lens' c MEUI
          lens_ReportImage_picOriginal = (.) lens_reportImage lens_ReportImage_picOriginal
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picPrinterDeprecated = (.) lens_reportImage lens_ReportImage_picPrinterDeprecated
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize :: forall . Lens' c ImageSize
          lens_ReportImage_picSize = (.) lens_reportImage lens_ReportImage_picSize
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picThumbDeprecated = (.) lens_reportImage lens_ReportImage_picThumbDeprecated
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
class HasReportImageView c
    where lens_reportImageView :: Lens' c ReportImageView
          lens_ReportImageView__picCaption :: forall . Lens' c Markup
          lens_ReportImageView__picCaption = (.) lens_reportImageView lens_ReportImageView__picCaption
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop :: forall . Lens' c ImageCrop
          lens_ReportImageView__picCrop = (.) lens_reportImageView lens_ReportImageView__picCrop
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEditedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEditedDeprecated
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEnlargedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEnlargedDeprecated
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImageView__picMustEnlarge = (.) lens_reportImageView lens_ReportImageView__picMustEnlarge
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal :: forall . Lens' c (Maybe (Either URI ImageFile))
          lens_ReportImageView__picOriginal = (.) lens_reportImageView lens_ReportImageView__picOriginal
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picPrinterDeprecated = (.) lens_reportImageView lens_ReportImageView__picPrinterDeprecated
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize :: forall . Lens' c SaneSizeImageSize
          lens_ReportImageView__picSize = (.) lens_reportImageView lens_ReportImageView__picSize
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picThumbDeprecated = (.) lens_reportImageView lens_ReportImageView__picThumbDeprecated
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
class HasReportIntendedUse c
    where lens_reportIntendedUse :: Lens' c ReportIntendedUse
class HasReportMap c
    where lens_reportMap :: Lens' c ReportMap
          lens_ReportMap_unReportMap :: forall . Lens' c MRR
          lens_ReportMap_unReportMap = (.) lens_reportMap lens_ReportMap_unReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
class HasReportStandard c
    where lens_reportStandard :: Lens' c ReportStandard
          lens_ReportStandard_unReportStandard :: forall . Lens' c Int
          lens_ReportStandard_unReportStandard = (.) lens_reportStandard lens_ReportStandard_unReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
class HasReportStatus c
    where lens_reportStatus :: Lens' c ReportStatus
class HasReportValueApproachInfo c
    where lens_reportValueApproachInfo :: Lens' c ReportValueApproachInfo
          lens_ReportValueApproachInfo_reportValueApproachDescription :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachDescription = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachDescription
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachName = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachName
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
class HasReportValueTypeInfo c
    where lens_reportValueTypeInfo :: Lens' c ReportValueTypeInfo
          lens_ReportValueTypeInfo_reportValueTypeDefinition :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDefinition = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDefinition
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDescription = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDescription
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeName = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeName
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
class HasReportView c
    where lens_reportView :: Lens' c ReportView
          lens_ReportView__reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_ReportView__reportAbbrevs = (.) lens_reportView lens_ReportView__reportAbbrevs
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors :: forall . Lens' c Authors
          lens_ReportView__reportAuthors = (.) lens_reportView lens_ReportView__reportAuthors
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody :: forall . Lens' c ReportElems
          lens_ReportView__reportBody = (.) lens_reportView lens_ReportView__reportBody
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding :: forall . Lens' c Branding
          lens_ReportView__reportBranding = (.) lens_reportView lens_ReportView__reportBranding
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems :: forall . Lens' c Markup
          lens_ReportView__reportBriefItems = (.) lens_reportView lens_ReportView__reportBriefItems
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification :: forall . Lens' c Markups
          lens_ReportView__reportCertification = (.) lens_reportView lens_ReportView__reportCertification
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress :: forall . Lens' c Markup
          lens_ReportView__reportClientAddress = (.) lens_reportView lens_ReportView__reportClientAddress
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting :: forall . Lens' c Markup
          lens_ReportView__reportClientGreeting = (.) lens_reportView lens_ReportView__reportClientGreeting
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName :: forall . Lens' c Markup
          lens_ReportView__reportClientName = (.) lens_reportView lens_ReportView__reportClientName
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate :: forall . Lens' c Markup
          lens_ReportView__reportContractDate = (.) lens_reportView lens_ReportView__reportContractDate
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated :: forall . Lens' c EpochMilli
          lens_ReportView__reportCreated = (.) lens_reportView lens_ReportView__reportCreated
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate :: forall . Lens' c Markup
          lens_ReportView__reportDate = (.) lens_reportView lens_ReportView__reportDate
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName :: forall . Lens' c Bool
          lens_ReportView__reportDisplayItemName = (.) lens_reportView lens_ReportView__reportDisplayItemName
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate :: forall . Lens' c Markup
          lens_ReportView__reportEffectiveDate = (.) lens_reportView lens_ReportView__reportEffectiveDate
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags :: forall . Lens' c ReportFlags
          lens_ReportView__reportFlags = (.) lens_reportView lens_ReportView__reportFlags
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder :: forall . Lens' c ReadOnlyFilePath
          lens_ReportView__reportFolder = (.) lens_reportView lens_ReportView__reportFolder
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter :: forall . Lens' c Markup
          lens_ReportView__reportFooter = (.) lens_reportView lens_ReportView__reportFooter
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary :: forall . Lens' c MarkupPairs
          lens_ReportView__reportGlossary = (.) lens_reportView lens_ReportView__reportGlossary
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader :: forall . Lens' c Markup
          lens_ReportView__reportHeader = (.) lens_reportView lens_ReportView__reportHeader
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate :: forall . Lens' c Markup
          lens_ReportView__reportInspectionDate = (.) lens_reportView lens_ReportView__reportInspectionDate
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation :: forall . Lens' c Markup
          lens_ReportView__reportInspectionLocation = (.) lens_reportView lens_ReportView__reportInspectionLocation
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_ReportView__reportIntendedUse = (.) lens_reportView lens_ReportView__reportIntendedUse
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwner = (.) lens_reportView lens_ReportView__reportItemsOwner
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwnerFull = (.) lens_reportView lens_ReportView__reportItemsOwnerFull
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_ReportView__reportLetterOfTransmittal = (.) lens_reportView lens_ReportView__reportLetterOfTransmittal
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions :: forall . Lens' c Markups
          lens_ReportView__reportLimitingConditions = (.) lens_reportView lens_ReportView__reportLimitingConditions
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName :: forall . Lens' c Markup
          lens_ReportView__reportName = (.) lens_reportView lens_ReportView__reportName
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName :: forall . Lens' c Bool
          lens_ReportView__reportOrderByItemName = (.) lens_reportView lens_ReportView__reportOrderByItemName
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms :: forall . Lens' c Permissions
          lens_ReportView__reportPerms = (.) lens_reportView lens_ReportView__reportPerms
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer :: forall . Lens' c Markup
          lens_ReportView__reportPreparer = (.) lens_reportView lens_ReportView__reportPreparer
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress :: forall . Lens' c Markup
          lens_ReportView__reportPreparerAddress = (.) lens_reportView lens_ReportView__reportPreparerAddress
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEIN = (.) lens_reportView lens_ReportView__reportPreparerEIN
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEMail = (.) lens_reportView lens_ReportView__reportPreparerEMail
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite :: forall . Lens' c Markup
          lens_ReportView__reportPreparerWebsite = (.) lens_reportView lens_ReportView__reportPreparerWebsite
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy :: forall . Lens' c Markup
          lens_ReportView__reportPrivacyPolicy = (.) lens_reportView lens_ReportView__reportPrivacyPolicy
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted :: forall . Lens' c Bool
          lens_ReportView__reportRedacted = (.) lens_reportView lens_ReportView__reportRedacted
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision :: forall . Lens' c Integer
          lens_ReportView__reportRevision = (.) lens_reportView lens_ReportView__reportRevision
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork :: forall . Lens' c Markup
          lens_ReportView__reportScopeOfWork = (.) lens_reportView lens_ReportView__reportScopeOfWork
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources :: forall . Lens' c MarkupPairs
          lens_ReportView__reportSources = (.) lens_reportView lens_ReportView__reportSources
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_ReportView__reportStandardsVersion = (.) lens_reportView lens_ReportView__reportStandardsVersion
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus :: forall . Lens' c ReportStatus
          lens_ReportView__reportStatus = (.) lens_reportView lens_ReportView__reportStatus
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle :: forall . Lens' c Markup
          lens_ReportView__reportTitle = (.) lens_reportView lens_ReportView__reportTitle
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID :: forall . Lens' c UUID
          lens_ReportView__reportUUID = (.) lens_reportView lens_ReportView__reportUUID
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_ReportView__reportValueApproachInfo = (.) lens_reportView lens_ReportView__reportValueApproachInfo
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_ReportView__reportValueTypeInfo = (.) lens_reportView lens_ReportView__reportValueTypeInfo
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
class HasText c
    where lens_text :: Lens' c Text
class HasURI c
    where lens_uRI :: Lens' c URI
          lens_URI_uriAuthority :: forall . Lens' c (Maybe URIAuth)
          lens_URI_uriAuthority = (.) lens_uRI lens_URI_uriAuthority
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment :: forall . Lens' c String
          lens_URI_uriFragment = (.) lens_uRI lens_URI_uriFragment
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath :: forall . Lens' c String
          lens_URI_uriPath = (.) lens_uRI lens_URI_uriPath
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery :: forall . Lens' c String
          lens_URI_uriQuery = (.) lens_uRI lens_URI_uriQuery
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme :: forall . Lens' c String
          lens_URI_uriScheme = (.) lens_uRI lens_URI_uriScheme
          {-# INLINE lens_URI_uriScheme #-}
class HasUUID c
    where lens_uUID :: Lens' c UUID
class HasUnits c
    where lens_units :: Lens' c Units
class HasUserId c
    where lens_userId :: Lens' c UserId
          lens_UserId__unUserId :: forall . Lens' c Integer
          lens_UserId__unUserId = (.) lens_userId lens_UserId__unUserId
          {-# INLINE lens_UserId__unUserId #-}
instance PathsOld Univ String String
    where type PathOld Univ String String = Path_String String
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ String
          peekPathOld (Proxy) (Peek_String_String _p _) = _p :: PathOld Univ String String
          peekValueOld (Proxy) (Peek_String_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_String_String _p _x :: PeekOld Univ String
instance PathsOld Univ String JSONText
    where type PathOld Univ String JSONText = Path_String JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_String_View :: PathOld Univ JSONText JSONText ->
                                                                                                                                                                                       PathOld Univ String JSONText,
                                                                                                                                                                   a')) (toListOf (toLens (Path_String_View (idPath :: PathOld Univ
                                                                                                                                                                                                                               JSONText
                                                                                                                                                                                                                               JSONText))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                            JSONText
                                                                                                                                                                                                                                                            JSONText ->
                                                                                                                                                                                                                                                    PathOld Univ
                                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                                            JSONText,
                                                                                                                                                                                                                                                    JSONText)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                                                            JSONText])
          peekOld (p@(Path_String_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ String
          peekPathOld (Proxy) (Peek_String_JSONText _p _) = _p :: PathOld Univ String JSONText
          peekValueOld (Proxy) (Peek_String_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_String_JSONText _p _x :: PeekOld Univ String
instance PathsOld Univ Int64 Int64
    where type PathOld Univ Int64 Int64 = Path_Int64 Int64
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Int64
          peekPathOld (Proxy) (Peek_Int64_Int64 _p _) = _p :: PathOld Univ Int64 Int64
          peekValueOld (Proxy) (Peek_Int64_Int64 _ _x) = _x :: Maybe Int64
          peekConsOld _p _x = Peek_Int64_Int64 _p _x :: PeekOld Univ Int64
instance PathsOld Univ Bool String
    where type PathOld Univ Bool String = Path_Bool String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Bool_View :: PathOld Univ String String ->
                                                                                                                                                                                   PathOld Univ Bool String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_Bool_View (idPath :: PathOld Univ
                                                                                                                                                                                                                           String
                                                                                                                                                                                                                           String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      String ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      Bool
                                                                                                                                                                                                                                                      String,
                                                                                                                                                                                                                                              String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                    Bool
                                                                                                                                                                                                                                                                    String])
          peekOld (p@(Path_Bool_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Bool
          peekPathOld (Proxy) (Peek_Bool_String _p _) = _p :: PathOld Univ Bool String
          peekValueOld (Proxy) (Peek_Bool_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_Bool_String _p _x :: PeekOld Univ Bool
instance PathsOld Univ Bool Bool
    where type PathOld Univ Bool Bool = Path_Bool Bool
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Bool
          peekPathOld (Proxy) (Peek_Bool_Bool _p _) = _p :: PathOld Univ Bool Bool
          peekValueOld (Proxy) (Peek_Bool_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_Bool_Bool _p _x :: PeekOld Univ Bool
instance PathsOld Univ Bool JSONText
    where type PathOld Univ Bool JSONText = Path_Bool JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Bool_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                   PathOld Univ Bool JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_Bool_View (idPath :: PathOld Univ
                                                                                                                                                                                                                           String
                                                                                                                                                                                                                           String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      Bool
                                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                              String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                    Bool
                                                                                                                                                                                                                                                                    JSONText])
          peekOld (p@(Path_Bool_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Bool
          peekPathOld (Proxy) (Peek_Bool_JSONText _p _) = _p :: PathOld Univ Bool JSONText
          peekValueOld (Proxy) (Peek_Bool_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Bool_JSONText _p _x :: PeekOld Univ Bool
instance PathsOld Univ Double String
    where type PathOld Univ Double String = Path_Double String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Double_View :: PathOld Univ String String ->
                                                                                                                                                                                     PathOld Univ Double String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_Double_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             String
                                                                                                                                                                                                                             String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                                        String ->
                                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                                        Double
                                                                                                                                                                                                                                                        String,
                                                                                                                                                                                                                                                String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                      Double
                                                                                                                                                                                                                                                                      String])
          peekOld (p@(Path_Double_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Double
          peekPathOld (Proxy) (Peek_Double_String _p _) = _p :: PathOld Univ Double String
          peekValueOld (Proxy) (Peek_Double_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_Double_String _p _x :: PeekOld Univ Double
instance PathsOld Univ Double Double
    where type PathOld Univ Double Double = Path_Double Double
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Double
          peekPathOld (Proxy) (Peek_Double_Double _p _) = _p :: PathOld Univ Double Double
          peekValueOld (Proxy) (Peek_Double_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_Double_Double _p _x :: PeekOld Univ Double
instance PathsOld Univ Double JSONText
    where type PathOld Univ Double JSONText = Path_Double JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Double_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                     PathOld Univ Double JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_Double_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             String
                                                                                                                                                                                                                             String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                                        Double
                                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                                String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                      Double
                                                                                                                                                                                                                                                                      JSONText])
          peekOld (p@(Path_Double_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Double
          peekPathOld (Proxy) (Peek_Double_JSONText _p _) = _p :: PathOld Univ Double JSONText
          peekValueOld (Proxy) (Peek_Double_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Double_JSONText _p _x :: PeekOld Univ Double
instance PathsOld Univ Int Int
    where type PathOld Univ Int Int = Path_Int Int
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Int
          peekPathOld (Proxy) (Peek_Int_Int _p _) = _p :: PathOld Univ Int Int
          peekValueOld (Proxy) (Peek_Int_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_Int_Int _p _x :: PeekOld Univ Int
instance PathsOld Univ Dimension Dimension
    where type PathOld Univ Dimension Dimension = Path_Dimension Dimension
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Dimension
          peekPathOld (Proxy) (Peek_Dimension_Dimension _p _) = _p :: PathOld Univ Dimension Dimension
          peekValueOld (Proxy) (Peek_Dimension_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_Dimension_Dimension _p _x :: PeekOld Univ Dimension
instance PathsOld Univ Dimension JSONText
    where type PathOld Univ Dimension JSONText = Path_Dimension JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Dimension_View :: PathOld Univ JSONText JSONText ->
                                                                                                                                                                                          PathOld Univ Dimension JSONText,
                                                                                                                                                                   a')) (toListOf (toLens (Path_Dimension_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                  JSONText
                                                                                                                                                                                                                                  JSONText))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                               JSONText
                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                               Dimension
                                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                                       JSONText)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                               Dimension
                                                                                                                                                                                                                                                                               JSONText])
          peekOld (p@(Path_Dimension_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Dimension
          peekPathOld (Proxy) (Peek_Dimension_JSONText _p _) = _p :: PathOld Univ Dimension JSONText
          peekValueOld (Proxy) (Peek_Dimension_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Dimension_JSONText _p _x :: PeekOld Univ Dimension
instance PathsOld Univ ImageCrop ImageCrop
    where type PathOld Univ ImageCrop ImageCrop = Path_ImageCrop ImageCrop
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ImageCrop
          peekPathOld (Proxy) (Peek_ImageCrop_ImageCrop _p _) = _p :: PathOld Univ ImageCrop ImageCrop
          peekValueOld (Proxy) (Peek_ImageCrop_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ImageCrop_ImageCrop _p _x :: PeekOld Univ ImageCrop
instance PathsOld Univ ImageSize String
    where type PathOld Univ ImageSize String = Path_ImageSize String
          pathsOld (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(PathOld Univ Double String ->
                                                                                                                                                                                                           PathOld Univ ImageSize String,
                                                                                                                                                                                                           Double)]) :: [PathOld Univ ImageSize String])
          peekOld (p@(Path_ImageSize_size _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_String _p _) = _p :: PathOld Univ ImageSize String
          peekValueOld (Proxy) (Peek_ImageSize_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ImageSize_String _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ ImageSize Double
    where type PathOld Univ ImageSize Double = Path_ImageSize Double
          pathsOld (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(PathOld Univ Double Double ->
                                                                                                                                                                                                           PathOld Univ ImageSize Double,
                                                                                                                                                                                                           Double)]) :: [PathOld Univ ImageSize Double])
          peekOld (p@(Path_ImageSize_size _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_Double _p _) = _p :: PathOld Univ ImageSize Double
          peekValueOld (Proxy) (Peek_ImageSize_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ImageSize_Double _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ ImageSize Dimension
    where type PathOld Univ ImageSize Dimension = Path_ImageSize Dimension
          pathsOld (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Dimension) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_dim, dim _s)] :: [(PathOld Univ Dimension Dimension ->
                                                                                                                                                                                                            PathOld Univ ImageSize Dimension,
                                                                                                                                                                                                            Dimension)]) :: [PathOld Univ
                                                                                                                                                                                                                                     ImageSize
                                                                                                                                                                                                                                     Dimension])
          peekOld (p@(Path_ImageSize_dim _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_Dimension _p _) = _p :: PathOld Univ ImageSize Dimension
          peekValueOld (Proxy) (Peek_ImageSize_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ImageSize_Dimension _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ ImageSize ImageSize
    where type PathOld Univ ImageSize ImageSize = Path_ImageSize ImageSize
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_ImageSize _p _) = _p :: PathOld Univ ImageSize ImageSize
          peekValueOld (Proxy) (Peek_ImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ImageSize_ImageSize _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ ImageSize Units
    where type PathOld Univ ImageSize Units = Path_ImageSize Units
          pathsOld (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Units) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_units, units _s)] :: [(PathOld Univ Units Units ->
                                                                                                                                                                                                            PathOld Univ ImageSize Units,
                                                                                                                                                                                                            Units)]) :: [PathOld Univ ImageSize Units])
          peekOld (p@(Path_ImageSize_units _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_Units _p _) = _p :: PathOld Univ ImageSize Units
          peekValueOld (Proxy) (Peek_ImageSize_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ImageSize_Units _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ ImageSize JSONText
    where type PathOld Univ ImageSize JSONText = Path_ImageSize JSONText
          pathsOld (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                           a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Dimension) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_dim, dim _s)] :: [(PathOld Univ Dimension JSONText ->
                                                                                                                                                                                                                     PathOld Univ ImageSize JSONText,
                                                                                                                                                                                                                     Dimension)]),
                                                                              concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(PathOld Univ
                                                                                                                                                                                                                               Double
                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                       PathOld Univ ImageSize JSONText,
                                                                                                                                                                                                                       Double)]),
                                                                              concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Units) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_units, units _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                Units
                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                        PathOld Univ ImageSize JSONText,
                                                                                                                                                                                                                        Units)])] :: [PathOld Univ
                                                                                                                                                                                                                                              ImageSize
                                                                                                                                                                                                                                              JSONText])
          peekOld (p@(Path_ImageSize_dim _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekOld (p@(Path_ImageSize_size _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekOld (p@(Path_ImageSize_units _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ImageSize
          peekPathOld (Proxy) (Peek_ImageSize_JSONText _p _) = _p :: PathOld Univ ImageSize JSONText
          peekValueOld (Proxy) (Peek_ImageSize_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ImageSize_JSONText _p _x :: PeekOld Univ ImageSize
instance PathsOld Univ Units Units
    where type PathOld Univ Units Units = Path_Units Units
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Units
          peekPathOld (Proxy) (Peek_Units_Units _p _) = _p :: PathOld Univ Units Units
          peekValueOld (Proxy) (Peek_Units_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_Units_Units _p _x :: PeekOld Univ Units
instance PathsOld Univ Units JSONText
    where type PathOld Univ Units JSONText = Path_Units JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Units_View :: PathOld Univ JSONText JSONText ->
                                                                                                                                                                                      PathOld Univ Units JSONText,
                                                                                                                                                                   a')) (toListOf (toLens (Path_Units_View (idPath :: PathOld Univ
                                                                                                                                                                                                                              JSONText
                                                                                                                                                                                                                              JSONText))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                           JSONText
                                                                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                                                                   PathOld Univ
                                                                                                                                                                                                                                                           Units
                                                                                                                                                                                                                                                           JSONText,
                                                                                                                                                                                                                                                   JSONText)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           Units
                                                                                                                                                                                                                                                                           JSONText])
          peekOld (p@(Path_Units_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Units
          peekPathOld (Proxy) (Peek_Units_JSONText _p _) = _p :: PathOld Univ Units JSONText
          peekValueOld (Proxy) (Peek_Units_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Units_JSONText _p _x :: PeekOld Univ Units
instance PathsOld Univ ImageFile ImageFile
    where type PathOld Univ ImageFile ImageFile = Path_ImageFile ImageFile
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ImageFile
          peekPathOld (Proxy) (Peek_ImageFile_ImageFile _p _) = _p :: PathOld Univ ImageFile ImageFile
          peekValueOld (Proxy) (Peek_ImageFile_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ImageFile_ImageFile _p _x :: PeekOld Univ ImageFile
instance PathsOld Univ Integer Integer
    where type PathOld Univ Integer Integer = Path_Integer Integer
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Integer
          peekPathOld (Proxy) (Peek_Integer_Integer _p _) = _p :: PathOld Univ Integer Integer
          peekValueOld (Proxy) (Peek_Integer_Integer _ _x) = _x :: Maybe Integer
          peekConsOld _p _x = Peek_Integer_Integer _p _x :: PeekOld Univ Integer
instance PathsOld Univ JSONText JSONText
    where type PathOld Univ JSONText JSONText = Path_JSONText JSONText
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ JSONText
          peekPathOld (Proxy) (Peek_JSONText_JSONText _p _) = _p :: PathOld Univ JSONText JSONText
          peekValueOld (Proxy) (Peek_JSONText_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_JSONText_JSONText _p _x :: PeekOld Univ JSONText
instance PathsOld Univ Markup JSONText
    where type PathOld Univ Markup JSONText = Path_Markup JSONText
          pathsOld (Proxy) (_s@(Markdown {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_markdownText, markdownText _s)] :: [(PathOld Univ Text JSONText ->
                                                                                                                                                                                                                     PathOld Univ Markup JSONText,
                                                                                                                                                                                                                     Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         JSONText])
          pathsOld (Proxy) (_s@(Html {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_htmlText, htmlText _s)] :: [(PathOld Univ Text JSONText ->
                                                                                                                                                                                                         PathOld Univ Markup JSONText,
                                                                                                                                                                                                         Text)]) :: [PathOld Univ Markup JSONText])
          pathsOld (Proxy) (_s@(LaTeX {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup JSONText])
          pathsOld (Proxy) (_s@(Pandoc {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup JSONText])
          pathsOld (Proxy) (_s@(Markup {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup JSONText])
          peekOld (p@(Path_Markup_markdownText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markup
          peekOld (p@(Path_Markup_htmlText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markup
          peekPathOld (Proxy) (Peek_Markup_JSONText _p _) = _p :: PathOld Univ Markup JSONText
          peekValueOld (Proxy) (Peek_Markup_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Markup_JSONText _p _x :: PeekOld Univ Markup
instance PathsOld Univ Markup Markup
    where type PathOld Univ Markup Markup = Path_Markup Markup
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Markup
          peekPathOld (Proxy) (Peek_Markup_Markup _p _) = _p :: PathOld Univ Markup Markup
          peekValueOld (Proxy) (Peek_Markup_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Markup_Markup _p _x :: PeekOld Univ Markup
instance PathsOld Univ Markup Text
    where type PathOld Univ Markup Text = Path_Markup Text
          pathsOld (Proxy) (_s@(Markdown {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_markdownText, markdownText _s)] :: [(PathOld Univ Text Text ->
                                                                                                                                                                                                                     PathOld Univ Markup Text,
                                                                                                                                                                                                                     Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         Text])
          pathsOld (Proxy) (_s@(Html {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_htmlText, htmlText _s)] :: [(PathOld Univ Text Text ->
                                                                                                                                                                                                         PathOld Univ Markup Text,
                                                                                                                                                                                                         Text)]) :: [PathOld Univ Markup Text])
          pathsOld (Proxy) (_s@(LaTeX {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup Text])
          pathsOld (Proxy) (_s@(Pandoc {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup Text])
          pathsOld (Proxy) (_s@(Markup {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ Markup Text])
          peekOld (p@(Path_Markup_markdownText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markup
          peekOld (p@(Path_Markup_htmlText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markup
          peekPathOld (Proxy) (Peek_Markup_Text _p _) = _p :: PathOld Univ Markup Text
          peekValueOld (Proxy) (Peek_Markup_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Markup_Text _p _x :: PeekOld Univ Markup
instance PathsOld Univ Permissions JSONText
    where type PathOld Univ Permissions JSONText = Path_Permissions JSONText
          pathsOld (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       UserIds
                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       Permissions
                                                                                                                                                                                                                                       JSONText,
                                                                                                                                                                                                                               UserIds)]),
                                                                                concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          UserIds
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                  UserIds)])] :: [PathOld Univ
                                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                                          JSONText])
          peekOld (p@(Path_Permissions_writers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekOld (p@(Path_Permissions_readers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekPathOld (Proxy) (Peek_Permissions_JSONText _p _) = _p :: PathOld Univ Permissions JSONText
          peekValueOld (Proxy) (Peek_Permissions_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Permissions_JSONText _p _x :: PeekOld Univ Permissions
instance PathsOld Univ Permissions Permissions
    where type PathOld Univ Permissions Permissions = Path_Permissions Permissions
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Permissions
          peekPathOld (Proxy) (Peek_Permissions_Permissions _p _) = _p :: PathOld Univ Permissions Permissions
          peekValueOld (Proxy) (Peek_Permissions_Permissions _ _x) = _x :: Maybe Permissions
          peekConsOld _p _x = Peek_Permissions_Permissions _p _x :: PeekOld Univ Permissions
instance PathsOld Univ Permissions UserIds
    where type PathOld Univ Permissions UserIds = Path_Permissions UserIds
          pathsOld (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       UserIds
                                                                                                                                                                                                                                       UserIds ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       Permissions
                                                                                                                                                                                                                                       UserIds,
                                                                                                                                                                                                                               UserIds)]),
                                                                                concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          UserIds
                                                                                                                                                                                                                                          UserIds ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          UserIds,
                                                                                                                                                                                                                                  UserIds)])] :: [PathOld Univ
                                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                                          UserIds])
          peekOld (p@(Path_Permissions_writers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekOld (p@(Path_Permissions_readers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekPathOld (Proxy) (Peek_Permissions_UserIds _p _) = _p :: PathOld Univ Permissions UserIds
          peekValueOld (Proxy) (Peek_Permissions_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_Permissions_UserIds _p _x :: PeekOld Univ Permissions
instance PathsOld Univ Permissions Text
    where type PathOld Univ Permissions Text = Path_Permissions Text
          pathsOld (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       UserIds
                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       Permissions
                                                                                                                                                                                                                                       Text,
                                                                                                                                                                                                                               UserIds)]),
                                                                                concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          UserIds
                                                                                                                                                                                                                                          Text ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          Text,
                                                                                                                                                                                                                                  UserIds)])] :: [PathOld Univ
                                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                                          Text])
          peekOld (p@(Path_Permissions_writers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekOld (p@(Path_Permissions_readers _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekPathOld (Proxy) (Peek_Permissions_Text _p _) = _p :: PathOld Univ Permissions Text
          peekValueOld (Proxy) (Peek_Permissions_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Permissions_Text _p _x :: PeekOld Univ Permissions
instance PathsOld Univ Permissions UserId
    where type PathOld Univ Permissions UserId = Path_Permissions UserId
          pathsOld (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                    a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UserId) _g (\npt r -> p npt : r) []) ([(Path_Permissions_owner, owner _s)] :: [(PathOld Univ UserId UserId ->
                                                                                                                                                                                                                 PathOld Univ Permissions UserId,
                                                                                                                                                                                                                 UserId)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Permissions
                                                                                                                                                                                                                                       UserId])
          peekOld (p@(Path_Permissions_owner _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Permissions
          peekPathOld (Proxy) (Peek_Permissions_UserId _p _) = _p :: PathOld Univ Permissions UserId
          peekValueOld (Proxy) (Peek_Permissions_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_Permissions_UserId _p _x :: PeekOld Univ Permissions
instance PathsOld Univ UserIds JSONText
    where type PathOld Univ UserIds JSONText = Path_UserIds JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_UserIds_View :: PathOld Univ Text JSONText ->
                                                                                                                                                                                    PathOld Univ UserIds JSONText,
                                                                                                                                                               a')) (toListOf (toLens (Path_UserIds_View (idPath :: PathOld Univ
                                                                                                                                                                                                                            Text
                                                                                                                                                                                                                            Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                     Text
                                                                                                                                                                                                                                                     JSONText ->
                                                                                                                                                                                                                                             PathOld Univ
                                                                                                                                                                                                                                                     UserIds
                                                                                                                                                                                                                                                     JSONText,
                                                                                                                                                                                                                                             Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                                                 JSONText])
          peekOld (p@(Path_UserIds_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ UserIds
          peekPathOld (Proxy) (Peek_UserIds_JSONText _p _) = _p :: PathOld Univ UserIds JSONText
          peekValueOld (Proxy) (Peek_UserIds_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_UserIds_JSONText _p _x :: PeekOld Univ UserIds
instance PathsOld Univ UserIds UserIds
    where type PathOld Univ UserIds UserIds = Path_UserIds UserIds
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ UserIds
          peekPathOld (Proxy) (Peek_UserIds_UserIds _p _) = _p :: PathOld Univ UserIds UserIds
          peekValueOld (Proxy) (Peek_UserIds_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_UserIds_UserIds _p _x :: PeekOld Univ UserIds
instance PathsOld Univ UserIds Text
    where type PathOld Univ UserIds Text = Path_UserIds Text
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_UserIds_View :: PathOld Univ Text Text -> PathOld Univ UserIds Text,
                                                                                                                                                               a')) (toListOf (toLens (Path_UserIds_View (idPath :: PathOld Univ
                                                                                                                                                                                                                            Text
                                                                                                                                                                                                                            Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                     Text
                                                                                                                                                                                                                                                     Text ->
                                                                                                                                                                                                                                             PathOld Univ
                                                                                                                                                                                                                                                     UserIds
                                                                                                                                                                                                                                                     Text,
                                                                                                                                                                                                                                             Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                                                 Text])
          peekOld (p@(Path_UserIds_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ UserIds
          peekPathOld (Proxy) (Peek_UserIds_Text _p _) = _p :: PathOld Univ UserIds Text
          peekValueOld (Proxy) (Peek_UserIds_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_UserIds_Text _p _x :: PeekOld Univ UserIds
instance PathsOld Univ AbbrevPair JSONText
    where type PathOld Univ AbbrevPair JSONText = Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                                    fst _s)] :: [(PathOld Univ CIString JSONText -> PathOld Univ AbbrevPair JSONText,
                                                                                                                                                                                  CIString)]),
                                                             concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                             PathOld Univ AbbrevPair JSONText,
                                                                                                                                                                                             Markup)])] :: [PathOld Univ AbbrevPair JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPair
          peekPathOld (Proxy) (Peek_AbbrevPair_JSONText _p _) = _p :: PathOld Univ AbbrevPair JSONText
          peekValueOld (Proxy) (Peek_AbbrevPair_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_AbbrevPair_JSONText _p _x :: PeekOld Univ AbbrevPair
instance PathsOld Univ AbbrevPair Markup
    where type PathOld Univ AbbrevPair Markup = Path_Pair (Path_CIString Markup) (Path_Markup Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second,
                                                                                                                                                         snd _s)] :: [(PathOld Univ Markup Markup -> PathOld Univ AbbrevPair Markup,
                                                                                                                                                                       Markup)]) :: [PathOld Univ AbbrevPair Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPair
          peekPathOld (Proxy) (Peek_AbbrevPair_Markup _p _) = _p :: PathOld Univ AbbrevPair Markup
          peekValueOld (Proxy) (Peek_AbbrevPair_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_AbbrevPair_Markup _p _x :: PeekOld Univ AbbrevPair
instance PathsOld Univ AbbrevPair AbbrevPair
    where type PathOld Univ AbbrevPair AbbrevPair = Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ AbbrevPair
          peekPathOld (Proxy) (Peek_AbbrevPair_AbbrevPair _p _) = _p :: PathOld Univ AbbrevPair AbbrevPair
          peekValueOld (Proxy) (Peek_AbbrevPair_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_AbbrevPair_AbbrevPair _p _x :: PeekOld Univ AbbrevPair
instance PathsOld Univ AbbrevPair CIString
    where type PathOld Univ AbbrevPair CIString = Path_Pair (Path_CIString CIString) (Path_Markup CIString)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                           fst _s)] :: [(PathOld Univ CIString CIString -> PathOld Univ AbbrevPair CIString,
                                                                                                                                                                         CIString)]) :: [PathOld Univ AbbrevPair CIString])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPair
          peekPathOld (Proxy) (Peek_AbbrevPair_CIString _p _) = _p :: PathOld Univ AbbrevPair CIString
          peekValueOld (Proxy) (Peek_AbbrevPair_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_AbbrevPair_CIString _p _x :: PeekOld Univ AbbrevPair
instance PathsOld Univ AbbrevPair Text
    where type PathOld Univ AbbrevPair Text = Path_Pair (Path_CIString Text) (Path_Markup Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                                    fst _s)] :: [(PathOld Univ CIString Text -> PathOld Univ AbbrevPair Text, CIString)]),
                                                             concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                             PathOld Univ AbbrevPair Text,
                                                                                                                                                                                             Markup)])] :: [PathOld Univ AbbrevPair Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPair
          peekPathOld (Proxy) (Peek_AbbrevPair_Text _p _) = _p :: PathOld Univ AbbrevPair Text
          peekValueOld (Proxy) (Peek_AbbrevPair_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_AbbrevPair_Text _p _x :: PeekOld Univ AbbrevPair
instance PathsOld Univ AbbrevPairs JSONText
    where type PathOld Univ AbbrevPairs JSONText = Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ AbbrevPair JSONText ->
                                                                                                                                                                                                                PathOld Univ AbbrevPairs JSONText,
                                                                                                                                                                                                                AbbrevPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                          JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_JSONText _p _) = _p :: PathOld Univ AbbrevPairs JSONText
          peekValueOld (Proxy) (Peek_AbbrevPairs_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_AbbrevPairs_JSONText _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ AbbrevPairs Markup
    where type PathOld Univ AbbrevPairs Markup = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ AbbrevPair Markup ->
                                                                                                                                                                                                                PathOld Univ AbbrevPairs Markup,
                                                                                                                                                                                                                AbbrevPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                          Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_Markup _p _) = _p :: PathOld Univ AbbrevPairs Markup
          peekValueOld (Proxy) (Peek_AbbrevPairs_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_AbbrevPairs_Markup _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ AbbrevPairs AbbrevPair
    where type PathOld Univ AbbrevPairs AbbrevPair = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ AbbrevPair AbbrevPair ->
                                                                                                                                                                                                                PathOld Univ AbbrevPairs AbbrevPair,
                                                                                                                                                                                                                AbbrevPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                          AbbrevPair])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_AbbrevPair _p _) = _p :: PathOld Univ AbbrevPairs AbbrevPair
          peekValueOld (Proxy) (Peek_AbbrevPairs_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_AbbrevPairs_AbbrevPair _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ AbbrevPairs AbbrevPairs
    where type PathOld Univ AbbrevPairs AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_AbbrevPairs _p _) = _p :: PathOld Univ AbbrevPairs AbbrevPairs
          peekValueOld (Proxy) (Peek_AbbrevPairs_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekConsOld _p _x = Peek_AbbrevPairs_AbbrevPairs _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ AbbrevPairs CIString
    where type PathOld Univ AbbrevPairs CIString = Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ AbbrevPair CIString ->
                                                                                                                                                                                                                PathOld Univ AbbrevPairs CIString,
                                                                                                                                                                                                                AbbrevPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                          CIString])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_CIString _p _) = _p :: PathOld Univ AbbrevPairs CIString
          peekValueOld (Proxy) (Peek_AbbrevPairs_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_AbbrevPairs_CIString _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ AbbrevPairs Text
    where type PathOld Univ AbbrevPairs Text = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ AbbrevPair Text ->
                                                                                                                                                                                                                PathOld Univ AbbrevPairs Text,
                                                                                                                                                                                                                AbbrevPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                          Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ AbbrevPairs
          peekPathOld (Proxy) (Peek_AbbrevPairs_Text _p _) = _p :: PathOld Univ AbbrevPairs Text
          peekValueOld (Proxy) (Peek_AbbrevPairs_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_AbbrevPairs_Text _p _x :: PeekOld Univ AbbrevPairs
instance PathsOld Univ Author JSONText
    where type PathOld Univ Author JSONText = Path_Author JSONText
          pathsOld (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                          PathOld Univ Author JSONText,
                                                                                                                                                                                                                          Markup)]),
                                                                           concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials,
                                                                                                                                                                                authorCredentials _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                            PathOld Univ Author JSONText,
                                                                                                                                                                                                            Markup)])] :: [PathOld Univ Author JSONText])
          peekOld (p@(Path_Author_authorName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekOld (p@(Path_Author_authorCredentials _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekPathOld (Proxy) (Peek_Author_JSONText _p _) = _p :: PathOld Univ Author JSONText
          peekValueOld (Proxy) (Peek_Author_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Author_JSONText _p _x :: PeekOld Univ Author
instance PathsOld Univ Author Markup
    where type PathOld Univ Author Markup = Path_Author Markup
          pathsOld (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                          PathOld Univ Author Markup,
                                                                                                                                                                                                                          Markup)]),
                                                                           concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials,
                                                                                                                                                                                authorCredentials _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                            PathOld Univ Author Markup,
                                                                                                                                                                                                            Markup)])] :: [PathOld Univ Author Markup])
          peekOld (p@(Path_Author_authorName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekOld (p@(Path_Author_authorCredentials _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekPathOld (Proxy) (Peek_Author_Markup _p _) = _p :: PathOld Univ Author Markup
          peekValueOld (Proxy) (Peek_Author_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Author_Markup _p _x :: PeekOld Univ Author
instance PathsOld Univ Author Author
    where type PathOld Univ Author Author = Path_Author Author
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Author
          peekPathOld (Proxy) (Peek_Author_Author _p _) = _p :: PathOld Univ Author Author
          peekValueOld (Proxy) (Peek_Author_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_Author_Author _p _x :: PeekOld Univ Author
instance PathsOld Univ Author Text
    where type PathOld Univ Author Text = Path_Author Text
          pathsOld (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                          PathOld Univ Author Text,
                                                                                                                                                                                                                          Markup)]),
                                                                           concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials,
                                                                                                                                                                                authorCredentials _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                            PathOld Univ Author Text,
                                                                                                                                                                                                            Markup)])] :: [PathOld Univ Author Text])
          peekOld (p@(Path_Author_authorName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekOld (p@(Path_Author_authorCredentials _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Author
          peekPathOld (Proxy) (Peek_Author_Text _p _) = _p :: PathOld Univ Author Text
          peekValueOld (Proxy) (Peek_Author_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Author_Text _p _x :: PeekOld Univ Author
instance PathsOld Univ Authors JSONText
    where type PathOld Univ Authors JSONText = Path_OMap AuthorID (Path_Author JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Author JSONText ->
                                                                                                                                                                                                            PathOld Univ Authors JSONText,
                                                                                                                                                                                                            Author)]) :: [PathOld Univ Authors JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Authors
          peekPathOld (Proxy) (Peek_Authors_JSONText _p _) = _p :: PathOld Univ Authors JSONText
          peekValueOld (Proxy) (Peek_Authors_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Authors_JSONText _p _x :: PeekOld Univ Authors
instance PathsOld Univ Authors Markup
    where type PathOld Univ Authors Markup = Path_OMap AuthorID (Path_Author Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Author Markup ->
                                                                                                                                                                                                            PathOld Univ Authors Markup,
                                                                                                                                                                                                            Author)]) :: [PathOld Univ Authors Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Authors
          peekPathOld (Proxy) (Peek_Authors_Markup _p _) = _p :: PathOld Univ Authors Markup
          peekValueOld (Proxy) (Peek_Authors_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Authors_Markup _p _x :: PeekOld Univ Authors
instance PathsOld Univ Authors Author
    where type PathOld Univ Authors Author = Path_OMap AuthorID (Path_Author Author)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Author Author ->
                                                                                                                                                                                                            PathOld Univ Authors Author,
                                                                                                                                                                                                            Author)]) :: [PathOld Univ Authors Author])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Authors
          peekPathOld (Proxy) (Peek_Authors_Author _p _) = _p :: PathOld Univ Authors Author
          peekValueOld (Proxy) (Peek_Authors_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_Authors_Author _p _x :: PeekOld Univ Authors
instance PathsOld Univ Authors Authors
    where type PathOld Univ Authors Authors = Path_OMap AuthorID (Path_Author Authors)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Authors
          peekPathOld (Proxy) (Peek_Authors_Authors _p _) = _p :: PathOld Univ Authors Authors
          peekValueOld (Proxy) (Peek_Authors_Authors _ _x) = _x :: Maybe Authors
          peekConsOld _p _x = Peek_Authors_Authors _p _x :: PeekOld Univ Authors
instance PathsOld Univ Authors Text
    where type PathOld Univ Authors Text = Path_OMap AuthorID (Path_Author Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Author Text ->
                                                                                                                                                                                                            PathOld Univ Authors Text,
                                                                                                                                                                                                            Author)]) :: [PathOld Univ Authors Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Authors
          peekPathOld (Proxy) (Peek_Authors_Text _p _) = _p :: PathOld Univ Authors Text
          peekValueOld (Proxy) (Peek_Authors_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Authors_Text _p _x :: PeekOld Univ Authors
instance PathsOld Univ Branding JSONText
    where type PathOld Univ Branding JSONText = Path_Branding JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Branding_View :: PathOld Univ Text JSONText ->
                                                                                                                                                                                     PathOld Univ Branding JSONText,
                                                                                                                                                               a')) (toListOf (toLens (Path_Branding_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             Text
                                                                                                                                                                                                                             Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      Text
                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      Branding
                                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                              Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                  Branding
                                                                                                                                                                                                                                                                  JSONText])
          peekOld (p@(Path_Branding_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Branding
          peekPathOld (Proxy) (Peek_Branding_JSONText _p _) = _p :: PathOld Univ Branding JSONText
          peekValueOld (Proxy) (Peek_Branding_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Branding_JSONText _p _x :: PeekOld Univ Branding
instance PathsOld Univ Branding Branding
    where type PathOld Univ Branding Branding = Path_Branding Branding
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Branding
          peekPathOld (Proxy) (Peek_Branding_Branding _p _) = _p :: PathOld Univ Branding Branding
          peekValueOld (Proxy) (Peek_Branding_Branding _ _x) = _x :: Maybe Branding
          peekConsOld _p _x = Peek_Branding_Branding _p _x :: PeekOld Univ Branding
instance PathsOld Univ Branding Text
    where type PathOld Univ Branding Text = Path_Branding Text
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Branding_View :: PathOld Univ Text Text ->
                                                                                                                                                                                     PathOld Univ Branding Text,
                                                                                                                                                               a')) (toListOf (toLens (Path_Branding_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             Text
                                                                                                                                                                                                                             Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      Text
                                                                                                                                                                                                                                                      Text ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      Branding
                                                                                                                                                                                                                                                      Text,
                                                                                                                                                                                                                                              Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                  Branding
                                                                                                                                                                                                                                                                  Text])
          peekOld (p@(Path_Branding_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Branding
          peekPathOld (Proxy) (Peek_Branding_Text _p _) = _p :: PathOld Univ Branding Text
          peekValueOld (Proxy) (Peek_Branding_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Branding_Text _p _x :: PeekOld Univ Branding
instance PathsOld Univ MarkupPair JSONText
    where type PathOld Univ MarkupPair JSONText = Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                                  fst _s)] :: [(PathOld Univ Markup JSONText -> PathOld Univ MarkupPair JSONText,
                                                                                                                                                                                Markup)]),
                                                             concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                             PathOld Univ MarkupPair JSONText,
                                                                                                                                                                                             Markup)])] :: [PathOld Univ MarkupPair JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPair
          peekPathOld (Proxy) (Peek_MarkupPair_JSONText _p _) = _p :: PathOld Univ MarkupPair JSONText
          peekValueOld (Proxy) (Peek_MarkupPair_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MarkupPair_JSONText _p _x :: PeekOld Univ MarkupPair
instance PathsOld Univ MarkupPair Markup
    where type PathOld Univ MarkupPair Markup = Path_Pair (Path_Markup Markup) (Path_Markup Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                                  fst _s)] :: [(PathOld Univ Markup Markup -> PathOld Univ MarkupPair Markup, Markup)]),
                                                             concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                             PathOld Univ MarkupPair Markup,
                                                                                                                                                                                             Markup)])] :: [PathOld Univ MarkupPair Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPair
          peekPathOld (Proxy) (Peek_MarkupPair_Markup _p _) = _p :: PathOld Univ MarkupPair Markup
          peekValueOld (Proxy) (Peek_MarkupPair_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_MarkupPair_Markup _p _x :: PeekOld Univ MarkupPair
instance PathsOld Univ MarkupPair MarkupPair
    where type PathOld Univ MarkupPair MarkupPair = Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MarkupPair
          peekPathOld (Proxy) (Peek_MarkupPair_MarkupPair _p _) = _p :: PathOld Univ MarkupPair MarkupPair
          peekValueOld (Proxy) (Peek_MarkupPair_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_MarkupPair_MarkupPair _p _x :: PeekOld Univ MarkupPair
instance PathsOld Univ MarkupPair Text
    where type PathOld Univ MarkupPair Text = Path_Pair (Path_Markup Text) (Path_Markup Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                                  fst _s)] :: [(PathOld Univ Markup Text -> PathOld Univ MarkupPair Text, Markup)]),
                                                             concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                             PathOld Univ MarkupPair Text,
                                                                                                                                                                                             Markup)])] :: [PathOld Univ MarkupPair Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPair
          peekPathOld (Proxy) (Peek_MarkupPair_Text _p _) = _p :: PathOld Univ MarkupPair Text
          peekValueOld (Proxy) (Peek_MarkupPair_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_MarkupPair_Text _p _x :: PeekOld Univ MarkupPair
instance PathsOld Univ MarkupPairs JSONText
    where type PathOld Univ MarkupPairs JSONText = Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ MarkupPair JSONText ->
                                                                                                                                                                                                                PathOld Univ MarkupPairs JSONText,
                                                                                                                                                                                                                MarkupPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                          JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPairs
          peekPathOld (Proxy) (Peek_MarkupPairs_JSONText _p _) = _p :: PathOld Univ MarkupPairs JSONText
          peekValueOld (Proxy) (Peek_MarkupPairs_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MarkupPairs_JSONText _p _x :: PeekOld Univ MarkupPairs
instance PathsOld Univ MarkupPairs Markup
    where type PathOld Univ MarkupPairs Markup = Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ MarkupPair Markup ->
                                                                                                                                                                                                                PathOld Univ MarkupPairs Markup,
                                                                                                                                                                                                                MarkupPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                          Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPairs
          peekPathOld (Proxy) (Peek_MarkupPairs_Markup _p _) = _p :: PathOld Univ MarkupPairs Markup
          peekValueOld (Proxy) (Peek_MarkupPairs_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_MarkupPairs_Markup _p _x :: PeekOld Univ MarkupPairs
instance PathsOld Univ MarkupPairs MarkupPair
    where type PathOld Univ MarkupPairs MarkupPair = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ MarkupPair MarkupPair ->
                                                                                                                                                                                                                PathOld Univ MarkupPairs MarkupPair,
                                                                                                                                                                                                                MarkupPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                          MarkupPair])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPairs
          peekPathOld (Proxy) (Peek_MarkupPairs_MarkupPair _p _) = _p :: PathOld Univ MarkupPairs MarkupPair
          peekValueOld (Proxy) (Peek_MarkupPairs_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_MarkupPairs_MarkupPair _p _x :: PeekOld Univ MarkupPairs
instance PathsOld Univ MarkupPairs MarkupPairs
    where type PathOld Univ MarkupPairs MarkupPairs = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MarkupPairs
          peekPathOld (Proxy) (Peek_MarkupPairs_MarkupPairs _p _) = _p :: PathOld Univ MarkupPairs MarkupPairs
          peekValueOld (Proxy) (Peek_MarkupPairs_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekConsOld _p _x = Peek_MarkupPairs_MarkupPairs _p _x :: PeekOld Univ MarkupPairs
instance PathsOld Univ MarkupPairs Text
    where type PathOld Univ MarkupPairs Text = Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ MarkupPair Text ->
                                                                                                                                                                                                                PathOld Univ MarkupPairs Text,
                                                                                                                                                                                                                MarkupPair)]) :: [PathOld Univ
                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                          Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MarkupPairs
          peekPathOld (Proxy) (Peek_MarkupPairs_Text _p _) = _p :: PathOld Univ MarkupPairs Text
          peekValueOld (Proxy) (Peek_MarkupPairs_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_MarkupPairs_Text _p _x :: PeekOld Univ MarkupPairs
instance PathsOld Univ Markups JSONText
    where type PathOld Univ Markups JSONText = Path_OMap MarkupID (Path_Markup JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                            PathOld Univ Markups JSONText,
                                                                                                                                                                                                            Markup)]) :: [PathOld Univ Markups JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markups
          peekPathOld (Proxy) (Peek_Markups_JSONText _p _) = _p :: PathOld Univ Markups JSONText
          peekValueOld (Proxy) (Peek_Markups_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Markups_JSONText _p _x :: PeekOld Univ Markups
instance PathsOld Univ Markups Markup
    where type PathOld Univ Markups Markup = Path_OMap MarkupID (Path_Markup Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                            PathOld Univ Markups Markup,
                                                                                                                                                                                                            Markup)]) :: [PathOld Univ Markups Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markups
          peekPathOld (Proxy) (Peek_Markups_Markup _p _) = _p :: PathOld Univ Markups Markup
          peekValueOld (Proxy) (Peek_Markups_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Markups_Markup _p _x :: PeekOld Univ Markups
instance PathsOld Univ Markups Markups
    where type PathOld Univ Markups Markups = Path_OMap MarkupID (Path_Markup Markups)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Markups
          peekPathOld (Proxy) (Peek_Markups_Markups _p _) = _p :: PathOld Univ Markups Markups
          peekValueOld (Proxy) (Peek_Markups_Markups _ _x) = _x :: Maybe Markups
          peekConsOld _p _x = Peek_Markups_Markups _p _x :: PeekOld Univ Markups
instance PathsOld Univ Markups Text
    where type PathOld Univ Markups Text = Path_OMap MarkupID (Path_Markup Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                            PathOld Univ Markups Text,
                                                                                                                                                                                                            Markup)]) :: [PathOld Univ Markups Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Markups
          peekPathOld (Proxy) (Peek_Markups_Text _p _) = _p :: PathOld Univ Markups Text
          peekValueOld (Proxy) (Peek_Markups_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Markups_Text _p _x :: PeekOld Univ Markups
instance PathsOld Univ MaybeReportIntendedUse String
    where type PathOld Univ MaybeReportIntendedUse String = Path_MaybeReportIntendedUse String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeReportIntendedUse_View :: PathOld Univ String String ->
                                                                                                                                                                                                     PathOld Univ MaybeReportIntendedUse String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                             String
                                                                                                                                                                                                                                             String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                                                        String ->
                                                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                                                        MaybeReportIntendedUse
                                                                                                                                                                                                                                                                        String,
                                                                                                                                                                                                                                                                String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                      MaybeReportIntendedUse
                                                                                                                                                                                                                                                                                      String])
          peekOld (p@(Path_MaybeReportIntendedUse_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MaybeReportIntendedUse
          peekPathOld (Proxy) (Peek_MaybeReportIntendedUse_String _p _) = _p :: PathOld Univ MaybeReportIntendedUse String
          peekValueOld (Proxy) (Peek_MaybeReportIntendedUse_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_MaybeReportIntendedUse_String _p _x :: PeekOld Univ MaybeReportIntendedUse
instance PathsOld Univ MaybeReportIntendedUse JSONText
    where type PathOld Univ MaybeReportIntendedUse JSONText = Path_MaybeReportIntendedUse JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeReportIntendedUse_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                                     PathOld Univ MaybeReportIntendedUse JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                             String
                                                                                                                                                                                                                                             String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                                                        MaybeReportIntendedUse
                                                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                                                String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                      MaybeReportIntendedUse
                                                                                                                                                                                                                                                                                      JSONText])
          peekOld (p@(Path_MaybeReportIntendedUse_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MaybeReportIntendedUse
          peekPathOld (Proxy) (Peek_MaybeReportIntendedUse_JSONText _p _) = _p :: PathOld Univ MaybeReportIntendedUse JSONText
          peekValueOld (Proxy) (Peek_MaybeReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MaybeReportIntendedUse_JSONText _p _x :: PeekOld Univ MaybeReportIntendedUse
instance PathsOld Univ MaybeReportIntendedUse MaybeReportIntendedUse
    where type PathOld Univ MaybeReportIntendedUse MaybeReportIntendedUse = Path_MaybeReportIntendedUse MaybeReportIntendedUse
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MaybeReportIntendedUse
          peekPathOld (Proxy) (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _p _) = _p :: PathOld Univ MaybeReportIntendedUse MaybeReportIntendedUse
          peekValueOld (Proxy) (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekConsOld _p _x = Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _p _x :: PeekOld Univ MaybeReportIntendedUse
instance PathsOld Univ Report String
    where type PathOld Univ Report String = Path_Report String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView String ->
                                                                                                                                                                                         PathOld Univ Report String,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                String ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                String,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  String])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_String _p _) = _p :: PathOld Univ Report String
          peekValueOld (Proxy) (Peek_Report_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_Report_String _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Int64
    where type PathOld Univ Report Int64 = Path_Report Int64
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Int64 ->
                                                                                                                                                                                         PathOld Univ Report Int64,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Int64 ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Int64,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Int64])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Int64 _p _) = _p :: PathOld Univ Report Int64
          peekValueOld (Proxy) (Peek_Report_Int64 _ _x) = _x :: Maybe Int64
          peekConsOld _p _x = Peek_Report_Int64 _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Bool
    where type PathOld Univ Report Bool = Path_Report Bool
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Bool ->
                                                                                                                                                                                         PathOld Univ Report Bool,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Bool ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Bool,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Bool])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Bool _p _) = _p :: PathOld Univ Report Bool
          peekValueOld (Proxy) (Peek_Report_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_Report_Bool _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Double
    where type PathOld Univ Report Double = Path_Report Double
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Double ->
                                                                                                                                                                                         PathOld Univ Report Double,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Double ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Double,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Double])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Double _p _) = _p :: PathOld Univ Report Double
          peekValueOld (Proxy) (Peek_Report_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_Report_Double _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Int
    where type PathOld Univ Report Int = Path_Report Int
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Int ->
                                                                                                                                                                                         PathOld Univ Report Int,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Int ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Int,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Int])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Int _p _) = _p :: PathOld Univ Report Int
          peekValueOld (Proxy) (Peek_Report_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_Report_Int _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Dimension
    where type PathOld Univ Report Dimension = Path_Report Dimension
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Dimension ->
                                                                                                                                                                                         PathOld Univ Report Dimension,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Dimension ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Dimension,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Dimension])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Dimension _p _) = _p :: PathOld Univ Report Dimension
          peekValueOld (Proxy) (Peek_Report_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_Report_Dimension _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ImageCrop
    where type PathOld Univ Report ImageCrop = Path_Report ImageCrop
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ImageCrop ->
                                                                                                                                                                                         PathOld Univ Report ImageCrop,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ImageCrop ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ImageCrop,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ImageCrop])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ImageCrop _p _) = _p :: PathOld Univ Report ImageCrop
          peekValueOld (Proxy) (Peek_Report_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_Report_ImageCrop _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ImageSize
    where type PathOld Univ Report ImageSize = Path_Report ImageSize
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ImageSize ->
                                                                                                                                                                                         PathOld Univ Report ImageSize,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ImageSize ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ImageSize,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ImageSize])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ImageSize _p _) = _p :: PathOld Univ Report ImageSize
          peekValueOld (Proxy) (Peek_Report_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_Report_ImageSize _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Units
    where type PathOld Univ Report Units = Path_Report Units
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Units ->
                                                                                                                                                                                         PathOld Univ Report Units,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Units ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Units,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Units])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Units _p _) = _p :: PathOld Univ Report Units
          peekValueOld (Proxy) (Peek_Report_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_Report_Units _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ImageFile
    where type PathOld Univ Report ImageFile = Path_Report ImageFile
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ImageFile ->
                                                                                                                                                                                         PathOld Univ Report ImageFile,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ImageFile ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ImageFile,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ImageFile])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ImageFile _p _) = _p :: PathOld Univ Report ImageFile
          peekValueOld (Proxy) (Peek_Report_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_Report_ImageFile _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Integer
    where type PathOld Univ Report Integer = Path_Report Integer
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Integer ->
                                                                                                                                                                                         PathOld Univ Report Integer,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Integer ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Integer,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Integer])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Integer _p _) = _p :: PathOld Univ Report Integer
          peekValueOld (Proxy) (Peek_Report_Integer _ _x) = _x :: Maybe Integer
          peekConsOld _p _x = Peek_Report_Integer _p _x :: PeekOld Univ Report
instance PathsOld Univ Report JSONText
    where type PathOld Univ Report JSONText = Path_Report JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView JSONText ->
                                                                                                                                                                                         PathOld Univ Report JSONText,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  JSONText])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_JSONText _p _) = _p :: PathOld Univ Report JSONText
          peekValueOld (Proxy) (Peek_Report_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Report_JSONText _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Markup
    where type PathOld Univ Report Markup = Path_Report Markup
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Markup ->
                                                                                                                                                                                         PathOld Univ Report Markup,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Markup ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Markup,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Markup])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Markup _p _) = _p :: PathOld Univ Report Markup
          peekValueOld (Proxy) (Peek_Report_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Report_Markup _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Permissions
    where type PathOld Univ Report Permissions = Path_Report Permissions
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Permissions ->
                                                                                                                                                                                         PathOld Univ Report Permissions,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Permissions ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Permissions,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Permissions])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Permissions _p _) = _p :: PathOld Univ Report Permissions
          peekValueOld (Proxy) (Peek_Report_Permissions _ _x) = _x :: Maybe Permissions
          peekConsOld _p _x = Peek_Report_Permissions _p _x :: PeekOld Univ Report
instance PathsOld Univ Report UserIds
    where type PathOld Univ Report UserIds = Path_Report UserIds
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView UserIds ->
                                                                                                                                                                                         PathOld Univ Report UserIds,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                UserIds ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                UserIds,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  UserIds])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_UserIds _p _) = _p :: PathOld Univ Report UserIds
          peekValueOld (Proxy) (Peek_Report_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_Report_UserIds _p _x :: PeekOld Univ Report
instance PathsOld Univ Report AbbrevPair
    where type PathOld Univ Report AbbrevPair = Path_Report AbbrevPair
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView AbbrevPair ->
                                                                                                                                                                                         PathOld Univ Report AbbrevPair,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                AbbrevPair ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                AbbrevPair,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  AbbrevPair])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_AbbrevPair _p _) = _p :: PathOld Univ Report AbbrevPair
          peekValueOld (Proxy) (Peek_Report_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_Report_AbbrevPair _p _x :: PeekOld Univ Report
instance PathsOld Univ Report AbbrevPairs
    where type PathOld Univ Report AbbrevPairs = Path_Report AbbrevPairs
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView AbbrevPairs ->
                                                                                                                                                                                         PathOld Univ Report AbbrevPairs,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                AbbrevPairs ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                AbbrevPairs,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  AbbrevPairs])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_AbbrevPairs _p _) = _p :: PathOld Univ Report AbbrevPairs
          peekValueOld (Proxy) (Peek_Report_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekConsOld _p _x = Peek_Report_AbbrevPairs _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Author
    where type PathOld Univ Report Author = Path_Report Author
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Author ->
                                                                                                                                                                                         PathOld Univ Report Author,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Author ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Author,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Author])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Author _p _) = _p :: PathOld Univ Report Author
          peekValueOld (Proxy) (Peek_Report_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_Report_Author _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Authors
    where type PathOld Univ Report Authors = Path_Report Authors
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Authors ->
                                                                                                                                                                                         PathOld Univ Report Authors,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Authors ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Authors,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Authors])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Authors _p _) = _p :: PathOld Univ Report Authors
          peekValueOld (Proxy) (Peek_Report_Authors _ _x) = _x :: Maybe Authors
          peekConsOld _p _x = Peek_Report_Authors _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Branding
    where type PathOld Univ Report Branding = Path_Report Branding
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Branding ->
                                                                                                                                                                                         PathOld Univ Report Branding,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Branding ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Branding,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Branding])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Branding _p _) = _p :: PathOld Univ Report Branding
          peekValueOld (Proxy) (Peek_Report_Branding _ _x) = _x :: Maybe Branding
          peekConsOld _p _x = Peek_Report_Branding _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MarkupPair
    where type PathOld Univ Report MarkupPair = Path_Report MarkupPair
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView MarkupPair ->
                                                                                                                                                                                         PathOld Univ Report MarkupPair,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MarkupPair ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MarkupPair,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MarkupPair])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MarkupPair _p _) = _p :: PathOld Univ Report MarkupPair
          peekValueOld (Proxy) (Peek_Report_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_Report_MarkupPair _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MarkupPairs
    where type PathOld Univ Report MarkupPairs = Path_Report MarkupPairs
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView MarkupPairs ->
                                                                                                                                                                                         PathOld Univ Report MarkupPairs,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MarkupPairs ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MarkupPairs,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MarkupPairs])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MarkupPairs _p _) = _p :: PathOld Univ Report MarkupPairs
          peekValueOld (Proxy) (Peek_Report_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekConsOld _p _x = Peek_Report_MarkupPairs _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Markups
    where type PathOld Univ Report Markups = Path_Report Markups
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Markups ->
                                                                                                                                                                                         PathOld Univ Report Markups,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Markups ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Markups,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Markups])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Markups _p _) = _p :: PathOld Univ Report Markups
          peekValueOld (Proxy) (Peek_Report_Markups _ _x) = _x :: Maybe Markups
          peekConsOld _p _x = Peek_Report_Markups _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MaybeReportIntendedUse
    where type PathOld Univ Report MaybeReportIntendedUse = Path_Report MaybeReportIntendedUse
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ
                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                 MaybeReportIntendedUse ->
                                                                                                                                                                                         PathOld Univ Report MaybeReportIntendedUse,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MaybeReportIntendedUse ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MaybeReportIntendedUse,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MaybeReportIntendedUse])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MaybeReportIntendedUse _p _) = _p :: PathOld Univ Report MaybeReportIntendedUse
          peekValueOld (Proxy) (Peek_Report_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekConsOld _p _x = Peek_Report_MaybeReportIntendedUse _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Report
    where type PathOld Univ Report Report = Path_Report Report
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Report _p _) = _p :: PathOld Univ Report Report
          peekValueOld (Proxy) (Peek_Report_Report _ _x) = _x :: Maybe Report
          peekConsOld _p _x = Peek_Report_Report _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportElem
    where type PathOld Univ Report ReportElem = Path_Report ReportElem
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportElem ->
                                                                                                                                                                                         PathOld Univ Report ReportElem,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportElem ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportElem,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportElem])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportElem _p _) = _p :: PathOld Univ Report ReportElem
          peekValueOld (Proxy) (Peek_Report_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_Report_ReportElem _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportElems
    where type PathOld Univ Report ReportElems = Path_Report ReportElems
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportElems ->
                                                                                                                                                                                         PathOld Univ Report ReportElems,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportElems ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportElems,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportElems])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportElems _p _) = _p :: PathOld Univ Report ReportElems
          peekValueOld (Proxy) (Peek_Report_ReportElems _ _x) = _x :: Maybe ReportElems
          peekConsOld _p _x = Peek_Report_ReportElems _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportFlags
    where type PathOld Univ Report ReportFlags = Path_Report ReportFlags
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportFlags ->
                                                                                                                                                                                         PathOld Univ Report ReportFlags,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportFlags ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportFlags,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportFlags])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportFlags _p _) = _p :: PathOld Univ Report ReportFlags
          peekValueOld (Proxy) (Peek_Report_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekConsOld _p _x = Peek_Report_ReportFlags _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportStandard
    where type PathOld Univ Report ReportStandard = Path_Report ReportStandard
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportStandard ->
                                                                                                                                                                                         PathOld Univ Report ReportStandard,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportStandard ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportStandard,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportStandard])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportStandard _p _) = _p :: PathOld Univ Report ReportStandard
          peekValueOld (Proxy) (Peek_Report_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekConsOld _p _x = Peek_Report_ReportStandard _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportStatus
    where type PathOld Univ Report ReportStatus = Path_Report ReportStatus
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportStatus ->
                                                                                                                                                                                         PathOld Univ Report ReportStatus,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportStatus ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportStatus,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportStatus])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportStatus _p _) = _p :: PathOld Univ Report ReportStatus
          peekValueOld (Proxy) (Peek_Report_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekConsOld _p _x = Peek_Report_ReportStatus _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportValueApproachInfo
    where type PathOld Univ Report ReportValueApproachInfo = Path_Report ReportValueApproachInfo
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ
                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                 ReportValueApproachInfo ->
                                                                                                                                                                                         PathOld Univ Report ReportValueApproachInfo,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportValueApproachInfo ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportValueApproachInfo,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportValueApproachInfo])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportValueApproachInfo _p _) = _p :: PathOld Univ Report ReportValueApproachInfo
          peekValueOld (Proxy) (Peek_Report_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekConsOld _p _x = Peek_Report_ReportValueApproachInfo _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportValueTypeInfo
    where type PathOld Univ Report ReportValueTypeInfo = Path_Report ReportValueTypeInfo
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportValueTypeInfo ->
                                                                                                                                                                                         PathOld Univ Report ReportValueTypeInfo,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportValueTypeInfo ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportValueTypeInfo,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportValueTypeInfo])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportValueTypeInfo _p _) = _p :: PathOld Univ Report ReportValueTypeInfo
          peekValueOld (Proxy) (Peek_Report_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekConsOld _p _x = Peek_Report_ReportValueTypeInfo _p _x :: PeekOld Univ Report
instance PathsOld Univ Report EUI
    where type PathOld Univ Report EUI = Path_Report EUI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView EUI ->
                                                                                                                                                                                         PathOld Univ Report EUI,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                EUI ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                EUI,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  EUI])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_EUI _p _) = _p :: PathOld Univ Report EUI
          peekValueOld (Proxy) (Peek_Report_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_Report_EUI _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MEUI
    where type PathOld Univ Report MEUI = Path_Report MEUI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView MEUI ->
                                                                                                                                                                                         PathOld Univ Report MEUI,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MEUI ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MEUI,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MEUI])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MEUI _p _) = _p :: PathOld Univ Report MEUI
          peekValueOld (Proxy) (Peek_Report_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_Report_MEUI _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MaybeImageFile
    where type PathOld Univ Report MaybeImageFile = Path_Report MaybeImageFile
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView MaybeImageFile ->
                                                                                                                                                                                         PathOld Univ Report MaybeImageFile,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MaybeImageFile ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MaybeImageFile,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MaybeImageFile])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MaybeImageFile _p _) = _p :: PathOld Univ Report MaybeImageFile
          peekValueOld (Proxy) (Peek_Report_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_Report_MaybeImageFile _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportImage
    where type PathOld Univ Report ReportImage = Path_Report ReportImage
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportImage ->
                                                                                                                                                                                         PathOld Univ Report ReportImage,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportImage ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportImage,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportImage])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportImage _p _) = _p :: PathOld Univ Report ReportImage
          peekValueOld (Proxy) (Peek_Report_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_Report_ReportImage _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportImages
    where type PathOld Univ Report ReportImages = Path_Report ReportImages
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportImages ->
                                                                                                                                                                                         PathOld Univ Report ReportImages,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportImages ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportImages,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportImages])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportImages _p _) = _p :: PathOld Univ Report ReportImages
          peekValueOld (Proxy) (Peek_Report_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_Report_ReportImages _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReadOnlyFilePath
    where type PathOld Univ Report ReadOnlyFilePath = Path_Report ReadOnlyFilePath
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReadOnlyFilePath ->
                                                                                                                                                                                         PathOld Univ Report ReadOnlyFilePath,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReadOnlyFilePath ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReadOnlyFilePath,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReadOnlyFilePath])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReadOnlyFilePath _p _) = _p :: PathOld Univ Report ReadOnlyFilePath
          peekValueOld (Proxy) (Peek_Report_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekConsOld _p _x = Peek_Report_ReadOnlyFilePath _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportImageView
    where type PathOld Univ Report ReportImageView = Path_Report ReportImageView
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportImageView ->
                                                                                                                                                                                         PathOld Univ Report ReportImageView,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportImageView ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportImageView,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportImageView])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportImageView _p _) = _p :: PathOld Univ Report ReportImageView
          peekValueOld (Proxy) (Peek_Report_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_Report_ReportImageView _p _x :: PeekOld Univ Report
instance PathsOld Univ Report ReportView
    where type PathOld Univ Report ReportView = Path_Report ReportView
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView ReportView ->
                                                                                                                                                                                         PathOld Univ Report ReportView,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReportView ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                ReportView,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportView])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_ReportView _p _) = _p :: PathOld Univ Report ReportView
          peekValueOld (Proxy) (Peek_Report_ReportView _ _x) = _x :: Maybe ReportView
          peekConsOld _p _x = Peek_Report_ReportView _p _x :: PeekOld Univ Report
instance PathsOld Univ Report SaneSizeImageSize
    where type PathOld Univ Report SaneSizeImageSize = Path_Report SaneSizeImageSize
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView SaneSizeImageSize ->
                                                                                                                                                                                         PathOld Univ Report SaneSizeImageSize,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                SaneSizeImageSize ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                SaneSizeImageSize,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  SaneSizeImageSize])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_SaneSizeImageSize _p _) = _p :: PathOld Univ Report SaneSizeImageSize
          peekValueOld (Proxy) (Peek_Report_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_Report_SaneSizeImageSize _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Item
    where type PathOld Univ Report Item = Path_Report Item
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Item ->
                                                                                                                                                                                         PathOld Univ Report Item,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Item ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Item,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Item])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Item _p _) = _p :: PathOld Univ Report Item
          peekValueOld (Proxy) (Peek_Report_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_Report_Item _p _x :: PeekOld Univ Report
instance PathsOld Univ Report MIM
    where type PathOld Univ Report MIM = Path_Report MIM
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView MIM ->
                                                                                                                                                                                         PathOld Univ Report MIM,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                MIM ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                MIM,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MIM])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_MIM _p _) = _p :: PathOld Univ Report MIM
          peekValueOld (Proxy) (Peek_Report_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_Report_MIM _p _x :: PeekOld Univ Report
instance PathsOld Univ Report CIString
    where type PathOld Univ Report CIString = Path_Report CIString
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView CIString ->
                                                                                                                                                                                         PathOld Univ Report CIString,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                CIString ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                CIString,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  CIString])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_CIString _p _) = _p :: PathOld Univ Report CIString
          peekValueOld (Proxy) (Peek_Report_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_Report_CIString _p _x :: PeekOld Univ Report
instance PathsOld Univ Report URI
    where type PathOld Univ Report URI = Path_Report URI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView URI ->
                                                                                                                                                                                         PathOld Univ Report URI,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                URI ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                URI,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  URI])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_URI _p _) = _p :: PathOld Univ Report URI
          peekValueOld (Proxy) (Peek_Report_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_Report_URI _p _x :: PeekOld Univ Report
instance PathsOld Univ Report Text
    where type PathOld Univ Report Text = Path_Report Text
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView Text ->
                                                                                                                                                                                         PathOld Univ Report Text,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                Text ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                Text,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  Text])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_Text _p _) = _p :: PathOld Univ Report Text
          peekValueOld (Proxy) (Peek_Report_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Report_Text _p _x :: PeekOld Univ Report
instance PathsOld Univ Report UserId
    where type PathOld Univ Report UserId = Path_Report UserId
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView UserId ->
                                                                                                                                                                                         PathOld Univ Report UserId,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                UserId ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                UserId,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  UserId])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_UserId _p _) = _p :: PathOld Univ Report UserId
          peekValueOld (Proxy) (Peek_Report_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_Report_UserId _p _x :: PeekOld Univ Report
instance PathsOld Univ Report UUID
    where type PathOld Univ Report UUID = Path_Report UUID
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: PathOld Univ ReportView UUID ->
                                                                                                                                                                                         PathOld Univ Report UUID,
                                                                                                                                                                     a')) (toListOf (toLens (Path_Report_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                UUID ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                UUID,
                                                                                                                                                                                                                                                        ReportView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  UUID])
          peekOld (p@(Path_Report_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Report
          peekPathOld (Proxy) (Peek_Report_UUID _p _) = _p :: PathOld Univ Report UUID
          peekValueOld (Proxy) (Peek_Report_UUID _ _x) = _x :: Maybe UUID
          peekConsOld _p _x = Peek_Report_UUID _p _x :: PeekOld Univ Report
instance PathsOld Univ ReportElem String
    where type PathOld Univ ReportElem String = Path_ReportElem String
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item String ->
                                                                                                                                                                                                                   PathOld Univ ReportElem String,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       String])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem String])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem String])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_String _p _) = _p :: PathOld Univ ReportElem String
          peekValueOld (Proxy) (Peek_ReportElem_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportElem_String _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Bool
    where type PathOld Univ ReportElem Bool = Path_ReportElem Bool
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Bool ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Bool,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Bool])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Bool])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Bool])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Bool _p _) = _p :: PathOld Univ ReportElem Bool
          peekValueOld (Proxy) (Peek_ReportElem_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportElem_Bool _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Double
    where type PathOld Univ ReportElem Double = Path_ReportElem Double
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Double ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Double,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Double])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Double])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Double])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Double _p _) = _p :: PathOld Univ ReportElem Double
          peekValueOld (Proxy) (Peek_ReportElem_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportElem_Double _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Dimension
    where type PathOld Univ ReportElem Dimension = Path_ReportElem Dimension
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Dimension ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Dimension,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Dimension])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Dimension])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Dimension])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Dimension _p _) = _p :: PathOld Univ ReportElem Dimension
          peekValueOld (Proxy) (Peek_ReportElem_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportElem_Dimension _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ImageCrop
    where type PathOld Univ ReportElem ImageCrop = Path_ReportElem ImageCrop
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ImageCrop ->
                                                                                                                                                                                                                   PathOld Univ ReportElem ImageCrop,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ImageCrop])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageCrop])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageCrop])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ImageCrop _p _) = _p :: PathOld Univ ReportElem ImageCrop
          peekValueOld (Proxy) (Peek_ReportElem_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportElem_ImageCrop _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ImageSize
    where type PathOld Univ ReportElem ImageSize = Path_ReportElem ImageSize
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ImageSize ->
                                                                                                                                                                                                                   PathOld Univ ReportElem ImageSize,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ImageSize])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageSize])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageSize])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ImageSize _p _) = _p :: PathOld Univ ReportElem ImageSize
          peekValueOld (Proxy) (Peek_ReportElem_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportElem_ImageSize _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Units
    where type PathOld Univ ReportElem Units = Path_ReportElem Units
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Units ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Units,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Units])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Units])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Units])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Units _p _) = _p :: PathOld Univ ReportElem Units
          peekValueOld (Proxy) (Peek_ReportElem_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportElem_Units _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ImageFile
    where type PathOld Univ ReportElem ImageFile = Path_ReportElem ImageFile
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ImageFile ->
                                                                                                                                                                                                                   PathOld Univ ReportElem ImageFile,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ImageFile])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageFile])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ImageFile])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ImageFile _p _) = _p :: PathOld Univ ReportElem ImageFile
          peekValueOld (Proxy) (Peek_ReportElem_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportElem_ImageFile _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem JSONText
    where type PathOld Univ ReportElem JSONText = Path_ReportElem JSONText
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportElem JSONText,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       JSONText])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                  ReportElem
                                                                                                                                                                                                                                  JSONText,
                                                                                                                                                                                                                          Markup)]) :: [PathOld Univ
                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                JSONText])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem JSONText])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekOld (p@(Path_ReportElem_elemText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_JSONText _p _) = _p :: PathOld Univ ReportElem JSONText
          peekValueOld (Proxy) (Peek_ReportElem_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportElem_JSONText _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Markup
    where type PathOld Univ ReportElem Markup = Path_ReportElem Markup
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Markup,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Markup])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                          PathOld Univ ReportElem Markup,
                                                                                                                                                                                                                          Markup)]) :: [PathOld Univ
                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                Markup])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Markup])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekOld (p@(Path_ReportElem_elemText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Markup _p _) = _p :: PathOld Univ ReportElem Markup
          peekValueOld (Proxy) (Peek_ReportElem_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportElem_Markup _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ReportElem
    where type PathOld Univ ReportElem ReportElem = Path_ReportElem ReportElem
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ReportElem _p _) = _p :: PathOld Univ ReportElem ReportElem
          peekValueOld (Proxy) (Peek_ReportElem_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_ReportElem_ReportElem _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem EUI
    where type PathOld Univ ReportElem EUI = Path_ReportElem EUI
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item EUI ->
                                                                                                                                                                                                                   PathOld Univ ReportElem EUI,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       EUI])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem EUI])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem EUI])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_EUI _p _) = _p :: PathOld Univ ReportElem EUI
          peekValueOld (Proxy) (Peek_ReportElem_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportElem_EUI _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem MEUI
    where type PathOld Univ ReportElem MEUI = Path_ReportElem MEUI
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item MEUI ->
                                                                                                                                                                                                                   PathOld Univ ReportElem MEUI,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       MEUI])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MEUI])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MEUI])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_MEUI _p _) = _p :: PathOld Univ ReportElem MEUI
          peekValueOld (Proxy) (Peek_ReportElem_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportElem_MEUI _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem MaybeImageFile
    where type PathOld Univ ReportElem MaybeImageFile = Path_ReportElem MaybeImageFile
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item MaybeImageFile ->
                                                                                                                                                                                                                   PathOld Univ ReportElem MaybeImageFile,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       MaybeImageFile])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MaybeImageFile])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MaybeImageFile])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_MaybeImageFile _p _) = _p :: PathOld Univ ReportElem MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportElem_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportElem_MaybeImageFile _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ReportImage
    where type PathOld Univ ReportElem ReportImage = Path_ReportElem ReportImage
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ReportImage ->
                                                                                                                                                                                                                   PathOld Univ ReportElem ReportImage,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ReportImage])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImage])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImage])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ReportImage _p _) = _p :: PathOld Univ ReportElem ReportImage
          peekValueOld (Proxy) (Peek_ReportElem_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportElem_ReportImage _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ReportImages
    where type PathOld Univ ReportElem ReportImages = Path_ReportElem ReportImages
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ReportImages ->
                                                                                                                                                                                                                   PathOld Univ ReportElem ReportImages,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ReportImages])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImages])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImages])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ReportImages _p _) = _p :: PathOld Univ ReportElem ReportImages
          peekValueOld (Proxy) (Peek_ReportElem_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_ReportElem_ReportImages _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem ReportImageView
    where type PathOld Univ ReportElem ReportImageView = Path_ReportElem ReportImageView
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item ReportImageView ->
                                                                                                                                                                                                                   PathOld Univ
                                                                                                                                                                                                                           ReportElem
                                                                                                                                                                                                                           ReportImageView,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       ReportImageView])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImageView])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem ReportImageView])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_ReportImageView _p _) = _p :: PathOld Univ ReportElem ReportImageView
          peekValueOld (Proxy) (Peek_ReportElem_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportElem_ReportImageView _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem SaneSizeImageSize
    where type PathOld Univ ReportElem SaneSizeImageSize = Path_ReportElem SaneSizeImageSize
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item SaneSizeImageSize ->
                                                                                                                                                                                                                   PathOld Univ
                                                                                                                                                                                                                           ReportElem
                                                                                                                                                                                                                           SaneSizeImageSize,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       SaneSizeImageSize])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem SaneSizeImageSize])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem SaneSizeImageSize])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportElem SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportElem_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportElem_SaneSizeImageSize _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Item
    where type PathOld Univ ReportElem Item = Path_ReportElem Item
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Item ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Item,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Item])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Item])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Item])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Item _p _) = _p :: PathOld Univ ReportElem Item
          peekValueOld (Proxy) (Peek_ReportElem_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_ReportElem_Item _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem MIM
    where type PathOld Univ ReportElem MIM = Path_ReportElem MIM
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item MIM ->
                                                                                                                                                                                                                   PathOld Univ ReportElem MIM,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       MIM])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MIM])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem MIM])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_MIM _p _) = _p :: PathOld Univ ReportElem MIM
          peekValueOld (Proxy) (Peek_ReportElem_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_ReportElem_MIM _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem URI
    where type PathOld Univ ReportElem URI = Path_ReportElem URI
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item URI ->
                                                                                                                                                                                                                   PathOld Univ ReportElem URI,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       URI])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem URI])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem URI])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_URI _p _) = _p :: PathOld Univ ReportElem URI
          peekValueOld (Proxy) (Peek_ReportElem_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportElem_URI _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElem Text
    where type PathOld Univ ReportElem Text = Path_ReportElem Text
          pathsOld (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(PathOld Univ Item Text ->
                                                                                                                                                                                                                   PathOld Univ ReportElem Text,
                                                                                                                                                                                                                   Item)]) :: [PathOld Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Text])
          pathsOld (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                          PathOld Univ ReportElem Text,
                                                                                                                                                                                                                          Markup)]) :: [PathOld Univ
                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                Text])
          pathsOld (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [PathOld Univ ReportElem Text])
          peekOld (p@(Path_ReportElem_elemItem _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekOld (p@(Path_ReportElem_elemText _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElem
          peekPathOld (Proxy) (Peek_ReportElem_Text _p _) = _p :: PathOld Univ ReportElem Text
          peekValueOld (Proxy) (Peek_ReportElem_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportElem_Text _p _x :: PeekOld Univ ReportElem
instance PathsOld Univ ReportElems String
    where type PathOld Univ ReportElems String = Path_OMap ReportElemID (Path_ReportElem String)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem String ->
                                                                                                                                                                                                                PathOld Univ ReportElems String,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          String])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_String _p _) = _p :: PathOld Univ ReportElems String
          peekValueOld (Proxy) (Peek_ReportElems_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportElems_String _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Bool
    where type PathOld Univ ReportElems Bool = Path_OMap ReportElemID (Path_ReportElem Bool)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Bool ->
                                                                                                                                                                                                                PathOld Univ ReportElems Bool,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Bool])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Bool _p _) = _p :: PathOld Univ ReportElems Bool
          peekValueOld (Proxy) (Peek_ReportElems_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportElems_Bool _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Double
    where type PathOld Univ ReportElems Double = Path_OMap ReportElemID (Path_ReportElem Double)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Double ->
                                                                                                                                                                                                                PathOld Univ ReportElems Double,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Double])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Double _p _) = _p :: PathOld Univ ReportElems Double
          peekValueOld (Proxy) (Peek_ReportElems_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportElems_Double _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Dimension
    where type PathOld Univ ReportElems Dimension = Path_OMap ReportElemID (Path_ReportElem Dimension)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Dimension ->
                                                                                                                                                                                                                PathOld Univ ReportElems Dimension,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Dimension])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Dimension _p _) = _p :: PathOld Univ ReportElems Dimension
          peekValueOld (Proxy) (Peek_ReportElems_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportElems_Dimension _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ImageCrop
    where type PathOld Univ ReportElems ImageCrop = Path_OMap ReportElemID (Path_ReportElem ImageCrop)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ImageCrop ->
                                                                                                                                                                                                                PathOld Univ ReportElems ImageCrop,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ImageCrop])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ImageCrop _p _) = _p :: PathOld Univ ReportElems ImageCrop
          peekValueOld (Proxy) (Peek_ReportElems_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportElems_ImageCrop _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ImageSize
    where type PathOld Univ ReportElems ImageSize = Path_OMap ReportElemID (Path_ReportElem ImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ImageSize ->
                                                                                                                                                                                                                PathOld Univ ReportElems ImageSize,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ImageSize _p _) = _p :: PathOld Univ ReportElems ImageSize
          peekValueOld (Proxy) (Peek_ReportElems_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportElems_ImageSize _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Units
    where type PathOld Univ ReportElems Units = Path_OMap ReportElemID (Path_ReportElem Units)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Units ->
                                                                                                                                                                                                                PathOld Univ ReportElems Units,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Units])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Units _p _) = _p :: PathOld Univ ReportElems Units
          peekValueOld (Proxy) (Peek_ReportElems_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportElems_Units _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ImageFile
    where type PathOld Univ ReportElems ImageFile = Path_OMap ReportElemID (Path_ReportElem ImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ImageFile ->
                                                                                                                                                                                                                PathOld Univ ReportElems ImageFile,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ImageFile _p _) = _p :: PathOld Univ ReportElems ImageFile
          peekValueOld (Proxy) (Peek_ReportElems_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportElems_ImageFile _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems JSONText
    where type PathOld Univ ReportElems JSONText = Path_OMap ReportElemID (Path_ReportElem JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportElems JSONText,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_JSONText _p _) = _p :: PathOld Univ ReportElems JSONText
          peekValueOld (Proxy) (Peek_ReportElems_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportElems_JSONText _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Markup
    where type PathOld Univ ReportElems Markup = Path_OMap ReportElemID (Path_ReportElem Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Markup ->
                                                                                                                                                                                                                PathOld Univ ReportElems Markup,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Markup _p _) = _p :: PathOld Univ ReportElems Markup
          peekValueOld (Proxy) (Peek_ReportElems_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportElems_Markup _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ReportElem
    where type PathOld Univ ReportElems ReportElem = Path_OMap ReportElemID (Path_ReportElem ReportElem)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ReportElem ->
                                                                                                                                                                                                                PathOld Univ ReportElems ReportElem,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ReportElem])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ReportElem _p _) = _p :: PathOld Univ ReportElems ReportElem
          peekValueOld (Proxy) (Peek_ReportElems_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_ReportElems_ReportElem _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ReportElems
    where type PathOld Univ ReportElems ReportElems = Path_OMap ReportElemID (Path_ReportElem ReportElems)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ReportElems _p _) = _p :: PathOld Univ ReportElems ReportElems
          peekValueOld (Proxy) (Peek_ReportElems_ReportElems _ _x) = _x :: Maybe ReportElems
          peekConsOld _p _x = Peek_ReportElems_ReportElems _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems EUI
    where type PathOld Univ ReportElems EUI = Path_OMap ReportElemID (Path_ReportElem EUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem EUI ->
                                                                                                                                                                                                                PathOld Univ ReportElems EUI,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          EUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_EUI _p _) = _p :: PathOld Univ ReportElems EUI
          peekValueOld (Proxy) (Peek_ReportElems_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportElems_EUI _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems MEUI
    where type PathOld Univ ReportElems MEUI = Path_OMap ReportElemID (Path_ReportElem MEUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem MEUI ->
                                                                                                                                                                                                                PathOld Univ ReportElems MEUI,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          MEUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_MEUI _p _) = _p :: PathOld Univ ReportElems MEUI
          peekValueOld (Proxy) (Peek_ReportElems_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportElems_MEUI _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems MaybeImageFile
    where type PathOld Univ ReportElems MaybeImageFile = Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem MaybeImageFile ->
                                                                                                                                                                                                                PathOld Univ ReportElems MaybeImageFile,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          MaybeImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_MaybeImageFile _p _) = _p :: PathOld Univ ReportElems MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportElems_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportElems_MaybeImageFile _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ReportImage
    where type PathOld Univ ReportElems ReportImage = Path_OMap ReportElemID (Path_ReportElem ReportImage)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ReportImage ->
                                                                                                                                                                                                                PathOld Univ ReportElems ReportImage,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ReportImage])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ReportImage _p _) = _p :: PathOld Univ ReportElems ReportImage
          peekValueOld (Proxy) (Peek_ReportElems_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportElems_ReportImage _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ReportImages
    where type PathOld Univ ReportElems ReportImages = Path_OMap ReportElemID (Path_ReportElem ReportImages)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ReportImages ->
                                                                                                                                                                                                                PathOld Univ ReportElems ReportImages,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ReportImages])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ReportImages _p _) = _p :: PathOld Univ ReportElems ReportImages
          peekValueOld (Proxy) (Peek_ReportElems_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_ReportElems_ReportImages _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems ReportImageView
    where type PathOld Univ ReportElems ReportImageView = Path_OMap ReportElemID (Path_ReportElem ReportImageView)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem ReportImageView ->
                                                                                                                                                                                                                PathOld Univ ReportElems ReportImageView,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          ReportImageView])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_ReportImageView _p _) = _p :: PathOld Univ ReportElems ReportImageView
          peekValueOld (Proxy) (Peek_ReportElems_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportElems_ReportImageView _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems SaneSizeImageSize
    where type PathOld Univ ReportElems SaneSizeImageSize = Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ
                                                                                                                                                                                                                        ReportElem
                                                                                                                                                                                                                        SaneSizeImageSize ->
                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                        SaneSizeImageSize,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          SaneSizeImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportElems SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportElems_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportElems_SaneSizeImageSize _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Item
    where type PathOld Univ ReportElems Item = Path_OMap ReportElemID (Path_ReportElem Item)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Item ->
                                                                                                                                                                                                                PathOld Univ ReportElems Item,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Item])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Item _p _) = _p :: PathOld Univ ReportElems Item
          peekValueOld (Proxy) (Peek_ReportElems_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_ReportElems_Item _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems MIM
    where type PathOld Univ ReportElems MIM = Path_OMap ReportElemID (Path_ReportElem MIM)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem MIM ->
                                                                                                                                                                                                                PathOld Univ ReportElems MIM,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          MIM])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_MIM _p _) = _p :: PathOld Univ ReportElems MIM
          peekValueOld (Proxy) (Peek_ReportElems_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_ReportElems_MIM _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems URI
    where type PathOld Univ ReportElems URI = Path_OMap ReportElemID (Path_ReportElem URI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem URI ->
                                                                                                                                                                                                                PathOld Univ ReportElems URI,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          URI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_URI _p _) = _p :: PathOld Univ ReportElems URI
          peekValueOld (Proxy) (Peek_ReportElems_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportElems_URI _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportElems Text
    where type PathOld Univ ReportElems Text = Path_OMap ReportElemID (Path_ReportElem Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                  val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportElem Text ->
                                                                                                                                                                                                                PathOld Univ ReportElems Text,
                                                                                                                                                                                                                ReportElem)]) :: [PathOld Univ
                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                          Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportElems
          peekPathOld (Proxy) (Peek_ReportElems_Text _p _) = _p :: PathOld Univ ReportElems Text
          peekValueOld (Proxy) (Peek_ReportElems_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportElems_Text _p _x :: PeekOld Univ ReportElems
instance PathsOld Univ ReportFlags String
    where type PathOld Univ ReportFlags String = Path_ReportFlags String
          pathsOld (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                    a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                   String ->
                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                   ReportFlags
                                                                                                                                                                                                                                                   String,
                                                                                                                                                                                                                                           Bool)]) :: [PathOld Univ
                                                                                                                                                                                                                                                               ReportFlags
                                                                                                                                                                                                                                                               String])
          peekOld (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportFlags
          peekPathOld (Proxy) (Peek_ReportFlags_String _p _) = _p :: PathOld Univ ReportFlags String
          peekValueOld (Proxy) (Peek_ReportFlags_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportFlags_String _p _x :: PeekOld Univ ReportFlags
instance PathsOld Univ ReportFlags Bool
    where type PathOld Univ ReportFlags Bool = Path_ReportFlags Bool
          pathsOld (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                    a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                   Bool ->
                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                   ReportFlags
                                                                                                                                                                                                                                                   Bool,
                                                                                                                                                                                                                                           Bool)]) :: [PathOld Univ
                                                                                                                                                                                                                                                               ReportFlags
                                                                                                                                                                                                                                                               Bool])
          peekOld (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportFlags
          peekPathOld (Proxy) (Peek_ReportFlags_Bool _p _) = _p :: PathOld Univ ReportFlags Bool
          peekValueOld (Proxy) (Peek_ReportFlags_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportFlags_Bool _p _x :: PeekOld Univ ReportFlags
instance PathsOld Univ ReportFlags JSONText
    where type PathOld Univ ReportFlags JSONText = Path_ReportFlags JSONText
          pathsOld (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                    a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                   ReportFlags
                                                                                                                                                                                                                                                   JSONText,
                                                                                                                                                                                                                                           Bool)]) :: [PathOld Univ
                                                                                                                                                                                                                                                               ReportFlags
                                                                                                                                                                                                                                                               JSONText])
          peekOld (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportFlags
          peekPathOld (Proxy) (Peek_ReportFlags_JSONText _p _) = _p :: PathOld Univ ReportFlags JSONText
          peekValueOld (Proxy) (Peek_ReportFlags_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportFlags_JSONText _p _x :: PeekOld Univ ReportFlags
instance PathsOld Univ ReportFlags ReportFlags
    where type PathOld Univ ReportFlags ReportFlags = Path_ReportFlags ReportFlags
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportFlags
          peekPathOld (Proxy) (Peek_ReportFlags_ReportFlags _p _) = _p :: PathOld Univ ReportFlags ReportFlags
          peekValueOld (Proxy) (Peek_ReportFlags_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekConsOld _p _x = Peek_ReportFlags_ReportFlags _p _x :: PeekOld Univ ReportFlags
instance PathsOld Univ ReportIntendedUse String
    where type PathOld Univ ReportIntendedUse String = Path_ReportIntendedUse String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportIntendedUse_View :: PathOld Univ String String ->
                                                                                                                                                                                                PathOld Univ ReportIntendedUse String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                        String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                   String
                                                                                                                                                                                                                                                                   String ->
                                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                                   ReportIntendedUse
                                                                                                                                                                                                                                                                   String,
                                                                                                                                                                                                                                                           String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                 ReportIntendedUse
                                                                                                                                                                                                                                                                                 String])
          peekOld (p@(Path_ReportIntendedUse_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportIntendedUse
          peekPathOld (Proxy) (Peek_ReportIntendedUse_String _p _) = _p :: PathOld Univ ReportIntendedUse String
          peekValueOld (Proxy) (Peek_ReportIntendedUse_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportIntendedUse_String _p _x :: PeekOld Univ ReportIntendedUse
instance PathsOld Univ ReportIntendedUse JSONText
    where type PathOld Univ ReportIntendedUse JSONText = Path_ReportIntendedUse JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportIntendedUse_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                                PathOld Univ ReportIntendedUse JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                        String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                   String
                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                                   ReportIntendedUse
                                                                                                                                                                                                                                                                   JSONText,
                                                                                                                                                                                                                                                           String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                 ReportIntendedUse
                                                                                                                                                                                                                                                                                 JSONText])
          peekOld (p@(Path_ReportIntendedUse_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportIntendedUse
          peekPathOld (Proxy) (Peek_ReportIntendedUse_JSONText _p _) = _p :: PathOld Univ ReportIntendedUse JSONText
          peekValueOld (Proxy) (Peek_ReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportIntendedUse_JSONText _p _x :: PeekOld Univ ReportIntendedUse
instance PathsOld Univ ReportIntendedUse ReportIntendedUse
    where type PathOld Univ ReportIntendedUse ReportIntendedUse = Path_ReportIntendedUse ReportIntendedUse
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportIntendedUse
          peekPathOld (Proxy) (Peek_ReportIntendedUse_ReportIntendedUse _p _) = _p :: PathOld Univ ReportIntendedUse ReportIntendedUse
          peekValueOld (Proxy) (Peek_ReportIntendedUse_ReportIntendedUse _ _x) = _x :: Maybe ReportIntendedUse
          peekConsOld _p _x = Peek_ReportIntendedUse_ReportIntendedUse _p _x :: PeekOld Univ ReportIntendedUse
instance PathsOld Univ ReportStandard Int
    where type PathOld Univ ReportStandard Int = Path_ReportStandard Int
          pathsOld (Proxy) (_s@(ReportStandard {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                       a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Int) _g (\npt r -> p npt : r) []) ([(Path_ReportStandard_unReportStandard, unReportStandard _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  Int
                                                                                                                                                                                                                                                  Int ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportStandard
                                                                                                                                                                                                                                                  Int,
                                                                                                                                                                                                                                          Int)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportStandard
                                                                                                                                                                                                                                                             Int])
          peekOld (p@(Path_ReportStandard_unReportStandard _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportStandard
          peekPathOld (Proxy) (Peek_ReportStandard_Int _p _) = _p :: PathOld Univ ReportStandard Int
          peekValueOld (Proxy) (Peek_ReportStandard_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_ReportStandard_Int _p _x :: PeekOld Univ ReportStandard
instance PathsOld Univ ReportStandard ReportStandard
    where type PathOld Univ ReportStandard ReportStandard = Path_ReportStandard ReportStandard
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportStandard
          peekPathOld (Proxy) (Peek_ReportStandard_ReportStandard _p _) = _p :: PathOld Univ ReportStandard ReportStandard
          peekValueOld (Proxy) (Peek_ReportStandard_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekConsOld _p _x = Peek_ReportStandard_ReportStandard _p _x :: PeekOld Univ ReportStandard
instance PathsOld Univ ReportStatus String
    where type PathOld Univ ReportStatus String = Path_ReportStatus String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportStatus_View :: PathOld Univ String String ->
                                                                                                                                                                                           PathOld Univ ReportStatus String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                   String
                                                                                                                                                                                                                                   String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                              String
                                                                                                                                                                                                                                                              String ->
                                                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                                                              ReportStatus
                                                                                                                                                                                                                                                              String,
                                                                                                                                                                                                                                                      String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                            ReportStatus
                                                                                                                                                                                                                                                                            String])
          peekOld (p@(Path_ReportStatus_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportStatus
          peekPathOld (Proxy) (Peek_ReportStatus_String _p _) = _p :: PathOld Univ ReportStatus String
          peekValueOld (Proxy) (Peek_ReportStatus_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportStatus_String _p _x :: PeekOld Univ ReportStatus
instance PathsOld Univ ReportStatus JSONText
    where type PathOld Univ ReportStatus JSONText = Path_ReportStatus JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportStatus_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                           PathOld Univ ReportStatus JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                   String
                                                                                                                                                                                                                                   String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                              String
                                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                                                              ReportStatus
                                                                                                                                                                                                                                                              JSONText,
                                                                                                                                                                                                                                                      String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                            ReportStatus
                                                                                                                                                                                                                                                                            JSONText])
          peekOld (p@(Path_ReportStatus_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportStatus
          peekPathOld (Proxy) (Peek_ReportStatus_JSONText _p _) = _p :: PathOld Univ ReportStatus JSONText
          peekValueOld (Proxy) (Peek_ReportStatus_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportStatus_JSONText _p _x :: PeekOld Univ ReportStatus
instance PathsOld Univ ReportStatus ReportStatus
    where type PathOld Univ ReportStatus ReportStatus = Path_ReportStatus ReportStatus
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportStatus
          peekPathOld (Proxy) (Peek_ReportStatus_ReportStatus _p _) = _p :: PathOld Univ ReportStatus ReportStatus
          peekValueOld (Proxy) (Peek_ReportStatus_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekConsOld _p _x = Peek_ReportStatus_ReportStatus _p _x :: PeekOld Univ ReportStatus
instance PathsOld Univ ReportValueApproachInfo JSONText
    where type PathOld Univ ReportValueApproachInfo JSONText = Path_ReportValueApproachInfo JSONText
          pathsOld (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                              reportValueApproachName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                Markup)]),
                                                                                            concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                              reportValueApproachDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                       Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                              ReportValueApproachInfo
                                                                                                                                                                                                                                                              JSONText])
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekPathOld (Proxy) (Peek_ReportValueApproachInfo_JSONText _p _) = _p :: PathOld Univ ReportValueApproachInfo JSONText
          peekValueOld (Proxy) (Peek_ReportValueApproachInfo_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportValueApproachInfo_JSONText _p _x :: PeekOld Univ ReportValueApproachInfo
instance PathsOld Univ ReportValueApproachInfo Markup
    where type PathOld Univ ReportValueApproachInfo Markup = Path_ReportValueApproachInfo Markup
          pathsOld (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                              reportValueApproachName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        Markup ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                        Markup,
                                                                                                                                                                                                                                Markup)]),
                                                                                            concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                              reportValueApproachDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                                               Markup,
                                                                                                                                                                                                                                       Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                              ReportValueApproachInfo
                                                                                                                                                                                                                                                              Markup])
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekPathOld (Proxy) (Peek_ReportValueApproachInfo_Markup _p _) = _p :: PathOld Univ ReportValueApproachInfo Markup
          peekValueOld (Proxy) (Peek_ReportValueApproachInfo_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportValueApproachInfo_Markup _p _x :: PeekOld Univ ReportValueApproachInfo
instance PathsOld Univ ReportValueApproachInfo ReportValueApproachInfo
    where type PathOld Univ ReportValueApproachInfo ReportValueApproachInfo = Path_ReportValueApproachInfo ReportValueApproachInfo
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportValueApproachInfo
          peekPathOld (Proxy) (Peek_ReportValueApproachInfo_ReportValueApproachInfo _p _) = _p :: PathOld Univ ReportValueApproachInfo ReportValueApproachInfo
          peekValueOld (Proxy) (Peek_ReportValueApproachInfo_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekConsOld _p _x = Peek_ReportValueApproachInfo_ReportValueApproachInfo _p _x :: PeekOld Univ ReportValueApproachInfo
instance PathsOld Univ ReportValueApproachInfo Text
    where type PathOld Univ ReportValueApproachInfo Text = Path_ReportValueApproachInfo Text
          pathsOld (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                              reportValueApproachName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                        Text,
                                                                                                                                                                                                                                Markup)]),
                                                                                            concatMap (\(p,
                                                                                                         a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                              reportValueApproachDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                                               Text,
                                                                                                                                                                                                                                       Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                              ReportValueApproachInfo
                                                                                                                                                                                                                                                              Text])
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekOld (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueApproachInfo
          peekPathOld (Proxy) (Peek_ReportValueApproachInfo_Text _p _) = _p :: PathOld Univ ReportValueApproachInfo Text
          peekValueOld (Proxy) (Peek_ReportValueApproachInfo_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportValueApproachInfo_Text _p _x :: PeekOld Univ ReportValueApproachInfo
instance PathsOld Univ ReportValueTypeInfo JSONText
    where type PathOld Univ ReportValueTypeInfo JSONText = Path_ReportValueTypeInfo JSONText
          pathsOld (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                     a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                          reportValueTypeName _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                        Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                             reportValueTypeDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportValueTypeInfo
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                  Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                             reportValueTypeDefinition _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportValueTypeInfo
                                                                                                                                                                                                                                         JSONText,
                                                                                                                                                                                                                                 Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                                        JSONText])
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekPathOld (Proxy) (Peek_ReportValueTypeInfo_JSONText _p _) = _p :: PathOld Univ ReportValueTypeInfo JSONText
          peekValueOld (Proxy) (Peek_ReportValueTypeInfo_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportValueTypeInfo_JSONText _p _x :: PeekOld Univ ReportValueTypeInfo
instance PathsOld Univ ReportValueTypeInfo Markup
    where type PathOld Univ ReportValueTypeInfo Markup = Path_ReportValueTypeInfo Markup
          pathsOld (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                     a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                          reportValueTypeName _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                Markup,
                                                                                                                                                                                                                        Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                             reportValueTypeDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Markup ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportValueTypeInfo
                                                                                                                                                                                                                                          Markup,
                                                                                                                                                                                                                                  Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                             reportValueTypeDefinition _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportValueTypeInfo
                                                                                                                                                                                                                                         Markup,
                                                                                                                                                                                                                                 Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                                        Markup])
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekPathOld (Proxy) (Peek_ReportValueTypeInfo_Markup _p _) = _p :: PathOld Univ ReportValueTypeInfo Markup
          peekValueOld (Proxy) (Peek_ReportValueTypeInfo_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportValueTypeInfo_Markup _p _x :: PeekOld Univ ReportValueTypeInfo
instance PathsOld Univ ReportValueTypeInfo ReportValueTypeInfo
    where type PathOld Univ ReportValueTypeInfo ReportValueTypeInfo = Path_ReportValueTypeInfo ReportValueTypeInfo
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportValueTypeInfo
          peekPathOld (Proxy) (Peek_ReportValueTypeInfo_ReportValueTypeInfo _p _) = _p :: PathOld Univ ReportValueTypeInfo ReportValueTypeInfo
          peekValueOld (Proxy) (Peek_ReportValueTypeInfo_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekConsOld _p _x = Peek_ReportValueTypeInfo_ReportValueTypeInfo _p _x :: PeekOld Univ ReportValueTypeInfo
instance PathsOld Univ ReportValueTypeInfo Text
    where type PathOld Univ ReportValueTypeInfo Text = Path_ReportValueTypeInfo Text
          pathsOld (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                     a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                          reportValueTypeName _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                Text,
                                                                                                                                                                                                                        Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                             reportValueTypeDescription _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Text ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportValueTypeInfo
                                                                                                                                                                                                                                          Text,
                                                                                                                                                                                                                                  Markup)]),
                                                                                        concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                             reportValueTypeDefinition _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportValueTypeInfo
                                                                                                                                                                                                                                         Text,
                                                                                                                                                                                                                                 Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                                        Text])
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekOld (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportValueTypeInfo
          peekPathOld (Proxy) (Peek_ReportValueTypeInfo_Text _p _) = _p :: PathOld Univ ReportValueTypeInfo Text
          peekValueOld (Proxy) (Peek_ReportValueTypeInfo_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportValueTypeInfo_Text _p _x :: PeekOld Univ ReportValueTypeInfo
instance PathsOld Univ EUI ImageFile
    where type PathOld Univ EUI ImageFile = Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)
          pathsOld (Proxy) (_s@(Left _)) _g f r0 = foldr f r0 (mempty :: [PathOld Univ EUI ImageFile])
          pathsOld (Proxy) (_s@(Right _)) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageFile) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                                          Left _ -> []
                                                                                                                                                                          Right a' -> [(Path_Right, a')] :: [(PathOld Univ ImageFile ImageFile ->
                                                                                                                                                                                                              PathOld Univ EUI ImageFile,
                                                                                                                                                                                                              ImageFile)]) :: [PathOld Univ
                                                                                                                                                                                                                                       EUI
                                                                                                                                                                                                                                       ImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ EUI
          peekPathOld (Proxy) (Peek_EUI_ImageFile _p _) = _p :: PathOld Univ EUI ImageFile
          peekValueOld (Proxy) (Peek_EUI_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_EUI_ImageFile _p _x :: PeekOld Univ EUI
instance PathsOld Univ EUI EUI
    where type PathOld Univ EUI EUI = Path_Either (Path_URI EUI) (Path_ImageFile EUI)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ EUI
          peekPathOld (Proxy) (Peek_EUI_EUI _p _) = _p :: PathOld Univ EUI EUI
          peekValueOld (Proxy) (Peek_EUI_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_EUI_EUI _p _x :: PeekOld Univ EUI
instance PathsOld Univ EUI URI
    where type PathOld Univ EUI URI = Path_Either (Path_URI URI) (Path_ImageFile URI)
          pathsOld (Proxy) (_s@(Left _)) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: URI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                                   Left a' -> [(Path_Left, a')]
                                                                                                                                                                   Right _ -> [] :: [(PathOld Univ URI URI -> PathOld Univ EUI URI,
                                                                                                                                                                                      URI)]) :: [PathOld Univ EUI URI])
          pathsOld (Proxy) (_s@(Right _)) _g f r0 = foldr f r0 (mempty :: [PathOld Univ EUI URI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ EUI
          peekPathOld (Proxy) (Peek_EUI_URI _p _) = _p :: PathOld Univ EUI URI
          peekValueOld (Proxy) (Peek_EUI_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_EUI_URI _p _x :: PeekOld Univ EUI
instance PathsOld Univ MEUI ImageFile
    where type PathOld Univ MEUI ImageFile = Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                        Nothing -> []
                                                                                                                                                        Just a' -> [(Path_Just, a')] :: [(PathOld Univ EUI ImageFile -> PathOld Univ MEUI ImageFile,
                                                                                                                                                                                          EUI)]) :: [PathOld Univ MEUI ImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MEUI
          peekPathOld (Proxy) (Peek_MEUI_ImageFile _p _) = _p :: PathOld Univ MEUI ImageFile
          peekValueOld (Proxy) (Peek_MEUI_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_MEUI_ImageFile _p _x :: PeekOld Univ MEUI
instance PathsOld Univ MEUI EUI
    where type PathOld Univ MEUI EUI = Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                        Nothing -> []
                                                                                                                                                        Just a' -> [(Path_Just, a')] :: [(PathOld Univ EUI EUI -> PathOld Univ MEUI EUI,
                                                                                                                                                                                          EUI)]) :: [PathOld Univ MEUI EUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MEUI
          peekPathOld (Proxy) (Peek_MEUI_EUI _p _) = _p :: PathOld Univ MEUI EUI
          peekValueOld (Proxy) (Peek_MEUI_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_MEUI_EUI _p _x :: PeekOld Univ MEUI
instance PathsOld Univ MEUI MEUI
    where type PathOld Univ MEUI MEUI = Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MEUI
          peekPathOld (Proxy) (Peek_MEUI_MEUI _p _) = _p :: PathOld Univ MEUI MEUI
          peekValueOld (Proxy) (Peek_MEUI_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_MEUI_MEUI _p _x :: PeekOld Univ MEUI
instance PathsOld Univ MEUI URI
    where type PathOld Univ MEUI URI = Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                        Nothing -> []
                                                                                                                                                        Just a' -> [(Path_Just, a')] :: [(PathOld Univ EUI URI -> PathOld Univ MEUI URI,
                                                                                                                                                                                          EUI)]) :: [PathOld Univ MEUI URI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MEUI
          peekPathOld (Proxy) (Peek_MEUI_URI _p _) = _p :: PathOld Univ MEUI URI
          peekValueOld (Proxy) (Peek_MEUI_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_MEUI_URI _p _x :: PeekOld Univ MEUI
instance PathsOld Univ MaybeImageFile String
    where type PathOld Univ MaybeImageFile String = Path_MaybeImageFile String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeImageFile_View :: PathOld Univ String String ->
                                                                                                                                                                                             PathOld Univ MaybeImageFile String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                     String
                                                                                                                                                                                                                                     String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                String
                                                                                                                                                                                                                                                                String ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                MaybeImageFile
                                                                                                                                                                                                                                                                String,
                                                                                                                                                                                                                                                        String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                                                                              String])
          peekOld (p@(Path_MaybeImageFile_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MaybeImageFile
          peekPathOld (Proxy) (Peek_MaybeImageFile_String _p _) = _p :: PathOld Univ MaybeImageFile String
          peekValueOld (Proxy) (Peek_MaybeImageFile_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_MaybeImageFile_String _p _x :: PeekOld Univ MaybeImageFile
instance PathsOld Univ MaybeImageFile JSONText
    where type PathOld Univ MaybeImageFile JSONText = Path_MaybeImageFile JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeImageFile_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                             PathOld Univ MaybeImageFile JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                     String
                                                                                                                                                                                                                                     String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                String
                                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                                MaybeImageFile
                                                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                                                        String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                                                                              JSONText])
          peekOld (p@(Path_MaybeImageFile_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MaybeImageFile
          peekPathOld (Proxy) (Peek_MaybeImageFile_JSONText _p _) = _p :: PathOld Univ MaybeImageFile JSONText
          peekValueOld (Proxy) (Peek_MaybeImageFile_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MaybeImageFile_JSONText _p _x :: PeekOld Univ MaybeImageFile
instance PathsOld Univ MaybeImageFile MaybeImageFile
    where type PathOld Univ MaybeImageFile MaybeImageFile = Path_MaybeImageFile MaybeImageFile
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MaybeImageFile
          peekPathOld (Proxy) (Peek_MaybeImageFile_MaybeImageFile _p _) = _p :: PathOld Univ MaybeImageFile MaybeImageFile
          peekValueOld (Proxy) (Peek_MaybeImageFile_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_MaybeImageFile_MaybeImageFile _p _x :: PeekOld Univ MaybeImageFile
instance PathsOld Univ ReportImage String
    where type PathOld Univ ReportImage String = Path_ReportImage String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           String ->
                                                                                                                                                                                                   PathOld Univ ReportImage String,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               String ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               String,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      String])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_String _p _) = _p :: PathOld Univ ReportImage String
          peekValueOld (Proxy) (Peek_ReportImage_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportImage_String _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Bool
    where type PathOld Univ ReportImage Bool = Path_ReportImage Bool
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView Bool ->
                                                                                                                                                                                                   PathOld Univ ReportImage Bool,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Bool ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Bool,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Bool])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Bool _p _) = _p :: PathOld Univ ReportImage Bool
          peekValueOld (Proxy) (Peek_ReportImage_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportImage_Bool _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Double
    where type PathOld Univ ReportImage Double = Path_ReportImage Double
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           Double ->
                                                                                                                                                                                                   PathOld Univ ReportImage Double,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Double ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Double,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Double])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Double _p _) = _p :: PathOld Univ ReportImage Double
          peekValueOld (Proxy) (Peek_ReportImage_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportImage_Double _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Dimension
    where type PathOld Univ ReportImage Dimension = Path_ReportImage Dimension
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           Dimension ->
                                                                                                                                                                                                   PathOld Univ ReportImage Dimension,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Dimension ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Dimension,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Dimension])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Dimension _p _) = _p :: PathOld Univ ReportImage Dimension
          peekValueOld (Proxy) (Peek_ReportImage_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportImage_Dimension _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage ImageCrop
    where type PathOld Univ ReportImage ImageCrop = Path_ReportImage ImageCrop
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           ImageCrop ->
                                                                                                                                                                                                   PathOld Univ ReportImage ImageCrop,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               ImageCrop ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               ImageCrop,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      ImageCrop])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_ImageCrop _p _) = _p :: PathOld Univ ReportImage ImageCrop
          peekValueOld (Proxy) (Peek_ReportImage_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportImage_ImageCrop _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage ImageSize
    where type PathOld Univ ReportImage ImageSize = Path_ReportImage ImageSize
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           ImageSize ->
                                                                                                                                                                                                   PathOld Univ ReportImage ImageSize,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               ImageSize ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               ImageSize,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      ImageSize])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_ImageSize _p _) = _p :: PathOld Univ ReportImage ImageSize
          peekValueOld (Proxy) (Peek_ReportImage_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportImage_ImageSize _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Units
    where type PathOld Univ ReportImage Units = Path_ReportImage Units
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView Units ->
                                                                                                                                                                                                   PathOld Univ ReportImage Units,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Units ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Units,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Units])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Units _p _) = _p :: PathOld Univ ReportImage Units
          peekValueOld (Proxy) (Peek_ReportImage_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportImage_Units _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage ImageFile
    where type PathOld Univ ReportImage ImageFile = Path_ReportImage ImageFile
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           ImageFile ->
                                                                                                                                                                                                   PathOld Univ ReportImage ImageFile,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               ImageFile ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               ImageFile,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      ImageFile])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_ImageFile _p _) = _p :: PathOld Univ ReportImage ImageFile
          peekValueOld (Proxy) (Peek_ReportImage_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportImage_ImageFile _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage JSONText
    where type PathOld Univ ReportImage JSONText = Path_ReportImage JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                   PathOld Univ ReportImage JSONText,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      JSONText])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_JSONText _p _) = _p :: PathOld Univ ReportImage JSONText
          peekValueOld (Proxy) (Peek_ReportImage_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportImage_JSONText _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Markup
    where type PathOld Univ ReportImage Markup = Path_ReportImage Markup
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                   PathOld Univ ReportImage Markup,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Markup,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Markup])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Markup _p _) = _p :: PathOld Univ ReportImage Markup
          peekValueOld (Proxy) (Peek_ReportImage_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportImage_Markup _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage EUI
    where type PathOld Univ ReportImage EUI = Path_ReportImage EUI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView EUI ->
                                                                                                                                                                                                   PathOld Univ ReportImage EUI,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               EUI ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               EUI,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      EUI])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_EUI _p _) = _p :: PathOld Univ ReportImage EUI
          peekValueOld (Proxy) (Peek_ReportImage_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportImage_EUI _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage MEUI
    where type PathOld Univ ReportImage MEUI = Path_ReportImage MEUI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView MEUI ->
                                                                                                                                                                                                   PathOld Univ ReportImage MEUI,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               MEUI ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               MEUI,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      MEUI])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_MEUI _p _) = _p :: PathOld Univ ReportImage MEUI
          peekValueOld (Proxy) (Peek_ReportImage_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportImage_MEUI _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage MaybeImageFile
    where type PathOld Univ ReportImage MaybeImageFile = Path_ReportImage MaybeImageFile
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           MaybeImageFile ->
                                                                                                                                                                                                   PathOld Univ ReportImage MaybeImageFile,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               MaybeImageFile ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               MaybeImageFile,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      MaybeImageFile])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_MaybeImageFile _p _) = _p :: PathOld Univ ReportImage MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportImage_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportImage_MaybeImageFile _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage ReportImage
    where type PathOld Univ ReportImage ReportImage = Path_ReportImage ReportImage
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_ReportImage _p _) = _p :: PathOld Univ ReportImage ReportImage
          peekValueOld (Proxy) (Peek_ReportImage_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportImage_ReportImage _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage ReportImageView
    where type PathOld Univ ReportImage ReportImageView = Path_ReportImage ReportImageView
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           ReportImageView ->
                                                                                                                                                                                                   PathOld Univ ReportImage ReportImageView,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               ReportImageView ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               ReportImageView,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      ReportImageView])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_ReportImageView _p _) = _p :: PathOld Univ ReportImage ReportImageView
          peekValueOld (Proxy) (Peek_ReportImage_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportImage_ReportImageView _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage SaneSizeImageSize
    where type PathOld Univ ReportImage SaneSizeImageSize = Path_ReportImage SaneSizeImageSize
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ
                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                           SaneSizeImageSize ->
                                                                                                                                                                                                   PathOld Univ ReportImage SaneSizeImageSize,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               SaneSizeImageSize ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               SaneSizeImageSize,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      SaneSizeImageSize])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportImage SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportImage_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportImage_SaneSizeImageSize _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage URI
    where type PathOld Univ ReportImage URI = Path_ReportImage URI
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView URI ->
                                                                                                                                                                                                   PathOld Univ ReportImage URI,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               URI ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               URI,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      URI])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_URI _p _) = _p :: PathOld Univ ReportImage URI
          peekValueOld (Proxy) (Peek_ReportImage_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportImage_URI _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImage Text
    where type PathOld Univ ReportImage Text = Path_ReportImage Text
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: PathOld Univ ReportImageView Text ->
                                                                                                                                                                                                   PathOld Univ ReportImage Text,
                                                                                                                                                                          a')) (toListOf (toLens (Path_ReportImage_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                           ReportImageView))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               Text,
                                                                                                                                                                                                                                                                       ReportImageView)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                                      ReportImage
                                                                                                                                                                                                                                                                                                      Text])
          peekOld (p@(Path_ReportImage_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImage
          peekPathOld (Proxy) (Peek_ReportImage_Text _p _) = _p :: PathOld Univ ReportImage Text
          peekValueOld (Proxy) (Peek_ReportImage_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportImage_Text _p _x :: PeekOld Univ ReportImage
instance PathsOld Univ ReportImages String
    where type PathOld Univ ReportImages String = Path_OMap ReportImageID (Path_ReportImage String)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage String ->
                                                                                                                                                                                                                 PathOld Univ ReportImages String,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            String])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_String _p _) = _p :: PathOld Univ ReportImages String
          peekValueOld (Proxy) (Peek_ReportImages_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportImages_String _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Bool
    where type PathOld Univ ReportImages Bool = Path_OMap ReportImageID (Path_ReportImage Bool)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Bool ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Bool,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Bool])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Bool _p _) = _p :: PathOld Univ ReportImages Bool
          peekValueOld (Proxy) (Peek_ReportImages_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportImages_Bool _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Double
    where type PathOld Univ ReportImages Double = Path_OMap ReportImageID (Path_ReportImage Double)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Double ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Double,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Double])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Double _p _) = _p :: PathOld Univ ReportImages Double
          peekValueOld (Proxy) (Peek_ReportImages_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportImages_Double _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Dimension
    where type PathOld Univ ReportImages Dimension = Path_OMap ReportImageID (Path_ReportImage Dimension)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Dimension ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Dimension,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Dimension])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Dimension _p _) = _p :: PathOld Univ ReportImages Dimension
          peekValueOld (Proxy) (Peek_ReportImages_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportImages_Dimension _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ImageCrop
    where type PathOld Univ ReportImages ImageCrop = Path_OMap ReportImageID (Path_ReportImage ImageCrop)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage ImageCrop ->
                                                                                                                                                                                                                 PathOld Univ ReportImages ImageCrop,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            ImageCrop])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ImageCrop _p _) = _p :: PathOld Univ ReportImages ImageCrop
          peekValueOld (Proxy) (Peek_ReportImages_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportImages_ImageCrop _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ImageSize
    where type PathOld Univ ReportImages ImageSize = Path_OMap ReportImageID (Path_ReportImage ImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage ImageSize ->
                                                                                                                                                                                                                 PathOld Univ ReportImages ImageSize,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            ImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ImageSize _p _) = _p :: PathOld Univ ReportImages ImageSize
          peekValueOld (Proxy) (Peek_ReportImages_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportImages_ImageSize _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Units
    where type PathOld Univ ReportImages Units = Path_OMap ReportImageID (Path_ReportImage Units)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Units ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Units,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Units])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Units _p _) = _p :: PathOld Univ ReportImages Units
          peekValueOld (Proxy) (Peek_ReportImages_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportImages_Units _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ImageFile
    where type PathOld Univ ReportImages ImageFile = Path_OMap ReportImageID (Path_ReportImage ImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage ImageFile ->
                                                                                                                                                                                                                 PathOld Univ ReportImages ImageFile,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            ImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ImageFile _p _) = _p :: PathOld Univ ReportImages ImageFile
          peekValueOld (Proxy) (Peek_ReportImages_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportImages_ImageFile _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages JSONText
    where type PathOld Univ ReportImages JSONText = Path_OMap ReportImageID (Path_ReportImage JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage JSONText ->
                                                                                                                                                                                                                 PathOld Univ ReportImages JSONText,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_JSONText _p _) = _p :: PathOld Univ ReportImages JSONText
          peekValueOld (Proxy) (Peek_ReportImages_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportImages_JSONText _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Markup
    where type PathOld Univ ReportImages Markup = Path_OMap ReportImageID (Path_ReportImage Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Markup ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Markup,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Markup _p _) = _p :: PathOld Univ ReportImages Markup
          peekValueOld (Proxy) (Peek_ReportImages_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportImages_Markup _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages EUI
    where type PathOld Univ ReportImages EUI = Path_OMap ReportImageID (Path_ReportImage EUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage EUI ->
                                                                                                                                                                                                                 PathOld Univ ReportImages EUI,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            EUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_EUI _p _) = _p :: PathOld Univ ReportImages EUI
          peekValueOld (Proxy) (Peek_ReportImages_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportImages_EUI _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages MEUI
    where type PathOld Univ ReportImages MEUI = Path_OMap ReportImageID (Path_ReportImage MEUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage MEUI ->
                                                                                                                                                                                                                 PathOld Univ ReportImages MEUI,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            MEUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_MEUI _p _) = _p :: PathOld Univ ReportImages MEUI
          peekValueOld (Proxy) (Peek_ReportImages_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportImages_MEUI _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages MaybeImageFile
    where type PathOld Univ ReportImages MaybeImageFile = Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ
                                                                                                                                                                                                                         ReportImage
                                                                                                                                                                                                                         MaybeImageFile ->
                                                                                                                                                                                                                 PathOld Univ ReportImages MaybeImageFile,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            MaybeImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_MaybeImageFile _p _) = _p :: PathOld Univ ReportImages MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportImages_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportImages_MaybeImageFile _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ReportImage
    where type PathOld Univ ReportImages ReportImage = Path_OMap ReportImageID (Path_ReportImage ReportImage)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage ReportImage ->
                                                                                                                                                                                                                 PathOld Univ ReportImages ReportImage,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            ReportImage])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ReportImage _p _) = _p :: PathOld Univ ReportImages ReportImage
          peekValueOld (Proxy) (Peek_ReportImages_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportImages_ReportImage _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ReportImages
    where type PathOld Univ ReportImages ReportImages = Path_OMap ReportImageID (Path_ReportImage ReportImages)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ReportImages _p _) = _p :: PathOld Univ ReportImages ReportImages
          peekValueOld (Proxy) (Peek_ReportImages_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_ReportImages_ReportImages _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages ReportImageView
    where type PathOld Univ ReportImages ReportImageView = Path_OMap ReportImageID (Path_ReportImage ReportImageView)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ
                                                                                                                                                                                                                         ReportImage
                                                                                                                                                                                                                         ReportImageView ->
                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                         ReportImageView,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            ReportImageView])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_ReportImageView _p _) = _p :: PathOld Univ ReportImages ReportImageView
          peekValueOld (Proxy) (Peek_ReportImages_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportImages_ReportImageView _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages SaneSizeImageSize
    where type PathOld Univ ReportImages SaneSizeImageSize = Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ
                                                                                                                                                                                                                         ReportImage
                                                                                                                                                                                                                         SaneSizeImageSize ->
                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                         SaneSizeImageSize,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            SaneSizeImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportImages SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportImages_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportImages_SaneSizeImageSize _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages URI
    where type PathOld Univ ReportImages URI = Path_OMap ReportImageID (Path_ReportImage URI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage URI ->
                                                                                                                                                                                                                 PathOld Univ ReportImages URI,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            URI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_URI _p _) = _p :: PathOld Univ ReportImages URI
          peekValueOld (Proxy) (Peek_ReportImages_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportImages_URI _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReportImages Text
    where type PathOld Univ ReportImages Text = Path_OMap ReportImageID (Path_ReportImage Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                                   val) -> (Path_At idx, val)) (toPairs _s) :: [(PathOld Univ ReportImage Text ->
                                                                                                                                                                                                                 PathOld Univ ReportImages Text,
                                                                                                                                                                                                                 ReportImage)]) :: [PathOld Univ
                                                                                                                                                                                                                                            ReportImages
                                                                                                                                                                                                                                            Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImages
          peekPathOld (Proxy) (Peek_ReportImages_Text _p _) = _p :: PathOld Univ ReportImages Text
          peekValueOld (Proxy) (Peek_ReportImages_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportImages_Text _p _x :: PeekOld Univ ReportImages
instance PathsOld Univ ReadOnlyFilePath String
    where type PathOld Univ ReadOnlyFilePath String = Path_ReadOnlyFilePath String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReadOnlyFilePath_View :: PathOld Univ String String ->
                                                                                                                                                                                               PathOld Univ ReadOnlyFilePath String,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                       String
                                                                                                                                                                                                                                       String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                  String ->
                                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                                  ReadOnlyFilePath
                                                                                                                                                                                                                                                                  String,
                                                                                                                                                                                                                                                          String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                ReadOnlyFilePath
                                                                                                                                                                                                                                                                                String])
          peekOld (p@(Path_ReadOnlyFilePath_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReadOnlyFilePath
          peekPathOld (Proxy) (Peek_ReadOnlyFilePath_String _p _) = _p :: PathOld Univ ReadOnlyFilePath String
          peekValueOld (Proxy) (Peek_ReadOnlyFilePath_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReadOnlyFilePath_String _p _x :: PeekOld Univ ReadOnlyFilePath
instance PathsOld Univ ReadOnlyFilePath JSONText
    where type PathOld Univ ReadOnlyFilePath JSONText = Path_ReadOnlyFilePath JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReadOnlyFilePath_View :: PathOld Univ String JSONText ->
                                                                                                                                                                                               PathOld Univ ReadOnlyFilePath JSONText,
                                                                                                                                                                 a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                       String
                                                                                                                                                                                                                                       String))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                  JSONText ->
                                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                                  ReadOnlyFilePath
                                                                                                                                                                                                                                                                  JSONText,
                                                                                                                                                                                                                                                          String)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                ReadOnlyFilePath
                                                                                                                                                                                                                                                                                JSONText])
          peekOld (p@(Path_ReadOnlyFilePath_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReadOnlyFilePath
          peekPathOld (Proxy) (Peek_ReadOnlyFilePath_JSONText _p _) = _p :: PathOld Univ ReadOnlyFilePath JSONText
          peekValueOld (Proxy) (Peek_ReadOnlyFilePath_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReadOnlyFilePath_JSONText _p _x :: PeekOld Univ ReadOnlyFilePath
instance PathsOld Univ ReadOnlyFilePath ReadOnlyFilePath
    where type PathOld Univ ReadOnlyFilePath ReadOnlyFilePath = Path_ReadOnlyFilePath ReadOnlyFilePath
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReadOnlyFilePath
          peekPathOld (Proxy) (Peek_ReadOnlyFilePath_ReadOnlyFilePath _p _) = _p :: PathOld Univ ReadOnlyFilePath ReadOnlyFilePath
          peekValueOld (Proxy) (Peek_ReadOnlyFilePath_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekConsOld _p _x = Peek_ReadOnlyFilePath_ReadOnlyFilePath _p _x :: PeekOld Univ ReadOnlyFilePath
instance PathsOld Univ ReportImageView String
    where type PathOld Univ ReportImageView String = Path_ReportImageView String
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize,
                                                                                                                                                                                                 _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                            SaneSizeImageSize
                                                                                                                                                                                                                            String ->
                                                                                                                                                                                                                    PathOld Univ ReportImageView String,
                                                                                                                                                                                                                    SaneSizeImageSize)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                                 _picEditedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        MaybeImageFile
                                                                                                                                                                                                                                        String ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                        String,
                                                                                                                                                                                                                                MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                                 _picThumbDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                       String ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       ReportImageView
                                                                                                                                                                                                                                       String,
                                                                                                                                                                                                                               MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                                 _picPrinterDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         MaybeImageFile
                                                                                                                                                                                                                                         String ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         String,
                                                                                                                                                                                                                                 MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge,
                                                                                                                                                                                       _picMustEnlarge _s)] :: [(PathOld Univ Bool String ->
                                                                                                                                                                                                                 PathOld Univ ReportImageView String,
                                                                                                                                                                                                                 Bool)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                                 _picEnlargedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          MaybeImageFile
                                                                                                                                                                                                                                          String ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportImageView
                                                                                                                                                                                                                                          String,
                                                                                                                                                                                                                                  MaybeImageFile)])] :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 String])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picMustEnlarge _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_String _p _) = _p :: PathOld Univ ReportImageView String
          peekValueOld (Proxy) (Peek_ReportImageView_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportImageView_String _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Bool
    where type PathOld Univ ReportImageView Bool = Path_ReportImageView Bool
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                   Bool ->
                                                                                                                                                                                                                                           PathOld Univ
                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                   Bool,
                                                                                                                                                                                                                                           Bool)]) :: [PathOld Univ
                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                               Bool])
          peekOld (p@(Path_ReportImageView__picMustEnlarge _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Bool _p _) = _p :: PathOld Univ ReportImageView Bool
          peekValueOld (Proxy) (Peek_ReportImageView_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportImageView_Bool _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Double
    where type PathOld Univ ReportImageView Double = Path_ReportImageView Double
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  Double ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  Double,
                                                                                                                                                                                                                                          SaneSizeImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                           Double])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Double _p _) = _p :: PathOld Univ ReportImageView Double
          peekValueOld (Proxy) (Peek_ReportImageView_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportImageView_Double _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Dimension
    where type PathOld Univ ReportImageView Dimension = Path_ReportImageView Dimension
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  Dimension ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  Dimension,
                                                                                                                                                                                                                                          SaneSizeImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                           Dimension])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Dimension _p _) = _p :: PathOld Univ ReportImageView Dimension
          peekValueOld (Proxy) (Peek_ReportImageView_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportImageView_Dimension _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView ImageCrop
    where type PathOld Univ ReportImageView ImageCrop = Path_ReportImageView ImageCrop
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageCrop) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCrop, _picCrop _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          ImageCrop
                                                                                                                                                                                                                                          ImageCrop ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportImageView
                                                                                                                                                                                                                                          ImageCrop,
                                                                                                                                                                                                                                  ImageCrop)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                           ImageCrop])
          peekOld (p@(Path_ReportImageView__picCrop _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_ImageCrop _p _) = _p :: PathOld Univ ReportImageView ImageCrop
          peekValueOld (Proxy) (Peek_ReportImageView_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportImageView_ImageCrop _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView ImageSize
    where type PathOld Univ ReportImageView ImageSize = Path_ReportImageView ImageSize
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  ImageSize ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  ImageSize,
                                                                                                                                                                                                                                          SaneSizeImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                           ImageSize])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_ImageSize _p _) = _p :: PathOld Univ ReportImageView ImageSize
          peekValueOld (Proxy) (Peek_ReportImageView_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportImageView_ImageSize _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Units
    where type PathOld Univ ReportImageView Units = Path_ReportImageView Units
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  Units ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  Units,
                                                                                                                                                                                                                                          SaneSizeImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                           Units])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Units _p _) = _p :: PathOld Univ ReportImageView Units
          peekValueOld (Proxy) (Peek_ReportImageView_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportImageView_Units _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView ImageFile
    where type PathOld Univ ReportImageView ImageFile = Path_ReportImageView ImageFile
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                      ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                                  _picOriginal _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 ImageFile ->
                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 ImageFile,
                                                                                                                                                                                                                         Maybe (Either URI
                                                                                                                                                                                                                                       ImageFile))]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 ImageFile])
          peekOld (p@(Path_ReportImageView__picOriginal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_ImageFile _p _) = _p :: PathOld Univ ReportImageView ImageFile
          peekValueOld (Proxy) (Peek_ReportImageView_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportImageView_ImageFile _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView JSONText
    where type PathOld Univ ReportImageView JSONText = Path_ReportImageView JSONText
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize,
                                                                                                                                                                                                 _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                            SaneSizeImageSize
                                                                                                                                                                                                                            JSONText ->
                                                                                                                                                                                                                    PathOld Univ ReportImageView JSONText,
                                                                                                                                                                                                                    SaneSizeImageSize)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption,
                                                                                                                                                                                         _picCaption _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                               PathOld Univ ReportImageView JSONText,
                                                                                                                                                                                                               Markup)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                                 _picEditedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        MaybeImageFile
                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                                 _picThumbDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       ReportImageView
                                                                                                                                                                                                                                       JSONText,
                                                                                                                                                                                                                               MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                                 _picPrinterDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         MaybeImageFile
                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         JSONText,
                                                                                                                                                                                                                                 MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge,
                                                                                                                                                                                       _picMustEnlarge _s)] :: [(PathOld Univ Bool JSONText ->
                                                                                                                                                                                                                 PathOld Univ ReportImageView JSONText,
                                                                                                                                                                                                                 Bool)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                                 _picEnlargedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          MaybeImageFile
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportImageView
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                  MaybeImageFile)])] :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 JSONText])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picCaption _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picMustEnlarge _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_JSONText _p _) = _p :: PathOld Univ ReportImageView JSONText
          peekValueOld (Proxy) (Peek_ReportImageView_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportImageView_JSONText _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Markup
    where type PathOld Univ ReportImageView Markup = Path_ReportImageView Markup
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption, _picCaption _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                                             ReportImageView
                                                                                                                                                                                                                                             Markup,
                                                                                                                                                                                                                                     Markup)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                           Markup])
          peekOld (p@(Path_ReportImageView__picCaption _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Markup _p _) = _p :: PathOld Univ ReportImageView Markup
          peekValueOld (Proxy) (Peek_ReportImageView_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportImageView_Markup _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView EUI
    where type PathOld Univ ReportImageView EUI = Path_ReportImageView EUI
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                      ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                                  _picOriginal _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 EUI ->
                                                                                                                                                                                                                         PathOld Univ ReportImageView EUI,
                                                                                                                                                                                                                         Maybe (Either URI
                                                                                                                                                                                                                                       ImageFile))]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 EUI])
          peekOld (p@(Path_ReportImageView__picOriginal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_EUI _p _) = _p :: PathOld Univ ReportImageView EUI
          peekValueOld (Proxy) (Peek_ReportImageView_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportImageView_EUI _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView MEUI
    where type PathOld Univ ReportImageView MEUI = Path_ReportImageView MEUI
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                      ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                                  _picOriginal _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 MEUI ->
                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 MEUI,
                                                                                                                                                                                                                         Maybe (Either URI
                                                                                                                                                                                                                                       ImageFile))]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 MEUI])
          peekOld (p@(Path_ReportImageView__picOriginal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_MEUI _p _) = _p :: PathOld Univ ReportImageView MEUI
          peekValueOld (Proxy) (Peek_ReportImageView_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportImageView_MEUI _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView MaybeImageFile
    where type PathOld Univ ReportImageView MaybeImageFile = Path_ReportImageView MaybeImageFile
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                              _picEditedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                     MaybeImageFile
                                                                                                                                                                                                                                     MaybeImageFile ->
                                                                                                                                                                                                                             PathOld Univ
                                                                                                                                                                                                                                     ReportImageView
                                                                                                                                                                                                                                     MaybeImageFile,
                                                                                                                                                                                                                             MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                                 _picThumbDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                       MaybeImageFile ->
                                                                                                                                                                                                                               PathOld Univ
                                                                                                                                                                                                                                       ReportImageView
                                                                                                                                                                                                                                       MaybeImageFile,
                                                                                                                                                                                                                               MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                                 _picPrinterDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         MaybeImageFile
                                                                                                                                                                                                                                         MaybeImageFile ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         MaybeImageFile,
                                                                                                                                                                                                                                 MaybeImageFile)]),
                                                                                    concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                                 _picEnlargedDeprecated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          MaybeImageFile
                                                                                                                                                                                                                                          MaybeImageFile ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportImageView
                                                                                                                                                                                                                                          MaybeImageFile,
                                                                                                                                                                                                                                  MaybeImageFile)])] :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 MaybeImageFile])
          peekOld (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekOld (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_MaybeImageFile _p _) = _p :: PathOld Univ ReportImageView MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportImageView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportImageView_MaybeImageFile _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView ReportImageView
    where type PathOld Univ ReportImageView ReportImageView = Path_ReportImageView ReportImageView
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_ReportImageView _p _) = _p :: PathOld Univ ReportImageView ReportImageView
          peekValueOld (Proxy) (Peek_ReportImageView_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportImageView_ReportImageView _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView SaneSizeImageSize
    where type PathOld Univ ReportImageView SaneSizeImageSize = Path_ReportImageView SaneSizeImageSize
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  SaneSizeImageSize ->
                                                                                                                                                                                                                                          PathOld Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  SaneSizeImageSize,
                                                                                                                                                                                                                                          SaneSizeImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                           SaneSizeImageSize])
          peekOld (p@(Path_ReportImageView__picSize _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportImageView SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportImageView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportImageView_SaneSizeImageSize _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView URI
    where type PathOld Univ ReportImageView URI = Path_ReportImageView URI
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                      ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                                  _picOriginal _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                 (Maybe (Either URI
                                                                                                                                                                                                                                                ImageFile))
                                                                                                                                                                                                                                 URI ->
                                                                                                                                                                                                                         PathOld Univ ReportImageView URI,
                                                                                                                                                                                                                         Maybe (Either URI
                                                                                                                                                                                                                                       ImageFile))]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                 URI])
          peekOld (p@(Path_ReportImageView__picOriginal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_URI _p _) = _p :: PathOld Univ ReportImageView URI
          peekValueOld (Proxy) (Peek_ReportImageView_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportImageView_URI _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportImageView Text
    where type PathOld Univ ReportImageView Text = Path_ReportImageView Text
          pathsOld (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                        a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption, _picCaption _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                                             ReportImageView
                                                                                                                                                                                                                                             Text,
                                                                                                                                                                                                                                     Markup)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                           Text])
          peekOld (p@(Path_ReportImageView__picCaption _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportImageView
          peekPathOld (Proxy) (Peek_ReportImageView_Text _p _) = _p :: PathOld Univ ReportImageView Text
          peekValueOld (Proxy) (Peek_ReportImageView_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportImageView_Text _p _x :: PeekOld Univ ReportImageView
instance PathsOld Univ ReportView String
    where type PathOld Univ ReportView String = Path_ReportView String
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder,
                                                                                                                                                                                           _reportFolder _s)] :: [(PathOld Univ ReadOnlyFilePath String ->
                                                                                                                                                                                                                   PathOld Univ ReportView String,
                                                                                                                                                                                                                   ReadOnlyFilePath)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                                    _reportIntendedUse _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         MaybeReportIntendedUse
                                                                                                                                                                                                                                         String ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                         String,
                                                                                                                                                                                                                                 MaybeReportIntendedUse)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody,
                                                                                                                                                                                         _reportBody _s)] :: [(PathOld Univ ReportElems String ->
                                                                                                                                                                                                               PathOld Univ ReportView String,
                                                                                                                                                                                                               ReportElems)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus,
                                                                                                                                                                                          _reportStatus _s)] :: [(PathOld Univ ReportStatus String ->
                                                                                                                                                                                                                  PathOld Univ ReportView String,
                                                                                                                                                                                                                  ReportStatus)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted,
                                                                                                                                                                                  _reportRedacted _s)] :: [(PathOld Univ Bool String ->
                                                                                                                                                                                                            PathOld Univ ReportView String,
                                                                                                                                                                                                            Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags,
                                                                                                                                                                                         _reportFlags _s)] :: [(PathOld Univ ReportFlags String ->
                                                                                                                                                                                                                PathOld Univ ReportView String,
                                                                                                                                                                                                                ReportFlags)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                                  _reportOrderByItemName _s)] :: [(PathOld Univ Bool String ->
                                                                                                                                                                                                                   PathOld Univ ReportView String,
                                                                                                                                                                                                                   Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                                  _reportDisplayItemName _s)] :: [(PathOld Univ Bool String ->
                                                                                                                                                                                                                   PathOld Univ ReportView String,
                                                                                                                                                                                                                   Bool)])] :: [PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        String])
          peekOld (p@(Path_ReportView__reportFolder _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportIntendedUse _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportStatus _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportRedacted _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFlags _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportOrderByItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDisplayItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_String _p _) = _p :: PathOld Univ ReportView String
          peekValueOld (Proxy) (Peek_ReportView_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportView_String _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Int64
    where type PathOld Univ ReportView Int64 = Path_ReportView Int64
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: EpochMilli) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCreated, _reportCreated _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                             EpochMilli
                                                                                                                                                                                                                                             Int64 ->
                                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Int64,
                                                                                                                                                                                                                                     EpochMilli)]) :: [PathOld Univ
                                                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                                                               Int64])
          peekOld (p@(Path_ReportView__reportCreated _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Int64 _p _) = _p :: PathOld Univ ReportView Int64
          peekValueOld (Proxy) (Peek_ReportView_Int64 _ _x) = _x :: Maybe Int64
          peekConsOld _p _x = Peek_ReportView_Int64 _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Bool
    where type PathOld Univ ReportView Bool = Path_ReportView Bool
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                                 Bool ->
                                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 Bool,
                                                                                                                                                                                                                                         ReportElems)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted,
                                                                                                                                                                                  _reportRedacted _s)] :: [(PathOld Univ Bool Bool ->
                                                                                                                                                                                                            PathOld Univ ReportView Bool,
                                                                                                                                                                                                            Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags,
                                                                                                                                                                                         _reportFlags _s)] :: [(PathOld Univ ReportFlags Bool ->
                                                                                                                                                                                                                PathOld Univ ReportView Bool,
                                                                                                                                                                                                                ReportFlags)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                                  _reportOrderByItemName _s)] :: [(PathOld Univ Bool Bool ->
                                                                                                                                                                                                                   PathOld Univ ReportView Bool,
                                                                                                                                                                                                                   Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                                  _reportDisplayItemName _s)] :: [(PathOld Univ Bool Bool ->
                                                                                                                                                                                                                   PathOld Univ ReportView Bool,
                                                                                                                                                                                                                   Bool)])] :: [PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Bool])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportRedacted _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFlags _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportOrderByItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDisplayItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Bool _p _) = _p :: PathOld Univ ReportView Bool
          peekValueOld (Proxy) (Peek_ReportView_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportView_Bool _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Double
    where type PathOld Univ ReportView Double = Path_ReportView Double
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        Double ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Double,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           Double])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Double _p _) = _p :: PathOld Univ ReportView Double
          peekValueOld (Proxy) (Peek_ReportView_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportView_Double _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Int
    where type PathOld Univ ReportView Int = Path_ReportView Int
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportStandard) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStandardsVersion,
                                                                                                                                                                                _reportStandardsVersion _s)] :: [(PathOld Univ ReportStandard Int ->
                                                                                                                                                                                                                  PathOld Univ ReportView Int,
                                                                                                                                                                                                                  ReportStandard)]) :: [PathOld Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                Int])
          peekOld (p@(Path_ReportView__reportStandardsVersion _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Int _p _) = _p :: PathOld Univ ReportView Int
          peekValueOld (Proxy) (Peek_ReportView_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_ReportView_Int _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Dimension
    where type PathOld Univ ReportView Dimension = Path_ReportView Dimension
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        Dimension ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Dimension,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           Dimension])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Dimension _p _) = _p :: PathOld Univ ReportView Dimension
          peekValueOld (Proxy) (Peek_ReportView_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportView_Dimension _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ImageCrop
    where type PathOld Univ ReportView ImageCrop = Path_ReportView ImageCrop
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ImageCrop ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ImageCrop,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ImageCrop])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ImageCrop _p _) = _p :: PathOld Univ ReportView ImageCrop
          peekValueOld (Proxy) (Peek_ReportView_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportView_ImageCrop _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ImageSize
    where type PathOld Univ ReportView ImageSize = Path_ReportView ImageSize
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ImageSize ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ImageSize,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ImageSize])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ImageSize _p _) = _p :: PathOld Univ ReportView ImageSize
          peekValueOld (Proxy) (Peek_ReportView_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportView_ImageSize _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Units
    where type PathOld Univ ReportView Units = Path_ReportView Units
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        Units ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Units,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           Units])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Units _p _) = _p :: PathOld Univ ReportView Units
          peekValueOld (Proxy) (Peek_ReportView_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportView_Units _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ImageFile
    where type PathOld Univ ReportView ImageFile = Path_ReportView ImageFile
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ImageFile ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ImageFile,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ImageFile])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ImageFile _p _) = _p :: PathOld Univ ReportView ImageFile
          peekValueOld (Proxy) (Peek_ReportView_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportView_ImageFile _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Integer
    where type PathOld Univ ReportView Integer = Path_ReportView Integer
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Integer) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRevision, _reportRevision _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                            Integer
                                                                                                                                                                                                                                            Integer ->
                                                                                                                                                                                                                                    PathOld Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            Integer,
                                                                                                                                                                                                                                    Integer)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           Integer])
          peekOld (p@(Path_ReportView__reportRevision _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Integer _p _) = _p :: PathOld Univ ReportView Integer
          peekValueOld (Proxy) (Peek_ReportView_Integer _ _x) = _x :: Maybe Integer
          peekConsOld _p _x = Peek_ReportView_Integer _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView JSONText
    where type PathOld Univ ReportView JSONText = Path_ReportView JSONText
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder,
                                                                                                                                                                                           _reportFolder _s)] :: [(PathOld Univ
                                                                                                                                                                                                                           ReadOnlyFilePath
                                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   ReadOnlyFilePath)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                       Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                       Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                                    _reportContractDate _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                  PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                  Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                                    _reportInspectionDate _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                    PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                                    _reportEffectiveDate _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors,
                                                                                                                                                                                     _reportAuthors _s)] :: [(PathOld Univ Authors JSONText ->
                                                                                                                                                                                                              PathOld Univ ReportView JSONText,
                                                                                                                                                                                                              Authors)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer,
                                                                                                                                                                                    _reportPreparer _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                              PathOld Univ ReportView JSONText,
                                                                                                                                                                                                              Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                                    _reportPreparerEIN _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                 PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                                    _reportPreparerAddress _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                     PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                                    _reportPreparerEMail _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                                    _reportPreparerWebsite _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                     PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                         _reportAbbrevs _s)] :: [(PathOld Univ AbbrevPairs JSONText ->
                                                                                                                                                                                                                  PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                  AbbrevPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 JSONText,
                                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader,
                                                                                                                                                                                    _reportHeader _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                            PathOld Univ ReportView JSONText,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter,
                                                                                                                                                                                    _reportFooter _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                            PathOld Univ ReportView JSONText,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                                    _reportIntendedUse _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                         MaybeReportIntendedUse
                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                         JSONText,
                                                                                                                                                                                                                                 MaybeReportIntendedUse)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                                 _reportValueTypeInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                ReportValueTypeInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                                     _reportValueApproachInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                ReportValueApproachInfo
                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                                        ReportValueApproachInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                                    _reportClientName _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                                    _reportClientAddress _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                                    _reportClientGreeting _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                    PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                                    _reportItemsOwnerFull _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                    PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                                    _reportItemsOwner _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                                    _reportBriefItems _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                                    _reportInspectionLocation _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                        PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                        Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody,
                                                                                                                                                                                         _reportBody _s)] :: [(PathOld Univ ReportElems JSONText ->
                                                                                                                                                                                                               PathOld Univ ReportView JSONText,
                                                                                                                                                                                                               ReportElems)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                         _reportGlossary _s)] :: [(PathOld Univ MarkupPairs JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                         _reportSources _s)] :: [(PathOld Univ MarkupPairs JSONText ->
                                                                                                                                                                                                                  PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                  MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                                    _reportLetterOfTransmittal _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                         PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                                    _reportScopeOfWork _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                 PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                                     _reportCertification _s)] :: [(PathOld Univ Markups JSONText ->
                                                                                                                                                                                                                    PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                    Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                                     _reportLimitingConditions _s)] :: [(PathOld Univ Markups JSONText ->
                                                                                                                                                                                                                         PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                         Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                                    _reportPrivacyPolicy _s)] :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms,
                                                                                                                                                                                         _reportPerms _s)] :: [(PathOld Univ Permissions JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                Permissions)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding,
                                                                                                                                                                                      _reportBranding _s)] :: [(PathOld Univ Branding JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                Branding)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus,
                                                                                                                                                                                          _reportStatus _s)] :: [(PathOld Univ ReportStatus JSONText ->
                                                                                                                                                                                                                  PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                  ReportStatus)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted,
                                                                                                                                                                                  _reportRedacted _s)] :: [(PathOld Univ Bool JSONText ->
                                                                                                                                                                                                            PathOld Univ ReportView JSONText,
                                                                                                                                                                                                            Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags,
                                                                                                                                                                                         _reportFlags _s)] :: [(PathOld Univ ReportFlags JSONText ->
                                                                                                                                                                                                                PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                ReportFlags)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                                  _reportOrderByItemName _s)] :: [(PathOld Univ Bool JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Bool)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                                  _reportDisplayItemName _s)] :: [(PathOld Univ Bool JSONText ->
                                                                                                                                                                                                                   PathOld Univ ReportView JSONText,
                                                                                                                                                                                                                   Bool)])] :: [PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        JSONText])
          peekOld (p@(Path_ReportView__reportFolder _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportContractDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportEffectiveDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAuthors _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparer _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEIN _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEMail _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerWebsite _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportTitle _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportHeader _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFooter _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportIntendedUse _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueTypeInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueApproachInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientGreeting _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwner _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBriefItems _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionLocation _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportGlossary _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportSources _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportScopeOfWork _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportCertification _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLimitingConditions _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPerms _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBranding _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportStatus _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportRedacted _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFlags _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportOrderByItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDisplayItemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_JSONText _p _) = _p :: PathOld Univ ReportView JSONText
          peekValueOld (Proxy) (Peek_ReportView_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportView_JSONText _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Markup
    where type PathOld Univ ReportView Markup = Path_ReportView Markup
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                            Markup
                                                                                                                                                                                                                                            Markup ->
                                                                                                                                                                                                                                    PathOld Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            Markup,
                                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                                               Markup,
                                                                                                                                                                                                                                       Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                                    _reportContractDate _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                  PathOld Univ ReportView Markup,
                                                                                                                                                                                                                  Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                                    _reportInspectionDate _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                    PathOld Univ ReportView Markup,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                                    _reportEffectiveDate _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportView Markup,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors,
                                                                                                                                                                                     _reportAuthors _s)] :: [(PathOld Univ Authors Markup ->
                                                                                                                                                                                                              PathOld Univ ReportView Markup,
                                                                                                                                                                                                              Authors)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer,
                                                                                                                                                                                    _reportPreparer _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                              PathOld Univ ReportView Markup,
                                                                                                                                                                                                              Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                                    _reportPreparerEIN _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                 PathOld Univ ReportView Markup,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                                    _reportPreparerAddress _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                     PathOld Univ ReportView Markup,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                                    _reportPreparerEMail _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportView Markup,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                                    _reportPreparerWebsite _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                     PathOld Univ ReportView Markup,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                         _reportAbbrevs _s)] :: [(PathOld Univ AbbrevPairs Markup ->
                                                                                                                                                                                                                  PathOld Univ ReportView Markup,
                                                                                                                                                                                                                  AbbrevPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                 Markup ->
                                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 Markup,
                                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader,
                                                                                                                                                                                    _reportHeader _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                            PathOld Univ ReportView Markup,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter,
                                                                                                                                                                                    _reportFooter _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                            PathOld Univ ReportView Markup,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                                 _reportValueTypeInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                        Markup ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Markup,
                                                                                                                                                                                                                                ReportValueTypeInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                                     _reportValueApproachInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                ReportValueApproachInfo
                                                                                                                                                                                                                                                Markup ->
                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                Markup,
                                                                                                                                                                                                                                        ReportValueApproachInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                                    _reportClientName _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                PathOld Univ ReportView Markup,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                                    _reportClientAddress _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportView Markup,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                                    _reportClientGreeting _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                    PathOld Univ ReportView Markup,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                                    _reportItemsOwnerFull _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                    PathOld Univ ReportView Markup,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                                    _reportItemsOwner _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                PathOld Univ ReportView Markup,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                                    _reportBriefItems _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                PathOld Univ ReportView Markup,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                                    _reportInspectionLocation _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                        PathOld Univ ReportView Markup,
                                                                                                                                                                                                                        Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody,
                                                                                                                                                                                         _reportBody _s)] :: [(PathOld Univ ReportElems Markup ->
                                                                                                                                                                                                               PathOld Univ ReportView Markup,
                                                                                                                                                                                                               ReportElems)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                         _reportGlossary _s)] :: [(PathOld Univ MarkupPairs Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportView Markup,
                                                                                                                                                                                                                   MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                         _reportSources _s)] :: [(PathOld Univ MarkupPairs Markup ->
                                                                                                                                                                                                                  PathOld Univ ReportView Markup,
                                                                                                                                                                                                                  MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                                    _reportLetterOfTransmittal _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                         PathOld Univ ReportView Markup,
                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                                    _reportScopeOfWork _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                 PathOld Univ ReportView Markup,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                                     _reportCertification _s)] :: [(PathOld Univ Markups Markup ->
                                                                                                                                                                                                                    PathOld Univ ReportView Markup,
                                                                                                                                                                                                                    Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                                     _reportLimitingConditions _s)] :: [(PathOld Univ Markups Markup ->
                                                                                                                                                                                                                         PathOld Univ ReportView Markup,
                                                                                                                                                                                                                         Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                                    _reportPrivacyPolicy _s)] :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                                   PathOld Univ ReportView Markup,
                                                                                                                                                                                                                   Markup)])] :: [PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Markup])
          peekOld (p@(Path_ReportView__reportName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportContractDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportEffectiveDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAuthors _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparer _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEIN _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEMail _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerWebsite _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportTitle _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportHeader _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFooter _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueTypeInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueApproachInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientGreeting _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwner _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBriefItems _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionLocation _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportGlossary _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportSources _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportScopeOfWork _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportCertification _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLimitingConditions _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Markup _p _) = _p :: PathOld Univ ReportView Markup
          peekValueOld (Proxy) (Peek_ReportView_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportView_Markup _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Permissions
    where type PathOld Univ ReportView Permissions = Path_ReportView Permissions
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          Permissions ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Permissions,
                                                                                                                                                                                                                                  Permissions)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                                             Permissions])
          peekOld (p@(Path_ReportView__reportPerms _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Permissions _p _) = _p :: PathOld Univ ReportView Permissions
          peekValueOld (Proxy) (Peek_ReportView_Permissions _ _x) = _x :: Maybe Permissions
          peekConsOld _p _x = Peek_ReportView_Permissions _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView UserIds
    where type PathOld Univ ReportView UserIds = Path_ReportView UserIds
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          UserIds ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          UserIds,
                                                                                                                                                                                                                                  Permissions)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                                             UserIds])
          peekOld (p@(Path_ReportView__reportPerms _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_UserIds _p _) = _p :: PathOld Univ ReportView UserIds
          peekValueOld (Proxy) (Peek_ReportView_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_ReportView_UserIds _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView AbbrevPair
    where type PathOld Univ ReportView AbbrevPair = Path_ReportView AbbrevPair
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                              AbbrevPairs
                                                                                                                                                                                                                                              AbbrevPair ->
                                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              AbbrevPair,
                                                                                                                                                                                                                                      AbbrevPairs)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                                 AbbrevPair])
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_AbbrevPair _p _) = _p :: PathOld Univ ReportView AbbrevPair
          peekValueOld (Proxy) (Peek_ReportView_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_ReportView_AbbrevPair _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView AbbrevPairs
    where type PathOld Univ ReportView AbbrevPairs = Path_ReportView AbbrevPairs
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                              AbbrevPairs
                                                                                                                                                                                                                                              AbbrevPairs ->
                                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              AbbrevPairs,
                                                                                                                                                                                                                                      AbbrevPairs)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                                 AbbrevPairs])
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_AbbrevPairs _p _) = _p :: PathOld Univ ReportView AbbrevPairs
          peekValueOld (Proxy) (Peek_ReportView_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekConsOld _p _x = Peek_ReportView_AbbrevPairs _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Author
    where type PathOld Univ ReportView Author = Path_ReportView Author
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Authors
                                                                                                                                                                                                                                          Author ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Author,
                                                                                                                                                                                                                                  Authors)]) :: [PathOld Univ
                                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                                         Author])
          peekOld (p@(Path_ReportView__reportAuthors _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Author _p _) = _p :: PathOld Univ ReportView Author
          peekValueOld (Proxy) (Peek_ReportView_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_ReportView_Author _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Authors
    where type PathOld Univ ReportView Authors = Path_ReportView Authors
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Authors
                                                                                                                                                                                                                                          Authors ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Authors,
                                                                                                                                                                                                                                  Authors)]) :: [PathOld Univ
                                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                                         Authors])
          peekOld (p@(Path_ReportView__reportAuthors _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Authors _p _) = _p :: PathOld Univ ReportView Authors
          peekValueOld (Proxy) (Peek_ReportView_Authors _ _x) = _x :: Maybe Authors
          peekConsOld _p _x = Peek_ReportView_Authors _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Branding
    where type PathOld Univ ReportView Branding = Path_ReportView Branding
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding, _reportBranding _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                             Branding
                                                                                                                                                                                                                                             Branding ->
                                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Branding,
                                                                                                                                                                                                                                     Branding)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                                             Branding])
          peekOld (p@(Path_ReportView__reportBranding _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Branding _p _) = _p :: PathOld Univ ReportView Branding
          peekValueOld (Proxy) (Peek_ReportView_Branding _ _x) = _x :: Maybe Branding
          peekConsOld _p _x = Peek_ReportView_Branding _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MarkupPair
    where type PathOld Univ ReportView MarkupPair = Path_ReportView MarkupPair
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                      _reportGlossary _s)] :: [(PathOld Univ MarkupPairs MarkupPair ->
                                                                                                                                                                                                                PathOld Univ ReportView MarkupPair,
                                                                                                                                                                                                                MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                         _reportSources _s)] :: [(PathOld Univ MarkupPairs MarkupPair ->
                                                                                                                                                                                                                  PathOld Univ ReportView MarkupPair,
                                                                                                                                                                                                                  MarkupPairs)])] :: [PathOld Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              MarkupPair])
          peekOld (p@(Path_ReportView__reportGlossary _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportSources _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MarkupPair _p _) = _p :: PathOld Univ ReportView MarkupPair
          peekValueOld (Proxy) (Peek_ReportView_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_ReportView_MarkupPair _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MarkupPairs
    where type PathOld Univ ReportView MarkupPairs = Path_ReportView MarkupPairs
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                      _reportGlossary _s)] :: [(PathOld Univ MarkupPairs MarkupPairs ->
                                                                                                                                                                                                                PathOld Univ ReportView MarkupPairs,
                                                                                                                                                                                                                MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                         _reportSources _s)] :: [(PathOld Univ MarkupPairs MarkupPairs ->
                                                                                                                                                                                                                  PathOld Univ ReportView MarkupPairs,
                                                                                                                                                                                                                  MarkupPairs)])] :: [PathOld Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              MarkupPairs])
          peekOld (p@(Path_ReportView__reportGlossary _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportSources _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MarkupPairs _p _) = _p :: PathOld Univ ReportView MarkupPairs
          peekValueOld (Proxy) (Peek_ReportView_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekConsOld _p _x = Peek_ReportView_MarkupPairs _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Markups
    where type PathOld Univ ReportView Markups = Path_ReportView Markups
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                                  _reportCertification _s)] :: [(PathOld Univ Markups Markups ->
                                                                                                                                                                                                                 PathOld Univ ReportView Markups,
                                                                                                                                                                                                                 Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                                     _reportLimitingConditions _s)] :: [(PathOld Univ Markups Markups ->
                                                                                                                                                                                                                         PathOld Univ ReportView Markups,
                                                                                                                                                                                                                         Markups)])] :: [PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 Markups])
          peekOld (p@(Path_ReportView__reportCertification _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLimitingConditions _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Markups _p _) = _p :: PathOld Univ ReportView Markups
          peekValueOld (Proxy) (Peek_ReportView_Markups _ _x) = _x :: Maybe Markups
          peekConsOld _p _x = Peek_ReportView_Markups _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MaybeReportIntendedUse
    where type PathOld Univ ReportView MaybeReportIntendedUse = Path_ReportView MaybeReportIntendedUse
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                        _reportIntendedUse _s)] :: [(PathOld Univ
                                                                                                                                                                                                                             MaybeReportIntendedUse
                                                                                                                                                                                                                             MaybeReportIntendedUse ->
                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                             MaybeReportIntendedUse,
                                                                                                                                                                                                                     MaybeReportIntendedUse)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           MaybeReportIntendedUse])
          peekOld (p@(Path_ReportView__reportIntendedUse _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MaybeReportIntendedUse _p _) = _p :: PathOld Univ ReportView MaybeReportIntendedUse
          peekValueOld (Proxy) (Peek_ReportView_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekConsOld _p _x = Peek_ReportView_MaybeReportIntendedUse _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportElem
    where type PathOld Univ ReportView ReportElem = Path_ReportView ReportElem
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ReportElem ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReportElem,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ReportElem])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportElem _p _) = _p :: PathOld Univ ReportView ReportElem
          peekValueOld (Proxy) (Peek_ReportView_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_ReportView_ReportElem _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportElems
    where type PathOld Univ ReportView ReportElems = Path_ReportView ReportElems
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ReportElems ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReportElems,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ReportElems])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportElems _p _) = _p :: PathOld Univ ReportView ReportElems
          peekValueOld (Proxy) (Peek_ReportView_ReportElems _ _x) = _x :: Maybe ReportElems
          peekConsOld _p _x = Peek_ReportView_ReportElems _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportFlags
    where type PathOld Univ ReportView ReportFlags = Path_ReportView ReportFlags
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags, _reportFlags _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          ReportFlags
                                                                                                                                                                                                                                          ReportFlags ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          ReportFlags,
                                                                                                                                                                                                                                  ReportFlags)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                                             ReportFlags])
          peekOld (p@(Path_ReportView__reportFlags _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportFlags _p _) = _p :: PathOld Univ ReportView ReportFlags
          peekValueOld (Proxy) (Peek_ReportView_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekConsOld _p _x = Peek_ReportView_ReportFlags _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportStandard
    where type PathOld Univ ReportView ReportStandard = Path_ReportView ReportStandard
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportStandard) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStandardsVersion,
                                                                                                                                                                                _reportStandardsVersion _s)] :: [(PathOld Univ
                                                                                                                                                                                                                          ReportStandard
                                                                                                                                                                                                                          ReportStandard ->
                                                                                                                                                                                                                  PathOld Univ ReportView ReportStandard,
                                                                                                                                                                                                                  ReportStandard)]) :: [PathOld Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                ReportStandard])
          peekOld (p@(Path_ReportView__reportStandardsVersion _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportStandard _p _) = _p :: PathOld Univ ReportView ReportStandard
          peekValueOld (Proxy) (Peek_ReportView_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekConsOld _p _x = Peek_ReportView_ReportStandard _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportStatus
    where type PathOld Univ ReportView ReportStatus = Path_ReportView ReportStatus
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus, _reportStatus _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                             ReportStatus
                                                                                                                                                                                                                                             ReportStatus ->
                                                                                                                                                                                                                                     PathOld Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             ReportStatus,
                                                                                                                                                                                                                                     ReportStatus)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                                 ReportStatus])
          peekOld (p@(Path_ReportView__reportStatus _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportStatus _p _) = _p :: PathOld Univ ReportView ReportStatus
          peekValueOld (Proxy) (Peek_ReportView_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekConsOld _p _x = Peek_ReportView_ReportStatus _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportValueApproachInfo
    where type PathOld Univ ReportView ReportValueApproachInfo = Path_ReportView ReportValueApproachInfo
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                         _reportValueApproachInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                    ReportValueApproachInfo
                                                                                                                                                                                                                                    ReportValueApproachInfo ->
                                                                                                                                                                                                                            PathOld Univ
                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                    ReportValueApproachInfo,
                                                                                                                                                                                                                            ReportValueApproachInfo)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                   ReportView
                                                                                                                                                                                                                                                                   ReportValueApproachInfo])
          peekOld (p@(Path_ReportView__reportValueApproachInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportValueApproachInfo _p _) = _p :: PathOld Univ ReportView ReportValueApproachInfo
          peekValueOld (Proxy) (Peek_ReportView_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekConsOld _p _x = Peek_ReportView_ReportValueApproachInfo _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportValueTypeInfo
    where type PathOld Univ ReportView ReportValueTypeInfo = Path_ReportView ReportValueTypeInfo
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                     _reportValueTypeInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                            ReportValueTypeInfo
                                                                                                                                                                                                                            ReportValueTypeInfo ->
                                                                                                                                                                                                                    PathOld Univ
                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                            ReportValueTypeInfo,
                                                                                                                                                                                                                    ReportValueTypeInfo)]) :: [PathOld Univ
                                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                                       ReportValueTypeInfo])
          peekOld (p@(Path_ReportView__reportValueTypeInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportValueTypeInfo _p _) = _p :: PathOld Univ ReportView ReportValueTypeInfo
          peekValueOld (Proxy) (Peek_ReportView_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekConsOld _p _x = Peek_ReportView_ReportValueTypeInfo _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView EUI
    where type PathOld Univ ReportView EUI = Path_ReportView EUI
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        EUI ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        EUI,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           EUI])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_EUI _p _) = _p :: PathOld Univ ReportView EUI
          peekValueOld (Proxy) (Peek_ReportView_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportView_EUI _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MEUI
    where type PathOld Univ ReportView MEUI = Path_ReportView MEUI
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        MEUI ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        MEUI,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           MEUI])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MEUI _p _) = _p :: PathOld Univ ReportView MEUI
          peekValueOld (Proxy) (Peek_ReportView_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportView_MEUI _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MaybeImageFile
    where type PathOld Univ ReportView MaybeImageFile = Path_ReportView MaybeImageFile
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        MaybeImageFile ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        MaybeImageFile,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           MaybeImageFile])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MaybeImageFile _p _) = _p :: PathOld Univ ReportView MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportView_MaybeImageFile _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportImage
    where type PathOld Univ ReportView ReportImage = Path_ReportView ReportImage
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ReportImage ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReportImage,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ReportImage])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportImage _p _) = _p :: PathOld Univ ReportView ReportImage
          peekValueOld (Proxy) (Peek_ReportView_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportView_ReportImage _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportImages
    where type PathOld Univ ReportView ReportImages = Path_ReportView ReportImages
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ReportImages ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReportImages,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ReportImages])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportImages _p _) = _p :: PathOld Univ ReportView ReportImages
          peekValueOld (Proxy) (Peek_ReportView_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_ReportView_ReportImages _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReadOnlyFilePath
    where type PathOld Univ ReportView ReadOnlyFilePath = Path_ReportView ReadOnlyFilePath
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder, _reportFolder _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                 ReadOnlyFilePath
                                                                                                                                                                                                                                                 ReadOnlyFilePath ->
                                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 ReadOnlyFilePath,
                                                                                                                                                                                                                                         ReadOnlyFilePath)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                                                         ReadOnlyFilePath])
          peekOld (p@(Path_ReportView__reportFolder _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReadOnlyFilePath _p _) = _p :: PathOld Univ ReportView ReadOnlyFilePath
          peekValueOld (Proxy) (Peek_ReportView_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekConsOld _p _x = Peek_ReportView_ReadOnlyFilePath _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportImageView
    where type PathOld Univ ReportView ReportImageView = Path_ReportView ReportImageView
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        ReportImageView ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReportImageView,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           ReportImageView])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportImageView _p _) = _p :: PathOld Univ ReportView ReportImageView
          peekValueOld (Proxy) (Peek_ReportView_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportView_ReportImageView _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView ReportView
    where type PathOld Univ ReportView ReportView = Path_ReportView ReportView
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_ReportView _p _) = _p :: PathOld Univ ReportView ReportView
          peekValueOld (Proxy) (Peek_ReportView_ReportView _ _x) = _x :: Maybe ReportView
          peekConsOld _p _x = Peek_ReportView_ReportView _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView SaneSizeImageSize
    where type PathOld Univ ReportView SaneSizeImageSize = Path_ReportView SaneSizeImageSize
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        SaneSizeImageSize ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        SaneSizeImageSize,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           SaneSizeImageSize])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportView SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportView_SaneSizeImageSize _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Item
    where type PathOld Univ ReportView Item = Path_ReportView Item
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        Item ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Item,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           Item])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Item _p _) = _p :: PathOld Univ ReportView Item
          peekValueOld (Proxy) (Peek_ReportView_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_ReportView_Item _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView MIM
    where type PathOld Univ ReportView MIM = Path_ReportView MIM
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        MIM ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        MIM,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           MIM])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_MIM _p _) = _p :: PathOld Univ ReportView MIM
          peekValueOld (Proxy) (Peek_ReportView_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_ReportView_MIM _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView CIString
    where type PathOld Univ ReportView CIString = Path_ReportView CIString
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                              AbbrevPairs
                                                                                                                                                                                                                                              CIString ->
                                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              CIString,
                                                                                                                                                                                                                                      AbbrevPairs)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                                 CIString])
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_CIString _p _) = _p :: PathOld Univ ReportView CIString
          peekValueOld (Proxy) (Peek_ReportView_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_ReportView_CIString _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView URI
    where type PathOld Univ ReportView URI = Path_ReportView URI
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        URI ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        URI,
                                                                                                                                                                                                                                ReportElems)]) :: [PathOld Univ
                                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                                           URI])
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_URI _p _) = _p :: PathOld Univ ReportView URI
          peekValueOld (Proxy) (Peek_ReportView_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportView_URI _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView Text
    where type PathOld Univ ReportView Text = Path_ReportView Text
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                            a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                            Markup
                                                                                                                                                                                                                                            Text ->
                                                                                                                                                                                                                                    PathOld Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            Text,
                                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                                       PathOld Univ
                                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                                               Text,
                                                                                                                                                                                                                                       Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                                    _reportContractDate _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                  PathOld Univ ReportView Text,
                                                                                                                                                                                                                  Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                                    _reportInspectionDate _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                    PathOld Univ ReportView Text,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                                    _reportEffectiveDate _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                   PathOld Univ ReportView Text,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors,
                                                                                                                                                                                     _reportAuthors _s)] :: [(PathOld Univ Authors Text ->
                                                                                                                                                                                                              PathOld Univ ReportView Text,
                                                                                                                                                                                                              Authors)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer,
                                                                                                                                                                                    _reportPreparer _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                              PathOld Univ ReportView Text,
                                                                                                                                                                                                              Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                                    _reportPreparerEIN _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                 PathOld Univ ReportView Text,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                                    _reportPreparerAddress _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                     PathOld Univ ReportView Text,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                                    _reportPreparerEMail _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                   PathOld Univ ReportView Text,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                                    _reportPreparerWebsite _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                     PathOld Univ ReportView Text,
                                                                                                                                                                                                                     Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                         _reportAbbrevs _s)] :: [(PathOld Univ AbbrevPairs Text ->
                                                                                                                                                                                                                  PathOld Univ ReportView Text,
                                                                                                                                                                                                                  AbbrevPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                                         PathOld Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 Text,
                                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader,
                                                                                                                                                                                    _reportHeader _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                            PathOld Univ ReportView Text,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter,
                                                                                                                                                                                    _reportFooter _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                            PathOld Univ ReportView Text,
                                                                                                                                                                                                            Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                                 _reportValueTypeInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                        ReportValueTypeInfo
                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                PathOld Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Text,
                                                                                                                                                                                                                                ReportValueTypeInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                                     _reportValueApproachInfo _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                                ReportValueApproachInfo
                                                                                                                                                                                                                                                Text ->
                                                                                                                                                                                                                                        PathOld Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                Text,
                                                                                                                                                                                                                                        ReportValueApproachInfo)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                                    _reportClientName _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                PathOld Univ ReportView Text,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                                    _reportClientAddress _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                   PathOld Univ ReportView Text,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                                    _reportClientGreeting _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                    PathOld Univ ReportView Text,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                                    _reportItemsOwnerFull _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                    PathOld Univ ReportView Text,
                                                                                                                                                                                                                    Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                                    _reportItemsOwner _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                PathOld Univ ReportView Text,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                                    _reportBriefItems _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                PathOld Univ ReportView Text,
                                                                                                                                                                                                                Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                                    _reportInspectionLocation _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                        PathOld Univ ReportView Text,
                                                                                                                                                                                                                        Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody,
                                                                                                                                                                                         _reportBody _s)] :: [(PathOld Univ ReportElems Text ->
                                                                                                                                                                                                               PathOld Univ ReportView Text,
                                                                                                                                                                                                               ReportElems)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                         _reportGlossary _s)] :: [(PathOld Univ MarkupPairs Text ->
                                                                                                                                                                                                                   PathOld Univ ReportView Text,
                                                                                                                                                                                                                   MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                         _reportSources _s)] :: [(PathOld Univ MarkupPairs Text ->
                                                                                                                                                                                                                  PathOld Univ ReportView Text,
                                                                                                                                                                                                                  MarkupPairs)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                                    _reportLetterOfTransmittal _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                         PathOld Univ ReportView Text,
                                                                                                                                                                                                                         Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                                    _reportScopeOfWork _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                 PathOld Univ ReportView Text,
                                                                                                                                                                                                                 Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                                     _reportCertification _s)] :: [(PathOld Univ Markups Text ->
                                                                                                                                                                                                                    PathOld Univ ReportView Text,
                                                                                                                                                                                                                    Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                                     _reportLimitingConditions _s)] :: [(PathOld Univ Markups Text ->
                                                                                                                                                                                                                         PathOld Univ ReportView Text,
                                                                                                                                                                                                                         Markups)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                                    _reportPrivacyPolicy _s)] :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                                   PathOld Univ ReportView Text,
                                                                                                                                                                                                                   Markup)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms,
                                                                                                                                                                                         _reportPerms _s)] :: [(PathOld Univ Permissions Text ->
                                                                                                                                                                                                                PathOld Univ ReportView Text,
                                                                                                                                                                                                                Permissions)]),
                                                                               concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding,
                                                                                                                                                                                      _reportBranding _s)] :: [(PathOld Univ Branding Text ->
                                                                                                                                                                                                                PathOld Univ ReportView Text,
                                                                                                                                                                                                                Branding)])] :: [PathOld Univ
                                                                                                                                                                                                                                         ReportView
                                                                                                                                                                                                                                         Text])
          peekOld (p@(Path_ReportView__reportName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportContractDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportEffectiveDate _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAuthors _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparer _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEIN _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerEMail _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPreparerWebsite _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportAbbrevs _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportTitle _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportHeader _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportFooter _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueTypeInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportValueApproachInfo _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientAddress _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportClientGreeting _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportItemsOwner _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBriefItems _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportInspectionLocation _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBody _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportGlossary _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportSources _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportScopeOfWork _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportCertification _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportLimitingConditions _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportPerms _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekOld (p@(Path_ReportView__reportBranding _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_Text _p _) = _p :: PathOld Univ ReportView Text
          peekValueOld (Proxy) (Peek_ReportView_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportView_Text _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView UserId
    where type PathOld Univ ReportView UserId = Path_ReportView UserId
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(PathOld Univ
                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                          UserId ->
                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          UserId,
                                                                                                                                                                                                                                  Permissions)]) :: [PathOld Univ
                                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                                             UserId])
          peekOld (p@(Path_ReportView__reportPerms _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_UserId _p _) = _p :: PathOld Univ ReportView UserId
          peekValueOld (Proxy) (Peek_ReportView_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_ReportView_UserId _p _x :: PeekOld Univ ReportView
instance PathsOld Univ ReportView UUID
    where type PathOld Univ ReportView UUID = Path_ReportView UUID
          pathsOld (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                   a') -> pathsOld (Proxy :: Proxy Univ) (a' :: UUID) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportUUID, _reportUUID _s)] :: [(PathOld Univ UUID UUID ->
                                                                                                                                                                                                                         PathOld Univ ReportView UUID,
                                                                                                                                                                                                                         UUID)]) :: [PathOld Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             UUID])
          peekOld (p@(Path_ReportView__reportUUID _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportView
          peekPathOld (Proxy) (Peek_ReportView_UUID _p _) = _p :: PathOld Univ ReportView UUID
          peekValueOld (Proxy) (Peek_ReportView_UUID _ _x) = _x :: Maybe UUID
          peekConsOld _p _x = Peek_ReportView_UUID _p _x :: PeekOld Univ ReportView
instance PathsOld Univ SaneSizeImageSize String
    where type PathOld Univ SaneSizeImageSize String = Path_SaneSizeImageSize String
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize String ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize String,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         String ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         String,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          String])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_String _p _) = _p :: PathOld Univ SaneSizeImageSize String
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_SaneSizeImageSize_String _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize Double
    where type PathOld Univ SaneSizeImageSize Double = Path_SaneSizeImageSize Double
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize Double ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize Double,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         Double ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         Double,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          Double])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_Double _p _) = _p :: PathOld Univ SaneSizeImageSize Double
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_SaneSizeImageSize_Double _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize Dimension
    where type PathOld Univ SaneSizeImageSize Dimension = Path_SaneSizeImageSize Dimension
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize Dimension ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize Dimension,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         Dimension ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         Dimension,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          Dimension])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_Dimension _p _) = _p :: PathOld Univ SaneSizeImageSize Dimension
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_SaneSizeImageSize_Dimension _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize ImageSize
    where type PathOld Univ SaneSizeImageSize ImageSize = Path_SaneSizeImageSize ImageSize
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize ImageSize ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize ImageSize,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         ImageSize ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         ImageSize,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          ImageSize])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_ImageSize _p _) = _p :: PathOld Univ SaneSizeImageSize ImageSize
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_SaneSizeImageSize_ImageSize _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize Units
    where type PathOld Univ SaneSizeImageSize Units = Path_SaneSizeImageSize Units
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize Units ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize Units,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         Units ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         Units,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          Units])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_Units _p _) = _p :: PathOld Univ SaneSizeImageSize Units
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_SaneSizeImageSize_Units _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize JSONText
    where type PathOld Univ SaneSizeImageSize JSONText = Path_SaneSizeImageSize JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: PathOld Univ ImageSize JSONText ->
                                                                                                                                                                                                   PathOld Univ SaneSizeImageSize JSONText,
                                                                                                                                                                    a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: PathOld Univ
                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                           ImageSize))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                                                 PathOld Univ
                                                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                                                         JSONText,
                                                                                                                                                                                                                                                                 ImageSize)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                                          SaneSizeImageSize
                                                                                                                                                                                                                                                                                          JSONText])
          peekOld (p@(Path_SaneSizeImageSize_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_JSONText _p _) = _p :: PathOld Univ SaneSizeImageSize JSONText
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_SaneSizeImageSize_JSONText _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ SaneSizeImageSize SaneSizeImageSize
    where type PathOld Univ SaneSizeImageSize SaneSizeImageSize = Path_SaneSizeImageSize SaneSizeImageSize
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ SaneSizeImageSize
          peekPathOld (Proxy) (Peek_SaneSizeImageSize_SaneSizeImageSize _p _) = _p :: PathOld Univ SaneSizeImageSize SaneSizeImageSize
          peekValueOld (Proxy) (Peek_SaneSizeImageSize_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_SaneSizeImageSize_SaneSizeImageSize _p _x :: PeekOld Univ SaneSizeImageSize
instance PathsOld Univ Item String
    where type PathOld Univ Item String = Path_Item String
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages String ->
                                                                                                                                                                                                           PathOld Univ Item String,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item String])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_String _p _) = _p :: PathOld Univ Item String
          peekValueOld (Proxy) (Peek_Item_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_Item_String _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Bool
    where type PathOld Univ Item Bool = Path_Item Bool
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages Bool ->
                                                                                                                                                                                                           PathOld Univ Item Bool,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item Bool])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Bool _p _) = _p :: PathOld Univ Item Bool
          peekValueOld (Proxy) (Peek_Item_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_Item_Bool _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Double
    where type PathOld Univ Item Double = Path_Item Double
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages Double ->
                                                                                                                                                                                                           PathOld Univ Item Double,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item Double])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Double _p _) = _p :: PathOld Univ Item Double
          peekValueOld (Proxy) (Peek_Item_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_Item_Double _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Dimension
    where type PathOld Univ Item Dimension = Path_Item Dimension
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages Dimension ->
                                                                                                                                                                                                           PathOld Univ Item Dimension,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       Dimension])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Dimension _p _) = _p :: PathOld Univ Item Dimension
          peekValueOld (Proxy) (Peek_Item_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_Item_Dimension _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ImageCrop
    where type PathOld Univ Item ImageCrop = Path_Item ImageCrop
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages ImageCrop ->
                                                                                                                                                                                                           PathOld Univ Item ImageCrop,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ImageCrop])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ImageCrop _p _) = _p :: PathOld Univ Item ImageCrop
          peekValueOld (Proxy) (Peek_Item_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_Item_ImageCrop _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ImageSize
    where type PathOld Univ Item ImageSize = Path_Item ImageSize
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages ImageSize ->
                                                                                                                                                                                                           PathOld Univ Item ImageSize,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ImageSize])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ImageSize _p _) = _p :: PathOld Univ Item ImageSize
          peekValueOld (Proxy) (Peek_Item_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_Item_ImageSize _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Units
    where type PathOld Univ Item Units = Path_Item Units
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages Units ->
                                                                                                                                                                                                           PathOld Univ Item Units,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item Units])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Units _p _) = _p :: PathOld Univ Item Units
          peekValueOld (Proxy) (Peek_Item_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_Item_Units _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ImageFile
    where type PathOld Univ Item ImageFile = Path_Item ImageFile
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages ImageFile ->
                                                                                                                                                                                                           PathOld Univ Item ImageFile,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ImageFile])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ImageFile _p _) = _p :: PathOld Univ Item ImageFile
          peekValueOld (Proxy) (Peek_Item_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_Item_ImageFile _p _x :: PeekOld Univ Item
instance PathsOld Univ Item JSONText
    where type PathOld Univ Item JSONText = Path_Item JSONText
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                      a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Item_itemName, itemName _s)] :: [(PathOld Univ Text JSONText ->
                                                                                                                                                                                                                PathOld Univ Item JSONText,
                                                                                                                                                                                                                Text)]),
                                                                         concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(PathOld Univ MIM JSONText ->
                                                                                                                                                                                                              PathOld Univ Item JSONText,
                                                                                                                                                                                                              MIM)]),
                                                                         concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                               ReportImages
                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                       PathOld Univ Item JSONText,
                                                                                                                                                                                                                       ReportImages)])] :: [PathOld Univ
                                                                                                                                                                                                                                                    Item
                                                                                                                                                                                                                                                    JSONText])
          peekOld (p@(Path_Item_itemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekOld (p@(Path_Item_fields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_JSONText _p _) = _p :: PathOld Univ Item JSONText
          peekValueOld (Proxy) (Peek_Item_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Item_JSONText _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Markup
    where type PathOld Univ Item Markup = Path_Item Markup
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                      a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(PathOld Univ MIM Markup ->
                                                                                                                                                                                                           PathOld Univ Item Markup,
                                                                                                                                                                                                           MIM)]),
                                                                         concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                               ReportImages
                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                       PathOld Univ Item Markup,
                                                                                                                                                                                                                       ReportImages)])] :: [PathOld Univ
                                                                                                                                                                                                                                                    Item
                                                                                                                                                                                                                                                    Markup])
          peekOld (p@(Path_Item_fields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Markup _p _) = _p :: PathOld Univ Item Markup
          peekValueOld (Proxy) (Peek_Item_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_Item_Markup _p _x :: PeekOld Univ Item
instance PathsOld Univ Item EUI
    where type PathOld Univ Item EUI = Path_Item EUI
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages EUI ->
                                                                                                                                                                                                           PathOld Univ Item EUI,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item EUI])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_EUI _p _) = _p :: PathOld Univ Item EUI
          peekValueOld (Proxy) (Peek_Item_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_Item_EUI _p _x :: PeekOld Univ Item
instance PathsOld Univ Item MEUI
    where type PathOld Univ Item MEUI = Path_Item MEUI
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages MEUI ->
                                                                                                                                                                                                           PathOld Univ Item MEUI,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item MEUI])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_MEUI _p _) = _p :: PathOld Univ Item MEUI
          peekValueOld (Proxy) (Peek_Item_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_Item_MEUI _p _x :: PeekOld Univ Item
instance PathsOld Univ Item MaybeImageFile
    where type PathOld Univ Item MaybeImageFile = Path_Item MaybeImageFile
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                   MaybeImageFile ->
                                                                                                                                                                                                           PathOld Univ Item MaybeImageFile,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       MaybeImageFile])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_MaybeImageFile _p _) = _p :: PathOld Univ Item MaybeImageFile
          peekValueOld (Proxy) (Peek_Item_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_Item_MaybeImageFile _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ReportImage
    where type PathOld Univ Item ReportImage = Path_Item ReportImage
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages ReportImage ->
                                                                                                                                                                                                           PathOld Univ Item ReportImage,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ReportImage])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ReportImage _p _) = _p :: PathOld Univ Item ReportImage
          peekValueOld (Proxy) (Peek_Item_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_Item_ReportImage _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ReportImages
    where type PathOld Univ Item ReportImages = Path_Item ReportImages
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages ReportImages ->
                                                                                                                                                                                                           PathOld Univ Item ReportImages,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ReportImages])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ReportImages _p _) = _p :: PathOld Univ Item ReportImages
          peekValueOld (Proxy) (Peek_Item_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_Item_ReportImages _p _x :: PeekOld Univ Item
instance PathsOld Univ Item ReportImageView
    where type PathOld Univ Item ReportImageView = Path_Item ReportImageView
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                   ReportImageView ->
                                                                                                                                                                                                           PathOld Univ Item ReportImageView,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       ReportImageView])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_ReportImageView _p _) = _p :: PathOld Univ Item ReportImageView
          peekValueOld (Proxy) (Peek_Item_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_Item_ReportImageView _p _x :: PeekOld Univ Item
instance PathsOld Univ Item SaneSizeImageSize
    where type PathOld Univ Item SaneSizeImageSize = Path_Item SaneSizeImageSize
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                   SaneSizeImageSize ->
                                                                                                                                                                                                           PathOld Univ Item SaneSizeImageSize,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ
                                                                                                                                                                                                                                       Item
                                                                                                                                                                                                                                       SaneSizeImageSize])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_SaneSizeImageSize _p _) = _p :: PathOld Univ Item SaneSizeImageSize
          peekValueOld (Proxy) (Peek_Item_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_Item_SaneSizeImageSize _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Item
    where type PathOld Univ Item Item = Path_Item Item
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Item _p _) = _p :: PathOld Univ Item Item
          peekValueOld (Proxy) (Peek_Item_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_Item_Item _p _x :: PeekOld Univ Item
instance PathsOld Univ Item MIM
    where type PathOld Univ Item MIM = Path_Item MIM
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(PathOld Univ MIM MIM -> PathOld Univ Item MIM,
                                                                                                                                                                                                  MIM)]) :: [PathOld Univ Item MIM])
          peekOld (p@(Path_Item_fields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_MIM _p _) = _p :: PathOld Univ Item MIM
          peekValueOld (Proxy) (Peek_Item_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_Item_MIM _p _x :: PeekOld Univ Item
instance PathsOld Univ Item URI
    where type PathOld Univ Item URI = Path_Item URI
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                             a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ ReportImages URI ->
                                                                                                                                                                                                           PathOld Univ Item URI,
                                                                                                                                                                                                           ReportImages)]) :: [PathOld Univ Item URI])
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_URI _p _) = _p :: PathOld Univ Item URI
          peekValueOld (Proxy) (Peek_Item_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_Item_URI _p _x :: PeekOld Univ Item
instance PathsOld Univ Item Text
    where type PathOld Univ Item Text = Path_Item Text
          pathsOld (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                      a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Item_itemName, itemName _s)] :: [(PathOld Univ Text Text ->
                                                                                                                                                                                                                PathOld Univ Item Text,
                                                                                                                                                                                                                Text)]),
                                                                         concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(PathOld Univ MIM Text ->
                                                                                                                                                                                                              PathOld Univ Item Text,
                                                                                                                                                                                                              MIM)]),
                                                                         concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(PathOld Univ
                                                                                                                                                                                                                               ReportImages
                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                       PathOld Univ Item Text,
                                                                                                                                                                                                                       ReportImages)])] :: [PathOld Univ
                                                                                                                                                                                                                                                    Item
                                                                                                                                                                                                                                                    Text])
          peekOld (p@(Path_Item_itemName _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekOld (p@(Path_Item_fields _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekOld (p@(Path_Item_images _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Item
          peekPathOld (Proxy) (Peek_Item_Text _p _) = _p :: PathOld Univ Item Text
          peekValueOld (Proxy) (Peek_Item_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Item_Text _p _x :: PeekOld Univ Item
instance PathsOld Univ MIM JSONText
    where type PathOld Univ MIM JSONText = Path_Map ItemFieldName (Path_Markup JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Markup JSONText ->
                                                                                                                                                                                                             PathOld Univ MIM JSONText,
                                                                                                                                                                                                             Markup)]) :: [PathOld Univ MIM JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MIM
          peekPathOld (Proxy) (Peek_MIM_JSONText _p _) = _p :: PathOld Univ MIM JSONText
          peekValueOld (Proxy) (Peek_MIM_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MIM_JSONText _p _x :: PeekOld Univ MIM
instance PathsOld Univ MIM Markup
    where type PathOld Univ MIM Markup = Path_Map ItemFieldName (Path_Markup Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Markup Markup ->
                                                                                                                                                                                                             PathOld Univ MIM Markup,
                                                                                                                                                                                                             Markup)]) :: [PathOld Univ MIM Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MIM
          peekPathOld (Proxy) (Peek_MIM_Markup _p _) = _p :: PathOld Univ MIM Markup
          peekValueOld (Proxy) (Peek_MIM_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_MIM_Markup _p _x :: PeekOld Univ MIM
instance PathsOld Univ MIM MIM
    where type PathOld Univ MIM MIM = Path_Map ItemFieldName (Path_Markup MIM)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MIM
          peekPathOld (Proxy) (Peek_MIM_MIM _p _) = _p :: PathOld Univ MIM MIM
          peekValueOld (Proxy) (Peek_MIM_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_MIM_MIM _p _x :: PeekOld Univ MIM
instance PathsOld Univ MIM Text
    where type PathOld Univ MIM Text = Path_Map ItemFieldName (Path_Markup Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Markup Text ->
                                                                                                                                                                                                             PathOld Univ MIM Text,
                                                                                                                                                                                                             Markup)]) :: [PathOld Univ MIM Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MIM
          peekPathOld (Proxy) (Peek_MIM_Text _p _) = _p :: PathOld Univ MIM Text
          peekValueOld (Proxy) (Peek_MIM_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_MIM_Text _p _x :: PeekOld Univ MIM
instance PathsOld Univ MRR String
    where type PathOld Univ MRR String = Path_Map ReportID (Path_Report String)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report String ->
                                                                                                                                                                                                             PathOld Univ MRR String,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR String])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_String _p _) = _p :: PathOld Univ MRR String
          peekValueOld (Proxy) (Peek_MRR_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_MRR_String _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Int64
    where type PathOld Univ MRR Int64 = Path_Map ReportID (Path_Report Int64)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Int64 ->
                                                                                                                                                                                                             PathOld Univ MRR Int64,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Int64])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Int64 _p _) = _p :: PathOld Univ MRR Int64
          peekValueOld (Proxy) (Peek_MRR_Int64 _ _x) = _x :: Maybe Int64
          peekConsOld _p _x = Peek_MRR_Int64 _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Bool
    where type PathOld Univ MRR Bool = Path_Map ReportID (Path_Report Bool)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Bool ->
                                                                                                                                                                                                             PathOld Univ MRR Bool,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Bool])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Bool _p _) = _p :: PathOld Univ MRR Bool
          peekValueOld (Proxy) (Peek_MRR_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_MRR_Bool _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Double
    where type PathOld Univ MRR Double = Path_Map ReportID (Path_Report Double)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Double ->
                                                                                                                                                                                                             PathOld Univ MRR Double,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Double])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Double _p _) = _p :: PathOld Univ MRR Double
          peekValueOld (Proxy) (Peek_MRR_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_MRR_Double _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Int
    where type PathOld Univ MRR Int = Path_Map ReportID (Path_Report Int)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Int ->
                                                                                                                                                                                                             PathOld Univ MRR Int,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Int])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Int _p _) = _p :: PathOld Univ MRR Int
          peekValueOld (Proxy) (Peek_MRR_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_MRR_Int _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Dimension
    where type PathOld Univ MRR Dimension = Path_Map ReportID (Path_Report Dimension)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Dimension ->
                                                                                                                                                                                                             PathOld Univ MRR Dimension,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Dimension])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Dimension _p _) = _p :: PathOld Univ MRR Dimension
          peekValueOld (Proxy) (Peek_MRR_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_MRR_Dimension _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ImageCrop
    where type PathOld Univ MRR ImageCrop = Path_Map ReportID (Path_Report ImageCrop)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ImageCrop ->
                                                                                                                                                                                                             PathOld Univ MRR ImageCrop,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ImageCrop])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ImageCrop _p _) = _p :: PathOld Univ MRR ImageCrop
          peekValueOld (Proxy) (Peek_MRR_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_MRR_ImageCrop _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ImageSize
    where type PathOld Univ MRR ImageSize = Path_Map ReportID (Path_Report ImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ImageSize ->
                                                                                                                                                                                                             PathOld Univ MRR ImageSize,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ImageSize _p _) = _p :: PathOld Univ MRR ImageSize
          peekValueOld (Proxy) (Peek_MRR_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_MRR_ImageSize _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Units
    where type PathOld Univ MRR Units = Path_Map ReportID (Path_Report Units)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Units ->
                                                                                                                                                                                                             PathOld Univ MRR Units,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Units])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Units _p _) = _p :: PathOld Univ MRR Units
          peekValueOld (Proxy) (Peek_MRR_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_MRR_Units _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ImageFile
    where type PathOld Univ MRR ImageFile = Path_Map ReportID (Path_Report ImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ImageFile ->
                                                                                                                                                                                                             PathOld Univ MRR ImageFile,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ImageFile _p _) = _p :: PathOld Univ MRR ImageFile
          peekValueOld (Proxy) (Peek_MRR_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_MRR_ImageFile _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Integer
    where type PathOld Univ MRR Integer = Path_Map ReportID (Path_Report Integer)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Integer ->
                                                                                                                                                                                                             PathOld Univ MRR Integer,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Integer])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Integer _p _) = _p :: PathOld Univ MRR Integer
          peekValueOld (Proxy) (Peek_MRR_Integer _ _x) = _x :: Maybe Integer
          peekConsOld _p _x = Peek_MRR_Integer _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR JSONText
    where type PathOld Univ MRR JSONText = Path_Map ReportID (Path_Report JSONText)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report JSONText ->
                                                                                                                                                                                                             PathOld Univ MRR JSONText,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR JSONText])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_JSONText _p _) = _p :: PathOld Univ MRR JSONText
          peekValueOld (Proxy) (Peek_MRR_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_MRR_JSONText _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Markup
    where type PathOld Univ MRR Markup = Path_Map ReportID (Path_Report Markup)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Markup ->
                                                                                                                                                                                                             PathOld Univ MRR Markup,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Markup])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Markup _p _) = _p :: PathOld Univ MRR Markup
          peekValueOld (Proxy) (Peek_MRR_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_MRR_Markup _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Permissions
    where type PathOld Univ MRR Permissions = Path_Map ReportID (Path_Report Permissions)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Permissions ->
                                                                                                                                                                                                             PathOld Univ MRR Permissions,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Permissions])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Permissions _p _) = _p :: PathOld Univ MRR Permissions
          peekValueOld (Proxy) (Peek_MRR_Permissions _ _x) = _x :: Maybe Permissions
          peekConsOld _p _x = Peek_MRR_Permissions _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR UserIds
    where type PathOld Univ MRR UserIds = Path_Map ReportID (Path_Report UserIds)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report UserIds ->
                                                                                                                                                                                                             PathOld Univ MRR UserIds,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR UserIds])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_UserIds _p _) = _p :: PathOld Univ MRR UserIds
          peekValueOld (Proxy) (Peek_MRR_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_MRR_UserIds _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR AbbrevPair
    where type PathOld Univ MRR AbbrevPair = Path_Map ReportID (Path_Report AbbrevPair)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report AbbrevPair ->
                                                                                                                                                                                                             PathOld Univ MRR AbbrevPair,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR AbbrevPair])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_AbbrevPair _p _) = _p :: PathOld Univ MRR AbbrevPair
          peekValueOld (Proxy) (Peek_MRR_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_MRR_AbbrevPair _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR AbbrevPairs
    where type PathOld Univ MRR AbbrevPairs = Path_Map ReportID (Path_Report AbbrevPairs)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report AbbrevPairs ->
                                                                                                                                                                                                             PathOld Univ MRR AbbrevPairs,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR AbbrevPairs])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_AbbrevPairs _p _) = _p :: PathOld Univ MRR AbbrevPairs
          peekValueOld (Proxy) (Peek_MRR_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekConsOld _p _x = Peek_MRR_AbbrevPairs _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Author
    where type PathOld Univ MRR Author = Path_Map ReportID (Path_Report Author)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Author ->
                                                                                                                                                                                                             PathOld Univ MRR Author,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Author])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Author _p _) = _p :: PathOld Univ MRR Author
          peekValueOld (Proxy) (Peek_MRR_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_MRR_Author _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Authors
    where type PathOld Univ MRR Authors = Path_Map ReportID (Path_Report Authors)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Authors ->
                                                                                                                                                                                                             PathOld Univ MRR Authors,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Authors])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Authors _p _) = _p :: PathOld Univ MRR Authors
          peekValueOld (Proxy) (Peek_MRR_Authors _ _x) = _x :: Maybe Authors
          peekConsOld _p _x = Peek_MRR_Authors _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Branding
    where type PathOld Univ MRR Branding = Path_Map ReportID (Path_Report Branding)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Branding ->
                                                                                                                                                                                                             PathOld Univ MRR Branding,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Branding])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Branding _p _) = _p :: PathOld Univ MRR Branding
          peekValueOld (Proxy) (Peek_MRR_Branding _ _x) = _x :: Maybe Branding
          peekConsOld _p _x = Peek_MRR_Branding _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MarkupPair
    where type PathOld Univ MRR MarkupPair = Path_Map ReportID (Path_Report MarkupPair)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MarkupPair ->
                                                                                                                                                                                                             PathOld Univ MRR MarkupPair,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR MarkupPair])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MarkupPair _p _) = _p :: PathOld Univ MRR MarkupPair
          peekValueOld (Proxy) (Peek_MRR_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_MRR_MarkupPair _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MarkupPairs
    where type PathOld Univ MRR MarkupPairs = Path_Map ReportID (Path_Report MarkupPairs)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MarkupPairs ->
                                                                                                                                                                                                             PathOld Univ MRR MarkupPairs,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR MarkupPairs])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MarkupPairs _p _) = _p :: PathOld Univ MRR MarkupPairs
          peekValueOld (Proxy) (Peek_MRR_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekConsOld _p _x = Peek_MRR_MarkupPairs _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Markups
    where type PathOld Univ MRR Markups = Path_Map ReportID (Path_Report Markups)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Markups ->
                                                                                                                                                                                                             PathOld Univ MRR Markups,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Markups])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Markups _p _) = _p :: PathOld Univ MRR Markups
          peekValueOld (Proxy) (Peek_MRR_Markups _ _x) = _x :: Maybe Markups
          peekConsOld _p _x = Peek_MRR_Markups _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MaybeReportIntendedUse
    where type PathOld Univ MRR MaybeReportIntendedUse = Path_Map ReportID (Path_Report MaybeReportIntendedUse)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MaybeReportIntendedUse ->
                                                                                                                                                                                                             PathOld Univ MRR MaybeReportIntendedUse,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   MaybeReportIntendedUse])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MaybeReportIntendedUse _p _) = _p :: PathOld Univ MRR MaybeReportIntendedUse
          peekValueOld (Proxy) (Peek_MRR_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekConsOld _p _x = Peek_MRR_MaybeReportIntendedUse _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Report
    where type PathOld Univ MRR Report = Path_Map ReportID (Path_Report Report)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Report ->
                                                                                                                                                                                                             PathOld Univ MRR Report,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Report])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Report _p _) = _p :: PathOld Univ MRR Report
          peekValueOld (Proxy) (Peek_MRR_Report _ _x) = _x :: Maybe Report
          peekConsOld _p _x = Peek_MRR_Report _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportElem
    where type PathOld Univ MRR ReportElem = Path_Map ReportID (Path_Report ReportElem)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportElem ->
                                                                                                                                                                                                             PathOld Univ MRR ReportElem,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportElem])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportElem _p _) = _p :: PathOld Univ MRR ReportElem
          peekValueOld (Proxy) (Peek_MRR_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_MRR_ReportElem _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportElems
    where type PathOld Univ MRR ReportElems = Path_Map ReportID (Path_Report ReportElems)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportElems ->
                                                                                                                                                                                                             PathOld Univ MRR ReportElems,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportElems])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportElems _p _) = _p :: PathOld Univ MRR ReportElems
          peekValueOld (Proxy) (Peek_MRR_ReportElems _ _x) = _x :: Maybe ReportElems
          peekConsOld _p _x = Peek_MRR_ReportElems _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportFlags
    where type PathOld Univ MRR ReportFlags = Path_Map ReportID (Path_Report ReportFlags)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportFlags ->
                                                                                                                                                                                                             PathOld Univ MRR ReportFlags,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportFlags])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportFlags _p _) = _p :: PathOld Univ MRR ReportFlags
          peekValueOld (Proxy) (Peek_MRR_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekConsOld _p _x = Peek_MRR_ReportFlags _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportStandard
    where type PathOld Univ MRR ReportStandard = Path_Map ReportID (Path_Report ReportStandard)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportStandard ->
                                                                                                                                                                                                             PathOld Univ MRR ReportStandard,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   ReportStandard])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportStandard _p _) = _p :: PathOld Univ MRR ReportStandard
          peekValueOld (Proxy) (Peek_MRR_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekConsOld _p _x = Peek_MRR_ReportStandard _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportStatus
    where type PathOld Univ MRR ReportStatus = Path_Map ReportID (Path_Report ReportStatus)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportStatus ->
                                                                                                                                                                                                             PathOld Univ MRR ReportStatus,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportStatus])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportStatus _p _) = _p :: PathOld Univ MRR ReportStatus
          peekValueOld (Proxy) (Peek_MRR_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekConsOld _p _x = Peek_MRR_ReportStatus _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportValueApproachInfo
    where type PathOld Univ MRR ReportValueApproachInfo = Path_Map ReportID (Path_Report ReportValueApproachInfo)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ
                                                                                                                                                                                                                     Report
                                                                                                                                                                                                                     ReportValueApproachInfo ->
                                                                                                                                                                                                             PathOld Univ MRR ReportValueApproachInfo,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   ReportValueApproachInfo])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportValueApproachInfo _p _) = _p :: PathOld Univ MRR ReportValueApproachInfo
          peekValueOld (Proxy) (Peek_MRR_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekConsOld _p _x = Peek_MRR_ReportValueApproachInfo _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportValueTypeInfo
    where type PathOld Univ MRR ReportValueTypeInfo = Path_Map ReportID (Path_Report ReportValueTypeInfo)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportValueTypeInfo ->
                                                                                                                                                                                                             PathOld Univ MRR ReportValueTypeInfo,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   ReportValueTypeInfo])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportValueTypeInfo _p _) = _p :: PathOld Univ MRR ReportValueTypeInfo
          peekValueOld (Proxy) (Peek_MRR_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekConsOld _p _x = Peek_MRR_ReportValueTypeInfo _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR EUI
    where type PathOld Univ MRR EUI = Path_Map ReportID (Path_Report EUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report EUI ->
                                                                                                                                                                                                             PathOld Univ MRR EUI,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR EUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_EUI _p _) = _p :: PathOld Univ MRR EUI
          peekValueOld (Proxy) (Peek_MRR_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_MRR_EUI _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MEUI
    where type PathOld Univ MRR MEUI = Path_Map ReportID (Path_Report MEUI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MEUI ->
                                                                                                                                                                                                             PathOld Univ MRR MEUI,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR MEUI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MEUI _p _) = _p :: PathOld Univ MRR MEUI
          peekValueOld (Proxy) (Peek_MRR_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_MRR_MEUI _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MaybeImageFile
    where type PathOld Univ MRR MaybeImageFile = Path_Map ReportID (Path_Report MaybeImageFile)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MaybeImageFile ->
                                                                                                                                                                                                             PathOld Univ MRR MaybeImageFile,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   MaybeImageFile])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MaybeImageFile _p _) = _p :: PathOld Univ MRR MaybeImageFile
          peekValueOld (Proxy) (Peek_MRR_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_MRR_MaybeImageFile _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportImage
    where type PathOld Univ MRR ReportImage = Path_Map ReportID (Path_Report ReportImage)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportImage ->
                                                                                                                                                                                                             PathOld Univ MRR ReportImage,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportImage])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportImage _p _) = _p :: PathOld Univ MRR ReportImage
          peekValueOld (Proxy) (Peek_MRR_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_MRR_ReportImage _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportImages
    where type PathOld Univ MRR ReportImages = Path_Map ReportID (Path_Report ReportImages)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportImages ->
                                                                                                                                                                                                             PathOld Univ MRR ReportImages,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportImages])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportImages _p _) = _p :: PathOld Univ MRR ReportImages
          peekValueOld (Proxy) (Peek_MRR_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_MRR_ReportImages _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReadOnlyFilePath
    where type PathOld Univ MRR ReadOnlyFilePath = Path_Map ReportID (Path_Report ReadOnlyFilePath)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReadOnlyFilePath ->
                                                                                                                                                                                                             PathOld Univ MRR ReadOnlyFilePath,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   ReadOnlyFilePath])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReadOnlyFilePath _p _) = _p :: PathOld Univ MRR ReadOnlyFilePath
          peekValueOld (Proxy) (Peek_MRR_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekConsOld _p _x = Peek_MRR_ReadOnlyFilePath _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportImageView
    where type PathOld Univ MRR ReportImageView = Path_Map ReportID (Path_Report ReportImageView)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportImageView ->
                                                                                                                                                                                                             PathOld Univ MRR ReportImageView,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   ReportImageView])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportImageView _p _) = _p :: PathOld Univ MRR ReportImageView
          peekValueOld (Proxy) (Peek_MRR_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_MRR_ReportImageView _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR ReportView
    where type PathOld Univ MRR ReportView = Path_Map ReportID (Path_Report ReportView)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report ReportView ->
                                                                                                                                                                                                             PathOld Univ MRR ReportView,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR ReportView])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_ReportView _p _) = _p :: PathOld Univ MRR ReportView
          peekValueOld (Proxy) (Peek_MRR_ReportView _ _x) = _x :: Maybe ReportView
          peekConsOld _p _x = Peek_MRR_ReportView _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR SaneSizeImageSize
    where type PathOld Univ MRR SaneSizeImageSize = Path_Map ReportID (Path_Report SaneSizeImageSize)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report SaneSizeImageSize ->
                                                                                                                                                                                                             PathOld Univ MRR SaneSizeImageSize,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ
                                                                                                                                                                                                                                   MRR
                                                                                                                                                                                                                                   SaneSizeImageSize])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_SaneSizeImageSize _p _) = _p :: PathOld Univ MRR SaneSizeImageSize
          peekValueOld (Proxy) (Peek_MRR_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_MRR_SaneSizeImageSize _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Item
    where type PathOld Univ MRR Item = Path_Map ReportID (Path_Report Item)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Item ->
                                                                                                                                                                                                             PathOld Univ MRR Item,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Item])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Item _p _) = _p :: PathOld Univ MRR Item
          peekValueOld (Proxy) (Peek_MRR_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_MRR_Item _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MIM
    where type PathOld Univ MRR MIM = Path_Map ReportID (Path_Report MIM)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report MIM ->
                                                                                                                                                                                                             PathOld Univ MRR MIM,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR MIM])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MIM _p _) = _p :: PathOld Univ MRR MIM
          peekValueOld (Proxy) (Peek_MRR_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_MRR_MIM _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR MRR
    where type PathOld Univ MRR MRR = Path_Map ReportID (Path_Report MRR)
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_MRR _p _) = _p :: PathOld Univ MRR MRR
          peekValueOld (Proxy) (Peek_MRR_MRR _ _x) = _x :: Maybe MRR
          peekConsOld _p _x = Peek_MRR_MRR _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR CIString
    where type PathOld Univ MRR CIString = Path_Map ReportID (Path_Report CIString)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report CIString ->
                                                                                                                                                                                                             PathOld Univ MRR CIString,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR CIString])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_CIString _p _) = _p :: PathOld Univ MRR CIString
          peekValueOld (Proxy) (Peek_MRR_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_MRR_CIString _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR URI
    where type PathOld Univ MRR URI = Path_Map ReportID (Path_Report URI)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report URI ->
                                                                                                                                                                                                             PathOld Univ MRR URI,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR URI])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_URI _p _) = _p :: PathOld Univ MRR URI
          peekValueOld (Proxy) (Peek_MRR_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_MRR_URI _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR Text
    where type PathOld Univ MRR Text = Path_Map ReportID (Path_Report Text)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report Text ->
                                                                                                                                                                                                             PathOld Univ MRR Text,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR Text])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_Text _p _) = _p :: PathOld Univ MRR Text
          peekValueOld (Proxy) (Peek_MRR_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_MRR_Text _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR UserId
    where type PathOld Univ MRR UserId = Path_Map ReportID (Path_Report UserId)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report UserId ->
                                                                                                                                                                                                             PathOld Univ MRR UserId,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR UserId])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_UserId _p _) = _p :: PathOld Univ MRR UserId
          peekValueOld (Proxy) (Peek_MRR_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_MRR_UserId _p _x :: PeekOld Univ MRR
instance PathsOld Univ MRR UUID
    where type PathOld Univ MRR UUID = Path_Map ReportID (Path_Report UUID)
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                              val) -> (Path_Look idx, val)) (toList _s) :: [(PathOld Univ Report UUID ->
                                                                                                                                                                                                             PathOld Univ MRR UUID,
                                                                                                                                                                                                             Report)]) :: [PathOld Univ MRR UUID])
          peekOld p x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ MRR
          peekPathOld (Proxy) (Peek_MRR_UUID _p _) = _p :: PathOld Univ MRR UUID
          peekValueOld (Proxy) (Peek_MRR_UUID _ _x) = _x :: Maybe UUID
          peekConsOld _p _x = Peek_MRR_UUID _p _x :: PeekOld Univ MRR
instance PathsOld Univ ReportMap String
    where type PathOld Univ ReportMap String = Path_ReportMap String
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR String ->
                                                                                                                                                                                                                      PathOld Univ ReportMap String,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         String])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_String _p _) = _p :: PathOld Univ ReportMap String
          peekValueOld (Proxy) (Peek_ReportMap_String _ _x) = _x :: Maybe String
          peekConsOld _p _x = Peek_ReportMap_String _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Int64
    where type PathOld Univ ReportMap Int64 = Path_ReportMap Int64
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Int64 ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Int64,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Int64])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Int64 _p _) = _p :: PathOld Univ ReportMap Int64
          peekValueOld (Proxy) (Peek_ReportMap_Int64 _ _x) = _x :: Maybe Int64
          peekConsOld _p _x = Peek_ReportMap_Int64 _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Bool
    where type PathOld Univ ReportMap Bool = Path_ReportMap Bool
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Bool ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Bool,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Bool])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Bool _p _) = _p :: PathOld Univ ReportMap Bool
          peekValueOld (Proxy) (Peek_ReportMap_Bool _ _x) = _x :: Maybe Bool
          peekConsOld _p _x = Peek_ReportMap_Bool _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Double
    where type PathOld Univ ReportMap Double = Path_ReportMap Double
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Double ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Double,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Double])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Double _p _) = _p :: PathOld Univ ReportMap Double
          peekValueOld (Proxy) (Peek_ReportMap_Double _ _x) = _x :: Maybe Double
          peekConsOld _p _x = Peek_ReportMap_Double _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Int
    where type PathOld Univ ReportMap Int = Path_ReportMap Int
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Int ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Int,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Int])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Int _p _) = _p :: PathOld Univ ReportMap Int
          peekValueOld (Proxy) (Peek_ReportMap_Int _ _x) = _x :: Maybe Int
          peekConsOld _p _x = Peek_ReportMap_Int _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Dimension
    where type PathOld Univ ReportMap Dimension = Path_ReportMap Dimension
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Dimension ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Dimension,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Dimension])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Dimension _p _) = _p :: PathOld Univ ReportMap Dimension
          peekValueOld (Proxy) (Peek_ReportMap_Dimension _ _x) = _x :: Maybe Dimension
          peekConsOld _p _x = Peek_ReportMap_Dimension _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ImageCrop
    where type PathOld Univ ReportMap ImageCrop = Path_ReportMap ImageCrop
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ImageCrop ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ImageCrop,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ImageCrop])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ImageCrop _p _) = _p :: PathOld Univ ReportMap ImageCrop
          peekValueOld (Proxy) (Peek_ReportMap_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekConsOld _p _x = Peek_ReportMap_ImageCrop _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ImageSize
    where type PathOld Univ ReportMap ImageSize = Path_ReportMap ImageSize
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ImageSize ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ImageSize,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ImageSize])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ImageSize _p _) = _p :: PathOld Univ ReportMap ImageSize
          peekValueOld (Proxy) (Peek_ReportMap_ImageSize _ _x) = _x :: Maybe ImageSize
          peekConsOld _p _x = Peek_ReportMap_ImageSize _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Units
    where type PathOld Univ ReportMap Units = Path_ReportMap Units
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Units ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Units,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Units])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Units _p _) = _p :: PathOld Univ ReportMap Units
          peekValueOld (Proxy) (Peek_ReportMap_Units _ _x) = _x :: Maybe Units
          peekConsOld _p _x = Peek_ReportMap_Units _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ImageFile
    where type PathOld Univ ReportMap ImageFile = Path_ReportMap ImageFile
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ImageFile ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ImageFile,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ImageFile])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ImageFile _p _) = _p :: PathOld Univ ReportMap ImageFile
          peekValueOld (Proxy) (Peek_ReportMap_ImageFile _ _x) = _x :: Maybe ImageFile
          peekConsOld _p _x = Peek_ReportMap_ImageFile _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Integer
    where type PathOld Univ ReportMap Integer = Path_ReportMap Integer
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Integer ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Integer,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Integer])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Integer _p _) = _p :: PathOld Univ ReportMap Integer
          peekValueOld (Proxy) (Peek_ReportMap_Integer _ _x) = _x :: Maybe Integer
          peekConsOld _p _x = Peek_ReportMap_Integer _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap JSONText
    where type PathOld Univ ReportMap JSONText = Path_ReportMap JSONText
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR JSONText ->
                                                                                                                                                                                                                      PathOld Univ ReportMap JSONText,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         JSONText])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_JSONText _p _) = _p :: PathOld Univ ReportMap JSONText
          peekValueOld (Proxy) (Peek_ReportMap_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_ReportMap_JSONText _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Markup
    where type PathOld Univ ReportMap Markup = Path_ReportMap Markup
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Markup ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Markup,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Markup])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Markup _p _) = _p :: PathOld Univ ReportMap Markup
          peekValueOld (Proxy) (Peek_ReportMap_Markup _ _x) = _x :: Maybe Markup
          peekConsOld _p _x = Peek_ReportMap_Markup _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Permissions
    where type PathOld Univ ReportMap Permissions = Path_ReportMap Permissions
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Permissions ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Permissions,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Permissions])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Permissions _p _) = _p :: PathOld Univ ReportMap Permissions
          peekValueOld (Proxy) (Peek_ReportMap_Permissions _ _x) = _x :: Maybe Permissions
          peekConsOld _p _x = Peek_ReportMap_Permissions _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap UserIds
    where type PathOld Univ ReportMap UserIds = Path_ReportMap UserIds
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR UserIds ->
                                                                                                                                                                                                                      PathOld Univ ReportMap UserIds,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         UserIds])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_UserIds _p _) = _p :: PathOld Univ ReportMap UserIds
          peekValueOld (Proxy) (Peek_ReportMap_UserIds _ _x) = _x :: Maybe UserIds
          peekConsOld _p _x = Peek_ReportMap_UserIds _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap AbbrevPair
    where type PathOld Univ ReportMap AbbrevPair = Path_ReportMap AbbrevPair
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR AbbrevPair ->
                                                                                                                                                                                                                      PathOld Univ ReportMap AbbrevPair,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         AbbrevPair])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_AbbrevPair _p _) = _p :: PathOld Univ ReportMap AbbrevPair
          peekValueOld (Proxy) (Peek_ReportMap_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekConsOld _p _x = Peek_ReportMap_AbbrevPair _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap AbbrevPairs
    where type PathOld Univ ReportMap AbbrevPairs = Path_ReportMap AbbrevPairs
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR AbbrevPairs ->
                                                                                                                                                                                                                      PathOld Univ ReportMap AbbrevPairs,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         AbbrevPairs])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_AbbrevPairs _p _) = _p :: PathOld Univ ReportMap AbbrevPairs
          peekValueOld (Proxy) (Peek_ReportMap_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekConsOld _p _x = Peek_ReportMap_AbbrevPairs _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Author
    where type PathOld Univ ReportMap Author = Path_ReportMap Author
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Author ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Author,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Author])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Author _p _) = _p :: PathOld Univ ReportMap Author
          peekValueOld (Proxy) (Peek_ReportMap_Author _ _x) = _x :: Maybe Author
          peekConsOld _p _x = Peek_ReportMap_Author _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Authors
    where type PathOld Univ ReportMap Authors = Path_ReportMap Authors
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Authors ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Authors,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Authors])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Authors _p _) = _p :: PathOld Univ ReportMap Authors
          peekValueOld (Proxy) (Peek_ReportMap_Authors _ _x) = _x :: Maybe Authors
          peekConsOld _p _x = Peek_ReportMap_Authors _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Branding
    where type PathOld Univ ReportMap Branding = Path_ReportMap Branding
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Branding ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Branding,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Branding])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Branding _p _) = _p :: PathOld Univ ReportMap Branding
          peekValueOld (Proxy) (Peek_ReportMap_Branding _ _x) = _x :: Maybe Branding
          peekConsOld _p _x = Peek_ReportMap_Branding _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MarkupPair
    where type PathOld Univ ReportMap MarkupPair = Path_ReportMap MarkupPair
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MarkupPair ->
                                                                                                                                                                                                                      PathOld Univ ReportMap MarkupPair,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MarkupPair])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MarkupPair _p _) = _p :: PathOld Univ ReportMap MarkupPair
          peekValueOld (Proxy) (Peek_ReportMap_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekConsOld _p _x = Peek_ReportMap_MarkupPair _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MarkupPairs
    where type PathOld Univ ReportMap MarkupPairs = Path_ReportMap MarkupPairs
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MarkupPairs ->
                                                                                                                                                                                                                      PathOld Univ ReportMap MarkupPairs,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MarkupPairs])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MarkupPairs _p _) = _p :: PathOld Univ ReportMap MarkupPairs
          peekValueOld (Proxy) (Peek_ReportMap_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekConsOld _p _x = Peek_ReportMap_MarkupPairs _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Markups
    where type PathOld Univ ReportMap Markups = Path_ReportMap Markups
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Markups ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Markups,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Markups])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Markups _p _) = _p :: PathOld Univ ReportMap Markups
          peekValueOld (Proxy) (Peek_ReportMap_Markups _ _x) = _x :: Maybe Markups
          peekConsOld _p _x = Peek_ReportMap_Markups _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MaybeReportIntendedUse
    where type PathOld Univ ReportMap MaybeReportIntendedUse = Path_ReportMap MaybeReportIntendedUse
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ
                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                              MaybeReportIntendedUse ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              MaybeReportIntendedUse,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MaybeReportIntendedUse])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MaybeReportIntendedUse _p _) = _p :: PathOld Univ ReportMap MaybeReportIntendedUse
          peekValueOld (Proxy) (Peek_ReportMap_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekConsOld _p _x = Peek_ReportMap_MaybeReportIntendedUse _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Report
    where type PathOld Univ ReportMap Report = Path_ReportMap Report
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Report ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Report,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Report])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Report _p _) = _p :: PathOld Univ ReportMap Report
          peekValueOld (Proxy) (Peek_ReportMap_Report _ _x) = _x :: Maybe Report
          peekConsOld _p _x = Peek_ReportMap_Report _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportElem
    where type PathOld Univ ReportMap ReportElem = Path_ReportMap ReportElem
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportElem ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportElem,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportElem])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportElem _p _) = _p :: PathOld Univ ReportMap ReportElem
          peekValueOld (Proxy) (Peek_ReportMap_ReportElem _ _x) = _x :: Maybe ReportElem
          peekConsOld _p _x = Peek_ReportMap_ReportElem _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportElems
    where type PathOld Univ ReportMap ReportElems = Path_ReportMap ReportElems
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportElems ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportElems,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportElems])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportElems _p _) = _p :: PathOld Univ ReportMap ReportElems
          peekValueOld (Proxy) (Peek_ReportMap_ReportElems _ _x) = _x :: Maybe ReportElems
          peekConsOld _p _x = Peek_ReportMap_ReportElems _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportFlags
    where type PathOld Univ ReportMap ReportFlags = Path_ReportMap ReportFlags
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportFlags ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportFlags,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportFlags])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportFlags _p _) = _p :: PathOld Univ ReportMap ReportFlags
          peekValueOld (Proxy) (Peek_ReportMap_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekConsOld _p _x = Peek_ReportMap_ReportFlags _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportStandard
    where type PathOld Univ ReportMap ReportStandard = Path_ReportMap ReportStandard
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportStandard ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              ReportStandard,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportStandard])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportStandard _p _) = _p :: PathOld Univ ReportMap ReportStandard
          peekValueOld (Proxy) (Peek_ReportMap_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekConsOld _p _x = Peek_ReportMap_ReportStandard _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportStatus
    where type PathOld Univ ReportMap ReportStatus = Path_ReportMap ReportStatus
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportStatus ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportStatus,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportStatus])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportStatus _p _) = _p :: PathOld Univ ReportMap ReportStatus
          peekValueOld (Proxy) (Peek_ReportMap_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekConsOld _p _x = Peek_ReportMap_ReportStatus _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportValueApproachInfo
    where type PathOld Univ ReportMap ReportValueApproachInfo = Path_ReportMap ReportValueApproachInfo
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ
                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                              ReportValueApproachInfo ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              ReportValueApproachInfo,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportValueApproachInfo])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportValueApproachInfo _p _) = _p :: PathOld Univ ReportMap ReportValueApproachInfo
          peekValueOld (Proxy) (Peek_ReportMap_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekConsOld _p _x = Peek_ReportMap_ReportValueApproachInfo _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportValueTypeInfo
    where type PathOld Univ ReportMap ReportValueTypeInfo = Path_ReportMap ReportValueTypeInfo
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ
                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                              ReportValueTypeInfo ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              ReportValueTypeInfo,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportValueTypeInfo])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportValueTypeInfo _p _) = _p :: PathOld Univ ReportMap ReportValueTypeInfo
          peekValueOld (Proxy) (Peek_ReportMap_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekConsOld _p _x = Peek_ReportMap_ReportValueTypeInfo _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap EUI
    where type PathOld Univ ReportMap EUI = Path_ReportMap EUI
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR EUI ->
                                                                                                                                                                                                                      PathOld Univ ReportMap EUI,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         EUI])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_EUI _p _) = _p :: PathOld Univ ReportMap EUI
          peekValueOld (Proxy) (Peek_ReportMap_EUI _ _x) = _x :: Maybe EUI
          peekConsOld _p _x = Peek_ReportMap_EUI _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MEUI
    where type PathOld Univ ReportMap MEUI = Path_ReportMap MEUI
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MEUI ->
                                                                                                                                                                                                                      PathOld Univ ReportMap MEUI,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MEUI])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MEUI _p _) = _p :: PathOld Univ ReportMap MEUI
          peekValueOld (Proxy) (Peek_ReportMap_MEUI _ _x) = _x :: Maybe MEUI
          peekConsOld _p _x = Peek_ReportMap_MEUI _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MaybeImageFile
    where type PathOld Univ ReportMap MaybeImageFile = Path_ReportMap MaybeImageFile
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MaybeImageFile ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              MaybeImageFile,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MaybeImageFile])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MaybeImageFile _p _) = _p :: PathOld Univ ReportMap MaybeImageFile
          peekValueOld (Proxy) (Peek_ReportMap_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekConsOld _p _x = Peek_ReportMap_MaybeImageFile _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportImage
    where type PathOld Univ ReportMap ReportImage = Path_ReportMap ReportImage
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportImage ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportImage,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportImage])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportImage _p _) = _p :: PathOld Univ ReportMap ReportImage
          peekValueOld (Proxy) (Peek_ReportMap_ReportImage _ _x) = _x :: Maybe ReportImage
          peekConsOld _p _x = Peek_ReportMap_ReportImage _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportImages
    where type PathOld Univ ReportMap ReportImages = Path_ReportMap ReportImages
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportImages ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportImages,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportImages])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportImages _p _) = _p :: PathOld Univ ReportMap ReportImages
          peekValueOld (Proxy) (Peek_ReportMap_ReportImages _ _x) = _x :: Maybe ReportImages
          peekConsOld _p _x = Peek_ReportMap_ReportImages _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReadOnlyFilePath
    where type PathOld Univ ReportMap ReadOnlyFilePath = Path_ReportMap ReadOnlyFilePath
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ
                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                              ReadOnlyFilePath ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              ReadOnlyFilePath,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReadOnlyFilePath])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReadOnlyFilePath _p _) = _p :: PathOld Univ ReportMap ReadOnlyFilePath
          peekValueOld (Proxy) (Peek_ReportMap_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekConsOld _p _x = Peek_ReportMap_ReadOnlyFilePath _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportImageView
    where type PathOld Univ ReportMap ReportImageView = Path_ReportMap ReportImageView
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportImageView ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              ReportImageView,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportImageView])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportImageView _p _) = _p :: PathOld Univ ReportMap ReportImageView
          peekValueOld (Proxy) (Peek_ReportMap_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekConsOld _p _x = Peek_ReportMap_ReportImageView _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportView
    where type PathOld Univ ReportMap ReportView = Path_ReportMap ReportView
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR ReportView ->
                                                                                                                                                                                                                      PathOld Univ ReportMap ReportView,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         ReportView])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportView _p _) = _p :: PathOld Univ ReportMap ReportView
          peekValueOld (Proxy) (Peek_ReportMap_ReportView _ _x) = _x :: Maybe ReportView
          peekConsOld _p _x = Peek_ReportMap_ReportView _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap SaneSizeImageSize
    where type PathOld Univ ReportMap SaneSizeImageSize = Path_ReportMap SaneSizeImageSize
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ
                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                              SaneSizeImageSize ->
                                                                                                                                                                                                                      PathOld Univ
                                                                                                                                                                                                                              ReportMap
                                                                                                                                                                                                                              SaneSizeImageSize,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         SaneSizeImageSize])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_SaneSizeImageSize _p _) = _p :: PathOld Univ ReportMap SaneSizeImageSize
          peekValueOld (Proxy) (Peek_ReportMap_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekConsOld _p _x = Peek_ReportMap_SaneSizeImageSize _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Item
    where type PathOld Univ ReportMap Item = Path_ReportMap Item
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Item ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Item,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Item])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Item _p _) = _p :: PathOld Univ ReportMap Item
          peekValueOld (Proxy) (Peek_ReportMap_Item _ _x) = _x :: Maybe Item
          peekConsOld _p _x = Peek_ReportMap_Item _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MIM
    where type PathOld Univ ReportMap MIM = Path_ReportMap MIM
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MIM ->
                                                                                                                                                                                                                      PathOld Univ ReportMap MIM,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MIM])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MIM _p _) = _p :: PathOld Univ ReportMap MIM
          peekValueOld (Proxy) (Peek_ReportMap_MIM _ _x) = _x :: Maybe MIM
          peekConsOld _p _x = Peek_ReportMap_MIM _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap MRR
    where type PathOld Univ ReportMap MRR = Path_ReportMap MRR
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR MRR ->
                                                                                                                                                                                                                      PathOld Univ ReportMap MRR,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         MRR])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_MRR _p _) = _p :: PathOld Univ ReportMap MRR
          peekValueOld (Proxy) (Peek_ReportMap_MRR _ _x) = _x :: Maybe MRR
          peekConsOld _p _x = Peek_ReportMap_MRR _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap ReportMap
    where type PathOld Univ ReportMap ReportMap = Path_ReportMap ReportMap
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_ReportMap _p _) = _p :: PathOld Univ ReportMap ReportMap
          peekValueOld (Proxy) (Peek_ReportMap_ReportMap _ _x) = _x :: Maybe ReportMap
          peekConsOld _p _x = Peek_ReportMap_ReportMap _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap CIString
    where type PathOld Univ ReportMap CIString = Path_ReportMap CIString
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR CIString ->
                                                                                                                                                                                                                      PathOld Univ ReportMap CIString,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         CIString])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_CIString _p _) = _p :: PathOld Univ ReportMap CIString
          peekValueOld (Proxy) (Peek_ReportMap_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_ReportMap_CIString _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap URI
    where type PathOld Univ ReportMap URI = Path_ReportMap URI
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR URI ->
                                                                                                                                                                                                                      PathOld Univ ReportMap URI,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         URI])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_URI _p _) = _p :: PathOld Univ ReportMap URI
          peekValueOld (Proxy) (Peek_ReportMap_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_ReportMap_URI _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap Text
    where type PathOld Univ ReportMap Text = Path_ReportMap Text
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR Text ->
                                                                                                                                                                                                                      PathOld Univ ReportMap Text,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         Text])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_Text _p _) = _p :: PathOld Univ ReportMap Text
          peekValueOld (Proxy) (Peek_ReportMap_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_ReportMap_Text _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap UserId
    where type PathOld Univ ReportMap UserId = Path_ReportMap UserId
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR UserId ->
                                                                                                                                                                                                                      PathOld Univ ReportMap UserId,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         UserId])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_UserId _p _) = _p :: PathOld Univ ReportMap UserId
          peekValueOld (Proxy) (Peek_ReportMap_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_ReportMap_UserId _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ ReportMap UUID
    where type PathOld Univ ReportMap UUID = Path_ReportMap UUID
          pathsOld (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                  a') -> pathsOld (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(PathOld Univ MRR UUID ->
                                                                                                                                                                                                                      PathOld Univ ReportMap UUID,
                                                                                                                                                                                                                      MRR)]) :: [PathOld Univ
                                                                                                                                                                                                                                         ReportMap
                                                                                                                                                                                                                                         UUID])
          peekOld (p@(Path_ReportMap_unReportMap _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ ReportMap
          peekPathOld (Proxy) (Peek_ReportMap_UUID _p _) = _p :: PathOld Univ ReportMap UUID
          peekValueOld (Proxy) (Peek_ReportMap_UUID _ _x) = _x :: Maybe UUID
          peekConsOld _p _x = Peek_ReportMap_UUID _p _x :: PeekOld Univ ReportMap
instance PathsOld Univ CIString JSONText
    where type PathOld Univ CIString JSONText = Path_CIString JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_CIString_View :: PathOld Univ Text JSONText ->
                                                                                                                                                                                     PathOld Univ CIString JSONText,
                                                                                                                                                               a')) (toListOf (toLens (Path_CIString_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             Text
                                                                                                                                                                                                                             Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      Text
                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      CIString
                                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                              Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                  CIString
                                                                                                                                                                                                                                                                  JSONText])
          peekOld (p@(Path_CIString_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ CIString
          peekPathOld (Proxy) (Peek_CIString_JSONText _p _) = _p :: PathOld Univ CIString JSONText
          peekValueOld (Proxy) (Peek_CIString_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_CIString_JSONText _p _x :: PeekOld Univ CIString
instance PathsOld Univ CIString CIString
    where type PathOld Univ CIString CIString = Path_CIString CIString
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ CIString
          peekPathOld (Proxy) (Peek_CIString_CIString _p _) = _p :: PathOld Univ CIString CIString
          peekValueOld (Proxy) (Peek_CIString_CIString _ _x) = _x :: Maybe CIString
          peekConsOld _p _x = Peek_CIString_CIString _p _x :: PeekOld Univ CIString
instance PathsOld Univ CIString Text
    where type PathOld Univ CIString Text = Path_CIString Text
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_CIString_View :: PathOld Univ Text Text ->
                                                                                                                                                                                     PathOld Univ CIString Text,
                                                                                                                                                               a')) (toListOf (toLens (Path_CIString_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             Text
                                                                                                                                                                                                                             Text))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                      Text
                                                                                                                                                                                                                                                      Text ->
                                                                                                                                                                                                                                              PathOld Univ
                                                                                                                                                                                                                                                      CIString
                                                                                                                                                                                                                                                      Text,
                                                                                                                                                                                                                                              Text)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                  CIString
                                                                                                                                                                                                                                                                  Text])
          peekOld (p@(Path_CIString_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ CIString
          peekPathOld (Proxy) (Peek_CIString_Text _p _) = _p :: PathOld Univ CIString Text
          peekValueOld (Proxy) (Peek_CIString_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_CIString_Text _p _x :: PeekOld Univ CIString
instance PathsOld Univ URI URI
    where type PathOld Univ URI URI = Path_URI URI
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ URI
          peekPathOld (Proxy) (Peek_URI_URI _p _) = _p :: PathOld Univ URI URI
          peekValueOld (Proxy) (Peek_URI_URI _ _x) = _x :: Maybe URI
          peekConsOld _p _x = Peek_URI_URI _p _x :: PeekOld Univ URI
instance PathsOld Univ Text JSONText
    where type PathOld Univ Text JSONText = Path_Text JSONText
          pathsOld (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                                 a') -> pathsOld (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Text_View :: PathOld Univ JSONText JSONText ->
                                                                                                                                                                                     PathOld Univ Text JSONText,
                                                                                                                                                                   a')) (toListOf (toLens (Path_Text_View (idPath :: PathOld Univ
                                                                                                                                                                                                                             JSONText
                                                                                                                                                                                                                             JSONText))) _s) :: [(PathOld Univ
                                                                                                                                                                                                                                                          JSONText
                                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                                  PathOld Univ
                                                                                                                                                                                                                                                          Text
                                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                                  JSONText)]) :: [PathOld Univ
                                                                                                                                                                                                                                                                          Text
                                                                                                                                                                                                                                                                          JSONText])
          peekOld (p@(Path_Text_View _)) x = peekConsOld p (Just (view' (toLens p) x)) :: PeekOld Univ Text
          peekPathOld (Proxy) (Peek_Text_JSONText _p _) = _p :: PathOld Univ Text JSONText
          peekValueOld (Proxy) (Peek_Text_JSONText _ _x) = _x :: Maybe JSONText
          peekConsOld _p _x = Peek_Text_JSONText _p _x :: PeekOld Univ Text
instance PathsOld Univ Text Text
    where type PathOld Univ Text Text = Path_Text Text
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ Text
          peekPathOld (Proxy) (Peek_Text_Text _p _) = _p :: PathOld Univ Text Text
          peekValueOld (Proxy) (Peek_Text_Text _ _x) = _x :: Maybe Text
          peekConsOld _p _x = Peek_Text_Text _p _x :: PeekOld Univ Text
instance PathsOld Univ UserId UserId
    where type PathOld Univ UserId UserId = Path_UserId UserId
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ UserId
          peekPathOld (Proxy) (Peek_UserId_UserId _p _) = _p :: PathOld Univ UserId UserId
          peekValueOld (Proxy) (Peek_UserId_UserId _ _x) = _x :: Maybe UserId
          peekConsOld _p _x = Peek_UserId_UserId _p _x :: PeekOld Univ UserId
instance PathsOld Univ UUID UUID
    where type PathOld Univ UUID UUID = Path_UUID UUID
          pathsOld (Proxy) _ _ f r0 = f idPath r0
          peekOld p x = peekConsOld p (Just x) :: PeekOld Univ UUID
          peekPathOld (Proxy) (Peek_UUID_UUID _p _) = _p :: PathOld Univ UUID UUID
          peekValueOld (Proxy) (Peek_UUID_UUID _ _x) = _x :: Maybe UUID
          peekConsOld _p _x = Peek_UUID_UUID _p _x :: PeekOld Univ UUID
instance PathStart Univ String
    where data PeekOld Univ String
              = Peek_String_String (PathOld Univ String String) (Maybe String) | Peek_String_JSONText (PathOld Univ String JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ String = UPeek_String (UPath Univ String) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_String
          upeekPath (UPeek_String p _) = p
          upeekValue (UPeek_String _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_String_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: JSONText) :: Forest (UPeek Univ JSONText)
                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ JSONText of
                                                                                                                                                                                                  UPeek_JSONText _
                                                                                                                                                                                                                 _ -> upeekCons (UPath_String_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ String)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_String_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ String]
          type UPath Univ String = UPath_String
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_String_View idPath]
          upathRow _ _xyz = concat [[UPath_String_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [JSONText]))) [UPath_String_View] ++ [])
instance PathStart Univ Int64
    where data PeekOld Univ Int64 = Peek_Int64_Int64 (PathOld Univ Int64 Int64) (Maybe Int64) deriving (Eq, Show)
          data UPeek Univ Int64 = UPeek_Int64 (UPath Univ Int64) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Int64
          upeekPath (UPeek_Int64 p _) = p
          upeekValue (UPeek_Int64 _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ Int64 = UPath_Int64
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ Bool
    where data PeekOld Univ Bool
              = Peek_Bool_String (PathOld Univ Bool String) (Maybe String)
              | Peek_Bool_Bool (PathOld Univ Bool Bool) (Maybe Bool)
              | Peek_Bool_JSONText (PathOld Univ Bool JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ Bool = UPeek_Bool (UPath Univ Bool) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Bool
          upeekPath (UPeek_Bool p _) = p
          upeekValue (UPeek_Bool _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Bool_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                          in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                UPeek_String _
                                                                                                                                                                                                             _ -> upeekCons (UPath_Bool_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Bool)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Bool_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Bool]
          type UPath Univ Bool = UPath_Bool
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Bool_View idPath]
          upathRow _ _xyz = concat [[UPath_Bool_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_Bool_View] ++ [])
instance PathStart Univ Double
    where data PeekOld Univ Double
              = Peek_Double_String (PathOld Univ Double String) (Maybe String)
              | Peek_Double_Double (PathOld Univ Double Double) (Maybe Double)
              | Peek_Double_JSONText (PathOld Univ Double JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ Double = UPeek_Double (UPath Univ Double) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Double
          upeekPath (UPeek_Double p _) = p
          upeekValue (UPeek_Double _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Double_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                  UPeek_String _
                                                                                                                                                                                                               _ -> upeekCons (UPath_Double_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Double)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Double_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Double]
          type UPath Univ Double = UPath_Double
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Double_View idPath]
          upathRow _ _xyz = concat [[UPath_Double_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_Double_View] ++ [])
instance PathStart Univ Int
    where data PeekOld Univ Int = Peek_Int_Int (PathOld Univ Int Int) (Maybe Int) deriving (Eq, Show)
          data UPeek Univ Int = UPeek_Int (UPath Univ Int) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Int
          upeekPath (UPeek_Int p _) = p
          upeekValue (UPeek_Int _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ Int = UPath_Int
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ Dimension
    where data PeekOld Univ Dimension
              = Peek_Dimension_Dimension (PathOld Univ Dimension Dimension) (Maybe Dimension) | Peek_Dimension_JSONText (PathOld Univ Dimension JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ Dimension = UPeek_Dimension (UPath Univ Dimension) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Dimension
          upeekPath (UPeek_Dimension p _) = p
          upeekValue (UPeek_Dimension _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Dimension_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: JSONText) :: Forest (UPeek Univ JSONText)
                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ JSONText of
                                                                                                                                                                                                     UPeek_JSONText _
                                                                                                                                                                                                                    _ -> upeekCons (UPath_Dimension_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Dimension)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Dimension_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Dimension]
          type UPath Univ Dimension = UPath_Dimension
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Dimension_View idPath]
          upathRow _ _xyz = concat [[UPath_Dimension_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [JSONText]))) [UPath_Dimension_View] ++ [])
instance PathStart Univ ImageCrop
    where data PeekOld Univ ImageCrop = Peek_ImageCrop_ImageCrop (PathOld Univ ImageCrop ImageCrop) (Maybe ImageCrop) deriving (Eq, Show)
          data UPeek Univ ImageCrop = UPeek_ImageCrop (UPath Univ ImageCrop) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ImageCrop
          upeekPath (UPeek_ImageCrop p _) = p
          upeekValue (UPeek_ImageCrop _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ ImageCrop = UPath_ImageCrop
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ ImageSize
    where data PeekOld Univ ImageSize
              = Peek_ImageSize_String (PathOld Univ ImageSize String) (Maybe String)
              | Peek_ImageSize_Double (PathOld Univ ImageSize Double) (Maybe Double)
              | Peek_ImageSize_Dimension (PathOld Univ ImageSize Dimension) (Maybe Dimension)
              | Peek_ImageSize_ImageSize (PathOld Univ ImageSize ImageSize) (Maybe ImageSize)
              | Peek_ImageSize_Units (PathOld Univ ImageSize Units) (Maybe Units)
              | Peek_ImageSize_JSONText (PathOld Univ ImageSize JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ ImageSize = UPeek_ImageSize (UPath Univ ImageSize) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ImageSize
          upeekPath (UPeek_ImageSize p _) = p
          upeekValue (UPeek_ImageSize _ x) = x
          peekTreeOld (Proxy) (_xconc@(ImageSize {})) = mconcat [let dopath pth = case pth of
                                                                                      p@(UPath_ImageSize_dim _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Dimension) :: Forest (UPeek Univ Dimension)
                                                                                                                                 in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Dimension of
                                                                                                                                                                                                                       UPeek_Dimension _
                                                                                                                                                                                                                                       _ -> upeekCons (UPath_ImageSize_dim (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ImageSize_size _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Double) :: Forest (UPeek Univ Double)
                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Double of
                                                                                                                                                                                                                        UPeek_Double _
                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ImageSize_size (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ImageSize_units _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Units) :: Forest (UPeek Univ Units)
                                                                                                                                   in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Units of
                                                                                                                                                                                                                         UPeek_Units _
                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ImageSize_units (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ ImageSize)
          peekRowOld (Proxy) (_xconc@(ImageSize {})) = mconcat [let dopath pth = case pth of
                                                                                     p@(UPath_ImageSize_dim _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                     _ -> []
                                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                let dopath pth = case pth of
                                                                                     p@(UPath_ImageSize_size _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                     _ -> []
                                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                let dopath pth = case pth of
                                                                                     p@(UPath_ImageSize_units _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                     _ -> []
                                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ ImageSize]
          type UPath Univ ImageSize = UPath_ImageSize
          upaths _ _f r0 (_xconc@(ImageSize {})) = foldr _f (foldr _f (foldr _f r0 [UPath_ImageSize_units idPath]) [UPath_ImageSize_size idPath]) [UPath_ImageSize_dim idPath]
          upathRow _ (ImageSize {}) = concat [[UPath_ImageSize_dim idPath], [UPath_ImageSize_size idPath], [UPath_ImageSize_units idPath]]
          upathTree _unv (_xconc@(ImageSize {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Dimension]))) [UPath_ImageSize_dim] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Double]))) [UPath_ImageSize_size] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Units]))) [UPath_ImageSize_units] ++ [])))
instance PathStart Univ Units
    where data PeekOld Univ Units
              = Peek_Units_Units (PathOld Univ Units Units) (Maybe Units) | Peek_Units_JSONText (PathOld Univ Units JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          data UPeek Univ Units = UPeek_Units (UPath Univ Units) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Units
          upeekPath (UPeek_Units p _) = p
          upeekValue (UPeek_Units _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Units_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: JSONText) :: Forest (UPeek Univ JSONText)
                                                                                                           in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ JSONText of
                                                                                                                                                                                                 UPeek_JSONText _
                                                                                                                                                                                                                _ -> upeekCons (UPath_Units_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Units)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Units_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Units]
          type UPath Univ Units = UPath_Units
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Units_View idPath]
          upathRow _ _xyz = concat [[UPath_Units_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [JSONText]))) [UPath_Units_View] ++ [])
instance PathStart Univ ImageFile
    where data PeekOld Univ ImageFile = Peek_ImageFile_ImageFile (PathOld Univ ImageFile ImageFile) (Maybe ImageFile) deriving (Eq, Show)
          data UPeek Univ ImageFile = UPeek_ImageFile (UPath Univ ImageFile) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ImageFile
          upeekPath (UPeek_ImageFile p _) = p
          upeekValue (UPeek_ImageFile _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ ImageFile = UPath_ImageFile
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ Integer
    where data PeekOld Univ Integer = Peek_Integer_Integer (PathOld Univ Integer Integer) (Maybe Integer) deriving (Eq, Show)
          data UPeek Univ Integer = UPeek_Integer (UPath Univ Integer) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Integer
          upeekPath (UPeek_Integer p _) = p
          upeekValue (UPeek_Integer _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ Integer = UPath_Integer
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ JSONText
    where data PeekOld Univ JSONText = Peek_JSONText_JSONText (PathOld Univ JSONText JSONText) (Maybe JSONText) deriving (Eq, Show)
          data UPeek Univ JSONText = UPeek_JSONText (UPath Univ JSONText) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_JSONText
          upeekPath (UPeek_JSONText p _) = p
          upeekValue (UPeek_JSONText _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ JSONText = UPath_JSONText
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ Markup
    where data PeekOld Univ Markup
              = Peek_Markup_JSONText (PathOld Univ Markup JSONText) (Maybe JSONText)
              | Peek_Markup_Markup (PathOld Univ Markup Markup) (Maybe Markup)
              | Peek_Markup_Text (PathOld Univ Markup Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Markup = UPeek_Markup (UPath Univ Markup) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Markup
          upeekPath (UPeek_Markup p _) = p
          upeekValue (UPeek_Markup _ x) = x
          peekTreeOld (Proxy) (_xconc@(Markdown {})) = let dopath pth = case pth of
                                                                            p@(UPath_Markup_markdownText _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                                   UPeek_Text _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_Markup_markdownText (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                            _ -> []
                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Markup)
          peekTreeOld (Proxy) (_xconc@(Html {})) = let dopath pth = case pth of
                                                                        p@(UPath_Markup_htmlText _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                           UPeek_Text _
                                                                                                                                                                                                                      _ -> upeekCons (UPath_Markup_htmlText (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                        _ -> []
                                                    in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Markup)
          peekTreeOld (Proxy) (_xconc@(LaTeX {})) = mempty :: Forest (UPeek Univ Markup)
          peekTreeOld (Proxy) (_xconc@(Pandoc {})) = mempty :: Forest (UPeek Univ Markup)
          peekTreeOld (Proxy) (_xconc@(Markup {})) = mempty :: Forest (UPeek Univ Markup)
          peekRowOld (Proxy) (_xconc@(Markdown {})) = let dopath pth = case pth of
                                                                           p@(UPath_Markup_markdownText _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                           _ -> []
                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Markup]
          peekRowOld (Proxy) (_xconc@(Html {})) = let dopath pth = case pth of
                                                                       p@(UPath_Markup_htmlText _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                       _ -> []
                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Markup]
          peekRowOld (Proxy) (_xconc@(LaTeX {})) = mempty :: [UPeek Univ Markup]
          peekRowOld (Proxy) (_xconc@(Pandoc {})) = mempty :: [UPeek Univ Markup]
          peekRowOld (Proxy) (_xconc@(Markup {})) = mempty :: [UPeek Univ Markup]
          type UPath Univ Markup = UPath_Markup
          upaths _ _f r0 (_xconc@(Markdown {})) = foldr _f r0 [UPath_Markup_markdownText idPath]
          upaths _ _f r0 (_xconc@(Html {})) = foldr _f r0 [UPath_Markup_htmlText idPath]
          upaths _ _f r0 (_xconc@(LaTeX {})) = r0
          upaths _ _f r0 (_xconc@(Pandoc {})) = r0
          upaths _ _f r0 (_xconc@(Markup {})) = r0
          upathRow _ (Markdown {}) = concat [[UPath_Markup_markdownText idPath]]
          upathRow _ (Html {}) = concat [[UPath_Markup_htmlText idPath]]
          upathRow _ (LaTeX {}) = concat []
          upathRow _ (Pandoc {}) = concat []
          upathRow _ (Markup {}) = concat []
          upathTree _unv (_xconc@(Markdown {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_Markup_markdownText] ++ [])
          upathTree _unv (_xconc@(Html {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_Markup_htmlText] ++ [])
          upathTree _unv (_xconc@(LaTeX {})) = Node idPath []
          upathTree _unv (_xconc@(Pandoc {})) = Node idPath []
          upathTree _unv (_xconc@(Markup {})) = Node idPath []
instance PathStart Univ Permissions
    where data PeekOld Univ Permissions
              = Peek_Permissions_JSONText (PathOld Univ Permissions JSONText) (Maybe JSONText)
              | Peek_Permissions_Permissions (PathOld Univ Permissions Permissions) (Maybe Permissions)
              | Peek_Permissions_UserIds (PathOld Univ Permissions UserIds) (Maybe UserIds)
              | Peek_Permissions_Text (PathOld Univ Permissions Text) (Maybe Text)
              | Peek_Permissions_UserId (PathOld Univ Permissions UserId) (Maybe UserId)
              deriving (Eq, Show)
          data UPeek Univ Permissions = UPeek_Permissions (UPath Univ Permissions) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Permissions
          upeekPath (UPeek_Permissions p _) = p
          upeekValue (UPeek_Permissions _ x) = x
          peekTreeOld (Proxy) (_xconc@(Permissions {})) = mconcat [let dopath pth = case pth of
                                                                                        p@(UPath_Permissions_owner _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: UserId) :: Forest (UPeek Univ UserId)
                                                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ UserId of
                                                                                                                                                                                                                             UPeek_UserId _
                                                                                                                                                                                                                                          _ -> upeekCons (UPath_Permissions_owner (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                        _ -> []
                                                                    in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                   let dopath pth = case pth of
                                                                                        p@(UPath_Permissions_writers _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: UserIds) :: Forest (UPeek Univ UserIds)
                                                                                                                                         in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                            UserIds of
                                                                                                                                                                                                                               UPeek_UserIds _
                                                                                                                                                                                                                                             _ -> upeekCons (UPath_Permissions_writers (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                        _ -> []
                                                                    in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                   let dopath pth = case pth of
                                                                                        p@(UPath_Permissions_readers _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: UserIds) :: Forest (UPeek Univ UserIds)
                                                                                                                                         in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                            UserIds of
                                                                                                                                                                                                                               UPeek_UserIds _
                                                                                                                                                                                                                                             _ -> upeekCons (UPath_Permissions_readers (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                        _ -> []
                                                                    in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ Permissions)
          peekRowOld (Proxy) (_xconc@(Permissions {})) = mconcat [let dopath pth = case pth of
                                                                                       p@(UPath_Permissions_owner _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_Permissions_writers _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_Permissions_readers _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ Permissions]
          type UPath Univ Permissions = UPath_Permissions
          upaths _ _f r0 (_xconc@(Permissions {})) = foldr _f (foldr _f (foldr _f r0 [UPath_Permissions_readers idPath]) [UPath_Permissions_writers idPath]) [UPath_Permissions_owner idPath]
          upathRow _ (Permissions {}) = concat [[UPath_Permissions_owner idPath], [UPath_Permissions_writers idPath], [UPath_Permissions_readers idPath]]
          upathTree _unv (_xconc@(Permissions {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [UserId]))) [UPath_Permissions_owner] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [UserIds]))) [UPath_Permissions_writers] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [UserIds]))) [UPath_Permissions_readers] ++ [])))
instance PathStart Univ UserIds
    where data PeekOld Univ UserIds
              = Peek_UserIds_JSONText (PathOld Univ UserIds JSONText) (Maybe JSONText)
              | Peek_UserIds_UserIds (PathOld Univ UserIds UserIds) (Maybe UserIds)
              | Peek_UserIds_Text (PathOld Univ UserIds Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ UserIds = UPeek_UserIds (UPath Univ UserIds) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_UserIds
          upeekPath (UPeek_UserIds p _) = p
          upeekValue (UPeek_UserIds _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_UserIds_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                   UPeek_Text _
                                                                                                                                                                                                              _ -> upeekCons (UPath_UserIds_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ UserIds)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_UserIds_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ UserIds]
          type UPath Univ UserIds = UPath_UserIds
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_UserIds_View idPath]
          upathRow _ _xyz = concat [[UPath_UserIds_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_UserIds_View] ++ [])
instance PathStart Univ AbbrevPair
    where data PeekOld Univ AbbrevPair
              = Peek_AbbrevPair_JSONText (PathOld Univ AbbrevPair JSONText) (Maybe JSONText)
              | Peek_AbbrevPair_Markup (PathOld Univ AbbrevPair Markup) (Maybe Markup)
              | Peek_AbbrevPair_AbbrevPair (PathOld Univ AbbrevPair AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPair_CIString (PathOld Univ AbbrevPair CIString) (Maybe CIString)
              | Peek_AbbrevPair_Text (PathOld Univ AbbrevPair Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ AbbrevPair = UPeek_AbbrevPair (UPath Univ AbbrevPair) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_AbbrevPair
          upeekPath (UPeek_AbbrevPair p _) = p
          upeekValue (UPeek_AbbrevPair _ x) = x
          peekTreeOld (Proxy) _xconc = mconcat [let dopath pth = case pth of
                                                                     p@(Path_First _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: CIString) :: Forest (UPeek Univ CIString)
                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ CIString of
                                                                                                                                                                                             UPeek_CIString _
                                                                                                                                                                                                            _ -> upeekCons (Path_First (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                     _ -> []
                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                let dopath pth = case pth of
                                                                     p@(Path_Second _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                        in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                              UPeek_Markup _
                                                                                                                                                                                                           _ -> upeekCons (Path_Second (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                     _ -> []
                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ AbbrevPair)
          peekRowOld (Proxy) _xconc = mconcat [let dopath pth = case pth of
                                                                    p@(Path_First _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                    _ -> []
                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                               let dopath pth = case pth of
                                                                    p@(Path_Second _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                    _ -> []
                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ AbbrevPair]
          type UPath Univ AbbrevPair = UPath_AbbrevPair
          upaths _ _f r0 (_xconc@_) = foldr _f (foldr _f r0 [Path_Second idPath]) [Path_First idPath]
          upathRow _ _ = concat [[Path_First idPath], [Path_Second idPath]]
          upathTree _unv _xconc = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [CIString]))) [Path_First] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [Path_Second] ++ []))
instance PathStart Univ AbbrevPairs
    where data PeekOld Univ AbbrevPairs
              = Peek_AbbrevPairs_JSONText (PathOld Univ AbbrevPairs JSONText) (Maybe JSONText)
              | Peek_AbbrevPairs_Markup (PathOld Univ AbbrevPairs Markup) (Maybe Markup)
              | Peek_AbbrevPairs_AbbrevPair (PathOld Univ AbbrevPairs AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPairs_AbbrevPairs (PathOld Univ AbbrevPairs AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_AbbrevPairs_CIString (PathOld Univ AbbrevPairs CIString) (Maybe CIString)
              | Peek_AbbrevPairs_Text (PathOld Univ AbbrevPairs Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ AbbrevPairs = UPeek_AbbrevPairs (UPath Univ AbbrevPairs) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_AbbrevPairs
          upeekPath (UPeek_AbbrevPairs p _) = p
          upeekValue (UPeek_AbbrevPairs _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: AbbrevPair) :: Forest (UPeek Univ AbbrevPair)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ AbbrevPair of
                                                                                                                                                                                           UPeek_AbbrevPair _
                                                                                                                                                                                                            _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ AbbrevPairs)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ AbbrevPairs]
          type UPath Univ AbbrevPairs = UPath_AbbrevPairs
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [AbbrevPair]))) (map (\(k,
                                                                                                                                                                                         _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ Author
    where data PeekOld Univ Author
              = Peek_Author_JSONText (PathOld Univ Author JSONText) (Maybe JSONText)
              | Peek_Author_Markup (PathOld Univ Author Markup) (Maybe Markup)
              | Peek_Author_Author (PathOld Univ Author Author) (Maybe Author)
              | Peek_Author_Text (PathOld Univ Author Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Author = UPeek_Author (UPath Univ Author) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Author
          upeekPath (UPeek_Author p _) = p
          upeekValue (UPeek_Author _ x) = x
          peekTreeOld (Proxy) (_xconc@(Author {})) = mconcat [let dopath pth = case pth of
                                                                                   p@(UPath_Author_authorName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                        UPeek_Markup _
                                                                                                                                                                                                                                     _ -> upeekCons (UPath_Author_authorName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                   _ -> []
                                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                              let dopath pth = case pth of
                                                                                   p@(UPath_Author_authorCredentials _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                         in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                               UPeek_Markup _
                                                                                                                                                                                                                                            _ -> upeekCons (UPath_Author_authorCredentials (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                   _ -> []
                                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ Author)
          peekRowOld (Proxy) (_xconc@(Author {})) = mconcat [let dopath pth = case pth of
                                                                                  p@(UPath_Author_authorName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                  _ -> []
                                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                             let dopath pth = case pth of
                                                                                  p@(UPath_Author_authorCredentials _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                  _ -> []
                                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ Author]
          type UPath Univ Author = UPath_Author
          upaths _ _f r0 (_xconc@(Author {})) = foldr _f (foldr _f r0 [UPath_Author_authorCredentials idPath]) [UPath_Author_authorName idPath]
          upathRow _ (Author {}) = concat [[UPath_Author_authorName idPath], [UPath_Author_authorCredentials idPath]]
          upathTree _unv (_xconc@(Author {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_Author_authorName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_Author_authorCredentials] ++ []))
instance PathStart Univ Authors
    where data PeekOld Univ Authors
              = Peek_Authors_JSONText (PathOld Univ Authors JSONText) (Maybe JSONText)
              | Peek_Authors_Markup (PathOld Univ Authors Markup) (Maybe Markup)
              | Peek_Authors_Author (PathOld Univ Authors Author) (Maybe Author)
              | Peek_Authors_Authors (PathOld Univ Authors Authors) (Maybe Authors)
              | Peek_Authors_Text (PathOld Univ Authors Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Authors = UPeek_Authors (UPath Univ Authors) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Authors
          upeekPath (UPeek_Authors p _) = p
          upeekValue (UPeek_Authors _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Author) :: Forest (UPeek Univ Author)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Author of
                                                                                                                                                                                           UPeek_Author _
                                                                                                                                                                                                        _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Authors)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Authors]
          type UPath Univ Authors = UPath_Authors
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Author]))) (map (\(k,
                                                                                                                                                                                     _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ Branding
    where data PeekOld Univ Branding
              = Peek_Branding_JSONText (PathOld Univ Branding JSONText) (Maybe JSONText)
              | Peek_Branding_Branding (PathOld Univ Branding Branding) (Maybe Branding)
              | Peek_Branding_Text (PathOld Univ Branding Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Branding = UPeek_Branding (UPath Univ Branding) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Branding
          upeekPath (UPeek_Branding p _) = p
          upeekValue (UPeek_Branding _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Branding_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                    UPeek_Text _
                                                                                                                                                                                                               _ -> upeekCons (UPath_Branding_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Branding)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Branding_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Branding]
          type UPath Univ Branding = UPath_Branding
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Branding_View idPath]
          upathRow _ _xyz = concat [[UPath_Branding_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_Branding_View] ++ [])
instance PathStart Univ MarkupPair
    where data PeekOld Univ MarkupPair
              = Peek_MarkupPair_JSONText (PathOld Univ MarkupPair JSONText) (Maybe JSONText)
              | Peek_MarkupPair_Markup (PathOld Univ MarkupPair Markup) (Maybe Markup)
              | Peek_MarkupPair_MarkupPair (PathOld Univ MarkupPair MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPair_Text (PathOld Univ MarkupPair Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ MarkupPair = UPeek_MarkupPair (UPath Univ MarkupPair) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MarkupPair
          upeekPath (UPeek_MarkupPair p _) = p
          upeekValue (UPeek_MarkupPair _ x) = x
          peekTreeOld (Proxy) _xconc = mconcat [let dopath pth = case pth of
                                                                     p@(Path_First _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                             UPeek_Markup _
                                                                                                                                                                                                          _ -> upeekCons (Path_First (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                     _ -> []
                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                let dopath pth = case pth of
                                                                     p@(Path_Second _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                        in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                              UPeek_Markup _
                                                                                                                                                                                                           _ -> upeekCons (Path_Second (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                     _ -> []
                                                 in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ MarkupPair)
          peekRowOld (Proxy) _xconc = mconcat [let dopath pth = case pth of
                                                                    p@(Path_First _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                    _ -> []
                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                               let dopath pth = case pth of
                                                                    p@(Path_Second _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                    _ -> []
                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ MarkupPair]
          type UPath Univ MarkupPair = UPath_MarkupPair
          upaths _ _f r0 (_xconc@_) = foldr _f (foldr _f r0 [Path_Second idPath]) [Path_First idPath]
          upathRow _ _ = concat [[Path_First idPath], [Path_Second idPath]]
          upathTree _unv _xconc = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [Path_First] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [Path_Second] ++ []))
instance PathStart Univ MarkupPairs
    where data PeekOld Univ MarkupPairs
              = Peek_MarkupPairs_JSONText (PathOld Univ MarkupPairs JSONText) (Maybe JSONText)
              | Peek_MarkupPairs_Markup (PathOld Univ MarkupPairs Markup) (Maybe Markup)
              | Peek_MarkupPairs_MarkupPair (PathOld Univ MarkupPairs MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPairs_MarkupPairs (PathOld Univ MarkupPairs MarkupPairs) (Maybe MarkupPairs)
              | Peek_MarkupPairs_Text (PathOld Univ MarkupPairs Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ MarkupPairs = UPeek_MarkupPairs (UPath Univ MarkupPairs) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MarkupPairs
          upeekPath (UPeek_MarkupPairs p _) = p
          upeekValue (UPeek_MarkupPairs _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MarkupPair) :: Forest (UPeek Univ MarkupPair)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ MarkupPair of
                                                                                                                                                                                           UPeek_MarkupPair _
                                                                                                                                                                                                            _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MarkupPairs)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MarkupPairs]
          type UPath Univ MarkupPairs = UPath_MarkupPairs
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MarkupPair]))) (map (\(k,
                                                                                                                                                                                         _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ Markups
    where data PeekOld Univ Markups
              = Peek_Markups_JSONText (PathOld Univ Markups JSONText) (Maybe JSONText)
              | Peek_Markups_Markup (PathOld Univ Markups Markup) (Maybe Markup)
              | Peek_Markups_Markups (PathOld Univ Markups Markups) (Maybe Markups)
              | Peek_Markups_Text (PathOld Univ Markups Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Markups = UPeek_Markups (UPath Univ Markups) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Markups
          upeekPath (UPeek_Markups p _) = p
          upeekValue (UPeek_Markups _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                           UPeek_Markup _
                                                                                                                                                                                                        _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Markups)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Markups]
          type UPath Univ Markups = UPath_Markups
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) (map (\(k,
                                                                                                                                                                                     _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ MaybeReportIntendedUse
    where data PeekOld Univ MaybeReportIntendedUse
              = Peek_MaybeReportIntendedUse_String (PathOld Univ MaybeReportIntendedUse String) (Maybe String)
              | Peek_MaybeReportIntendedUse_JSONText (PathOld Univ MaybeReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_MaybeReportIntendedUse_MaybeReportIntendedUse (PathOld Univ MaybeReportIntendedUse MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              deriving (Eq, Show)
          data UPeek Univ MaybeReportIntendedUse = UPeek_MaybeReportIntendedUse (UPath Univ MaybeReportIntendedUse) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MaybeReportIntendedUse
          upeekPath (UPeek_MaybeReportIntendedUse p _) = p
          upeekValue (UPeek_MaybeReportIntendedUse _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_MaybeReportIntendedUse_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                                  UPeek_String _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_MaybeReportIntendedUse_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MaybeReportIntendedUse)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_MaybeReportIntendedUse_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MaybeReportIntendedUse]
          type UPath Univ MaybeReportIntendedUse = UPath_MaybeReportIntendedUse
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_MaybeReportIntendedUse_View idPath]
          upathRow _ _xyz = concat [[UPath_MaybeReportIntendedUse_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_MaybeReportIntendedUse_View] ++ [])
instance PathStart Univ Report
    where data PeekOld Univ Report
              = Peek_Report_String (PathOld Univ Report String) (Maybe String)
              | Peek_Report_Int64 (PathOld Univ Report Int64) (Maybe Int64)
              | Peek_Report_Int (PathOld Univ Report Int) (Maybe Int)
              | Peek_Report_Bool (PathOld Univ Report Bool) (Maybe Bool)
              | Peek_Report_Double (PathOld Univ Report Double) (Maybe Double)
              | Peek_Report_Dimension (PathOld Univ Report Dimension) (Maybe Dimension)
              | Peek_Report_ImageCrop (PathOld Univ Report ImageCrop) (Maybe ImageCrop)
              | Peek_Report_ImageSize (PathOld Univ Report ImageSize) (Maybe ImageSize)
              | Peek_Report_Units (PathOld Univ Report Units) (Maybe Units)
              | Peek_Report_ImageFile (PathOld Univ Report ImageFile) (Maybe ImageFile)
              | Peek_Report_Integer (PathOld Univ Report Integer) (Maybe Integer)
              | Peek_Report_JSONText (PathOld Univ Report JSONText) (Maybe JSONText)
              | Peek_Report_Markup (PathOld Univ Report Markup) (Maybe Markup)
              | Peek_Report_Permissions (PathOld Univ Report Permissions) (Maybe Permissions)
              | Peek_Report_UserIds (PathOld Univ Report UserIds) (Maybe UserIds)
              | Peek_Report_AbbrevPair (PathOld Univ Report AbbrevPair) (Maybe AbbrevPair)
              | Peek_Report_AbbrevPairs (PathOld Univ Report AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_Report_Author (PathOld Univ Report Author) (Maybe Author)
              | Peek_Report_Authors (PathOld Univ Report Authors) (Maybe Authors)
              | Peek_Report_Branding (PathOld Univ Report Branding) (Maybe Branding)
              | Peek_Report_MarkupPair (PathOld Univ Report MarkupPair) (Maybe MarkupPair)
              | Peek_Report_MarkupPairs (PathOld Univ Report MarkupPairs) (Maybe MarkupPairs)
              | Peek_Report_Markups (PathOld Univ Report Markups) (Maybe Markups)
              | Peek_Report_MaybeReportIntendedUse (PathOld Univ Report MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_Report_Report (PathOld Univ Report Report) (Maybe Report)
              | Peek_Report_ReportElem (PathOld Univ Report ReportElem) (Maybe ReportElem)
              | Peek_Report_ReportElems (PathOld Univ Report ReportElems) (Maybe ReportElems)
              | Peek_Report_ReportFlags (PathOld Univ Report ReportFlags) (Maybe ReportFlags)
              | Peek_Report_ReportStandard (PathOld Univ Report ReportStandard) (Maybe ReportStandard)
              | Peek_Report_ReportStatus (PathOld Univ Report ReportStatus) (Maybe ReportStatus)
              | Peek_Report_ReportValueApproachInfo (PathOld Univ Report ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_Report_ReportValueTypeInfo (PathOld Univ Report ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_Report_EUI (PathOld Univ Report EUI) (Maybe EUI)
              | Peek_Report_MEUI (PathOld Univ Report MEUI) (Maybe MEUI)
              | Peek_Report_MaybeImageFile (PathOld Univ Report MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Report_ReportImage (PathOld Univ Report ReportImage) (Maybe ReportImage)
              | Peek_Report_ReportImages (PathOld Univ Report ReportImages) (Maybe ReportImages)
              | Peek_Report_ReadOnlyFilePath (PathOld Univ Report ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_Report_ReportImageView (PathOld Univ Report ReportImageView) (Maybe ReportImageView)
              | Peek_Report_ReportView (PathOld Univ Report ReportView) (Maybe ReportView)
              | Peek_Report_SaneSizeImageSize (PathOld Univ Report SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Report_Item (PathOld Univ Report Item) (Maybe Item)
              | Peek_Report_MIM (PathOld Univ Report MIM) (Maybe MIM)
              | Peek_Report_CIString (PathOld Univ Report CIString) (Maybe CIString)
              | Peek_Report_URI (PathOld Univ Report URI) (Maybe URI)
              | Peek_Report_Text (PathOld Univ Report Text) (Maybe Text)
              | Peek_Report_UserId (PathOld Univ Report UserId) (Maybe UserId)
              | Peek_Report_UUID (PathOld Univ Report UUID) (Maybe UUID)
              deriving (Eq, Show)
          data UPeek Univ Report = UPeek_Report (UPath Univ Report) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Report
          upeekPath (UPeek_Report p _) = p
          upeekValue (UPeek_Report _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Report_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportView) :: Forest (UPeek Univ ReportView)
                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportView of
                                                                                                                                                                                                  UPeek_ReportView _
                                                                                                                                                                                                                   _ -> upeekCons (UPath_Report_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Report)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Report_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Report]
          type UPath Univ Report = UPath_Report
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Report_View idPath]
          upathRow _ _xyz = concat [[UPath_Report_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportView]))) [UPath_Report_View] ++ [])
instance PathStart Univ ReportElem
    where data PeekOld Univ ReportElem
              = Peek_ReportElem_String (PathOld Univ ReportElem String) (Maybe String)
              | Peek_ReportElem_Bool (PathOld Univ ReportElem Bool) (Maybe Bool)
              | Peek_ReportElem_Double (PathOld Univ ReportElem Double) (Maybe Double)
              | Peek_ReportElem_Dimension (PathOld Univ ReportElem Dimension) (Maybe Dimension)
              | Peek_ReportElem_ImageCrop (PathOld Univ ReportElem ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElem_ImageSize (PathOld Univ ReportElem ImageSize) (Maybe ImageSize)
              | Peek_ReportElem_Units (PathOld Univ ReportElem Units) (Maybe Units)
              | Peek_ReportElem_ImageFile (PathOld Univ ReportElem ImageFile) (Maybe ImageFile)
              | Peek_ReportElem_JSONText (PathOld Univ ReportElem JSONText) (Maybe JSONText)
              | Peek_ReportElem_Markup (PathOld Univ ReportElem Markup) (Maybe Markup)
              | Peek_ReportElem_ReportElem (PathOld Univ ReportElem ReportElem) (Maybe ReportElem)
              | Peek_ReportElem_EUI (PathOld Univ ReportElem EUI) (Maybe EUI)
              | Peek_ReportElem_MEUI (PathOld Univ ReportElem MEUI) (Maybe MEUI)
              | Peek_ReportElem_MaybeImageFile (PathOld Univ ReportElem MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElem_ReportImage (PathOld Univ ReportElem ReportImage) (Maybe ReportImage)
              | Peek_ReportElem_ReportImages (PathOld Univ ReportElem ReportImages) (Maybe ReportImages)
              | Peek_ReportElem_ReportImageView (PathOld Univ ReportElem ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElem_SaneSizeImageSize (PathOld Univ ReportElem SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElem_Item (PathOld Univ ReportElem Item) (Maybe Item)
              | Peek_ReportElem_MIM (PathOld Univ ReportElem MIM) (Maybe MIM)
              | Peek_ReportElem_URI (PathOld Univ ReportElem URI) (Maybe URI)
              | Peek_ReportElem_Text (PathOld Univ ReportElem Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportElem = UPeek_ReportElem (UPath Univ ReportElem) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportElem
          upeekPath (UPeek_ReportElem p _) = p
          upeekValue (UPeek_ReportElem _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportItem {})) = let dopath pth = case pth of
                                                                              p@(UPath_ReportElem_elemItem _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Item) :: Forest (UPeek Univ Item)
                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Item of
                                                                                                                                                                                                                     UPeek_Item _
                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportElem_elemItem (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                              _ -> []
                                                          in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportElem)
          peekTreeOld (Proxy) (_xconc@(ReportParagraph {})) = let dopath pth = case pth of
                                                                                   p@(UPath_ReportElem_elemText _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                    in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                          UPeek_Markup _
                                                                                                                                                                                                                                       _ -> upeekCons (UPath_ReportElem_elemText (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                   _ -> []
                                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportElem)
          peekTreeOld (Proxy) (_xconc@(ReportUndecided {})) = mempty :: Forest (UPeek Univ ReportElem)
          peekRowOld (Proxy) (_xconc@(ReportItem {})) = let dopath pth = case pth of
                                                                             p@(UPath_ReportElem_elemItem _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                             _ -> []
                                                         in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportElem]
          peekRowOld (Proxy) (_xconc@(ReportParagraph {})) = let dopath pth = case pth of
                                                                                  p@(UPath_ReportElem_elemText _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                  _ -> []
                                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportElem]
          peekRowOld (Proxy) (_xconc@(ReportUndecided {})) = mempty :: [UPeek Univ ReportElem]
          type UPath Univ ReportElem = UPath_ReportElem
          upaths _ _f r0 (_xconc@(ReportItem {})) = foldr _f r0 [UPath_ReportElem_elemItem idPath]
          upaths _ _f r0 (_xconc@(ReportParagraph {})) = foldr _f r0 [UPath_ReportElem_elemText idPath]
          upaths _ _f r0 (_xconc@(ReportUndecided {})) = r0
          upathRow _ (ReportItem {}) = concat [[UPath_ReportElem_elemItem idPath]]
          upathRow _ (ReportParagraph {}) = concat [[UPath_ReportElem_elemText idPath]]
          upathRow _ (ReportUndecided {}) = concat []
          upathTree _unv (_xconc@(ReportItem {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Item]))) [UPath_ReportElem_elemItem] ++ [])
          upathTree _unv (_xconc@(ReportParagraph {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportElem_elemText] ++ [])
          upathTree _unv (_xconc@(ReportUndecided {})) = Node idPath []
instance PathStart Univ ReportElems
    where data PeekOld Univ ReportElems
              = Peek_ReportElems_String (PathOld Univ ReportElems String) (Maybe String)
              | Peek_ReportElems_Bool (PathOld Univ ReportElems Bool) (Maybe Bool)
              | Peek_ReportElems_Double (PathOld Univ ReportElems Double) (Maybe Double)
              | Peek_ReportElems_Dimension (PathOld Univ ReportElems Dimension) (Maybe Dimension)
              | Peek_ReportElems_ImageCrop (PathOld Univ ReportElems ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElems_ImageSize (PathOld Univ ReportElems ImageSize) (Maybe ImageSize)
              | Peek_ReportElems_Units (PathOld Univ ReportElems Units) (Maybe Units)
              | Peek_ReportElems_ImageFile (PathOld Univ ReportElems ImageFile) (Maybe ImageFile)
              | Peek_ReportElems_JSONText (PathOld Univ ReportElems JSONText) (Maybe JSONText)
              | Peek_ReportElems_Markup (PathOld Univ ReportElems Markup) (Maybe Markup)
              | Peek_ReportElems_ReportElem (PathOld Univ ReportElems ReportElem) (Maybe ReportElem)
              | Peek_ReportElems_ReportElems (PathOld Univ ReportElems ReportElems) (Maybe ReportElems)
              | Peek_ReportElems_EUI (PathOld Univ ReportElems EUI) (Maybe EUI)
              | Peek_ReportElems_MEUI (PathOld Univ ReportElems MEUI) (Maybe MEUI)
              | Peek_ReportElems_MaybeImageFile (PathOld Univ ReportElems MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElems_ReportImage (PathOld Univ ReportElems ReportImage) (Maybe ReportImage)
              | Peek_ReportElems_ReportImages (PathOld Univ ReportElems ReportImages) (Maybe ReportImages)
              | Peek_ReportElems_ReportImageView (PathOld Univ ReportElems ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElems_SaneSizeImageSize (PathOld Univ ReportElems SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElems_Item (PathOld Univ ReportElems Item) (Maybe Item)
              | Peek_ReportElems_MIM (PathOld Univ ReportElems MIM) (Maybe MIM)
              | Peek_ReportElems_URI (PathOld Univ ReportElems URI) (Maybe URI)
              | Peek_ReportElems_Text (PathOld Univ ReportElems Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportElems = UPeek_ReportElems (UPath Univ ReportElems) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportElems
          upeekPath (UPeek_ReportElems p _) = p
          upeekValue (UPeek_ReportElems _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportElem) :: Forest (UPeek Univ ReportElem)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportElem of
                                                                                                                                                                                           UPeek_ReportElem _
                                                                                                                                                                                                            _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportElems)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportElems]
          type UPath Univ ReportElems = UPath_ReportElems
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportElem]))) (map (\(k,
                                                                                                                                                                                         _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ ReportFlags
    where data PeekOld Univ ReportFlags
              = Peek_ReportFlags_String (PathOld Univ ReportFlags String) (Maybe String)
              | Peek_ReportFlags_Bool (PathOld Univ ReportFlags Bool) (Maybe Bool)
              | Peek_ReportFlags_JSONText (PathOld Univ ReportFlags JSONText) (Maybe JSONText)
              | Peek_ReportFlags_ReportFlags (PathOld Univ ReportFlags ReportFlags) (Maybe ReportFlags)
              deriving (Eq, Show)
          data UPeek Univ ReportFlags = UPeek_ReportFlags (UPath Univ ReportFlags) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportFlags
          upeekPath (UPeek_ReportFlags p _) = p
          upeekValue (UPeek_ReportFlags _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportFlags {})) = let dopath pth = case pth of
                                                                               p@(UPath_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Bool) :: Forest (UPeek Univ Bool)
                                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                               Bool of
                                                                                                                                                                                                                                  UPeek_Bool _
                                                                                                                                                                                                                                             _ -> upeekCons (UPath_ReportFlags_hideEmptyItemFields (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                               _ -> []
                                                           in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportFlags)
          peekRowOld (Proxy) (_xconc@(ReportFlags {})) = let dopath pth = case pth of
                                                                              p@(UPath_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                              _ -> []
                                                          in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportFlags]
          type UPath Univ ReportFlags = UPath_ReportFlags
          upaths _ _f r0 (_xconc@(ReportFlags {})) = foldr _f r0 [UPath_ReportFlags_hideEmptyItemFields idPath]
          upathRow _ (ReportFlags {}) = concat [[UPath_ReportFlags_hideEmptyItemFields idPath]]
          upathTree _unv (_xconc@(ReportFlags {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Bool]))) [UPath_ReportFlags_hideEmptyItemFields] ++ [])
instance PathStart Univ ReportIntendedUse
    where data PeekOld Univ ReportIntendedUse
              = Peek_ReportIntendedUse_String (PathOld Univ ReportIntendedUse String) (Maybe String)
              | Peek_ReportIntendedUse_JSONText (PathOld Univ ReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_ReportIntendedUse_ReportIntendedUse (PathOld Univ ReportIntendedUse ReportIntendedUse) (Maybe ReportIntendedUse)
              deriving (Eq, Show)
          data UPeek Univ ReportIntendedUse = UPeek_ReportIntendedUse (UPath Univ ReportIntendedUse) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportIntendedUse
          upeekPath (UPeek_ReportIntendedUse p _) = p
          upeekValue (UPeek_ReportIntendedUse _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_ReportIntendedUse_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                             UPeek_String _
                                                                                                                                                                                                                          _ -> upeekCons (UPath_ReportIntendedUse_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportIntendedUse)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_ReportIntendedUse_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportIntendedUse]
          type UPath Univ ReportIntendedUse = UPath_ReportIntendedUse
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_ReportIntendedUse_View idPath]
          upathRow _ _xyz = concat [[UPath_ReportIntendedUse_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_ReportIntendedUse_View] ++ [])
instance PathStart Univ ReportStandard
    where data PeekOld Univ ReportStandard
              = Peek_ReportStandard_Int (PathOld Univ ReportStandard Int) (Maybe Int)
              | Peek_ReportStandard_ReportStandard (PathOld Univ ReportStandard ReportStandard) (Maybe ReportStandard)
              deriving (Eq, Show)
          data UPeek Univ ReportStandard = UPeek_ReportStandard (UPath Univ ReportStandard) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportStandard
          upeekPath (UPeek_ReportStandard p _) = p
          upeekValue (UPeek_ReportStandard _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportStandard {})) = let dopath pth = case pth of
                                                                                  p@(UPath_ReportStandard_unReportStandard _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Int) :: Forest (UPeek Univ Int)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  Int of
                                                                                                                                                                                                                                     UPeek_Int _
                                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportStandard_unReportStandard (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                  _ -> []
                                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportStandard)
          peekRowOld (Proxy) (_xconc@(ReportStandard {})) = let dopath pth = case pth of
                                                                                 p@(UPath_ReportStandard_unReportStandard _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                 _ -> []
                                                             in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportStandard]
          type UPath Univ ReportStandard = UPath_ReportStandard
          upaths _ _f r0 (_xconc@(ReportStandard {})) = foldr _f r0 [UPath_ReportStandard_unReportStandard idPath]
          upathRow _ (ReportStandard {}) = concat [[UPath_ReportStandard_unReportStandard idPath]]
          upathTree _unv (_xconc@(ReportStandard {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Int]))) [UPath_ReportStandard_unReportStandard] ++ [])
instance PathStart Univ ReportStatus
    where data PeekOld Univ ReportStatus
              = Peek_ReportStatus_String (PathOld Univ ReportStatus String) (Maybe String)
              | Peek_ReportStatus_JSONText (PathOld Univ ReportStatus JSONText) (Maybe JSONText)
              | Peek_ReportStatus_ReportStatus (PathOld Univ ReportStatus ReportStatus) (Maybe ReportStatus)
              deriving (Eq, Show)
          data UPeek Univ ReportStatus = UPeek_ReportStatus (UPath Univ ReportStatus) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportStatus
          upeekPath (UPeek_ReportStatus p _) = p
          upeekValue (UPeek_ReportStatus _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_ReportStatus_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                        UPeek_String _
                                                                                                                                                                                                                     _ -> upeekCons (UPath_ReportStatus_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportStatus)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_ReportStatus_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportStatus]
          type UPath Univ ReportStatus = UPath_ReportStatus
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_ReportStatus_View idPath]
          upathRow _ _xyz = concat [[UPath_ReportStatus_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_ReportStatus_View] ++ [])
instance PathStart Univ ReportValueApproachInfo
    where data PeekOld Univ ReportValueApproachInfo
              = Peek_ReportValueApproachInfo_JSONText (PathOld Univ ReportValueApproachInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueApproachInfo_Markup (PathOld Univ ReportValueApproachInfo Markup) (Maybe Markup)
              | Peek_ReportValueApproachInfo_ReportValueApproachInfo (PathOld Univ ReportValueApproachInfo ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportValueApproachInfo_Text (PathOld Univ ReportValueApproachInfo Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportValueApproachInfo = UPeek_ReportValueApproachInfo (UPath Univ ReportValueApproachInfo) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportValueApproachInfo
          upeekPath (UPeek_ReportValueApproachInfo p _) = p
          upeekValue (UPeek_ReportValueApproachInfo _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportValueApproachInfo {})) = mconcat [let dopath pth = case pth of
                                                                                                    p@(UPath_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                             Markup)
                                                                                                                                                                                 in Node (upeekCons p (if null wtree
                                                                                                                                                                                                        then Just a
                                                                                                                                                                                                        else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                           Markup of
                                                                                                                                                                                                                                              UPeek_Markup _
                                                                                                                                                                                                                                                           _ -> upeekCons (UPath_ReportValueApproachInfo_reportValueApproachName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                    _ -> []
                                                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                               let dopath pth = case pth of
                                                                                                    p@(UPath_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                                    Markup)
                                                                                                                                                                                        in Node (upeekCons p (if null wtree
                                                                                                                                                                                                               then Just a
                                                                                                                                                                                                               else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                                  Markup of
                                                                                                                                                                                                                                                     UPeek_Markup _
                                                                                                                                                                                                                                                                  _ -> upeekCons (UPath_ReportValueApproachInfo_reportValueApproachDescription (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                    _ -> []
                                                                                in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ ReportValueApproachInfo)
          peekRowOld (Proxy) (_xconc@(ReportValueApproachInfo {})) = mconcat [let dopath pth = case pth of
                                                                                                   p@(UPath_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                   _ -> []
                                                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                              let dopath pth = case pth of
                                                                                                   p@(UPath_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                   _ -> []
                                                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ ReportValueApproachInfo]
          type UPath Univ ReportValueApproachInfo = UPath_ReportValueApproachInfo
          upaths _ _f r0 (_xconc@(ReportValueApproachInfo {})) = foldr _f (foldr _f r0 [UPath_ReportValueApproachInfo_reportValueApproachDescription idPath]) [UPath_ReportValueApproachInfo_reportValueApproachName idPath]
          upathRow _ (ReportValueApproachInfo {}) = concat [[UPath_ReportValueApproachInfo_reportValueApproachName idPath],
                                                            [UPath_ReportValueApproachInfo_reportValueApproachDescription idPath]]
          upathTree _unv (_xconc@(ReportValueApproachInfo {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportValueApproachInfo_reportValueApproachName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportValueApproachInfo_reportValueApproachDescription] ++ []))
instance PathStart Univ ReportValueTypeInfo
    where data PeekOld Univ ReportValueTypeInfo
              = Peek_ReportValueTypeInfo_JSONText (PathOld Univ ReportValueTypeInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueTypeInfo_Markup (PathOld Univ ReportValueTypeInfo Markup) (Maybe Markup)
              | Peek_ReportValueTypeInfo_ReportValueTypeInfo (PathOld Univ ReportValueTypeInfo ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportValueTypeInfo_Text (PathOld Univ ReportValueTypeInfo Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportValueTypeInfo = UPeek_ReportValueTypeInfo (UPath Univ ReportValueTypeInfo) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportValueTypeInfo
          upeekPath (UPeek_ReportValueTypeInfo p _) = p
          upeekValue (UPeek_ReportValueTypeInfo _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportValueTypeInfo {})) = mconcat [let dopath pth = case pth of
                                                                                                p@(UPath_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                 Markup)
                                                                                                                                                                     in Node (upeekCons p (if null wtree
                                                                                                                                                                                            then Just a
                                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                               Markup of
                                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportValueTypeInfo_reportValueTypeName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                _ -> []
                                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                           let dopath pth = case pth of
                                                                                                p@(UPath_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                        Markup)
                                                                                                                                                                            in Node (upeekCons p (if null wtree
                                                                                                                                                                                                   then Just a
                                                                                                                                                                                                   else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                      Markup of
                                                                                                                                                                                                                                         UPeek_Markup _
                                                                                                                                                                                                                                                      _ -> upeekCons (UPath_ReportValueTypeInfo_reportValueTypeDescription (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                _ -> []
                                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                           let dopath pth = case pth of
                                                                                                p@(UPath_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                       Markup)
                                                                                                                                                                           in Node (upeekCons p (if null wtree
                                                                                                                                                                                                  then Just a
                                                                                                                                                                                                  else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     Markup of
                                                                                                                                                                                                                                        UPeek_Markup _
                                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ReportValueTypeInfo_reportValueTypeDefinition (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                                _ -> []
                                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ ReportValueTypeInfo)
          peekRowOld (Proxy) (_xconc@(ReportValueTypeInfo {})) = mconcat [let dopath pth = case pth of
                                                                                               p@(UPath_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                               _ -> []
                                                                           in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                          let dopath pth = case pth of
                                                                                               p@(UPath_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                               _ -> []
                                                                           in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                          let dopath pth = case pth of
                                                                                               p@(UPath_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                               _ -> []
                                                                           in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ ReportValueTypeInfo]
          type UPath Univ ReportValueTypeInfo = UPath_ReportValueTypeInfo
          upaths _ _f r0 (_xconc@(ReportValueTypeInfo {})) = foldr _f (foldr _f (foldr _f r0 [UPath_ReportValueTypeInfo_reportValueTypeDefinition idPath]) [UPath_ReportValueTypeInfo_reportValueTypeDescription idPath]) [UPath_ReportValueTypeInfo_reportValueTypeName idPath]
          upathRow _ (ReportValueTypeInfo {}) = concat [[UPath_ReportValueTypeInfo_reportValueTypeName idPath],
                                                        [UPath_ReportValueTypeInfo_reportValueTypeDescription idPath],
                                                        [UPath_ReportValueTypeInfo_reportValueTypeDefinition idPath]]
          upathTree _unv (_xconc@(ReportValueTypeInfo {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportValueTypeInfo_reportValueTypeName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportValueTypeInfo_reportValueTypeDescription] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportValueTypeInfo_reportValueTypeDefinition] ++ [])))
instance PathStart Univ EUI
    where data PeekOld Univ EUI
              = Peek_EUI_ImageFile (PathOld Univ EUI ImageFile) (Maybe ImageFile) | Peek_EUI_EUI (PathOld Univ EUI EUI) (Maybe EUI) | Peek_EUI_URI (PathOld Univ EUI URI) (Maybe URI)
              deriving (Eq, Show)
          data UPeek Univ EUI = UPeek_EUI (UPath Univ EUI) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_EUI
          upeekPath (UPeek_EUI p _) = p
          upeekValue (UPeek_EUI _ x) = x
          peekTreeOld (Proxy) (_xconc@(Left _)) = let dopath pth = case pth of
                                                                       p@(Path_Left _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: URI) :: Forest (UPeek Univ URI)
                                                                                                        in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ URI of
                                                                                                                                                                                              UPeek_URI _
                                                                                                                                                                                                        _ -> upeekCons (Path_Left (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                       _ -> []
                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ EUI)
          peekTreeOld (Proxy) (_xconc@(Right _)) = let dopath pth = case pth of
                                                                        p@(Path_Right _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ImageFile) :: Forest (UPeek Univ ImageFile)
                                                                                                          in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ImageFile of
                                                                                                                                                                                                UPeek_ImageFile _
                                                                                                                                                                                                                _ -> upeekCons (Path_Right (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                        _ -> []
                                                    in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ EUI)
          peekRowOld (Proxy) (_xconc@(Left _)) = let dopath pth = case pth of
                                                                      p@(Path_Left _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                      _ -> []
                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ EUI]
          peekRowOld (Proxy) (_xconc@(Right _)) = let dopath pth = case pth of
                                                                       p@(Path_Right _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                       _ -> []
                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ EUI]
          type UPath Univ EUI = UPath_EUI
          upaths _ _f r0 (_xconc@(Left _)) = foldr _f r0 [Path_Left idPath]
          upaths _ _f r0 (_xconc@(Right _)) = foldr _f r0 [Path_Right idPath]
          upathRow _ (Left _) = concat [[Path_Left idPath]]
          upathRow _ (Right _) = concat [[Path_Right idPath]]
          upathTree _unv (_xconc@(Left _)) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [URI]))) [Path_Left] ++ [])
          upathTree _unv (_xconc@(Right _)) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ImageFile]))) [Path_Right] ++ [])
instance PathStart Univ MEUI
    where data PeekOld Univ MEUI
              = Peek_MEUI_ImageFile (PathOld Univ MEUI ImageFile) (Maybe ImageFile)
              | Peek_MEUI_EUI (PathOld Univ MEUI EUI) (Maybe EUI)
              | Peek_MEUI_MEUI (PathOld Univ MEUI MEUI) (Maybe MEUI)
              | Peek_MEUI_URI (PathOld Univ MEUI URI) (Maybe URI)
              deriving (Eq, Show)
          data UPeek Univ MEUI = UPeek_MEUI (UPath Univ MEUI) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MEUI
          upeekPath (UPeek_MEUI p _) = p
          upeekValue (UPeek_MEUI _ x) = x
          peekTreeOld (Proxy) _xconc = let dopath pth = case pth of
                                                            p@(Path_Just _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: EUI) :: Forest (UPeek Univ EUI)
                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ EUI of
                                                                                                                                                                                   UPeek_EUI _
                                                                                                                                                                                             _ -> upeekCons (Path_Just (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                            _ -> []
                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MEUI)
          peekRowOld (Proxy) _xconc = let dopath pth = case pth of
                                                           p@(Path_Just _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                           _ -> []
                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MEUI]
          type UPath Univ MEUI = UPath_MEUI
          upaths _ _f r0 (_xconc@_) = foldr _f r0 [Path_Just idPath]
          upathRow _ _ = concat [[Path_Just idPath]]
          upathTree _unv _xconc = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [EUI]))) [Path_Just] ++ [])
instance PathStart Univ MaybeImageFile
    where data PeekOld Univ MaybeImageFile
              = Peek_MaybeImageFile_String (PathOld Univ MaybeImageFile String) (Maybe String)
              | Peek_MaybeImageFile_JSONText (PathOld Univ MaybeImageFile JSONText) (Maybe JSONText)
              | Peek_MaybeImageFile_MaybeImageFile (PathOld Univ MaybeImageFile MaybeImageFile) (Maybe MaybeImageFile)
              deriving (Eq, Show)
          data UPeek Univ MaybeImageFile = UPeek_MaybeImageFile (UPath Univ MaybeImageFile) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MaybeImageFile
          upeekPath (UPeek_MaybeImageFile p _) = p
          upeekValue (UPeek_MaybeImageFile _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_MaybeImageFile_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                                    in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                          UPeek_String _
                                                                                                                                                                                                                       _ -> upeekCons (UPath_MaybeImageFile_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MaybeImageFile)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_MaybeImageFile_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MaybeImageFile]
          type UPath Univ MaybeImageFile = UPath_MaybeImageFile
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_MaybeImageFile_View idPath]
          upathRow _ _xyz = concat [[UPath_MaybeImageFile_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_MaybeImageFile_View] ++ [])
instance PathStart Univ ReportImage
    where data PeekOld Univ ReportImage
              = Peek_ReportImage_String (PathOld Univ ReportImage String) (Maybe String)
              | Peek_ReportImage_Bool (PathOld Univ ReportImage Bool) (Maybe Bool)
              | Peek_ReportImage_Double (PathOld Univ ReportImage Double) (Maybe Double)
              | Peek_ReportImage_Dimension (PathOld Univ ReportImage Dimension) (Maybe Dimension)
              | Peek_ReportImage_ImageCrop (PathOld Univ ReportImage ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImage_ImageSize (PathOld Univ ReportImage ImageSize) (Maybe ImageSize)
              | Peek_ReportImage_Units (PathOld Univ ReportImage Units) (Maybe Units)
              | Peek_ReportImage_ImageFile (PathOld Univ ReportImage ImageFile) (Maybe ImageFile)
              | Peek_ReportImage_JSONText (PathOld Univ ReportImage JSONText) (Maybe JSONText)
              | Peek_ReportImage_Markup (PathOld Univ ReportImage Markup) (Maybe Markup)
              | Peek_ReportImage_EUI (PathOld Univ ReportImage EUI) (Maybe EUI)
              | Peek_ReportImage_MEUI (PathOld Univ ReportImage MEUI) (Maybe MEUI)
              | Peek_ReportImage_MaybeImageFile (PathOld Univ ReportImage MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImage_ReportImage (PathOld Univ ReportImage ReportImage) (Maybe ReportImage)
              | Peek_ReportImage_ReportImageView (PathOld Univ ReportImage ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImage_SaneSizeImageSize (PathOld Univ ReportImage SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImage_URI (PathOld Univ ReportImage URI) (Maybe URI)
              | Peek_ReportImage_Text (PathOld Univ ReportImage Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportImage = UPeek_ReportImage (UPath Univ ReportImage) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportImage
          upeekPath (UPeek_ReportImage p _) = p
          upeekValue (UPeek_ReportImage _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_ReportImage_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportImageView) :: Forest (UPeek Univ ReportImageView)
                                                                                                                 in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportImageView of
                                                                                                                                                                                                       UPeek_ReportImageView _
                                                                                                                                                                                                                             _ -> upeekCons (UPath_ReportImage_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportImage)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_ReportImage_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportImage]
          type UPath Univ ReportImage = UPath_ReportImage
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_ReportImage_View idPath]
          upathRow _ _xyz = concat [[UPath_ReportImage_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportImageView]))) [UPath_ReportImage_View] ++ [])
instance PathStart Univ ReportImages
    where data PeekOld Univ ReportImages
              = Peek_ReportImages_String (PathOld Univ ReportImages String) (Maybe String)
              | Peek_ReportImages_Bool (PathOld Univ ReportImages Bool) (Maybe Bool)
              | Peek_ReportImages_Double (PathOld Univ ReportImages Double) (Maybe Double)
              | Peek_ReportImages_Dimension (PathOld Univ ReportImages Dimension) (Maybe Dimension)
              | Peek_ReportImages_ImageCrop (PathOld Univ ReportImages ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImages_ImageSize (PathOld Univ ReportImages ImageSize) (Maybe ImageSize)
              | Peek_ReportImages_Units (PathOld Univ ReportImages Units) (Maybe Units)
              | Peek_ReportImages_ImageFile (PathOld Univ ReportImages ImageFile) (Maybe ImageFile)
              | Peek_ReportImages_JSONText (PathOld Univ ReportImages JSONText) (Maybe JSONText)
              | Peek_ReportImages_Markup (PathOld Univ ReportImages Markup) (Maybe Markup)
              | Peek_ReportImages_EUI (PathOld Univ ReportImages EUI) (Maybe EUI)
              | Peek_ReportImages_MEUI (PathOld Univ ReportImages MEUI) (Maybe MEUI)
              | Peek_ReportImages_MaybeImageFile (PathOld Univ ReportImages MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImages_ReportImage (PathOld Univ ReportImages ReportImage) (Maybe ReportImage)
              | Peek_ReportImages_ReportImages (PathOld Univ ReportImages ReportImages) (Maybe ReportImages)
              | Peek_ReportImages_ReportImageView (PathOld Univ ReportImages ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImages_SaneSizeImageSize (PathOld Univ ReportImages SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImages_URI (PathOld Univ ReportImages URI) (Maybe URI)
              | Peek_ReportImages_Text (PathOld Univ ReportImages Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportImages = UPeek_ReportImages (UPath Univ ReportImages) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportImages
          upeekPath (UPeek_ReportImages p _) = p
          upeekValue (UPeek_ReportImages _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_At _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportImage) :: Forest (UPeek Univ ReportImage)
                                                                                                     in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportImage of
                                                                                                                                                                                           UPeek_ReportImage _
                                                                                                                                                                                                             _ -> upeekCons (Path_At _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportImages)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_At _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportImages]
          type UPath Univ ReportImages = UPath_ReportImages
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_At k idPath) (toPairs _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_At k idPath) (toPairs _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportImage]))) (map (\(k,
                                                                                                                                                                                          _v) -> Path_At k) (toPairs _xyz)) ++ [])
instance PathStart Univ ReadOnlyFilePath
    where data PeekOld Univ ReadOnlyFilePath
              = Peek_ReadOnlyFilePath_String (PathOld Univ ReadOnlyFilePath String) (Maybe String)
              | Peek_ReadOnlyFilePath_JSONText (PathOld Univ ReadOnlyFilePath JSONText) (Maybe JSONText)
              | Peek_ReadOnlyFilePath_ReadOnlyFilePath (PathOld Univ ReadOnlyFilePath ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              deriving (Eq, Show)
          data UPeek Univ ReadOnlyFilePath = UPeek_ReadOnlyFilePath (UPath Univ ReadOnlyFilePath) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReadOnlyFilePath
          upeekPath (UPeek_ReadOnlyFilePath p _) = p
          upeekValue (UPeek_ReadOnlyFilePath _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_ReadOnlyFilePath_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: String) :: Forest (UPeek Univ String)
                                                                                                                      in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ String of
                                                                                                                                                                                                            UPeek_String _
                                                                                                                                                                                                                         _ -> upeekCons (UPath_ReadOnlyFilePath_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReadOnlyFilePath)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_ReadOnlyFilePath_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReadOnlyFilePath]
          type UPath Univ ReadOnlyFilePath = UPath_ReadOnlyFilePath
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_ReadOnlyFilePath_View idPath]
          upathRow _ _xyz = concat [[UPath_ReadOnlyFilePath_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [String]))) [UPath_ReadOnlyFilePath_View] ++ [])
instance PathStart Univ ReportImageView
    where data PeekOld Univ ReportImageView
              = Peek_ReportImageView_String (PathOld Univ ReportImageView String) (Maybe String)
              | Peek_ReportImageView_Bool (PathOld Univ ReportImageView Bool) (Maybe Bool)
              | Peek_ReportImageView_Double (PathOld Univ ReportImageView Double) (Maybe Double)
              | Peek_ReportImageView_Dimension (PathOld Univ ReportImageView Dimension) (Maybe Dimension)
              | Peek_ReportImageView_ImageCrop (PathOld Univ ReportImageView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImageView_ImageSize (PathOld Univ ReportImageView ImageSize) (Maybe ImageSize)
              | Peek_ReportImageView_Units (PathOld Univ ReportImageView Units) (Maybe Units)
              | Peek_ReportImageView_ImageFile (PathOld Univ ReportImageView ImageFile) (Maybe ImageFile)
              | Peek_ReportImageView_JSONText (PathOld Univ ReportImageView JSONText) (Maybe JSONText)
              | Peek_ReportImageView_Markup (PathOld Univ ReportImageView Markup) (Maybe Markup)
              | Peek_ReportImageView_EUI (PathOld Univ ReportImageView EUI) (Maybe EUI)
              | Peek_ReportImageView_MEUI (PathOld Univ ReportImageView MEUI) (Maybe MEUI)
              | Peek_ReportImageView_MaybeImageFile (PathOld Univ ReportImageView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImageView_ReportImageView (PathOld Univ ReportImageView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImageView_SaneSizeImageSize (PathOld Univ ReportImageView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImageView_URI (PathOld Univ ReportImageView URI) (Maybe URI)
              | Peek_ReportImageView_Text (PathOld Univ ReportImageView Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ ReportImageView = UPeek_ReportImageView (UPath Univ ReportImageView) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportImageView
          upeekPath (UPeek_ReportImageView p _) = p
          upeekValue (UPeek_ReportImageView _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportImageView {})) = mconcat [let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picSize _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: SaneSizeImageSize) :: Forest (UPeek Univ
                                                                                                                                                                                                                                         SaneSizeImageSize)
                                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     SaneSizeImageSize of
                                                                                                                                                                                                                                        UPeek_SaneSizeImageSize _
                                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportImageView__picSize (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picCrop _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ImageCrop) :: Forest (UPeek Univ ImageCrop)
                                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     ImageCrop of
                                                                                                                                                                                                                                        UPeek_ImageCrop _
                                                                                                                                                                                                                                                        _ -> upeekCons (UPath_ReportImageView__picCrop (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picCaption _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                     in Node (upeekCons p (if null wtree
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportImageView__picCaption (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picOriginal _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MEUI) :: Forest (UPeek Univ MEUI)
                                                                                                                                                      in Node (upeekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ MEUI of
                                                                                                                                                                                                                   UPeek_MEUI _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportImageView__picOriginal (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picEditedDeprecated _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MaybeImageFile) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                  MaybeImageFile)
                                                                                                                                                              in Node (upeekCons p (if null wtree
                                                                                                                                                                                     then Just a
                                                                                                                                                                                     else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                        MaybeImageFile of
                                                                                                                                                                                                                           UPeek_MaybeImageFile _
                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportImageView__picEditedDeprecated (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picThumbDeprecated _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MaybeImageFile) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                 MaybeImageFile)
                                                                                                                                                             in Node (upeekCons p (if null wtree
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                       MaybeImageFile of
                                                                                                                                                                                                                          UPeek_MaybeImageFile _
                                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportImageView__picThumbDeprecated (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MaybeImageFile) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                   MaybeImageFile)
                                                                                                                                                               in Node (upeekCons p (if null wtree
                                                                                                                                                                                      then Just a
                                                                                                                                                                                      else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                         MaybeImageFile of
                                                                                                                                                                                                                            UPeek_MaybeImageFile _
                                                                                                                                                                                                                                                 _ -> upeekCons (UPath_ReportImageView__picPrinterDeprecated (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picMustEnlarge _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Bool) :: Forest (UPeek Univ Bool)
                                                                                                                                                         in Node (upeekCons p (if null wtree
                                                                                                                                                                                then Just a
                                                                                                                                                                                else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Bool of
                                                                                                                                                                                                                      UPeek_Bool _
                                                                                                                                                                                                                                 _ -> upeekCons (UPath_ReportImageView__picMustEnlarge (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                       let dopath pth = case pth of
                                                                                            p@(UPath_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MaybeImageFile) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                    MaybeImageFile)
                                                                                                                                                                in Node (upeekCons p (if null wtree
                                                                                                                                                                                       then Just a
                                                                                                                                                                                       else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                          MaybeImageFile of
                                                                                                                                                                                                                             UPeek_MaybeImageFile _
                                                                                                                                                                                                                                                  _ -> upeekCons (UPath_ReportImageView__picEnlargedDeprecated (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                            _ -> []
                                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ ReportImageView)
          peekRowOld (Proxy) (_xconc@(ReportImageView {})) = mconcat [let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picSize _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picCrop _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picCaption _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picOriginal _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picEditedDeprecated _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picThumbDeprecated _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picMustEnlarge _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                      let dopath pth = case pth of
                                                                                           p@(UPath_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                           _ -> []
                                                                       in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ ReportImageView]
          type UPath Univ ReportImageView = UPath_ReportImageView
          upaths _ _f r0 (_xconc@(ReportImageView {})) = foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f r0 [UPath_ReportImageView__picEnlargedDeprecated idPath]) [UPath_ReportImageView__picMustEnlarge idPath]) [UPath_ReportImageView__picPrinterDeprecated idPath]) [UPath_ReportImageView__picThumbDeprecated idPath]) [UPath_ReportImageView__picEditedDeprecated idPath]) [UPath_ReportImageView__picOriginal idPath]) [UPath_ReportImageView__picCaption idPath]) [UPath_ReportImageView__picCrop idPath]) [UPath_ReportImageView__picSize idPath]
          upathRow _ (ReportImageView {}) = concat [[UPath_ReportImageView__picSize idPath],
                                                    [UPath_ReportImageView__picCrop idPath],
                                                    [UPath_ReportImageView__picCaption idPath],
                                                    [UPath_ReportImageView__picOriginal idPath],
                                                    [UPath_ReportImageView__picEditedDeprecated idPath],
                                                    [UPath_ReportImageView__picThumbDeprecated idPath],
                                                    [UPath_ReportImageView__picPrinterDeprecated idPath],
                                                    [UPath_ReportImageView__picMustEnlarge idPath],
                                                    [UPath_ReportImageView__picEnlargedDeprecated idPath]]
          upathTree _unv (_xconc@(ReportImageView {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [SaneSizeImageSize]))) [UPath_ReportImageView__picSize] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ImageCrop]))) [UPath_ReportImageView__picCrop] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportImageView__picCaption] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MEUI]))) [UPath_ReportImageView__picOriginal] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MaybeImageFile]))) [UPath_ReportImageView__picEditedDeprecated] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MaybeImageFile]))) [UPath_ReportImageView__picThumbDeprecated] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MaybeImageFile]))) [UPath_ReportImageView__picPrinterDeprecated] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Bool]))) [UPath_ReportImageView__picMustEnlarge] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MaybeImageFile]))) [UPath_ReportImageView__picEnlargedDeprecated] ++ [])))))))))
instance PathStart Univ ReportView
    where data PeekOld Univ ReportView
              = Peek_ReportView_String (PathOld Univ ReportView String) (Maybe String)
              | Peek_ReportView_Int64 (PathOld Univ ReportView Int64) (Maybe Int64)
              | Peek_ReportView_Int (PathOld Univ ReportView Int) (Maybe Int)
              | Peek_ReportView_Bool (PathOld Univ ReportView Bool) (Maybe Bool)
              | Peek_ReportView_Double (PathOld Univ ReportView Double) (Maybe Double)
              | Peek_ReportView_Dimension (PathOld Univ ReportView Dimension) (Maybe Dimension)
              | Peek_ReportView_ImageCrop (PathOld Univ ReportView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportView_ImageSize (PathOld Univ ReportView ImageSize) (Maybe ImageSize)
              | Peek_ReportView_Units (PathOld Univ ReportView Units) (Maybe Units)
              | Peek_ReportView_ImageFile (PathOld Univ ReportView ImageFile) (Maybe ImageFile)
              | Peek_ReportView_Integer (PathOld Univ ReportView Integer) (Maybe Integer)
              | Peek_ReportView_JSONText (PathOld Univ ReportView JSONText) (Maybe JSONText)
              | Peek_ReportView_Markup (PathOld Univ ReportView Markup) (Maybe Markup)
              | Peek_ReportView_Permissions (PathOld Univ ReportView Permissions) (Maybe Permissions)
              | Peek_ReportView_UserIds (PathOld Univ ReportView UserIds) (Maybe UserIds)
              | Peek_ReportView_AbbrevPair (PathOld Univ ReportView AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportView_AbbrevPairs (PathOld Univ ReportView AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportView_Author (PathOld Univ ReportView Author) (Maybe Author)
              | Peek_ReportView_Authors (PathOld Univ ReportView Authors) (Maybe Authors)
              | Peek_ReportView_Branding (PathOld Univ ReportView Branding) (Maybe Branding)
              | Peek_ReportView_MarkupPair (PathOld Univ ReportView MarkupPair) (Maybe MarkupPair)
              | Peek_ReportView_MarkupPairs (PathOld Univ ReportView MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportView_Markups (PathOld Univ ReportView Markups) (Maybe Markups)
              | Peek_ReportView_MaybeReportIntendedUse (PathOld Univ ReportView MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportView_ReportElem (PathOld Univ ReportView ReportElem) (Maybe ReportElem)
              | Peek_ReportView_ReportElems (PathOld Univ ReportView ReportElems) (Maybe ReportElems)
              | Peek_ReportView_ReportFlags (PathOld Univ ReportView ReportFlags) (Maybe ReportFlags)
              | Peek_ReportView_ReportStandard (PathOld Univ ReportView ReportStandard) (Maybe ReportStandard)
              | Peek_ReportView_ReportStatus (PathOld Univ ReportView ReportStatus) (Maybe ReportStatus)
              | Peek_ReportView_ReportValueApproachInfo (PathOld Univ ReportView ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportView_ReportValueTypeInfo (PathOld Univ ReportView ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportView_EUI (PathOld Univ ReportView EUI) (Maybe EUI)
              | Peek_ReportView_MEUI (PathOld Univ ReportView MEUI) (Maybe MEUI)
              | Peek_ReportView_MaybeImageFile (PathOld Univ ReportView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportView_ReportImage (PathOld Univ ReportView ReportImage) (Maybe ReportImage)
              | Peek_ReportView_ReportImages (PathOld Univ ReportView ReportImages) (Maybe ReportImages)
              | Peek_ReportView_ReadOnlyFilePath (PathOld Univ ReportView ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportView_ReportImageView (PathOld Univ ReportView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportView_ReportView (PathOld Univ ReportView ReportView) (Maybe ReportView)
              | Peek_ReportView_SaneSizeImageSize (PathOld Univ ReportView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportView_Item (PathOld Univ ReportView Item) (Maybe Item)
              | Peek_ReportView_MIM (PathOld Univ ReportView MIM) (Maybe MIM)
              | Peek_ReportView_CIString (PathOld Univ ReportView CIString) (Maybe CIString)
              | Peek_ReportView_URI (PathOld Univ ReportView URI) (Maybe URI)
              | Peek_ReportView_Text (PathOld Univ ReportView Text) (Maybe Text)
              | Peek_ReportView_UserId (PathOld Univ ReportView UserId) (Maybe UserId)
              | Peek_ReportView_UUID (PathOld Univ ReportView UUID) (Maybe UUID)
              deriving (Eq, Show)
          data UPeek Univ ReportView = UPeek_ReportView (UPath Univ ReportView) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportView
          upeekPath (UPeek_ReportView p _) = p
          upeekValue (UPeek_ReportView _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportView {})) = mconcat [let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportFolder _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReadOnlyFilePath) :: Forest (UPeek Univ ReadOnlyFilePath)
                                                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                ReadOnlyFilePath of
                                                                                                                                                                                                                                   UPeek_ReadOnlyFilePath _
                                                                                                                                                                                                                                                          _ -> upeekCons (UPath_ReportView__reportFolder (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                           in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportDate _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                           in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportDate (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportContractDate _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                   in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                      Markup of
                                                                                                                                                                                                                                         UPeek_Markup _
                                                                                                                                                                                                                                                      _ -> upeekCons (UPath_ReportView__reportContractDate (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportInspectionDate _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                     in Node (upeekCons p (if null wtree
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportView__reportInspectionDate (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportEffectiveDate _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportEffectiveDate (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportAuthors _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Authors) :: Forest (UPeek Univ Authors)
                                                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                 Authors of
                                                                                                                                                                                                                                    UPeek_Authors _
                                                                                                                                                                                                                                                  _ -> upeekCons (UPath_ReportView__reportAuthors (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPreparer _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  Markup of
                                                                                                                                                                                                                                     UPeek_Markup _
                                                                                                                                                                                                                                                  _ -> upeekCons (UPath_ReportView__reportPreparer (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPreparerEIN _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     Markup of
                                                                                                                                                                                                                                        UPeek_Markup _
                                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ReportView__reportPreparerEIN (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPreparerAddress _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                      in Node (upeekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                   UPeek_Markup _
                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportPreparerAddress (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPreparerEMail _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportPreparerEMail (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPreparerWebsite _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                      in Node (upeekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                   UPeek_Markup _
                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportPreparerWebsite (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportAbbrevs _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: AbbrevPairs) :: Forest (UPeek Univ AbbrevPairs)
                                                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                 AbbrevPairs of
                                                                                                                                                                                                                                    UPeek_AbbrevPairs _
                                                                                                                                                                                                                                                      _ -> upeekCons (UPath_ReportView__reportAbbrevs (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportTitle _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                               Markup of
                                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportView__reportTitle (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportHeader _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                Markup of
                                                                                                                                                                                                                                   UPeek_Markup _
                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportHeader (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportFooter _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                Markup of
                                                                                                                                                                                                                                   UPeek_Markup _
                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportFooter (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportIntendedUse _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MaybeReportIntendedUse) :: Forest (UPeek Univ
                                                                                                                                                                                                                                              MaybeReportIntendedUse)
                                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     MaybeReportIntendedUse of
                                                                                                                                                                                                                                        UPeek_MaybeReportIntendedUse _
                                                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ReportView__reportIntendedUse (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportValueTypeInfo _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportValueTypeInfo) :: Forest (UPeek Univ
                                                                                                                                                                                                                                             ReportValueTypeInfo)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportValueTypeInfo of
                                                                                                                                                                                                                 UPeek_ReportValueTypeInfo _
                                                                                                                                                                                                                                           _ -> upeekCons (UPath_ReportView__reportValueTypeInfo (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportValueApproachInfo _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportValueApproachInfo) :: Forest (UPeek Univ
                                                                                                                                                                                                                                                     ReportValueApproachInfo)
                                                                                                                                                        in Node (upeekCons p (if null wtree
                                                                                                                                                                               then Just a
                                                                                                                                                                               else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                  ReportValueApproachInfo of
                                                                                                                                                                                                                     UPeek_ReportValueApproachInfo _
                                                                                                                                                                                                                                                   _ -> upeekCons (UPath_ReportView__reportValueApproachInfo (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportClientName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                 in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                    Markup of
                                                                                                                                                                                                                                       UPeek_Markup _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportClientName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportClientAddress _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportClientAddress (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportClientGreeting _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                     in Node (upeekCons p (if null wtree
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportView__reportClientGreeting (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportItemsOwnerFull _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                     in Node (upeekCons p (if null wtree
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                  UPeek_Markup _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportView__reportItemsOwnerFull (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportItemsOwner _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                 in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                    Markup of
                                                                                                                                                                                                                                       UPeek_Markup _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportItemsOwner (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportBriefItems _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                 in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                    Markup of
                                                                                                                                                                                                                                       UPeek_Markup _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportBriefItems (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportInspectionLocation _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                         in Node (upeekCons p (if null wtree
                                                                                                                                                                                then Just a
                                                                                                                                                                                else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                      UPeek_Markup _
                                                                                                                                                                                                                                   _ -> upeekCons (UPath_ReportView__reportInspectionLocation (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportBody _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportElems) :: Forest (UPeek Univ ReportElems)
                                                                                                                                           in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                              ReportElems of
                                                                                                                                                                                                                                 UPeek_ReportElems _
                                                                                                                                                                                                                                                   _ -> upeekCons (UPath_ReportView__reportBody (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportGlossary _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MarkupPairs) :: Forest (UPeek Univ MarkupPairs)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  MarkupPairs of
                                                                                                                                                                                                                                     UPeek_MarkupPairs _
                                                                                                                                                                                                                                                       _ -> upeekCons (UPath_ReportView__reportGlossary (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportSources _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MarkupPairs) :: Forest (UPeek Univ MarkupPairs)
                                                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                 MarkupPairs of
                                                                                                                                                                                                                                    UPeek_MarkupPairs _
                                                                                                                                                                                                                                                      _ -> upeekCons (UPath_ReportView__reportSources (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                          in Node (upeekCons p (if null wtree
                                                                                                                                                                                 then Just a
                                                                                                                                                                                 else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                       UPeek_Markup _
                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportLetterOfTransmittal (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportScopeOfWork _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                  in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                     Markup of
                                                                                                                                                                                                                                        UPeek_Markup _
                                                                                                                                                                                                                                                     _ -> upeekCons (UPath_ReportView__reportScopeOfWork (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportCertification _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markups) :: Forest (UPeek Univ Markups)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markups of
                                                                                                                                                                                                                 UPeek_Markups _
                                                                                                                                                                                                                               _ -> upeekCons (UPath_ReportView__reportCertification (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportLimitingConditions _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markups) :: Forest (UPeek Univ Markups)
                                                                                                                                                         in Node (upeekCons p (if null wtree
                                                                                                                                                                                then Just a
                                                                                                                                                                                else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markups of
                                                                                                                                                                                                                      UPeek_Markups _
                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportLimitingConditions (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPrivacyPolicy _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                                                                    in Node (upeekCons p (if null wtree
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                                                 UPeek_Markup _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportPrivacyPolicy (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportPerms _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Permissions) :: Forest (UPeek Univ Permissions)
                                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                               Permissions of
                                                                                                                                                                                                                                  UPeek_Permissions _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportPerms (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportRevision _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Integer) :: Forest (UPeek Univ Integer)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  Integer of
                                                                                                                                                                                                                                     UPeek_Integer _
                                                                                                                                                                                                                                                   _ -> upeekCons (UPath_ReportView__reportRevision (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportCreated _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Int64) :: Forest (UPeek Univ Int64)
                                                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                 Int64 of
                                                                                                                                                                                                                                    UPeek_Int64 _
                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportCreated (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportBranding _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Branding) :: Forest (UPeek Univ Branding)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  Branding of
                                                                                                                                                                                                                                     UPeek_Branding _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportBranding (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportStatus _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportStatus) :: Forest (UPeek Univ ReportStatus)
                                                                                                                                             in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                ReportStatus of
                                                                                                                                                                                                                                   UPeek_ReportStatus _
                                                                                                                                                                                                                                                      _ -> upeekCons (UPath_ReportView__reportStatus (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportRedacted _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Bool) :: Forest (UPeek Univ Bool)
                                                                                                                                               in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                                  Bool of
                                                                                                                                                                                                                                     UPeek_Bool _
                                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportView__reportRedacted (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportFlags _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportFlags) :: Forest (UPeek Univ ReportFlags)
                                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ
                                                                                                                                                                                                                                               ReportFlags of
                                                                                                                                                                                                                                  UPeek_ReportFlags _
                                                                                                                                                                                                                                                    _ -> upeekCons (UPath_ReportView__reportFlags (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportUUID _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: UUID) :: Forest (UPeek Univ UUID)
                                                                                                                                           in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ UUID of
                                                                                                                                                                                                                                 UPeek_UUID _
                                                                                                                                                                                                                                            _ -> upeekCons (UPath_ReportView__reportUUID (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportOrderByItemName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Bool) :: Forest (UPeek Univ Bool)
                                                                                                                                                      in Node (upeekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Bool of
                                                                                                                                                                                                                   UPeek_Bool _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportOrderByItemName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportDisplayItemName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Bool) :: Forest (UPeek Univ Bool)
                                                                                                                                                      in Node (upeekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Bool of
                                                                                                                                                                                                                   UPeek_Bool _
                                                                                                                                                                                                                              _ -> upeekCons (UPath_ReportView__reportDisplayItemName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                  let dopath pth = case pth of
                                                                                       p@(UPath_ReportView__reportStandardsVersion _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportStandard) :: Forest (UPeek Univ
                                                                                                                                                                                                                                           ReportStandard)
                                                                                                                                                       in Node (upeekCons p (if null wtree
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportStandard of
                                                                                                                                                                                                                    UPeek_ReportStandard _
                                                                                                                                                                                                                                         _ -> upeekCons (UPath_ReportView__reportStandardsVersion (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                       _ -> []
                                                                   in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ ReportView)
          peekRowOld (Proxy) (_xconc@(ReportView {})) = mconcat [let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportFolder _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportDate _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportContractDate _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportInspectionDate _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportEffectiveDate _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportAuthors _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPreparer _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPreparerEIN _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPreparerAddress _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPreparerEMail _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPreparerWebsite _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportAbbrevs _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportTitle _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportHeader _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportFooter _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportIntendedUse _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportValueTypeInfo _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportValueApproachInfo _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportClientName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportClientAddress _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportClientGreeting _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportItemsOwnerFull _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportItemsOwner _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportBriefItems _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportInspectionLocation _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportBody _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportGlossary _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportSources _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportScopeOfWork _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportCertification _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportLimitingConditions _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPrivacyPolicy _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportPerms _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportRevision _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportCreated _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportBranding _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportStatus _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportRedacted _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportFlags _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportUUID _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportOrderByItemName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportDisplayItemName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                                 let dopath pth = case pth of
                                                                                      p@(UPath_ReportView__reportStandardsVersion _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                      _ -> []
                                                                  in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ ReportView]
          type UPath Univ ReportView = UPath_ReportView
          upaths _ _f r0 (_xconc@(ReportView {})) = foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f (foldr _f r0 [UPath_ReportView__reportStandardsVersion idPath]) [UPath_ReportView__reportDisplayItemName idPath]) [UPath_ReportView__reportOrderByItemName idPath]) [UPath_ReportView__reportUUID idPath]) [UPath_ReportView__reportFlags idPath]) [UPath_ReportView__reportRedacted idPath]) [UPath_ReportView__reportStatus idPath]) [UPath_ReportView__reportBranding idPath]) [UPath_ReportView__reportCreated idPath]) [UPath_ReportView__reportRevision idPath]) [UPath_ReportView__reportPerms idPath]) [UPath_ReportView__reportPrivacyPolicy idPath]) [UPath_ReportView__reportLimitingConditions idPath]) [UPath_ReportView__reportCertification idPath]) [UPath_ReportView__reportScopeOfWork idPath]) [UPath_ReportView__reportLetterOfTransmittal idPath]) [UPath_ReportView__reportSources idPath]) [UPath_ReportView__reportGlossary idPath]) [UPath_ReportView__reportBody idPath]) [UPath_ReportView__reportInspectionLocation idPath]) [UPath_ReportView__reportBriefItems idPath]) [UPath_ReportView__reportItemsOwner idPath]) [UPath_ReportView__reportItemsOwnerFull idPath]) [UPath_ReportView__reportClientGreeting idPath]) [UPath_ReportView__reportClientAddress idPath]) [UPath_ReportView__reportClientName idPath]) [UPath_ReportView__reportValueApproachInfo idPath]) [UPath_ReportView__reportValueTypeInfo idPath]) [UPath_ReportView__reportIntendedUse idPath]) [UPath_ReportView__reportFooter idPath]) [UPath_ReportView__reportHeader idPath]) [UPath_ReportView__reportTitle idPath]) [UPath_ReportView__reportAbbrevs idPath]) [UPath_ReportView__reportPreparerWebsite idPath]) [UPath_ReportView__reportPreparerEMail idPath]) [UPath_ReportView__reportPreparerAddress idPath]) [UPath_ReportView__reportPreparerEIN idPath]) [UPath_ReportView__reportPreparer idPath]) [UPath_ReportView__reportAuthors idPath]) [UPath_ReportView__reportEffectiveDate idPath]) [UPath_ReportView__reportInspectionDate idPath]) [UPath_ReportView__reportContractDate idPath]) [UPath_ReportView__reportDate idPath]) [UPath_ReportView__reportName idPath]) [UPath_ReportView__reportFolder idPath]
          upathRow _ (ReportView {}) = concat [[UPath_ReportView__reportFolder idPath],
                                               [UPath_ReportView__reportName idPath],
                                               [UPath_ReportView__reportDate idPath],
                                               [UPath_ReportView__reportContractDate idPath],
                                               [UPath_ReportView__reportInspectionDate idPath],
                                               [UPath_ReportView__reportEffectiveDate idPath],
                                               [UPath_ReportView__reportAuthors idPath],
                                               [UPath_ReportView__reportPreparer idPath],
                                               [UPath_ReportView__reportPreparerEIN idPath],
                                               [UPath_ReportView__reportPreparerAddress idPath],
                                               [UPath_ReportView__reportPreparerEMail idPath],
                                               [UPath_ReportView__reportPreparerWebsite idPath],
                                               [UPath_ReportView__reportAbbrevs idPath],
                                               [UPath_ReportView__reportTitle idPath],
                                               [UPath_ReportView__reportHeader idPath],
                                               [UPath_ReportView__reportFooter idPath],
                                               [UPath_ReportView__reportIntendedUse idPath],
                                               [UPath_ReportView__reportValueTypeInfo idPath],
                                               [UPath_ReportView__reportValueApproachInfo idPath],
                                               [UPath_ReportView__reportClientName idPath],
                                               [UPath_ReportView__reportClientAddress idPath],
                                               [UPath_ReportView__reportClientGreeting idPath],
                                               [UPath_ReportView__reportItemsOwnerFull idPath],
                                               [UPath_ReportView__reportItemsOwner idPath],
                                               [UPath_ReportView__reportBriefItems idPath],
                                               [UPath_ReportView__reportInspectionLocation idPath],
                                               [UPath_ReportView__reportBody idPath],
                                               [UPath_ReportView__reportGlossary idPath],
                                               [UPath_ReportView__reportSources idPath],
                                               [UPath_ReportView__reportLetterOfTransmittal idPath],
                                               [UPath_ReportView__reportScopeOfWork idPath],
                                               [UPath_ReportView__reportCertification idPath],
                                               [UPath_ReportView__reportLimitingConditions idPath],
                                               [UPath_ReportView__reportPrivacyPolicy idPath],
                                               [UPath_ReportView__reportPerms idPath],
                                               [UPath_ReportView__reportRevision idPath],
                                               [UPath_ReportView__reportCreated idPath],
                                               [UPath_ReportView__reportBranding idPath],
                                               [UPath_ReportView__reportStatus idPath],
                                               [UPath_ReportView__reportRedacted idPath],
                                               [UPath_ReportView__reportFlags idPath],
                                               [UPath_ReportView__reportUUID idPath],
                                               [UPath_ReportView__reportOrderByItemName idPath],
                                               [UPath_ReportView__reportDisplayItemName idPath],
                                               [UPath_ReportView__reportStandardsVersion idPath]]
          upathTree _unv (_xconc@(ReportView {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReadOnlyFilePath]))) [UPath_ReportView__reportFolder] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportDate] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportContractDate] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportInspectionDate] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportEffectiveDate] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Authors]))) [UPath_ReportView__reportAuthors] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPreparer] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPreparerEIN] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPreparerAddress] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPreparerEMail] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPreparerWebsite] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [AbbrevPairs]))) [UPath_ReportView__reportAbbrevs] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportTitle] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportHeader] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportFooter] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MaybeReportIntendedUse]))) [UPath_ReportView__reportIntendedUse] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportValueTypeInfo]))) [UPath_ReportView__reportValueTypeInfo] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportValueApproachInfo]))) [UPath_ReportView__reportValueApproachInfo] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportClientName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportClientAddress] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportClientGreeting] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportItemsOwnerFull] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportItemsOwner] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportBriefItems] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportInspectionLocation] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportElems]))) [UPath_ReportView__reportBody] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MarkupPairs]))) [UPath_ReportView__reportGlossary] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MarkupPairs]))) [UPath_ReportView__reportSources] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportLetterOfTransmittal] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportScopeOfWork] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markups]))) [UPath_ReportView__reportCertification] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markups]))) [UPath_ReportView__reportLimitingConditions] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) [UPath_ReportView__reportPrivacyPolicy] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Permissions]))) [UPath_ReportView__reportPerms] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Integer]))) [UPath_ReportView__reportRevision] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Int64]))) [UPath_ReportView__reportCreated] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Branding]))) [UPath_ReportView__reportBranding] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportStatus]))) [UPath_ReportView__reportStatus] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Bool]))) [UPath_ReportView__reportRedacted] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportFlags]))) [UPath_ReportView__reportFlags] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [UUID]))) [UPath_ReportView__reportUUID] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Bool]))) [UPath_ReportView__reportOrderByItemName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Bool]))) [UPath_ReportView__reportDisplayItemName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportStandard]))) [UPath_ReportView__reportStandardsVersion] ++ [])))))))))))))))))))))))))))))))))))))))))))))
instance PathStart Univ SaneSizeImageSize
    where data PeekOld Univ SaneSizeImageSize
              = Peek_SaneSizeImageSize_String (PathOld Univ SaneSizeImageSize String) (Maybe String)
              | Peek_SaneSizeImageSize_Double (PathOld Univ SaneSizeImageSize Double) (Maybe Double)
              | Peek_SaneSizeImageSize_Dimension (PathOld Univ SaneSizeImageSize Dimension) (Maybe Dimension)
              | Peek_SaneSizeImageSize_ImageSize (PathOld Univ SaneSizeImageSize ImageSize) (Maybe ImageSize)
              | Peek_SaneSizeImageSize_Units (PathOld Univ SaneSizeImageSize Units) (Maybe Units)
              | Peek_SaneSizeImageSize_JSONText (PathOld Univ SaneSizeImageSize JSONText) (Maybe JSONText)
              | Peek_SaneSizeImageSize_SaneSizeImageSize (PathOld Univ SaneSizeImageSize SaneSizeImageSize) (Maybe SaneSizeImageSize)
              deriving (Eq, Show)
          data UPeek Univ SaneSizeImageSize = UPeek_SaneSizeImageSize (UPath Univ SaneSizeImageSize) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_SaneSizeImageSize
          upeekPath (UPeek_SaneSizeImageSize p _) = p
          upeekValue (UPeek_SaneSizeImageSize _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_SaneSizeImageSize_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ImageSize) :: Forest (UPeek Univ ImageSize)
                                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ImageSize of
                                                                                                                                                                                                             UPeek_ImageSize _
                                                                                                                                                                                                                             _ -> upeekCons (UPath_SaneSizeImageSize_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ SaneSizeImageSize)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_SaneSizeImageSize_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ SaneSizeImageSize]
          type UPath Univ SaneSizeImageSize = UPath_SaneSizeImageSize
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_SaneSizeImageSize_View idPath]
          upathRow _ _xyz = concat [[UPath_SaneSizeImageSize_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ImageSize]))) [UPath_SaneSizeImageSize_View] ++ [])
instance PathStart Univ Item
    where data PeekOld Univ Item
              = Peek_Item_String (PathOld Univ Item String) (Maybe String)
              | Peek_Item_Bool (PathOld Univ Item Bool) (Maybe Bool)
              | Peek_Item_Double (PathOld Univ Item Double) (Maybe Double)
              | Peek_Item_Dimension (PathOld Univ Item Dimension) (Maybe Dimension)
              | Peek_Item_ImageCrop (PathOld Univ Item ImageCrop) (Maybe ImageCrop)
              | Peek_Item_ImageSize (PathOld Univ Item ImageSize) (Maybe ImageSize)
              | Peek_Item_Units (PathOld Univ Item Units) (Maybe Units)
              | Peek_Item_ImageFile (PathOld Univ Item ImageFile) (Maybe ImageFile)
              | Peek_Item_JSONText (PathOld Univ Item JSONText) (Maybe JSONText)
              | Peek_Item_Markup (PathOld Univ Item Markup) (Maybe Markup)
              | Peek_Item_EUI (PathOld Univ Item EUI) (Maybe EUI)
              | Peek_Item_MEUI (PathOld Univ Item MEUI) (Maybe MEUI)
              | Peek_Item_MaybeImageFile (PathOld Univ Item MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Item_ReportImage (PathOld Univ Item ReportImage) (Maybe ReportImage)
              | Peek_Item_ReportImages (PathOld Univ Item ReportImages) (Maybe ReportImages)
              | Peek_Item_ReportImageView (PathOld Univ Item ReportImageView) (Maybe ReportImageView)
              | Peek_Item_SaneSizeImageSize (PathOld Univ Item SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Item_Item (PathOld Univ Item Item) (Maybe Item)
              | Peek_Item_MIM (PathOld Univ Item MIM) (Maybe MIM)
              | Peek_Item_URI (PathOld Univ Item URI) (Maybe URI)
              | Peek_Item_Text (PathOld Univ Item Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Item = UPeek_Item (UPath Univ Item) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Item
          upeekPath (UPeek_Item p _) = p
          upeekValue (UPeek_Item _ x) = x
          peekTreeOld (Proxy) (_xconc@(Item {})) = mconcat [let dopath pth = case pth of
                                                                                 p@(UPath_Item_itemName _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                                            in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                                  UPeek_Text _
                                                                                                                                                                                                                             _ -> upeekCons (UPath_Item_itemName (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                 _ -> []
                                                             in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                            let dopath pth = case pth of
                                                                                 p@(UPath_Item_fields _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MIM) :: Forest (UPeek Univ MIM)
                                                                                                                          in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ MIM of
                                                                                                                                                                                                                UPeek_MIM _
                                                                                                                                                                                                                          _ -> upeekCons (UPath_Item_fields (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                 _ -> []
                                                             in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                            let dopath pth = case pth of
                                                                                 p@(UPath_Item_images _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: ReportImages) :: Forest (UPeek Univ ReportImages)
                                                                                                                          in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ ReportImages of
                                                                                                                                                                                                                UPeek_ReportImages _
                                                                                                                                                                                                                                   _ -> upeekCons (UPath_Item_images (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                 _ -> []
                                                             in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: Forest (UPeek Univ Item)
          peekRowOld (Proxy) (_xconc@(Item {})) = mconcat [let dopath pth = case pth of
                                                                                p@(UPath_Item_itemName _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                _ -> []
                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                           let dopath pth = case pth of
                                                                                p@(UPath_Item_fields _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                _ -> []
                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc,
                                                           let dopath pth = case pth of
                                                                                p@(UPath_Item_images _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                                _ -> []
                                                            in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc] :: [UPeek Univ Item]
          type UPath Univ Item = UPath_Item
          upaths _ _f r0 (_xconc@(Item {})) = foldr _f (foldr _f (foldr _f r0 [UPath_Item_images idPath]) [UPath_Item_fields idPath]) [UPath_Item_itemName idPath]
          upathRow _ (Item {}) = concat [[UPath_Item_itemName idPath], [UPath_Item_fields idPath], [UPath_Item_images idPath]]
          upathTree _unv (_xconc@(Item {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_Item_itemName] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MIM]))) [UPath_Item_fields] ++ (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [ReportImages]))) [UPath_Item_images] ++ [])))
instance PathStart Univ MIM
    where data PeekOld Univ MIM
              = Peek_MIM_JSONText (PathOld Univ MIM JSONText) (Maybe JSONText)
              | Peek_MIM_Markup (PathOld Univ MIM Markup) (Maybe Markup)
              | Peek_MIM_MIM (PathOld Univ MIM MIM) (Maybe MIM)
              | Peek_MIM_Text (PathOld Univ MIM Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ MIM = UPeek_MIM (UPath Univ MIM) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MIM
          upeekPath (UPeek_MIM p _) = p
          upeekValue (UPeek_MIM _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_Look _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Markup) :: Forest (UPeek Univ Markup)
                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Markup of
                                                                                                                                                                                             UPeek_Markup _
                                                                                                                                                                                                          _ -> upeekCons (Path_Look _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MIM)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_Look _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MIM]
          type UPath Univ MIM = UPath_MIM
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_Look k idPath) (toList _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_Look k idPath) (toList _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Markup]))) (map (\(k,
                                                                                                                                                                                     _v) -> Path_Look k) (toList _xyz)) ++ [])
instance PathStart Univ MRR
    where data PeekOld Univ MRR
              = Peek_MRR_String (PathOld Univ MRR String) (Maybe String)
              | Peek_MRR_Int64 (PathOld Univ MRR Int64) (Maybe Int64)
              | Peek_MRR_Int (PathOld Univ MRR Int) (Maybe Int)
              | Peek_MRR_Bool (PathOld Univ MRR Bool) (Maybe Bool)
              | Peek_MRR_Double (PathOld Univ MRR Double) (Maybe Double)
              | Peek_MRR_Dimension (PathOld Univ MRR Dimension) (Maybe Dimension)
              | Peek_MRR_ImageCrop (PathOld Univ MRR ImageCrop) (Maybe ImageCrop)
              | Peek_MRR_ImageSize (PathOld Univ MRR ImageSize) (Maybe ImageSize)
              | Peek_MRR_Units (PathOld Univ MRR Units) (Maybe Units)
              | Peek_MRR_ImageFile (PathOld Univ MRR ImageFile) (Maybe ImageFile)
              | Peek_MRR_Integer (PathOld Univ MRR Integer) (Maybe Integer)
              | Peek_MRR_JSONText (PathOld Univ MRR JSONText) (Maybe JSONText)
              | Peek_MRR_Markup (PathOld Univ MRR Markup) (Maybe Markup)
              | Peek_MRR_Permissions (PathOld Univ MRR Permissions) (Maybe Permissions)
              | Peek_MRR_UserIds (PathOld Univ MRR UserIds) (Maybe UserIds)
              | Peek_MRR_AbbrevPair (PathOld Univ MRR AbbrevPair) (Maybe AbbrevPair)
              | Peek_MRR_AbbrevPairs (PathOld Univ MRR AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_MRR_Author (PathOld Univ MRR Author) (Maybe Author)
              | Peek_MRR_Authors (PathOld Univ MRR Authors) (Maybe Authors)
              | Peek_MRR_Branding (PathOld Univ MRR Branding) (Maybe Branding)
              | Peek_MRR_MarkupPair (PathOld Univ MRR MarkupPair) (Maybe MarkupPair)
              | Peek_MRR_MarkupPairs (PathOld Univ MRR MarkupPairs) (Maybe MarkupPairs)
              | Peek_MRR_Markups (PathOld Univ MRR Markups) (Maybe Markups)
              | Peek_MRR_MaybeReportIntendedUse (PathOld Univ MRR MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_MRR_Report (PathOld Univ MRR Report) (Maybe Report)
              | Peek_MRR_ReportElem (PathOld Univ MRR ReportElem) (Maybe ReportElem)
              | Peek_MRR_ReportElems (PathOld Univ MRR ReportElems) (Maybe ReportElems)
              | Peek_MRR_ReportFlags (PathOld Univ MRR ReportFlags) (Maybe ReportFlags)
              | Peek_MRR_ReportStandard (PathOld Univ MRR ReportStandard) (Maybe ReportStandard)
              | Peek_MRR_ReportStatus (PathOld Univ MRR ReportStatus) (Maybe ReportStatus)
              | Peek_MRR_ReportValueApproachInfo (PathOld Univ MRR ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_MRR_ReportValueTypeInfo (PathOld Univ MRR ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_MRR_EUI (PathOld Univ MRR EUI) (Maybe EUI)
              | Peek_MRR_MEUI (PathOld Univ MRR MEUI) (Maybe MEUI)
              | Peek_MRR_MaybeImageFile (PathOld Univ MRR MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_MRR_ReportImage (PathOld Univ MRR ReportImage) (Maybe ReportImage)
              | Peek_MRR_ReportImages (PathOld Univ MRR ReportImages) (Maybe ReportImages)
              | Peek_MRR_ReadOnlyFilePath (PathOld Univ MRR ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_MRR_ReportImageView (PathOld Univ MRR ReportImageView) (Maybe ReportImageView)
              | Peek_MRR_ReportView (PathOld Univ MRR ReportView) (Maybe ReportView)
              | Peek_MRR_SaneSizeImageSize (PathOld Univ MRR SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_MRR_Item (PathOld Univ MRR Item) (Maybe Item)
              | Peek_MRR_MIM (PathOld Univ MRR MIM) (Maybe MIM)
              | Peek_MRR_MRR (PathOld Univ MRR MRR) (Maybe MRR)
              | Peek_MRR_CIString (PathOld Univ MRR CIString) (Maybe CIString)
              | Peek_MRR_URI (PathOld Univ MRR URI) (Maybe URI)
              | Peek_MRR_Text (PathOld Univ MRR Text) (Maybe Text)
              | Peek_MRR_UserId (PathOld Univ MRR UserId) (Maybe UserId)
              | Peek_MRR_UUID (PathOld Univ MRR UUID) (Maybe UUID)
              deriving (Eq, Show)
          data UPeek Univ MRR = UPeek_MRR (UPath Univ MRR) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_MRR
          upeekPath (UPeek_MRR p _) = p
          upeekValue (UPeek_MRR _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(Path_Look _k _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Report) :: Forest (UPeek Univ Report)
                                                                                                       in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Report of
                                                                                                                                                                                             UPeek_Report _
                                                                                                                                                                                                          _ -> upeekCons (Path_Look _k (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ MRR)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(Path_Look _k _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ MRR]
          type UPath Univ MRR = UPath_MRR
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 (map (\(k, _v) -> Path_Look k idPath) (toList _xyz))
          upathRow _ _xyz = concat [map (\(k, _v) -> Path_Look k idPath) (toList _xyz)]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Report]))) (map (\(k,
                                                                                                                                                                                     _v) -> Path_Look k) (toList _xyz)) ++ [])
instance PathStart Univ ReportMap
    where data PeekOld Univ ReportMap
              = Peek_ReportMap_String (PathOld Univ ReportMap String) (Maybe String)
              | Peek_ReportMap_Int64 (PathOld Univ ReportMap Int64) (Maybe Int64)
              | Peek_ReportMap_Int (PathOld Univ ReportMap Int) (Maybe Int)
              | Peek_ReportMap_Bool (PathOld Univ ReportMap Bool) (Maybe Bool)
              | Peek_ReportMap_Double (PathOld Univ ReportMap Double) (Maybe Double)
              | Peek_ReportMap_Dimension (PathOld Univ ReportMap Dimension) (Maybe Dimension)
              | Peek_ReportMap_ImageCrop (PathOld Univ ReportMap ImageCrop) (Maybe ImageCrop)
              | Peek_ReportMap_ImageSize (PathOld Univ ReportMap ImageSize) (Maybe ImageSize)
              | Peek_ReportMap_Units (PathOld Univ ReportMap Units) (Maybe Units)
              | Peek_ReportMap_ImageFile (PathOld Univ ReportMap ImageFile) (Maybe ImageFile)
              | Peek_ReportMap_Integer (PathOld Univ ReportMap Integer) (Maybe Integer)
              | Peek_ReportMap_JSONText (PathOld Univ ReportMap JSONText) (Maybe JSONText)
              | Peek_ReportMap_Markup (PathOld Univ ReportMap Markup) (Maybe Markup)
              | Peek_ReportMap_Permissions (PathOld Univ ReportMap Permissions) (Maybe Permissions)
              | Peek_ReportMap_UserIds (PathOld Univ ReportMap UserIds) (Maybe UserIds)
              | Peek_ReportMap_AbbrevPair (PathOld Univ ReportMap AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportMap_AbbrevPairs (PathOld Univ ReportMap AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportMap_Author (PathOld Univ ReportMap Author) (Maybe Author)
              | Peek_ReportMap_Authors (PathOld Univ ReportMap Authors) (Maybe Authors)
              | Peek_ReportMap_Branding (PathOld Univ ReportMap Branding) (Maybe Branding)
              | Peek_ReportMap_MarkupPair (PathOld Univ ReportMap MarkupPair) (Maybe MarkupPair)
              | Peek_ReportMap_MarkupPairs (PathOld Univ ReportMap MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportMap_Markups (PathOld Univ ReportMap Markups) (Maybe Markups)
              | Peek_ReportMap_MaybeReportIntendedUse (PathOld Univ ReportMap MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportMap_Report (PathOld Univ ReportMap Report) (Maybe Report)
              | Peek_ReportMap_ReportElem (PathOld Univ ReportMap ReportElem) (Maybe ReportElem)
              | Peek_ReportMap_ReportElems (PathOld Univ ReportMap ReportElems) (Maybe ReportElems)
              | Peek_ReportMap_ReportFlags (PathOld Univ ReportMap ReportFlags) (Maybe ReportFlags)
              | Peek_ReportMap_ReportStandard (PathOld Univ ReportMap ReportStandard) (Maybe ReportStandard)
              | Peek_ReportMap_ReportStatus (PathOld Univ ReportMap ReportStatus) (Maybe ReportStatus)
              | Peek_ReportMap_ReportValueApproachInfo (PathOld Univ ReportMap ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportMap_ReportValueTypeInfo (PathOld Univ ReportMap ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportMap_EUI (PathOld Univ ReportMap EUI) (Maybe EUI)
              | Peek_ReportMap_MEUI (PathOld Univ ReportMap MEUI) (Maybe MEUI)
              | Peek_ReportMap_MaybeImageFile (PathOld Univ ReportMap MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportMap_ReportImage (PathOld Univ ReportMap ReportImage) (Maybe ReportImage)
              | Peek_ReportMap_ReportImages (PathOld Univ ReportMap ReportImages) (Maybe ReportImages)
              | Peek_ReportMap_ReadOnlyFilePath (PathOld Univ ReportMap ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportMap_ReportImageView (PathOld Univ ReportMap ReportImageView) (Maybe ReportImageView)
              | Peek_ReportMap_ReportView (PathOld Univ ReportMap ReportView) (Maybe ReportView)
              | Peek_ReportMap_SaneSizeImageSize (PathOld Univ ReportMap SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportMap_Item (PathOld Univ ReportMap Item) (Maybe Item)
              | Peek_ReportMap_MIM (PathOld Univ ReportMap MIM) (Maybe MIM)
              | Peek_ReportMap_MRR (PathOld Univ ReportMap MRR) (Maybe MRR)
              | Peek_ReportMap_ReportMap (PathOld Univ ReportMap ReportMap) (Maybe ReportMap)
              | Peek_ReportMap_CIString (PathOld Univ ReportMap CIString) (Maybe CIString)
              | Peek_ReportMap_URI (PathOld Univ ReportMap URI) (Maybe URI)
              | Peek_ReportMap_Text (PathOld Univ ReportMap Text) (Maybe Text)
              | Peek_ReportMap_UserId (PathOld Univ ReportMap UserId) (Maybe UserId)
              | Peek_ReportMap_UUID (PathOld Univ ReportMap UUID) (Maybe UUID)
              deriving (Eq, Show)
          data UPeek Univ ReportMap = UPeek_ReportMap (UPath Univ ReportMap) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_ReportMap
          upeekPath (UPeek_ReportMap p _) = p
          upeekValue (UPeek_ReportMap _ x) = x
          peekTreeOld (Proxy) (_xconc@(ReportMap {})) = let dopath pth = case pth of
                                                                             p@(UPath_ReportMap_unReportMap _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: MRR) :: Forest (UPeek Univ MRR)
                                                                                                                                in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ MRR of
                                                                                                                                                                                                                      UPeek_MRR _
                                                                                                                                                                                                                                _ -> upeekCons (UPath_ReportMap_unReportMap (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                             _ -> []
                                                         in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ ReportMap)
          peekRowOld (Proxy) (_xconc@(ReportMap {})) = let dopath pth = case pth of
                                                                            p@(UPath_ReportMap_unReportMap _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                            _ -> []
                                                        in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ ReportMap]
          type UPath Univ ReportMap = UPath_ReportMap
          upaths _ _f r0 (_xconc@(ReportMap {})) = foldr _f r0 [UPath_ReportMap_unReportMap idPath]
          upathRow _ (ReportMap {}) = concat [[UPath_ReportMap_unReportMap idPath]]
          upathTree _unv (_xconc@(ReportMap {})) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [MRR]))) [UPath_ReportMap_unReportMap] ++ [])
instance PathStart Univ CIString
    where data PeekOld Univ CIString
              = Peek_CIString_JSONText (PathOld Univ CIString JSONText) (Maybe JSONText)
              | Peek_CIString_CIString (PathOld Univ CIString CIString) (Maybe CIString)
              | Peek_CIString_Text (PathOld Univ CIString Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ CIString = UPeek_CIString (UPath Univ CIString) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_CIString
          upeekPath (UPeek_CIString p _) = p
          upeekValue (UPeek_CIString _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_CIString_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: Text) :: Forest (UPeek Univ Text)
                                                                                                              in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ Text of
                                                                                                                                                                                                    UPeek_Text _
                                                                                                                                                                                                               _ -> upeekCons (UPath_CIString_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ CIString)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_CIString_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ CIString]
          type UPath Univ CIString = UPath_CIString
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_CIString_View idPath]
          upathRow _ _xyz = concat [[UPath_CIString_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [Text]))) [UPath_CIString_View] ++ [])
instance PathStart Univ URI
    where data PeekOld Univ URI = Peek_URI_URI (PathOld Univ URI URI) (Maybe URI) deriving (Eq, Show)
          data UPeek Univ URI = UPeek_URI (UPath Univ URI) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_URI
          upeekPath (UPeek_URI p _) = p
          upeekValue (UPeek_URI _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ URI = UPath_URI
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ Text
    where data PeekOld Univ Text
              = Peek_Text_JSONText (PathOld Univ Text JSONText) (Maybe JSONText) | Peek_Text_Text (PathOld Univ Text Text) (Maybe Text)
              deriving (Eq, Show)
          data UPeek Univ Text = UPeek_Text (UPath Univ Text) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_Text
          upeekPath (UPeek_Text p _) = p
          upeekValue (UPeek_Text _ x) = x
          peekTreeOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                   p@(UPath_Text_View _wp) -> map (\a -> let wtree = peekTreeOld Proxy (fromJust (unU' a) :: JSONText) :: Forest (UPeek Univ JSONText)
                                                                                                          in Node (upeekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: UPeek Univ JSONText of
                                                                                                                                                                                                UPeek_JSONText _
                                                                                                                                                                                                               _ -> upeekCons (UPath_Text_View (upeekPath pk)) (upeekValue pk)) wtree)) (toListOf (toLens p) _xconc :: [Univ])
                                                                   _ -> []
                                               in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: Forest (UPeek Univ Text)
          peekRowOld (Proxy) (_xconc@_xyz) = let dopath pth = case pth of
                                                                  p@(UPath_Text_View _wp) -> map (\a -> upeekCons p (Just a :: Maybe Univ)) (toListOf (toLens p) _xconc :: [Univ])
                                                                  _ -> []
                                              in upaths (Proxy :: Proxy Univ) (\pth r -> dopath pth ++ r) [] _xconc :: [UPeek Univ Text]
          type UPath Univ Text = UPath_Text
          upaths _ _f r0 (_xconc@_xyz) = foldr _f r0 [UPath_Text_View idPath]
          upathRow _ _xyz = concat [[UPath_Text_View idPath]]
          upathTree _unv (_xconc@_xyz) = Node idPath (concatMap (\f -> forestMap f (map (upathTree _unv) (mapMaybe unU' (toListOf (toLens (f idPath)) _xconc) :: [JSONText]))) [UPath_Text_View] ++ [])
instance PathStart Univ UserId
    where data PeekOld Univ UserId = Peek_UserId_UserId (PathOld Univ UserId UserId) (Maybe UserId) deriving (Eq, Show)
          data UPeek Univ UserId = UPeek_UserId (UPath Univ UserId) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_UserId
          upeekPath (UPeek_UserId p _) = p
          upeekValue (UPeek_UserId _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ UserId = UPath_UserId
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance PathStart Univ UUID
    where data PeekOld Univ UUID = Peek_UUID_UUID (PathOld Univ UUID UUID) (Maybe UUID) deriving (Eq, Show)
          data UPeek Univ UUID = UPeek_UUID (UPath Univ UUID) (Maybe Univ) deriving (Eq, Show)
          upeekCons = UPeek_UUID
          upeekPath (UPeek_UUID p _) = p
          upeekValue (UPeek_UUID _ x) = x
          peekTreeOld _ _ = []
          peekRowOld _ _ = []
          type UPath Univ UUID = UPath_UUID
          upaths _ _ r _ = r
          upathRow _ _ = []
          upathTree _ _ = Node idPath []
instance U Univ String
    where u = U1
          unU' (U1 a) = Just a
          unU' _ = Nothing
instance U Univ Int64
    where u = U2
          unU' (U2 a) = Just a
          unU' _ = Nothing
instance U Univ Bool
    where u = U4
          unU' (U4 a) = Just a
          unU' _ = Nothing
instance U Univ Double
    where u = U5
          unU' (U5 a) = Just a
          unU' _ = Nothing
instance U Univ Int
    where u = U3
          unU' (U3 a) = Just a
          unU' _ = Nothing
instance U Univ Dimension
    where u = U6
          unU' (U6 a) = Just a
          unU' _ = Nothing
instance U Univ ImageCrop
    where u = U7
          unU' (U7 a) = Just a
          unU' _ = Nothing
instance U Univ ImageSize
    where u = U8
          unU' (U8 a) = Just a
          unU' _ = Nothing
instance U Univ Units
    where u = U9
          unU' (U9 a) = Just a
          unU' _ = Nothing
instance U Univ ImageFile
    where u = U10
          unU' (U10 a) = Just a
          unU' _ = Nothing
instance U Univ Integer
    where u = U11
          unU' (U11 a) = Just a
          unU' _ = Nothing
instance U Univ JSONText
    where u = U12
          unU' (U12 a) = Just a
          unU' _ = Nothing
instance U Univ Markup
    where u = U13
          unU' (U13 a) = Just a
          unU' _ = Nothing
instance U Univ Permissions
    where u = U14
          unU' (U14 a) = Just a
          unU' _ = Nothing
instance U Univ UserIds
    where u = U15
          unU' (U15 a) = Just a
          unU' _ = Nothing
instance U Univ AbbrevPair
    where u = U16
          unU' (U16 a) = Just a
          unU' _ = Nothing
instance U Univ AbbrevPairs
    where u = U17
          unU' (U17 a) = Just a
          unU' _ = Nothing
instance U Univ Author
    where u = U18
          unU' (U18 a) = Just a
          unU' _ = Nothing
instance U Univ Authors
    where u = U19
          unU' (U19 a) = Just a
          unU' _ = Nothing
instance U Univ Branding
    where u = U20
          unU' (U20 a) = Just a
          unU' _ = Nothing
instance U Univ MarkupPair
    where u = U21
          unU' (U21 a) = Just a
          unU' _ = Nothing
instance U Univ MarkupPairs
    where u = U22
          unU' (U22 a) = Just a
          unU' _ = Nothing
instance U Univ Markups
    where u = U23
          unU' (U23 a) = Just a
          unU' _ = Nothing
instance U Univ MaybeReportIntendedUse
    where u = U24
          unU' (U24 a) = Just a
          unU' _ = Nothing
instance U Univ Report
    where u = U25
          unU' (U25 a) = Just a
          unU' _ = Nothing
instance U Univ ReportElem
    where u = U26
          unU' (U26 a) = Just a
          unU' _ = Nothing
instance U Univ ReportElems
    where u = U27
          unU' (U27 a) = Just a
          unU' _ = Nothing
instance U Univ ReportFlags
    where u = U28
          unU' (U28 a) = Just a
          unU' _ = Nothing
instance U Univ ReportIntendedUse
    where u = U29
          unU' (U29 a) = Just a
          unU' _ = Nothing
instance U Univ ReportStandard
    where u = U30
          unU' (U30 a) = Just a
          unU' _ = Nothing
instance U Univ ReportStatus
    where u = U31
          unU' (U31 a) = Just a
          unU' _ = Nothing
instance U Univ ReportValueApproachInfo
    where u = U32
          unU' (U32 a) = Just a
          unU' _ = Nothing
instance U Univ ReportValueTypeInfo
    where u = U33
          unU' (U33 a) = Just a
          unU' _ = Nothing
instance U Univ EUI
    where u = U34
          unU' (U34 a) = Just a
          unU' _ = Nothing
instance U Univ MEUI
    where u = U35
          unU' (U35 a) = Just a
          unU' _ = Nothing
instance U Univ MaybeImageFile
    where u = U36
          unU' (U36 a) = Just a
          unU' _ = Nothing
instance U Univ ReportImage
    where u = U37
          unU' (U37 a) = Just a
          unU' _ = Nothing
instance U Univ ReportImages
    where u = U38
          unU' (U38 a) = Just a
          unU' _ = Nothing
instance U Univ ReadOnlyFilePath
    where u = U39
          unU' (U39 a) = Just a
          unU' _ = Nothing
instance U Univ ReportImageView
    where u = U40
          unU' (U40 a) = Just a
          unU' _ = Nothing
instance U Univ ReportView
    where u = U41
          unU' (U41 a) = Just a
          unU' _ = Nothing
instance U Univ SaneSizeImageSize
    where u = U42
          unU' (U42 a) = Just a
          unU' _ = Nothing
instance U Univ Item
    where u = U43
          unU' (U43 a) = Just a
          unU' _ = Nothing
instance U Univ MIM
    where u = U44
          unU' (U44 a) = Just a
          unU' _ = Nothing
instance U Univ MRR
    where u = U45
          unU' (U45 a) = Just a
          unU' _ = Nothing
instance U Univ ReportMap
    where u = U46
          unU' (U46 a) = Just a
          unU' _ = Nothing
instance U Univ CIString
    where u = U47
          unU' (U47 a) = Just a
          unU' _ = Nothing
instance U Univ URI
    where u = U48
          unU' (U48 a) = Just a
          unU' _ = Nothing
instance U Univ Text
    where u = U49
          unU' (U49 a) = Just a
          unU' _ = Nothing
instance U Univ UserId
    where u = U50
          unU' (U50 a) = Just a
          unU' _ = Nothing
instance U Univ UUID
    where u = U51
          unU' (U51 a) = Just a
          unU' _ = Nothing
instance HasAuthor Author
    where lens_author = id
          lens_Author_authorCredentials f (Author x1 x2) = fmap (\y1 -> Author x1 y1) (f x2)
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName f (Author x1 x2) = fmap (\y1 -> Author y1 x2) (f x1)
          {-# INLINE lens_Author_authorName #-}
instance HasBool Bool
    where lens_bool = id
instance HasBranding Branding
    where lens_branding = id
instance HasCIString CIString
    where lens_cIString = id
          lens_CIString_unCIString = iso (\(CIString x) -> x) CIString
          {-# INLINE lens_CIString_unCIString #-}
instance HasDimension Dimension
    where lens_dimension = id
instance HasDouble Double
    where lens_double = id
instance HasImageCrop ImageCrop
    where lens_imageCrop = id
          lens_ImageCrop_bottomCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageCrop_topCrop #-}
instance HasImageFile ImageFile
    where lens_imageFile = id
          lens_ImageFile_imageFile f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance HasImageSize ImageSize
    where lens_imageSize = id
          lens_ImageSize_dim f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize y1 x2 x3) (f x1)
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 y1 x3) (f x2)
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 x2 y1) (f x3)
          {-# INLINE lens_ImageSize_units #-}
instance HasInt Int
    where lens_int = id
instance HasInt64 Int64
    where lens_int64 = id
instance HasInteger Integer
    where lens_integer = id
instance HasItem Item
    where lens_item = id
          lens_Item_fields f (Item x1 x2 x3) = fmap (\y1 -> Item x1 y1 x3) (f x2)
          {-# INLINE lens_Item_fields #-}
          lens_Item_images f (Item x1 x2 x3) = fmap (\y1 -> Item x1 x2 y1) (f x3)
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName f (Item x1 x2 x3) = fmap (\y1 -> Item y1 x2 x3) (f x1)
          {-# INLINE lens_Item_itemName #-}
instance HasJSONText JSONText
    where lens_jSONText = id
          lens_JSONText_unJSONText = iso (\(JSONText x) -> x) JSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance HasMarkup Markup
    where lens_markup = id
          lens_Markup_htmlText _ (Markdown x1) = pure (Markdown x1)
          lens_Markup_htmlText f (Html x1) = fmap (\y1 -> Html y1) (f x1)
          lens_Markup_htmlText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_htmlText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_htmlText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText f (Markdown x1) = fmap (\y1 -> Markdown y1) (f x1)
          lens_Markup_markdownText _ (Html x1) = pure (Html x1)
          lens_Markup_markdownText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_markdownText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_markdownText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_markdownText #-}
instance HasPermissions Permissions
    where lens_permissions = id
          lens_Permissions_owner f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions y1 x2 x3) (f x1)
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 x2 y1) (f x3)
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 y1 x3) (f x2)
          {-# INLINE lens_Permissions_writers #-}
instance HasReport Report
    where lens_report = id
          lens_Report_reportAbbrevs f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate f (Report x1
                                                   x2
                                                   x3
                                                   x4
                                                   x5
                                                   x6
                                                   x7
                                                   x8
                                                   x9
                                                   x10
                                                   x11
                                                   x12
                                                   x13
                                                   x14
                                                   x15
                                                   x16
                                                   x17
                                                   x18
                                                   x19
                                                   x20
                                                   x21
                                                   x22
                                                   x23
                                                   x24
                                                   x25
                                                   x26
                                                   x27
                                                   x28
                                                   x29
                                                   x30
                                                   x31
                                                   x32
                                                   x33
                                                   x34
                                                   x35
                                                   x36
                                                   x37
                                                   x38
                                                   x39
                                                   x40
                                                   x41
                                                   x42
                                                   x43
                                                   x44
                                                   x45) = fmap (\y1 -> Report x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal f (Report x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion f (Report x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo f (Report x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance HasReportElem ReportElem
    where lens_reportElem = id
          lens_ReportElem_elemItem f (ReportItem x1) = fmap (\y1 -> ReportItem y1) (f x1)
          lens_ReportElem_elemItem _ (ReportParagraph x1) = pure (ReportParagraph x1)
          lens_ReportElem_elemItem _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText _ (ReportItem x1) = pure (ReportItem x1)
          lens_ReportElem_elemText f (ReportParagraph x1) = fmap (\y1 -> ReportParagraph y1) (f x1)
          lens_ReportElem_elemText _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemText #-}
instance HasReportFlags ReportFlags
    where lens_reportFlags = id
          lens_ReportFlags_hideEmptyItemFields = iso (\(ReportFlags x) -> x) ReportFlags
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance HasReportImage ReportImage
    where lens_reportImage = id
          lens_ReportImage_picCaption f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance HasReportImageView ReportImageView
    where lens_reportImageView = id
          lens_ReportImageView__picCaption f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance HasReportIntendedUse ReportIntendedUse
    where lens_reportIntendedUse = id
instance HasReportMap ReportMap
    where lens_reportMap = id
          lens_ReportMap_unReportMap = iso (\(ReportMap x) -> x) ReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
instance HasReportStandard ReportStandard
    where lens_reportStandard = id
          lens_ReportStandard_unReportStandard = iso (\(ReportStandard x) -> x) ReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance HasReportStatus ReportStatus
    where lens_reportStatus = id
instance HasReportValueApproachInfo ReportValueApproachInfo
    where lens_reportValueApproachInfo = id
          lens_ReportValueApproachInfo_reportValueApproachDescription f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo x1 y1) (f x2)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo y1 x2) (f x1)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance HasReportValueTypeInfo ReportValueTypeInfo
    where lens_reportValueTypeInfo = id
          lens_ReportValueTypeInfo_reportValueTypeDefinition f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 x2 y1) (f x3)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 y1 x3) (f x2)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo y1 x2 x3) (f x1)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance HasReportView ReportView
    where lens_reportView = id
          lens_ReportView__reportAbbrevs f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate f (ReportView x1
                                                            x2
                                                            x3
                                                            x4
                                                            x5
                                                            x6
                                                            x7
                                                            x8
                                                            x9
                                                            x10
                                                            x11
                                                            x12
                                                            x13
                                                            x14
                                                            x15
                                                            x16
                                                            x17
                                                            x18
                                                            x19
                                                            x20
                                                            x21
                                                            x22
                                                            x23
                                                            x24
                                                            x25
                                                            x26
                                                            x27
                                                            x28
                                                            x29
                                                            x30
                                                            x31
                                                            x32
                                                            x33
                                                            x34
                                                            x35
                                                            x36
                                                            x37
                                                            x38
                                                            x39
                                                            x40
                                                            x41
                                                            x42
                                                            x43
                                                            x44
                                                            x45) = fmap (\y1 -> ReportView x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal f (ReportView x1
                                                                   x2
                                                                   x3
                                                                   x4
                                                                   x5
                                                                   x6
                                                                   x7
                                                                   x8
                                                                   x9
                                                                   x10
                                                                   x11
                                                                   x12
                                                                   x13
                                                                   x14
                                                                   x15
                                                                   x16
                                                                   x17
                                                                   x18
                                                                   x19
                                                                   x20
                                                                   x21
                                                                   x22
                                                                   x23
                                                                   x24
                                                                   x25
                                                                   x26
                                                                   x27
                                                                   x28
                                                                   x29
                                                                   x30
                                                                   x31
                                                                   x32
                                                                   x33
                                                                   x34
                                                                   x35
                                                                   x36
                                                                   x37
                                                                   x38
                                                                   x39
                                                                   x40
                                                                   x41
                                                                   x42
                                                                   x43
                                                                   x44
                                                                   x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion f (ReportView x1
                                                                x2
                                                                x3
                                                                x4
                                                                x5
                                                                x6
                                                                x7
                                                                x8
                                                                x9
                                                                x10
                                                                x11
                                                                x12
                                                                x13
                                                                x14
                                                                x15
                                                                x16
                                                                x17
                                                                x18
                                                                x19
                                                                x20
                                                                x21
                                                                x22
                                                                x23
                                                                x24
                                                                x25
                                                                x26
                                                                x27
                                                                x28
                                                                x29
                                                                x30
                                                                x31
                                                                x32
                                                                x33
                                                                x34
                                                                x35
                                                                x36
                                                                x37
                                                                x38
                                                                x39
                                                                x40
                                                                x41
                                                                x42
                                                                x43
                                                                x44
                                                                x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo f (ReportView x1
                                                                 x2
                                                                 x3
                                                                 x4
                                                                 x5
                                                                 x6
                                                                 x7
                                                                 x8
                                                                 x9
                                                                 x10
                                                                 x11
                                                                 x12
                                                                 x13
                                                                 x14
                                                                 x15
                                                                 x16
                                                                 x17
                                                                 x18
                                                                 x19
                                                                 x20
                                                                 x21
                                                                 x22
                                                                 x23
                                                                 x24
                                                                 x25
                                                                 x26
                                                                 x27
                                                                 x28
                                                                 x29
                                                                 x30
                                                                 x31
                                                                 x32
                                                                 x33
                                                                 x34
                                                                 x35
                                                                 x36
                                                                 x37
                                                                 x38
                                                                 x39
                                                                 x40
                                                                 x41
                                                                 x42
                                                                 x43
                                                                 x44
                                                                 x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance HasText Text
    where lens_text = id
instance HasURI URI
    where lens_uRI = id
          lens_URI_uriAuthority f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_URI_uriScheme #-}
instance HasUUID UUID
    where lens_uUID = id
instance HasUnits Units
    where lens_units = id
instance HasUserId UserId
    where lens_userId = id
          lens_UserId__unUserId = iso (\(UserId x) -> x) UserId
          {-# INLINE lens_UserId__unUserId #-}
instance Describe (PeekOld Univ String)
    where describe' _f (Peek_String_JSONText (_p@(Path_String_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ JSONText);
                                                                                    top = describe' _f (Proxy :: Proxy String)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy String)
instance Describe (PeekOld Univ Int64)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ Bool)
    where describe' _f (Peek_Bool_String (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                              top = describe' _f (Proxy :: Proxy Bool)}
                                                                          in maybe top Just next
          describe' _f (Peek_Bool_JSONText (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                top = describe' _f (Proxy :: Proxy Bool)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Bool)
instance Describe (PeekOld Univ Double)
    where describe' _f (Peek_Double_String (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                  top = describe' _f (Proxy :: Proxy Double)}
                                                                              in maybe top Just next
          describe' _f (Peek_Double_JSONText (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                    top = describe' _f (Proxy :: Proxy Double)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Double)
instance Describe (PeekOld Univ Int)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ Dimension)
    where describe' _f (Peek_Dimension_JSONText (_p@(Path_Dimension_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ JSONText);
                                                                                          top = describe' _f (Proxy :: Proxy Dimension)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Dimension)
instance Describe (PeekOld Univ ImageCrop)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ ImageSize)
    where describe' _f (Peek_ImageSize_Dimension (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ Dimension);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Dimension);
                                                                                         top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ImageSize_String (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Double);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_Double (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ Double);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Double);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_Units (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ Units);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Units);
                                                                                           top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ImageSize)
instance Describe (PeekOld Univ Units)
    where describe' _f (Peek_Units_JSONText (_p@(Path_Units_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ JSONText);
                                                                                  top = describe' _f (Proxy :: Proxy Units)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Units)
instance Describe (PeekOld Univ ImageFile)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ Integer)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ JSONText)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ Markup)
    where describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                            top = describe' _f (Proxy :: Proxy Markup)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Markup)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markup)
instance Describe (PeekOld Univ Permissions)
    where describe' _f (Peek_Permissions_UserId (_p@(Path_Permissions_owner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "owner");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserId) :: PeekOld Univ UserId);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ UserIds);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ UserIds);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ UserIds);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ UserIds);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ UserIds);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ UserIds);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Permissions)
instance Describe (PeekOld Univ UserIds)
    where describe' _f (Peek_UserIds_JSONText (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                      top = describe' _f (Proxy :: Proxy UserIds)}
                                                                                  in maybe top Just next
          describe' _f (Peek_UserIds_Text (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                  top = describe' _f (Proxy :: Proxy UserIds)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy UserIds)
instance Describe (PeekOld Univ AbbrevPair)
    where describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ CIString);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_CIString (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ CIString);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ CIString);
                                                                              top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPair)
instance Describe (PeekOld Univ AbbrevPairs)
    where describe' _f (Peek_AbbrevPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ AbbrevPair);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ AbbrevPair);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPairs_AbbrevPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPair) :: PeekOld Univ AbbrevPair);
                                                                                     top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_AbbrevPairs_CIString (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ AbbrevPair);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ AbbrevPair);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPairs)
instance Describe (PeekOld Univ Author)
    where describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("Author", "Author", Right "authorName");
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                          top = describe' _f (Proxy :: Proxy Author)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Author", "Author", Right "authorName");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                        top = describe' _f (Proxy :: Proxy Author)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Author", "Author", Right "authorName");
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                      top = describe' _f (Proxy :: Proxy Author)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy Author)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy Author)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                             top = describe' _f (Proxy :: Proxy Author)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Author)
instance Describe (PeekOld Univ Authors)
    where describe' _f (Peek_Authors_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Author);
                                                                               top = describe' _f (Proxy :: Proxy Authors)}
                                                                           in maybe top Just next
          describe' _f (Peek_Authors_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Author);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Author (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Author) :: PeekOld Univ Author);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Author);
                                                                           top = describe' _f (Proxy :: Proxy Authors)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Authors)
instance Describe (PeekOld Univ Branding)
    where describe' _f (Peek_Branding_JSONText (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Branding)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Branding_Text (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Branding)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Branding)
instance Describe (PeekOld Univ MarkupPair)
    where describe' _f (Peek_MarkupPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                  top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                            in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                              top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_MarkupPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPair)
instance Describe (PeekOld Univ MarkupPairs)
    where describe' _f (Peek_MarkupPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MarkupPair);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ MarkupPair);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPairs_MarkupPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ MarkupPair);
                                                                                     top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MarkupPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ MarkupPair);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPairs)
instance Describe (PeekOld Univ Markups)
    where describe' _f (Peek_Markups_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy Markups)}
                                                                           in maybe top Just next
          describe' _f (Peek_Markups_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                             top = describe' _f (Proxy :: Proxy Markups)}
                                                                         in maybe top Just next
          describe' _f (Peek_Markups_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                           top = describe' _f (Proxy :: Proxy Markups)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markups)
instance Describe (PeekOld Univ MaybeReportIntendedUse)
    where describe' _f (Peek_MaybeReportIntendedUse_String (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Nothing;
                                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                                                  top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeReportIntendedUse_JSONText (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Nothing;
                                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                                                    top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)
instance Describe (PeekOld Univ Report)
    where describe' _f (Peek_Report_String (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Int64 (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int64) :: PeekOld Univ ReportView);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_Int (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int) :: PeekOld Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Bool (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_Double (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Dimension (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageCrop (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Units (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportView);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_ImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Integer (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Integer) :: PeekOld Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_JSONText (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_Markup (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Permissions (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Permissions) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_UserIds (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_AbbrevPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPair) :: PeekOld Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_AbbrevPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPairs) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Author (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Author) :: PeekOld Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Authors (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Authors) :: PeekOld Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_Branding (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Branding) :: PeekOld Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_MarkupPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_MarkupPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPairs) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Markups (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markups) :: PeekOld Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_MaybeReportIntendedUse (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeReportIntendedUse) :: PeekOld Univ ReportView);
                                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                                              in maybe top Just next
          describe' _f (Peek_Report_ReportElem (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElem) :: PeekOld Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_ReportElems (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElems) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportFlags (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportFlags) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportStandard (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStandard) :: PeekOld Univ ReportView);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportStatus (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStatus) :: PeekOld Univ ReportView);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReportValueApproachInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Nothing;
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueApproachInfo) :: PeekOld Univ ReportView);
                                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                                               in maybe top Just next
          describe' _f (Peek_Report_ReportValueTypeInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueTypeInfo) :: PeekOld Univ ReportView);
                                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Report_EUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_MEUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MaybeImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportView);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportImage (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportImages (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ ReportView);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReadOnlyFilePath (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReadOnlyFilePath) :: PeekOld Univ ReportView);
                                                                                            top = describe' _f (Proxy :: Proxy Report)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Report_ReportImageView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportView);
                                                                                           top = describe' _f (Proxy :: Proxy Report)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Report_ReportView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportView) :: PeekOld Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_SaneSizeImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportView);
                                                                                             top = describe' _f (Proxy :: Proxy Report)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Report_Item (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MIM (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_CIString (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_URI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Text (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_UserId (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserId) :: PeekOld Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_UUID (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe UUID) :: PeekOld Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Report)
instance Describe (PeekOld Univ ReportElem)
    where describe' _f (Peek_ReportElem_String (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Bool (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_Double (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Dimension (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageCrop (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_Units (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ Item);
                                                                                             top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportElem_ImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Item);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_EUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_MEUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MaybeImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ Item);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImage (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ Item);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImages (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ Item);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImageView (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ Item);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElem_SaneSizeImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ Item);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElem_Item (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MIM (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_URI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElem)
instance Describe (PeekOld Univ ReportElems)
    where describe' _f (Peek_ReportElems_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportElem);
                                                                                top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportElems_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportElem);
                                                                                   top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                               in maybe top Just next
          describe' _f (Peek_ReportElems_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_ReportElem (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElem) :: PeekOld Univ ReportElem);
                                                                                     top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportElems_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportElem);
                                                                                         top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ ReportElem);
                                                                                      top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImages (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ ReportElem);
                                                                                       top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportElem);
                                                                                          top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportElems_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportElem);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElems_Item (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MIM (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElems)
instance Describe (PeekOld Univ ReportFlags)
    where describe' _f (Peek_ReportFlags_String (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Bool);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportFlags_Bool (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Bool);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportFlags_JSONText (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Bool);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportFlags)
instance Describe (PeekOld Univ ReportIntendedUse)
    where describe' _f (Peek_ReportIntendedUse_String (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportIntendedUse_JSONText (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportIntendedUse)
instance Describe (PeekOld Univ ReportStandard)
    where describe' _f (Peek_ReportStandard_Int (_p@(Path_ReportStandard_unReportStandard _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportStandard", "ReportStandard", Right "unReportStandard");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int) :: PeekOld Univ Int);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportStandard)}
                                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStandard)
instance Describe (PeekOld Univ ReportStatus)
    where describe' _f (Peek_ReportStatus_String (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                              top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportStatus_JSONText (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Nothing;
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                                top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStatus)
instance Describe (PeekOld Univ ReportValueApproachInfo)
    where describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                         String,
                                                                                                                                                         Either Int String));
                                                                                                                                         wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                       String,
                                                                                                                                                       Either Int String));
                                                                                                                                       wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                                       top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                     String,
                                                                                                                                                     Either Int String));
                                                                                                                                     wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                                                     top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                                String,
                                                                                                                                                                Either Int String));
                                                                                                                                                wfld = Just ("ReportValueApproachInfo",
                                                                                                                                                             "ReportValueApproachInfo",
                                                                                                                                                             Right "reportValueApproachDescription");
                                                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                              String,
                                                                                                                                                              Either Int String));
                                                                                                                                              wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                                              top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                            String,
                                                                                                                                                            Either Int String));
                                                                                                                                            wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                                                            top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueApproachInfo)
instance Describe (PeekOld Univ ReportValueTypeInfo)
    where describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                             String,
                                                                                                                                             Either Int String));
                                                                                                                             wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                         wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                    String,
                                                                                                                                                    Either Int String));
                                                                                                                                    wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                                    top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                  String,
                                                                                                                                                  Either Int String));
                                                                                                                                  wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                                  top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                String,
                                                                                                                                                Either Int String));
                                                                                                                                wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                   String,
                                                                                                                                                   Either Int String));
                                                                                                                                   wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                                   top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                 String,
                                                                                                                                                 Either Int String));
                                                                                                                                 wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                                 top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueTypeInfo)
instance Describe (PeekOld Univ EUI)
    where describe' _f (Peek_EUI_URI (_p@(Path_Left _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                     wfld = Nothing;
                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ URI);
                                                                     top = describe' _f (Proxy :: Proxy EUI)}
                                                                 in maybe top Just next
          describe' _f (Peek_EUI_ImageFile (_p@(Path_Right _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ImageFile);
                                                                            top = describe' _f (Proxy :: Proxy EUI)}
                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy EUI)
instance Describe (PeekOld Univ MEUI)
    where describe' _f (Peek_MEUI_ImageFile (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ EUI);
                                                                            top = describe' _f (Proxy :: Proxy MEUI)}
                                                                        in maybe top Just next
          describe' _f (Peek_MEUI_EUI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ EUI);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f (Peek_MEUI_URI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ EUI);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MEUI)
instance Describe (PeekOld Univ MaybeImageFile)
    where describe' _f (Peek_MaybeImageFile_String (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                                  top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeImageFile_JSONText (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                                    top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeImageFile)
instance Describe (PeekOld Univ ReportImage)
    where describe' _f (Peek_ReportImage_String (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Bool (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_Double (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Dimension (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageCrop (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_Units (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportImageView);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImage_ImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_JSONText (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportImageView);
                                                                                              top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportImage_Markup (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_EUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportImageView);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_MEUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_MaybeImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportImageView);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImage_ReportImageView (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Nothing;
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportImageView);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImage_SaneSizeImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportImageView);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImage_URI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportImageView);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_Text (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImage)
instance Describe (PeekOld Univ ReportImages)
    where describe' _f (Peek_ReportImages_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportImage);
                                                                                 top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportImages_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportImage);
                                                                                    top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportImages_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportImage);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportImage);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ ReportImage);
                                                                                       top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportImage);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImages_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportImage);
                                                                                             top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImages_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportImage);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImages)
instance Describe (PeekOld Univ ReadOnlyFilePath)
    where describe' _f (Peek_ReadOnlyFilePath_String (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Nothing;
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ String);
                                                                                                      top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReadOnlyFilePath_JSONText (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ String);
                                                                                                        top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                    in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReadOnlyFilePath)
instance Describe (PeekOld Univ ReportImageView)
    where describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ SaneSizeImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Double (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ SaneSizeImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Dimension (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ SaneSizeImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ SaneSizeImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Units (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ SaneSizeImageSize);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ SaneSizeImageSize);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_SaneSizeImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ SaneSizeImageSize);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageCrop (_p@(Path_ReportImageView__picCrop _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCrop");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ImageCrop);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_Markup (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Text (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageFile (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ MEUI);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_EUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ MEUI);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_MEUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ MEUI);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_URI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ MEUI);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MaybeImageFile);
                                                                                                                    top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MaybeImageFile);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                            wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ MaybeImageFile);
                                                                                                                            top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MaybeImageFile);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MaybeImageFile);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ MaybeImageFile);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MaybeImageFile);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MaybeImageFile);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ MaybeImageFile);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Bool);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_Bool (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Bool);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Bool);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MaybeImageFile);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MaybeImageFile);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                              String,
                                                                                                                                              Either Int String));
                                                                                                                              wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ MaybeImageFile);
                                                                                                                              top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImageView)
instance Describe (PeekOld Univ ReportView)
    where describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReadOnlyFilePath);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReadOnlyFilePath);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReadOnlyFilePath (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReadOnlyFilePath) :: PeekOld Univ ReadOnlyFilePath);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Authors);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Authors);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Author (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Author) :: PeekOld Univ Authors);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Authors (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Authors) :: PeekOld Univ Authors);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Authors);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ AbbrevPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ AbbrevPairs);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPair (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPair) :: PeekOld Univ AbbrevPairs);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPairs (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPairs) :: PeekOld Univ AbbrevPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_CIString (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ AbbrevPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ AbbrevPairs);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MaybeReportIntendedUse);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MaybeReportIntendedUse);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_MaybeReportIntendedUse (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeReportIntendedUse) :: PeekOld Univ MaybeReportIntendedUse);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportValueTypeInfo);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportValueTypeInfo);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueTypeInfo (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueTypeInfo) :: PeekOld Univ ReportValueTypeInfo);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportValueTypeInfo);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportValueApproachInfo);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportValueApproachInfo);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueApproachInfo (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueApproachInfo) :: PeekOld Univ
                                                                                                                                                                                                                              ReportValueApproachInfo);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportValueApproachInfo);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Double (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Dimension (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageCrop (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Units (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportElems);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_ImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportElems);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_ReportElem (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElem) :: PeekOld Univ ReportElems);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportElems (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElems) :: PeekOld Univ ReportElems);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_EUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_MEUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MaybeImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportElems);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_ReportImage (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ ReportElems);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_ReportImages (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ ReportElems);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_ReportImageView (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportElems);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_SaneSizeImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportElems);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Item (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MIM (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_URI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MarkupPairs);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ MarkupPairs);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ MarkupPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPairs) :: PeekOld Univ MarkupPairs);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ MarkupPairs);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MarkupPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ MarkupPairs);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ MarkupPairs);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPairs) :: PeekOld Univ MarkupPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ MarkupPairs);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markups);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markups);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markups) :: PeekOld Univ Markups);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markups);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markups);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markups);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markups) :: PeekOld Univ Markups);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markups);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Permissions);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Permissions (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Permissions) :: PeekOld Univ Permissions);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UserIds (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ Permissions);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Permissions);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_UserId (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserId) :: PeekOld Univ Permissions);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Integer (_p@(Path_ReportView__reportRevision _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportRevision");
                                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe Integer) :: PeekOld Univ Integer);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Int64 (_p@(Path_ReportView__reportCreated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportCreated");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int64) :: PeekOld Univ Int64);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Branding);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Branding (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Branding) :: PeekOld Univ Branding);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Branding);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportStatus);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportStatus);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportStatus (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStatus) :: PeekOld Univ ReportStatus);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Bool);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Bool);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Bool);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportFlags);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportFlags);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportFlags);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ReportFlags (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportFlags) :: PeekOld Univ ReportFlags);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UUID (_p@(Path_ReportView__reportUUID _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportUUID");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe UUID) :: PeekOld Univ UUID);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Bool);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Bool);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Bool);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Bool);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Bool);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Bool);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Int (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int) :: PeekOld Univ ReportStandard);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportStandard (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStandard) :: PeekOld Univ ReportStandard);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                 in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportView)
instance Describe (PeekOld Univ SaneSizeImageSize)
    where describe' _f (Peek_SaneSizeImageSize_String (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Double (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Dimension (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_ImageSize (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Units (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ImageSize);
                                                                                                       top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_JSONText (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ImageSize);
                                                                                                          top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy SaneSizeImageSize)
instance Describe (PeekOld Univ Item)
    where describe' _f (Peek_Item_JSONText (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Item", "Item", Right "itemName");
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Item)}
                                                                                in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "itemName");
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "fields");
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MIM);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "fields");
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ MIM);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_MIM (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "fields");
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ MIM);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "fields");
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ MIM);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_String (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Bool (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_Double (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Dimension (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageCrop (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_Units (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Just ("Item", "Item", Right "images");
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ ReportImages);
                                                                               top = describe' _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just next
          describe' _f (Peek_Item_ImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "images");
                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ ReportImages);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_EUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ ReportImages);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_MEUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_MaybeImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Item", "Item", Right "images");
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ ReportImages);
                                                                                        top = describe' _f (Proxy :: Proxy Item)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Item_ReportImage (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Just ("Item", "Item", Right "images");
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ ReportImages);
                                                                                     top = describe' _f (Proxy :: Proxy Item)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Item_ReportImages (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Item", "Item", Right "images");
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ ReportImages);
                                                                                      top = describe' _f (Proxy :: Proxy Item)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Item_ReportImageView (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("Item", "Item", Right "images");
                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ ReportImages);
                                                                                         top = describe' _f (Proxy :: Proxy Item)}
                                                                                     in maybe top Just next
          describe' _f (Peek_Item_SaneSizeImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("Item", "Item", Right "images");
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ ReportImages);
                                                                                           top = describe' _f (Proxy :: Proxy Item)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Item_URI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ ReportImages);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Item)
instance Describe (PeekOld Univ MIM)
    where describe' _f (Peek_MIM_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Markup);
                                                                             top = describe' _f (Proxy :: Proxy MIM)}
                                                                         in maybe top Just next
          describe' _f (Peek_MIM_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Markup);
                                                                           top = describe' _f (Proxy :: Proxy MIM)}
                                                                       in maybe top Just next
          describe' _f (Peek_MIM_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Markup);
                                                                         top = describe' _f (Proxy :: Proxy MIM)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MIM)
instance Describe (PeekOld Univ MRR)
    where describe' _f (Peek_MRR_String (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Int64 (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int64) :: PeekOld Univ Report);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_Int (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int) :: PeekOld Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Bool (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_Double (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Dimension (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageCrop (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Units (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ Report);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_ImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Integer (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Integer) :: PeekOld Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Permissions (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Permissions) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_UserIds (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPair) :: PeekOld Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPairs) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Author (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Author) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Authors (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Authors) :: PeekOld Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_Branding (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Branding) :: PeekOld Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_MarkupPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_MarkupPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPairs) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Markups (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markups) :: PeekOld Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_MaybeReportIntendedUse (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeReportIntendedUse) :: PeekOld Univ Report);
                                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Report (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe Report) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_ReportElem (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElem) :: PeekOld Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_ReportElems (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElems) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportFlags (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportFlags) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportStandard (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStandard) :: PeekOld Univ Report);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportStatus (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStatus) :: PeekOld Univ Report);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReportValueApproachInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueApproachInfo) :: PeekOld Univ Report);
                                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                                        in maybe top Just next
          describe' _f (Peek_MRR_ReportValueTypeInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueTypeInfo) :: PeekOld Univ Report);
                                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                                    in maybe top Just next
          describe' _f (Peek_MRR_EUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_MEUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MaybeImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ Report);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportImage (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportImages (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ Report);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReadOnlyFilePath (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReadOnlyFilePath) :: PeekOld Univ Report);
                                                                                     top = describe' _f (Proxy :: Proxy MRR)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MRR_ReportImageView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ Report);
                                                                                    top = describe' _f (Proxy :: Proxy MRR)}
                                                                                in maybe top Just next
          describe' _f (Peek_MRR_ReportView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportView) :: PeekOld Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_SaneSizeImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ Report);
                                                                                      top = describe' _f (Proxy :: Proxy MRR)}
                                                                                  in maybe top Just next
          describe' _f (Peek_MRR_Item (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MIM (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_CIString (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_URI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_UserId (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserId) :: PeekOld Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_UUID (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe UUID) :: PeekOld Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MRR)
instance Describe (PeekOld Univ ReportMap)
    where describe' _f (Peek_ReportMap_String (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe String) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Int64 (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int64) :: PeekOld Univ MRR);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_Int (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe Int) :: PeekOld Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Bool (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Bool) :: PeekOld Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_Double (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Double) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Dimension (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe Dimension) :: PeekOld Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageCrop (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageCrop) :: PeekOld Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageSize) :: PeekOld Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Units (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (peekConsOld _wp (undefined :: Maybe Units) :: PeekOld Univ MRR);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_ImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekConsOld _wp (undefined :: Maybe ImageFile) :: PeekOld Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Integer (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Integer) :: PeekOld Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_JSONText (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_Markup (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markup) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Permissions (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Permissions) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_UserIds (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserIds) :: PeekOld Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPair) :: PeekOld Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe AbbrevPairs) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Author (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Author) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Authors (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Authors) :: PeekOld Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_Branding (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe Branding) :: PeekOld Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPair) :: PeekOld Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe MarkupPairs) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Markups (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe Markups) :: PeekOld Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeReportIntendedUse (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeReportIntendedUse) :: PeekOld Univ MRR);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Report (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe Report) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElem (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElem) :: PeekOld Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElems (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportElems) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportFlags (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportFlags) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStandard (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStandard) :: PeekOld Univ MRR);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStatus (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportStatus) :: PeekOld Univ MRR);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueApproachInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueApproachInfo) :: PeekOld Univ MRR);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueTypeInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportValueTypeInfo) :: PeekOld Univ MRR);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_EUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe EUI) :: PeekOld Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MEUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe MEUI) :: PeekOld Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (peekConsOld _wp (undefined :: Maybe MaybeImageFile) :: PeekOld Univ MRR);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImage (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImage) :: PeekOld Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImages (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImages) :: PeekOld Univ MRR);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReadOnlyFilePath (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                         next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReadOnlyFilePath) :: PeekOld Univ MRR);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImageView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportImageView) :: PeekOld Univ MRR);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportMap_ReportView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekConsOld _wp (undefined :: Maybe ReportView) :: PeekOld Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_SaneSizeImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                          next = describe' wfld (peekConsOld _wp (undefined :: Maybe SaneSizeImageSize) :: PeekOld Univ MRR);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportMap_Item (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Item) :: PeekOld Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MIM (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe MIM) :: PeekOld Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MRR (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe MRR) :: PeekOld Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_CIString (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekConsOld _wp (undefined :: Maybe CIString) :: PeekOld Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_URI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekConsOld _wp (undefined :: Maybe URI) :: PeekOld Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Text (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_UserId (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekConsOld _wp (undefined :: Maybe UserId) :: PeekOld Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_UUID (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekConsOld _wp (undefined :: Maybe UUID) :: PeekOld Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportMap)
instance Describe (PeekOld Univ CIString)
    where describe' _f (Peek_CIString_JSONText (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy CIString)}
                                                                                    in maybe top Just next
          describe' _f (Peek_CIString_Text (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekConsOld _wp (undefined :: Maybe Text) :: PeekOld Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy CIString)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy CIString)
instance Describe (PeekOld Univ URI)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ Text)
    where describe' _f (Peek_Text_JSONText (_p@(Path_Text_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekConsOld _wp (undefined :: Maybe JSONText) :: PeekOld Univ JSONText);
                                                                                top = describe' _f (Proxy :: Proxy Text)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Text)
instance Describe (PeekOld Univ UserId)
    where describe' _ _ = Nothing
instance Describe (PeekOld Univ UUID)
    where describe' _ _ = Nothing
instance Describe (Proxy Int64)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int64"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Int)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Dimension)
    where describe' _f _ = case _f of
                               Nothing -> Just "Dimension"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageCrop)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Crop"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Units)
    where describe' _f _ = case _f of
                               Nothing -> Just "Units"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Integer)
    where describe' _f _ = case _f of
                               Nothing -> Just "Integer"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Permissions)
    where describe' _f _ = case _f of
                               Nothing -> Just "Permissions"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserIds)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Ids"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Author)
    where describe' _f _ = case _f of
                               Nothing -> Just "Author"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Authors)
    where describe' _f _ = case _f of
                               Nothing -> Just "Authors"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Branding)
    where describe' _f _ = case _f of
                               Nothing -> Just "Branding"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Markups)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markups"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Report)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElem)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elem"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElems)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elems"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportFlags)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Flags"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStandard)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Standard"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStatus)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Status"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueApproachInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Approach Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueTypeInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Type Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy EUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "EUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MEUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "MEUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImage)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImages)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Images"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReadOnlyFilePath)
    where describe' _f _ = case _f of
                               Nothing -> Just "Read Only File Path"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImageView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy SaneSizeImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Sane Size Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Item)
    where describe' _f _ = case _f of
                               Nothing -> Just "Item"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MIM)
    where describe' _f _ = case _f of
                               Nothing -> Just "MIM"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MRR)
    where describe' _f _ = case _f of
                               Nothing -> Just "MRR"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportMap)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Map"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy CIString)
    where describe' _f _ = case _f of
                               Nothing -> Just "CIString"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy URI)
    where describe' _f _ = case _f of
                               Nothing -> Just "URI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserId)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Id"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UUID)
    where describe' _f _ = case _f of
                               Nothing -> Just "UUID"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance IdPath (Path_Author a)
    where idPath = Path_Author
instance IdPath (Path_Bool a)
    where idPath = Path_Bool
instance IdPath (Path_Branding a)
    where idPath = Path_Branding
instance IdPath (Path_CIString a)
    where idPath = Path_CIString
instance IdPath (Path_Dimension a)
    where idPath = Path_Dimension
instance IdPath (Path_Double a)
    where idPath = Path_Double
instance IdPath (Path_ImageCrop a)
    where idPath = Path_ImageCrop
instance IdPath (Path_ImageFile a)
    where idPath = Path_ImageFile
instance IdPath (Path_ImageSize a)
    where idPath = Path_ImageSize
instance IdPath (Path_Int a)
    where idPath = Path_Int
instance IdPath (Path_Int64 a)
    where idPath = Path_Int64
instance IdPath (Path_Integer a)
    where idPath = Path_Integer
instance IdPath (Path_Item a)
    where idPath = Path_Item
instance IdPath (Path_JSONText a)
    where idPath = Path_JSONText
instance IdPath (Path_Markup a)
    where idPath = Path_Markup
instance IdPath (Path_MaybeImageFile a)
    where idPath = Path_MaybeImageFile
instance IdPath (Path_MaybeReportIntendedUse a)
    where idPath = Path_MaybeReportIntendedUse
instance IdPath (Path_Permissions a)
    where idPath = Path_Permissions
instance IdPath (Path_ReadOnlyFilePath a)
    where idPath = Path_ReadOnlyFilePath
instance IdPath (Path_Report a)
    where idPath = Path_Report
instance IdPath (Path_ReportElem a)
    where idPath = Path_ReportElem
instance IdPath (Path_ReportFlags a)
    where idPath = Path_ReportFlags
instance IdPath (Path_ReportImage a)
    where idPath = Path_ReportImage
instance IdPath (Path_ReportImageView a)
    where idPath = Path_ReportImageView
instance IdPath (Path_ReportIntendedUse a)
    where idPath = Path_ReportIntendedUse
instance IdPath (Path_ReportMap a)
    where idPath = Path_ReportMap
instance IdPath (Path_ReportStandard a)
    where idPath = Path_ReportStandard
instance IdPath (Path_ReportStatus a)
    where idPath = Path_ReportStatus
instance IdPath (Path_ReportValueApproachInfo a)
    where idPath = Path_ReportValueApproachInfo
instance IdPath (Path_ReportValueTypeInfo a)
    where idPath = Path_ReportValueTypeInfo
instance IdPath (Path_ReportView a)
    where idPath = Path_ReportView
instance IdPath (Path_SaneSizeImageSize a)
    where idPath = Path_SaneSizeImageSize
instance IdPath (Path_String a)
    where idPath = Path_String
instance IdPath (Path_Text a)
    where idPath = Path_Text
instance IdPath (Path_URI a)
    where idPath = Path_URI
instance IdPath (Path_UUID a)
    where idPath = Path_UUID
instance IdPath (Path_Units a)
    where idPath = Path_Units
instance IdPath (Path_UserId a)
    where idPath = Path_UserId
instance IdPath (Path_UserIds a)
    where idPath = Path_UserIds
instance IdPath UPath_Author
    where idPath = UPath_Author
instance IdPath UPath_Bool
    where idPath = UPath_Bool
instance IdPath UPath_Branding
    where idPath = UPath_Branding
instance IdPath UPath_CIString
    where idPath = UPath_CIString
instance IdPath UPath_Dimension
    where idPath = UPath_Dimension
instance IdPath UPath_Double
    where idPath = UPath_Double
instance IdPath UPath_ImageCrop
    where idPath = UPath_ImageCrop
instance IdPath UPath_ImageFile
    where idPath = UPath_ImageFile
instance IdPath UPath_ImageSize
    where idPath = UPath_ImageSize
instance IdPath UPath_Int
    where idPath = UPath_Int
instance IdPath UPath_Int64
    where idPath = UPath_Int64
instance IdPath UPath_Integer
    where idPath = UPath_Integer
instance IdPath UPath_Item
    where idPath = UPath_Item
instance IdPath UPath_JSONText
    where idPath = UPath_JSONText
instance IdPath UPath_Markup
    where idPath = UPath_Markup
instance IdPath UPath_MaybeImageFile
    where idPath = UPath_MaybeImageFile
instance IdPath UPath_MaybeReportIntendedUse
    where idPath = UPath_MaybeReportIntendedUse
instance IdPath UPath_Permissions
    where idPath = UPath_Permissions
instance IdPath UPath_ReadOnlyFilePath
    where idPath = UPath_ReadOnlyFilePath
instance IdPath UPath_Report
    where idPath = UPath_Report
instance IdPath UPath_ReportElem
    where idPath = UPath_ReportElem
instance IdPath UPath_ReportFlags
    where idPath = UPath_ReportFlags
instance IdPath UPath_ReportImage
    where idPath = UPath_ReportImage
instance IdPath UPath_ReportImageView
    where idPath = UPath_ReportImageView
instance IdPath UPath_ReportIntendedUse
    where idPath = UPath_ReportIntendedUse
instance IdPath UPath_ReportMap
    where idPath = UPath_ReportMap
instance IdPath UPath_ReportStandard
    where idPath = UPath_ReportStandard
instance IdPath UPath_ReportStatus
    where idPath = UPath_ReportStatus
instance IdPath UPath_ReportValueApproachInfo
    where idPath = UPath_ReportValueApproachInfo
instance IdPath UPath_ReportValueTypeInfo
    where idPath = UPath_ReportValueTypeInfo
instance IdPath UPath_ReportView
    where idPath = UPath_ReportView
instance IdPath UPath_SaneSizeImageSize
    where idPath = UPath_SaneSizeImageSize
instance IdPath UPath_String
    where idPath = UPath_String
instance IdPath UPath_Text
    where idPath = UPath_Text
instance IdPath UPath_URI
    where idPath = UPath_URI
instance IdPath UPath_UUID
    where idPath = UPath_UUID
instance IdPath UPath_Units
    where idPath = UPath_Units
instance IdPath UPath_UserId
    where idPath = UPath_UserId
instance IdPath UPath_UserIds
    where idPath = UPath_UserIds
instance ToLens (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
    where type S (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = EUI
          type A (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = ImageFile
          toLens (Path_Right _) = _Right
instance ToLens (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
    where type S (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          type A (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          toLens _ = id
instance ToLens (Path_Either (Path_URI URI) (Path_ImageFile URI))
    where type S (Path_Either (Path_URI URI) (Path_ImageFile URI)) = EUI
          type A (Path_Either (Path_URI URI) (Path_ImageFile URI)) = URI
          toLens (Path_Left _) = _Left
instance ToLens (Path_Either UPath_URI UPath_ImageFile)
    where type S (Path_Either UPath_URI UPath_ImageFile) = EUI
          type A (Path_Either UPath_URI UPath_ImageFile) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_Left v) = _Left . toLens v
          toLens (Path_Right v) = _Right . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup JSONText))
    where type S (Path_Map ItemFieldName (Path_Markup JSONText)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup Markup))
    where type S (Path_Map ItemFieldName (Path_Markup Markup)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Markup)) = Markup
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ItemFieldName (Path_Markup MIM))
    where type S (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          toLens _ = id
instance ToLens (Path_Map ItemFieldName (Path_Markup Text))
    where type S (Path_Map ItemFieldName (Path_Markup Text)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName UPath_Markup)
    where type S (Path_Map ItemFieldName UPath_Markup) = MIM
          type A (Path_Map ItemFieldName UPath_Markup) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report String))
    where type S (Path_Map ReportID (Path_Report String)) = MRR
          type A (Path_Map ReportID (Path_Report String)) = String
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int64))
    where type S (Path_Map ReportID (Path_Report Int64)) = MRR
          type A (Path_Map ReportID (Path_Report Int64)) = Int64
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Bool))
    where type S (Path_Map ReportID (Path_Report Bool)) = MRR
          type A (Path_Map ReportID (Path_Report Bool)) = Bool
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Double))
    where type S (Path_Map ReportID (Path_Report Double)) = MRR
          type A (Path_Map ReportID (Path_Report Double)) = Double
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int))
    where type S (Path_Map ReportID (Path_Report Int)) = MRR
          type A (Path_Map ReportID (Path_Report Int)) = Int
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Dimension))
    where type S (Path_Map ReportID (Path_Report Dimension)) = MRR
          type A (Path_Map ReportID (Path_Report Dimension)) = Dimension
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageCrop))
    where type S (Path_Map ReportID (Path_Report ImageCrop)) = MRR
          type A (Path_Map ReportID (Path_Report ImageCrop)) = ImageCrop
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageSize))
    where type S (Path_Map ReportID (Path_Report ImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report ImageSize)) = ImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Units))
    where type S (Path_Map ReportID (Path_Report Units)) = MRR
          type A (Path_Map ReportID (Path_Report Units)) = Units
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageFile))
    where type S (Path_Map ReportID (Path_Report ImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report ImageFile)) = ImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Integer))
    where type S (Path_Map ReportID (Path_Report Integer)) = MRR
          type A (Path_Map ReportID (Path_Report Integer)) = Integer
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report JSONText))
    where type S (Path_Map ReportID (Path_Report JSONText)) = MRR
          type A (Path_Map ReportID (Path_Report JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markup))
    where type S (Path_Map ReportID (Path_Report Markup)) = MRR
          type A (Path_Map ReportID (Path_Report Markup)) = Markup
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Permissions))
    where type S (Path_Map ReportID (Path_Report Permissions)) = MRR
          type A (Path_Map ReportID (Path_Report Permissions)) = Permissions
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserIds))
    where type S (Path_Map ReportID (Path_Report UserIds)) = MRR
          type A (Path_Map ReportID (Path_Report UserIds)) = UserIds
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPair))
    where type S (Path_Map ReportID (Path_Report AbbrevPair)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPair)) = AbbrevPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPairs))
    where type S (Path_Map ReportID (Path_Report AbbrevPairs)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPairs)) = AbbrevPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Author))
    where type S (Path_Map ReportID (Path_Report Author)) = MRR
          type A (Path_Map ReportID (Path_Report Author)) = Author
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Authors))
    where type S (Path_Map ReportID (Path_Report Authors)) = MRR
          type A (Path_Map ReportID (Path_Report Authors)) = Authors
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Branding))
    where type S (Path_Map ReportID (Path_Report Branding)) = MRR
          type A (Path_Map ReportID (Path_Report Branding)) = Branding
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPair))
    where type S (Path_Map ReportID (Path_Report MarkupPair)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPair)) = MarkupPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPairs))
    where type S (Path_Map ReportID (Path_Report MarkupPairs)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPairs)) = MarkupPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markups))
    where type S (Path_Map ReportID (Path_Report Markups)) = MRR
          type A (Path_Map ReportID (Path_Report Markups)) = Markups
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeReportIntendedUse))
    where type S (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MaybeReportIntendedUse
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Report))
    where type S (Path_Map ReportID (Path_Report Report)) = MRR
          type A (Path_Map ReportID (Path_Report Report)) = Report
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ReportID (Path_Report ReportElem))
    where type S (Path_Map ReportID (Path_Report ReportElem)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElem)) = ReportElem
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportElems))
    where type S (Path_Map ReportID (Path_Report ReportElems)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElems)) = ReportElems
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportFlags))
    where type S (Path_Map ReportID (Path_Report ReportFlags)) = MRR
          type A (Path_Map ReportID (Path_Report ReportFlags)) = ReportFlags
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStandard))
    where type S (Path_Map ReportID (Path_Report ReportStandard)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStandard)) = ReportStandard
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStatus))
    where type S (Path_Map ReportID (Path_Report ReportStatus)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStatus)) = ReportStatus
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueApproachInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = ReportValueApproachInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueTypeInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = ReportValueTypeInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report EUI))
    where type S (Path_Map ReportID (Path_Report EUI)) = MRR
          type A (Path_Map ReportID (Path_Report EUI)) = EUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MEUI))
    where type S (Path_Map ReportID (Path_Report MEUI)) = MRR
          type A (Path_Map ReportID (Path_Report MEUI)) = MEUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeImageFile))
    where type S (Path_Map ReportID (Path_Report MaybeImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeImageFile)) = MaybeImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImage))
    where type S (Path_Map ReportID (Path_Report ReportImage)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImage)) = ReportImage
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImages))
    where type S (Path_Map ReportID (Path_Report ReportImages)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImages)) = ReportImages
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReadOnlyFilePath))
    where type S (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = MRR
          type A (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = ReadOnlyFilePath
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImageView))
    where type S (Path_Map ReportID (Path_Report ReportImageView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImageView)) = ReportImageView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportView))
    where type S (Path_Map ReportID (Path_Report ReportView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportView)) = ReportView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report SaneSizeImageSize))
    where type S (Path_Map ReportID (Path_Report SaneSizeImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Item))
    where type S (Path_Map ReportID (Path_Report Item)) = MRR
          type A (Path_Map ReportID (Path_Report Item)) = Item
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MIM))
    where type S (Path_Map ReportID (Path_Report MIM)) = MRR
          type A (Path_Map ReportID (Path_Report MIM)) = MIM
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MRR))
    where type S (Path_Map ReportID (Path_Report MRR)) = MRR
          type A (Path_Map ReportID (Path_Report MRR)) = MRR
          toLens _ = id
instance ToLens (Path_Map ReportID (Path_Report CIString))
    where type S (Path_Map ReportID (Path_Report CIString)) = MRR
          type A (Path_Map ReportID (Path_Report CIString)) = CIString
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report URI))
    where type S (Path_Map ReportID (Path_Report URI)) = MRR
          type A (Path_Map ReportID (Path_Report URI)) = URI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Text))
    where type S (Path_Map ReportID (Path_Report Text)) = MRR
          type A (Path_Map ReportID (Path_Report Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserId))
    where type S (Path_Map ReportID (Path_Report UserId)) = MRR
          type A (Path_Map ReportID (Path_Report UserId)) = UserId
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UUID))
    where type S (Path_Map ReportID (Path_Report UUID)) = MRR
          type A (Path_Map ReportID (Path_Report UUID)) = UUID
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID UPath_Report)
    where type S (Path_Map ReportID UPath_Report) = MRR
          type A (Path_Map ReportID UPath_Report) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = AbbrevPair
          type A (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = AbbrevPair
          type A (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = Markup
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
    where type S (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          type A (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          toLens _ = id
instance ToLens (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
    where type S (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = AbbrevPair
          type A (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = CIString
          toLens (Path_First _) = _1
instance ToLens (Path_Pair (Path_CIString Text) (Path_Markup Text))
    where type S (Path_Pair (Path_CIString Text) (Path_Markup Text)) = AbbrevPair
          type A (Path_Pair (Path_CIString Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = MarkupPair
          type A (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = MarkupPair
          type A (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = Markup
          toLens (Path_First _) = _1
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
    where type S (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          type A (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          toLens _ = id
instance ToLens (Path_Pair (Path_Markup Text) (Path_Markup Text))
    where type S (Path_Pair (Path_Markup Text) (Path_Markup Text)) = MarkupPair
          type A (Path_Pair (Path_Markup Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair UPath_CIString UPath_Markup)
    where type S (Path_Pair UPath_CIString UPath_Markup) = AbbrevPair
          type A (Path_Pair UPath_CIString UPath_Markup) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair UPath_Markup UPath_Markup)
    where type S (Path_Pair UPath_Markup UPath_Markup) = MarkupPair
          type A (Path_Pair UPath_Markup UPath_Markup) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          toLens _ = id
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = CIString
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair UPath_CIString UPath_Markup))
    where type S (Path_OMap AbbrevPairID (Path_Pair UPath_CIString UPath_Markup)) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair UPath_CIString UPath_Markup)) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author JSONText))
    where type S (Path_OMap AuthorID (Path_Author JSONText)) = Authors
          type A (Path_OMap AuthorID (Path_Author JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Markup))
    where type S (Path_OMap AuthorID (Path_Author Markup)) = Authors
          type A (Path_OMap AuthorID (Path_Author Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Author))
    where type S (Path_OMap AuthorID (Path_Author Author)) = Authors
          type A (Path_OMap AuthorID (Path_Author Author)) = Author
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AuthorID (Path_Author Authors))
    where type S (Path_OMap AuthorID (Path_Author Authors)) = Authors
          type A (Path_OMap AuthorID (Path_Author Authors)) = Authors
          toLens _ = id
instance ToLens (Path_OMap AuthorID (Path_Author Text))
    where type S (Path_OMap AuthorID (Path_Author Text)) = Authors
          type A (Path_OMap AuthorID (Path_Author Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID UPath_Author)
    where type S (Path_OMap AuthorID UPath_Author) = Authors
          type A (Path_OMap AuthorID UPath_Author) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup JSONText))
    where type S (Path_OMap MarkupID (Path_Markup JSONText)) = Markups
          type A (Path_OMap MarkupID (Path_Markup JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup Markup))
    where type S (Path_OMap MarkupID (Path_Markup Markup)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markup)) = Markup
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupID (Path_Markup Markups))
    where type S (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          toLens _ = id
instance ToLens (Path_OMap MarkupID (Path_Markup Text))
    where type S (Path_OMap MarkupID (Path_Markup Text)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID UPath_Markup)
    where type S (Path_OMap MarkupID UPath_Markup) = Markups
          type A (Path_OMap MarkupID UPath_Markup) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          toLens _ = id
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair UPath_Markup UPath_Markup))
    where type S (Path_OMap MarkupPairID (Path_Pair UPath_Markup UPath_Markup)) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair UPath_Markup UPath_Markup)) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem String))
    where type S (Path_OMap ReportElemID (Path_ReportElem String)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Bool))
    where type S (Path_OMap ReportElemID (Path_ReportElem Bool)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Double))
    where type S (Path_OMap ReportElemID (Path_ReportElem Double)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Dimension))
    where type S (Path_OMap ReportElemID (Path_ReportElem Dimension)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageCrop))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Units))
    where type S (Path_OMap ReportElemID (Path_ReportElem Units)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem JSONText))
    where type S (Path_OMap ReportElemID (Path_ReportElem JSONText)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Markup))
    where type S (Path_OMap ReportElemID (Path_ReportElem Markup)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElem))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElem
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElems))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          toLens _ = id
instance ToLens (Path_OMap ReportElemID (Path_ReportElem EUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem EUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MEUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem MEUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImage))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportImage
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImages))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportImages
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImageView))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Item))
    where type S (Path_OMap ReportElemID (Path_ReportElem Item)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Item)) = Item
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MIM))
    where type S (Path_OMap ReportElemID (Path_ReportElem MIM)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MIM)) = MIM
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem URI))
    where type S (Path_OMap ReportElemID (Path_ReportElem URI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Text))
    where type S (Path_OMap ReportElemID (Path_ReportElem Text)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID UPath_ReportElem)
    where type S (Path_OMap ReportElemID UPath_ReportElem) = ReportElems
          type A (Path_OMap ReportElemID UPath_ReportElem) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage String))
    where type S (Path_OMap ReportImageID (Path_ReportImage String)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Bool))
    where type S (Path_OMap ReportImageID (Path_ReportImage Bool)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Double))
    where type S (Path_OMap ReportImageID (Path_ReportImage Double)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Dimension))
    where type S (Path_OMap ReportImageID (Path_ReportImage Dimension)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageCrop))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Units))
    where type S (Path_OMap ReportImageID (Path_ReportImage Units)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage JSONText))
    where type S (Path_OMap ReportImageID (Path_ReportImage JSONText)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Markup))
    where type S (Path_OMap ReportImageID (Path_ReportImage Markup)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage EUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage EUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MEUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage MEUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImage))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImage
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImages))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          toLens _ = id
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImageView))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage URI))
    where type S (Path_OMap ReportImageID (Path_ReportImage URI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Text))
    where type S (Path_OMap ReportImageID (Path_ReportImage Text)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID UPath_ReportImage)
    where type S (Path_OMap ReportImageID UPath_ReportImage) = ReportImages
          type A (Path_OMap ReportImageID UPath_ReportImage) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_Author JSONText)
    where type S (Path_Author JSONText) = Author
          type A (Path_Author JSONText) = JSONText
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Author Markup)
    where type S (Path_Author Markup) = Author
          type A (Path_Author Markup) = Markup
          toLens (Path_Author_authorName _x) = lens_Author_authorName
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials
instance ToLens (Path_Author Author)
    where type S (Path_Author Author) = Author
          type A (Path_Author Author) = Author
          toLens _ = id
instance ToLens (Path_Author Text)
    where type S (Path_Author Text) = Author
          type A (Path_Author Text) = Text
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Bool String)
    where type S (Path_Bool String) = Bool
          type A (Path_Bool String) = String
          toLens (Path_Bool_View _) = viewLens :: Lens' Bool String
instance ToLens (Path_Bool Bool)
    where type S (Path_Bool Bool) = Bool
          type A (Path_Bool Bool) = Bool
          toLens _ = id
instance ToLens (Path_Bool JSONText)
    where type S (Path_Bool JSONText) = Bool
          type A (Path_Bool JSONText) = JSONText
          toLens (Path_Bool_View v) = (viewLens :: Lens' Bool String) . toLens v
instance ToLens (Path_Branding JSONText)
    where type S (Path_Branding JSONText) = Branding
          type A (Path_Branding JSONText) = JSONText
          toLens (Path_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens (Path_Branding Branding)
    where type S (Path_Branding Branding) = Branding
          type A (Path_Branding Branding) = Branding
          toLens _ = id
instance ToLens (Path_Branding Text)
    where type S (Path_Branding Text) = Branding
          type A (Path_Branding Text) = Text
          toLens (Path_Branding_View _) = viewLens :: Lens' Branding Text
instance ToLens (Path_CIString JSONText)
    where type S (Path_CIString JSONText) = CIString
          type A (Path_CIString JSONText) = JSONText
          toLens (Path_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens (Path_CIString CIString)
    where type S (Path_CIString CIString) = CIString
          type A (Path_CIString CIString) = CIString
          toLens _ = id
instance ToLens (Path_CIString Text)
    where type S (Path_CIString Text) = CIString
          type A (Path_CIString Text) = Text
          toLens (Path_CIString_View _) = viewLens :: Lens' CIString Text
instance ToLens (Path_Dimension Dimension)
    where type S (Path_Dimension Dimension) = Dimension
          type A (Path_Dimension Dimension) = Dimension
          toLens _ = id
instance ToLens (Path_Dimension JSONText)
    where type S (Path_Dimension JSONText) = Dimension
          type A (Path_Dimension JSONText) = JSONText
          toLens (Path_Dimension_View _) = viewLens :: Lens' Dimension JSONText
instance ToLens (Path_Double String)
    where type S (Path_Double String) = Double
          type A (Path_Double String) = String
          toLens (Path_Double_View _) = viewLens :: Lens' Double String
instance ToLens (Path_Double Double)
    where type S (Path_Double Double) = Double
          type A (Path_Double Double) = Double
          toLens _ = id
instance ToLens (Path_Double JSONText)
    where type S (Path_Double JSONText) = Double
          type A (Path_Double JSONText) = JSONText
          toLens (Path_Double_View v) = (viewLens :: Lens' Double String) . toLens v
instance ToLens (Path_ImageCrop ImageCrop)
    where type S (Path_ImageCrop ImageCrop) = ImageCrop
          type A (Path_ImageCrop ImageCrop) = ImageCrop
          toLens _ = id
instance ToLens (Path_ImageFile ImageFile)
    where type S (Path_ImageFile ImageFile) = ImageFile
          type A (Path_ImageFile ImageFile) = ImageFile
          toLens _ = id
instance ToLens (Path_ImageSize String)
    where type S (Path_ImageSize String) = ImageSize
          type A (Path_ImageSize String) = String
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
instance ToLens (Path_ImageSize Double)
    where type S (Path_ImageSize Double) = ImageSize
          type A (Path_ImageSize Double) = Double
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size
instance ToLens (Path_ImageSize Dimension)
    where type S (Path_ImageSize Dimension) = ImageSize
          type A (Path_ImageSize Dimension) = Dimension
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim
instance ToLens (Path_ImageSize ImageSize)
    where type S (Path_ImageSize ImageSize) = ImageSize
          type A (Path_ImageSize ImageSize) = ImageSize
          toLens _ = id
instance ToLens (Path_ImageSize Units)
    where type S (Path_ImageSize Units) = ImageSize
          type A (Path_ImageSize Units) = Units
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units
instance ToLens (Path_ImageSize JSONText)
    where type S (Path_ImageSize JSONText) = ImageSize
          type A (Path_ImageSize JSONText) = JSONText
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim . toLens _x
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units . toLens _x
instance ToLens (Path_Int Int)
    where type S (Path_Int Int) = Int
          type A (Path_Int Int) = Int
          toLens _ = id
instance ToLens (Path_Int64 Int64)
    where type S (Path_Int64 Int64) = Int64
          type A (Path_Int64 Int64) = Int64
          toLens _ = id
instance ToLens (Path_Integer Integer)
    where type S (Path_Integer Integer) = Integer
          type A (Path_Integer Integer) = Integer
          toLens _ = id
instance ToLens (Path_Item String)
    where type S (Path_Item String) = Item
          type A (Path_Item String) = String
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Bool)
    where type S (Path_Item Bool) = Item
          type A (Path_Item Bool) = Bool
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Double)
    where type S (Path_Item Double) = Item
          type A (Path_Item Double) = Double
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Dimension)
    where type S (Path_Item Dimension) = Item
          type A (Path_Item Dimension) = Dimension
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageCrop)
    where type S (Path_Item ImageCrop) = Item
          type A (Path_Item ImageCrop) = ImageCrop
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageSize)
    where type S (Path_Item ImageSize) = Item
          type A (Path_Item ImageSize) = ImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Units)
    where type S (Path_Item Units) = Item
          type A (Path_Item Units) = Units
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageFile)
    where type S (Path_Item ImageFile) = Item
          type A (Path_Item ImageFile) = ImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item JSONText)
    where type S (Path_Item JSONText) = Item
          type A (Path_Item JSONText) = JSONText
          toLens (Path_Item_itemName _x) = lens_Item_itemName . toLens _x
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Markup)
    where type S (Path_Item Markup) = Item
          type A (Path_Item Markup) = Markup
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item EUI)
    where type S (Path_Item EUI) = Item
          type A (Path_Item EUI) = EUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MEUI)
    where type S (Path_Item MEUI) = Item
          type A (Path_Item MEUI) = MEUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MaybeImageFile)
    where type S (Path_Item MaybeImageFile) = Item
          type A (Path_Item MaybeImageFile) = MaybeImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImage)
    where type S (Path_Item ReportImage) = Item
          type A (Path_Item ReportImage) = ReportImage
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImages)
    where type S (Path_Item ReportImages) = Item
          type A (Path_Item ReportImages) = ReportImages
          toLens (Path_Item_images _x) = lens_Item_images
instance ToLens (Path_Item ReportImageView)
    where type S (Path_Item ReportImageView) = Item
          type A (Path_Item ReportImageView) = ReportImageView
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item SaneSizeImageSize)
    where type S (Path_Item SaneSizeImageSize) = Item
          type A (Path_Item SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Item)
    where type S (Path_Item Item) = Item
          type A (Path_Item Item) = Item
          toLens _ = id
instance ToLens (Path_Item MIM)
    where type S (Path_Item MIM) = Item
          type A (Path_Item MIM) = MIM
          toLens (Path_Item_fields _x) = lens_Item_fields
instance ToLens (Path_Item URI)
    where type S (Path_Item URI) = Item
          type A (Path_Item URI) = URI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Text)
    where type S (Path_Item Text) = Item
          type A (Path_Item Text) = Text
          toLens (Path_Item_itemName _x) = lens_Item_itemName
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_JSONText JSONText)
    where type S (Path_JSONText JSONText) = JSONText
          type A (Path_JSONText JSONText) = JSONText
          toLens _ = id
instance ToLens (Path_Markup JSONText)
    where type S (Path_Markup JSONText) = Markup
          type A (Path_Markup JSONText) = JSONText
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText . toLens _x
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText . toLens _x
instance ToLens (Path_Markup Markup)
    where type S (Path_Markup Markup) = Markup
          type A (Path_Markup Markup) = Markup
          toLens _ = id
instance ToLens (Path_Markup Text)
    where type S (Path_Markup Text) = Markup
          type A (Path_Markup Text) = Text
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText
instance ToLens (Path_MaybeImageFile String)
    where type S (Path_MaybeImageFile String) = MaybeImageFile
          type A (Path_MaybeImageFile String) = String
          toLens (Path_MaybeImageFile_View _) = viewLens :: Lens' MaybeImageFile String
instance ToLens (Path_MaybeImageFile JSONText)
    where type S (Path_MaybeImageFile JSONText) = MaybeImageFile
          type A (Path_MaybeImageFile JSONText) = JSONText
          toLens (Path_MaybeImageFile_View v) = (viewLens :: Lens' MaybeImageFile String) . toLens v
instance ToLens (Path_MaybeImageFile MaybeImageFile)
    where type S (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          type A (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          toLens _ = id
instance ToLens (Path_MaybeReportIntendedUse String)
    where type S (Path_MaybeReportIntendedUse String) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse String) = String
          toLens (Path_MaybeReportIntendedUse_View _) = viewLens :: Lens' MaybeReportIntendedUse String
instance ToLens (Path_MaybeReportIntendedUse JSONText)
    where type S (Path_MaybeReportIntendedUse JSONText) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse JSONText) = JSONText
          toLens (Path_MaybeReportIntendedUse_View v) = (viewLens :: Lens' MaybeReportIntendedUse String) . toLens v
instance ToLens (Path_MaybeReportIntendedUse MaybeReportIntendedUse)
    where type S (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens _ = id
instance ToLens (Path_Permissions JSONText)
    where type S (Path_Permissions JSONText) = Permissions
          type A (Path_Permissions JSONText) = JSONText
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions Permissions)
    where type S (Path_Permissions Permissions) = Permissions
          type A (Path_Permissions Permissions) = Permissions
          toLens _ = id
instance ToLens (Path_Permissions UserIds)
    where type S (Path_Permissions UserIds) = Permissions
          type A (Path_Permissions UserIds) = UserIds
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers
instance ToLens (Path_Permissions Text)
    where type S (Path_Permissions Text) = Permissions
          type A (Path_Permissions Text) = Text
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions UserId)
    where type S (Path_Permissions UserId) = Permissions
          type A (Path_Permissions UserId) = UserId
          toLens (Path_Permissions_owner _x) = lens_Permissions_owner
instance ToLens (Path_ReadOnlyFilePath String)
    where type S (Path_ReadOnlyFilePath String) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath String) = String
          toLens (Path_ReadOnlyFilePath_View _) = viewLens :: Lens' ReadOnlyFilePath String
instance ToLens (Path_ReadOnlyFilePath JSONText)
    where type S (Path_ReadOnlyFilePath JSONText) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath JSONText) = JSONText
          toLens (Path_ReadOnlyFilePath_View v) = (viewLens :: Lens' ReadOnlyFilePath String) . toLens v
instance ToLens (Path_ReadOnlyFilePath ReadOnlyFilePath)
    where type S (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          toLens _ = id
instance ToLens (Path_Report String)
    where type S (Path_Report String) = Report
          type A (Path_Report String) = String
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int64)
    where type S (Path_Report Int64) = Report
          type A (Path_Report Int64) = Int64
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Bool)
    where type S (Path_Report Bool) = Report
          type A (Path_Report Bool) = Bool
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Double)
    where type S (Path_Report Double) = Report
          type A (Path_Report Double) = Double
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int)
    where type S (Path_Report Int) = Report
          type A (Path_Report Int) = Int
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Dimension)
    where type S (Path_Report Dimension) = Report
          type A (Path_Report Dimension) = Dimension
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageCrop)
    where type S (Path_Report ImageCrop) = Report
          type A (Path_Report ImageCrop) = ImageCrop
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageSize)
    where type S (Path_Report ImageSize) = Report
          type A (Path_Report ImageSize) = ImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Units)
    where type S (Path_Report Units) = Report
          type A (Path_Report Units) = Units
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageFile)
    where type S (Path_Report ImageFile) = Report
          type A (Path_Report ImageFile) = ImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Integer)
    where type S (Path_Report Integer) = Report
          type A (Path_Report Integer) = Integer
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report JSONText)
    where type S (Path_Report JSONText) = Report
          type A (Path_Report JSONText) = JSONText
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markup)
    where type S (Path_Report Markup) = Report
          type A (Path_Report Markup) = Markup
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Permissions)
    where type S (Path_Report Permissions) = Report
          type A (Path_Report Permissions) = Permissions
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserIds)
    where type S (Path_Report UserIds) = Report
          type A (Path_Report UserIds) = UserIds
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPair)
    where type S (Path_Report AbbrevPair) = Report
          type A (Path_Report AbbrevPair) = AbbrevPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPairs)
    where type S (Path_Report AbbrevPairs) = Report
          type A (Path_Report AbbrevPairs) = AbbrevPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Author)
    where type S (Path_Report Author) = Report
          type A (Path_Report Author) = Author
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Authors)
    where type S (Path_Report Authors) = Report
          type A (Path_Report Authors) = Authors
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Branding)
    where type S (Path_Report Branding) = Report
          type A (Path_Report Branding) = Branding
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPair)
    where type S (Path_Report MarkupPair) = Report
          type A (Path_Report MarkupPair) = MarkupPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPairs)
    where type S (Path_Report MarkupPairs) = Report
          type A (Path_Report MarkupPairs) = MarkupPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markups)
    where type S (Path_Report Markups) = Report
          type A (Path_Report Markups) = Markups
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeReportIntendedUse)
    where type S (Path_Report MaybeReportIntendedUse) = Report
          type A (Path_Report MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Report)
    where type S (Path_Report Report) = Report
          type A (Path_Report Report) = Report
          toLens _ = id
instance ToLens (Path_Report ReportElem)
    where type S (Path_Report ReportElem) = Report
          type A (Path_Report ReportElem) = ReportElem
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportElems)
    where type S (Path_Report ReportElems) = Report
          type A (Path_Report ReportElems) = ReportElems
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportFlags)
    where type S (Path_Report ReportFlags) = Report
          type A (Path_Report ReportFlags) = ReportFlags
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStandard)
    where type S (Path_Report ReportStandard) = Report
          type A (Path_Report ReportStandard) = ReportStandard
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStatus)
    where type S (Path_Report ReportStatus) = Report
          type A (Path_Report ReportStatus) = ReportStatus
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueApproachInfo)
    where type S (Path_Report ReportValueApproachInfo) = Report
          type A (Path_Report ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueTypeInfo)
    where type S (Path_Report ReportValueTypeInfo) = Report
          type A (Path_Report ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report EUI)
    where type S (Path_Report EUI) = Report
          type A (Path_Report EUI) = EUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MEUI)
    where type S (Path_Report MEUI) = Report
          type A (Path_Report MEUI) = MEUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeImageFile)
    where type S (Path_Report MaybeImageFile) = Report
          type A (Path_Report MaybeImageFile) = MaybeImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImage)
    where type S (Path_Report ReportImage) = Report
          type A (Path_Report ReportImage) = ReportImage
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImages)
    where type S (Path_Report ReportImages) = Report
          type A (Path_Report ReportImages) = ReportImages
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReadOnlyFilePath)
    where type S (Path_Report ReadOnlyFilePath) = Report
          type A (Path_Report ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImageView)
    where type S (Path_Report ReportImageView) = Report
          type A (Path_Report ReportImageView) = ReportImageView
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportView)
    where type S (Path_Report ReportView) = Report
          type A (Path_Report ReportView) = ReportView
          toLens (Path_Report_View _) = viewLens :: Lens' Report ReportView
instance ToLens (Path_Report SaneSizeImageSize)
    where type S (Path_Report SaneSizeImageSize) = Report
          type A (Path_Report SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Item)
    where type S (Path_Report Item) = Report
          type A (Path_Report Item) = Item
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MIM)
    where type S (Path_Report MIM) = Report
          type A (Path_Report MIM) = MIM
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report CIString)
    where type S (Path_Report CIString) = Report
          type A (Path_Report CIString) = CIString
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report URI)
    where type S (Path_Report URI) = Report
          type A (Path_Report URI) = URI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Text)
    where type S (Path_Report Text) = Report
          type A (Path_Report Text) = Text
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserId)
    where type S (Path_Report UserId) = Report
          type A (Path_Report UserId) = UserId
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UUID)
    where type S (Path_Report UUID) = Report
          type A (Path_Report UUID) = UUID
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_ReportElem String)
    where type S (Path_ReportElem String) = ReportElem
          type A (Path_ReportElem String) = String
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Bool)
    where type S (Path_ReportElem Bool) = ReportElem
          type A (Path_ReportElem Bool) = Bool
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Double)
    where type S (Path_ReportElem Double) = ReportElem
          type A (Path_ReportElem Double) = Double
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Dimension)
    where type S (Path_ReportElem Dimension) = ReportElem
          type A (Path_ReportElem Dimension) = Dimension
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageCrop)
    where type S (Path_ReportElem ImageCrop) = ReportElem
          type A (Path_ReportElem ImageCrop) = ImageCrop
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageSize)
    where type S (Path_ReportElem ImageSize) = ReportElem
          type A (Path_ReportElem ImageSize) = ImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Units)
    where type S (Path_ReportElem Units) = ReportElem
          type A (Path_ReportElem Units) = Units
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageFile)
    where type S (Path_ReportElem ImageFile) = ReportElem
          type A (Path_ReportElem ImageFile) = ImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem JSONText)
    where type S (Path_ReportElem JSONText) = ReportElem
          type A (Path_ReportElem JSONText) = JSONText
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportElem Markup)
    where type S (Path_ReportElem Markup) = ReportElem
          type A (Path_ReportElem Markup) = Markup
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText
instance ToLens (Path_ReportElem ReportElem)
    where type S (Path_ReportElem ReportElem) = ReportElem
          type A (Path_ReportElem ReportElem) = ReportElem
          toLens _ = id
instance ToLens (Path_ReportElem EUI)
    where type S (Path_ReportElem EUI) = ReportElem
          type A (Path_ReportElem EUI) = EUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MEUI)
    where type S (Path_ReportElem MEUI) = ReportElem
          type A (Path_ReportElem MEUI) = MEUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MaybeImageFile)
    where type S (Path_ReportElem MaybeImageFile) = ReportElem
          type A (Path_ReportElem MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImage)
    where type S (Path_ReportElem ReportImage) = ReportElem
          type A (Path_ReportElem ReportImage) = ReportImage
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImages)
    where type S (Path_ReportElem ReportImages) = ReportElem
          type A (Path_ReportElem ReportImages) = ReportImages
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImageView)
    where type S (Path_ReportElem ReportImageView) = ReportElem
          type A (Path_ReportElem ReportImageView) = ReportImageView
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem SaneSizeImageSize)
    where type S (Path_ReportElem SaneSizeImageSize) = ReportElem
          type A (Path_ReportElem SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Item)
    where type S (Path_ReportElem Item) = ReportElem
          type A (Path_ReportElem Item) = Item
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem
instance ToLens (Path_ReportElem MIM)
    where type S (Path_ReportElem MIM) = ReportElem
          type A (Path_ReportElem MIM) = MIM
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem URI)
    where type S (Path_ReportElem URI) = ReportElem
          type A (Path_ReportElem URI) = URI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Text)
    where type S (Path_ReportElem Text) = ReportElem
          type A (Path_ReportElem Text) = Text
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportFlags String)
    where type S (Path_ReportFlags String) = ReportFlags
          type A (Path_ReportFlags String) = String
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags Bool)
    where type S (Path_ReportFlags Bool) = ReportFlags
          type A (Path_ReportFlags Bool) = Bool
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields
instance ToLens (Path_ReportFlags JSONText)
    where type S (Path_ReportFlags JSONText) = ReportFlags
          type A (Path_ReportFlags JSONText) = JSONText
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags ReportFlags)
    where type S (Path_ReportFlags ReportFlags) = ReportFlags
          type A (Path_ReportFlags ReportFlags) = ReportFlags
          toLens _ = id
instance ToLens (Path_ReportImage String)
    where type S (Path_ReportImage String) = ReportImage
          type A (Path_ReportImage String) = String
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Bool)
    where type S (Path_ReportImage Bool) = ReportImage
          type A (Path_ReportImage Bool) = Bool
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Double)
    where type S (Path_ReportImage Double) = ReportImage
          type A (Path_ReportImage Double) = Double
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Dimension)
    where type S (Path_ReportImage Dimension) = ReportImage
          type A (Path_ReportImage Dimension) = Dimension
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageCrop)
    where type S (Path_ReportImage ImageCrop) = ReportImage
          type A (Path_ReportImage ImageCrop) = ImageCrop
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageSize)
    where type S (Path_ReportImage ImageSize) = ReportImage
          type A (Path_ReportImage ImageSize) = ImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Units)
    where type S (Path_ReportImage Units) = ReportImage
          type A (Path_ReportImage Units) = Units
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageFile)
    where type S (Path_ReportImage ImageFile) = ReportImage
          type A (Path_ReportImage ImageFile) = ImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage JSONText)
    where type S (Path_ReportImage JSONText) = ReportImage
          type A (Path_ReportImage JSONText) = JSONText
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Markup)
    where type S (Path_ReportImage Markup) = ReportImage
          type A (Path_ReportImage Markup) = Markup
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage EUI)
    where type S (Path_ReportImage EUI) = ReportImage
          type A (Path_ReportImage EUI) = EUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MEUI)
    where type S (Path_ReportImage MEUI) = ReportImage
          type A (Path_ReportImage MEUI) = MEUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MaybeImageFile)
    where type S (Path_ReportImage MaybeImageFile) = ReportImage
          type A (Path_ReportImage MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ReportImage)
    where type S (Path_ReportImage ReportImage) = ReportImage
          type A (Path_ReportImage ReportImage) = ReportImage
          toLens _ = id
instance ToLens (Path_ReportImage ReportImageView)
    where type S (Path_ReportImage ReportImageView) = ReportImage
          type A (Path_ReportImage ReportImageView) = ReportImageView
          toLens (Path_ReportImage_View _) = viewLens :: Lens' ReportImage ReportImageView
instance ToLens (Path_ReportImage SaneSizeImageSize)
    where type S (Path_ReportImage SaneSizeImageSize) = ReportImage
          type A (Path_ReportImage SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage URI)
    where type S (Path_ReportImage URI) = ReportImage
          type A (Path_ReportImage URI) = URI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Text)
    where type S (Path_ReportImage Text) = ReportImage
          type A (Path_ReportImage Text) = Text
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImageView String)
    where type S (Path_ReportImageView String) = ReportImageView
          type A (Path_ReportImageView String) = String
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Bool)
    where type S (Path_ReportImageView Bool) = ReportImageView
          type A (Path_ReportImageView Bool) = Bool
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge
instance ToLens (Path_ReportImageView Double)
    where type S (Path_ReportImageView Double) = ReportImageView
          type A (Path_ReportImageView Double) = Double
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Dimension)
    where type S (Path_ReportImageView Dimension) = ReportImageView
          type A (Path_ReportImageView Dimension) = Dimension
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageCrop)
    where type S (Path_ReportImageView ImageCrop) = ReportImageView
          type A (Path_ReportImageView ImageCrop) = ImageCrop
          toLens (Path_ReportImageView__picCrop _x) = lens_ReportImageView__picCrop
instance ToLens (Path_ReportImageView ImageSize)
    where type S (Path_ReportImageView ImageSize) = ReportImageView
          type A (Path_ReportImageView ImageSize) = ImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Units)
    where type S (Path_ReportImageView Units) = ReportImageView
          type A (Path_ReportImageView Units) = Units
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageFile)
    where type S (Path_ReportImageView ImageFile) = ReportImageView
          type A (Path_ReportImageView ImageFile) = ImageFile
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView JSONText)
    where type S (Path_ReportImageView JSONText) = ReportImageView
          type A (Path_ReportImageView JSONText) = JSONText
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Markup)
    where type S (Path_ReportImageView Markup) = ReportImageView
          type A (Path_ReportImageView Markup) = Markup
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption
instance ToLens (Path_ReportImageView EUI)
    where type S (Path_ReportImageView EUI) = ReportImageView
          type A (Path_ReportImageView EUI) = EUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView MEUI)
    where type S (Path_ReportImageView MEUI) = ReportImageView
          type A (Path_ReportImageView MEUI) = MEUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal
instance ToLens (Path_ReportImageView MaybeImageFile)
    where type S (Path_ReportImageView MaybeImageFile) = ReportImageView
          type A (Path_ReportImageView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated
instance ToLens (Path_ReportImageView ReportImageView)
    where type S (Path_ReportImageView ReportImageView) = ReportImageView
          type A (Path_ReportImageView ReportImageView) = ReportImageView
          toLens _ = id
instance ToLens (Path_ReportImageView SaneSizeImageSize)
    where type S (Path_ReportImageView SaneSizeImageSize) = ReportImageView
          type A (Path_ReportImageView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize
instance ToLens (Path_ReportImageView URI)
    where type S (Path_ReportImageView URI) = ReportImageView
          type A (Path_ReportImageView URI) = URI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView Text)
    where type S (Path_ReportImageView Text) = ReportImageView
          type A (Path_ReportImageView Text) = Text
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
instance ToLens (Path_ReportIntendedUse String)
    where type S (Path_ReportIntendedUse String) = ReportIntendedUse
          type A (Path_ReportIntendedUse String) = String
          toLens (Path_ReportIntendedUse_View _) = viewLens :: Lens' ReportIntendedUse String
instance ToLens (Path_ReportIntendedUse JSONText)
    where type S (Path_ReportIntendedUse JSONText) = ReportIntendedUse
          type A (Path_ReportIntendedUse JSONText) = JSONText
          toLens (Path_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse String) . toLens v
instance ToLens (Path_ReportIntendedUse ReportIntendedUse)
    where type S (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          type A (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          toLens _ = id
instance ToLens (Path_ReportMap String)
    where type S (Path_ReportMap String) = ReportMap
          type A (Path_ReportMap String) = String
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int64)
    where type S (Path_ReportMap Int64) = ReportMap
          type A (Path_ReportMap Int64) = Int64
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Bool)
    where type S (Path_ReportMap Bool) = ReportMap
          type A (Path_ReportMap Bool) = Bool
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Double)
    where type S (Path_ReportMap Double) = ReportMap
          type A (Path_ReportMap Double) = Double
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int)
    where type S (Path_ReportMap Int) = ReportMap
          type A (Path_ReportMap Int) = Int
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Dimension)
    where type S (Path_ReportMap Dimension) = ReportMap
          type A (Path_ReportMap Dimension) = Dimension
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageCrop)
    where type S (Path_ReportMap ImageCrop) = ReportMap
          type A (Path_ReportMap ImageCrop) = ImageCrop
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageSize)
    where type S (Path_ReportMap ImageSize) = ReportMap
          type A (Path_ReportMap ImageSize) = ImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Units)
    where type S (Path_ReportMap Units) = ReportMap
          type A (Path_ReportMap Units) = Units
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageFile)
    where type S (Path_ReportMap ImageFile) = ReportMap
          type A (Path_ReportMap ImageFile) = ImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Integer)
    where type S (Path_ReportMap Integer) = ReportMap
          type A (Path_ReportMap Integer) = Integer
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap JSONText)
    where type S (Path_ReportMap JSONText) = ReportMap
          type A (Path_ReportMap JSONText) = JSONText
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markup)
    where type S (Path_ReportMap Markup) = ReportMap
          type A (Path_ReportMap Markup) = Markup
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Permissions)
    where type S (Path_ReportMap Permissions) = ReportMap
          type A (Path_ReportMap Permissions) = Permissions
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserIds)
    where type S (Path_ReportMap UserIds) = ReportMap
          type A (Path_ReportMap UserIds) = UserIds
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPair)
    where type S (Path_ReportMap AbbrevPair) = ReportMap
          type A (Path_ReportMap AbbrevPair) = AbbrevPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPairs)
    where type S (Path_ReportMap AbbrevPairs) = ReportMap
          type A (Path_ReportMap AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Author)
    where type S (Path_ReportMap Author) = ReportMap
          type A (Path_ReportMap Author) = Author
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Authors)
    where type S (Path_ReportMap Authors) = ReportMap
          type A (Path_ReportMap Authors) = Authors
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Branding)
    where type S (Path_ReportMap Branding) = ReportMap
          type A (Path_ReportMap Branding) = Branding
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPair)
    where type S (Path_ReportMap MarkupPair) = ReportMap
          type A (Path_ReportMap MarkupPair) = MarkupPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPairs)
    where type S (Path_ReportMap MarkupPairs) = ReportMap
          type A (Path_ReportMap MarkupPairs) = MarkupPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markups)
    where type S (Path_ReportMap Markups) = ReportMap
          type A (Path_ReportMap Markups) = Markups
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeReportIntendedUse)
    where type S (Path_ReportMap MaybeReportIntendedUse) = ReportMap
          type A (Path_ReportMap MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Report)
    where type S (Path_ReportMap Report) = ReportMap
          type A (Path_ReportMap Report) = Report
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElem)
    where type S (Path_ReportMap ReportElem) = ReportMap
          type A (Path_ReportMap ReportElem) = ReportElem
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElems)
    where type S (Path_ReportMap ReportElems) = ReportMap
          type A (Path_ReportMap ReportElems) = ReportElems
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportFlags)
    where type S (Path_ReportMap ReportFlags) = ReportMap
          type A (Path_ReportMap ReportFlags) = ReportFlags
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStandard)
    where type S (Path_ReportMap ReportStandard) = ReportMap
          type A (Path_ReportMap ReportStandard) = ReportStandard
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStatus)
    where type S (Path_ReportMap ReportStatus) = ReportMap
          type A (Path_ReportMap ReportStatus) = ReportStatus
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueApproachInfo)
    where type S (Path_ReportMap ReportValueApproachInfo) = ReportMap
          type A (Path_ReportMap ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueTypeInfo)
    where type S (Path_ReportMap ReportValueTypeInfo) = ReportMap
          type A (Path_ReportMap ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap EUI)
    where type S (Path_ReportMap EUI) = ReportMap
          type A (Path_ReportMap EUI) = EUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MEUI)
    where type S (Path_ReportMap MEUI) = ReportMap
          type A (Path_ReportMap MEUI) = MEUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeImageFile)
    where type S (Path_ReportMap MaybeImageFile) = ReportMap
          type A (Path_ReportMap MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImage)
    where type S (Path_ReportMap ReportImage) = ReportMap
          type A (Path_ReportMap ReportImage) = ReportImage
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImages)
    where type S (Path_ReportMap ReportImages) = ReportMap
          type A (Path_ReportMap ReportImages) = ReportImages
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReadOnlyFilePath)
    where type S (Path_ReportMap ReadOnlyFilePath) = ReportMap
          type A (Path_ReportMap ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImageView)
    where type S (Path_ReportMap ReportImageView) = ReportMap
          type A (Path_ReportMap ReportImageView) = ReportImageView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportView)
    where type S (Path_ReportMap ReportView) = ReportMap
          type A (Path_ReportMap ReportView) = ReportView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap SaneSizeImageSize)
    where type S (Path_ReportMap SaneSizeImageSize) = ReportMap
          type A (Path_ReportMap SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Item)
    where type S (Path_ReportMap Item) = ReportMap
          type A (Path_ReportMap Item) = Item
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MIM)
    where type S (Path_ReportMap MIM) = ReportMap
          type A (Path_ReportMap MIM) = MIM
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MRR)
    where type S (Path_ReportMap MRR) = ReportMap
          type A (Path_ReportMap MRR) = MRR
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap
instance ToLens (Path_ReportMap ReportMap)
    where type S (Path_ReportMap ReportMap) = ReportMap
          type A (Path_ReportMap ReportMap) = ReportMap
          toLens _ = id
instance ToLens (Path_ReportMap CIString)
    where type S (Path_ReportMap CIString) = ReportMap
          type A (Path_ReportMap CIString) = CIString
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap URI)
    where type S (Path_ReportMap URI) = ReportMap
          type A (Path_ReportMap URI) = URI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Text)
    where type S (Path_ReportMap Text) = ReportMap
          type A (Path_ReportMap Text) = Text
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserId)
    where type S (Path_ReportMap UserId) = ReportMap
          type A (Path_ReportMap UserId) = UserId
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UUID)
    where type S (Path_ReportMap UUID) = ReportMap
          type A (Path_ReportMap UUID) = UUID
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportStandard Int)
    where type S (Path_ReportStandard Int) = ReportStandard
          type A (Path_ReportStandard Int) = Int
          toLens (Path_ReportStandard_unReportStandard _x) = lens_ReportStandard_unReportStandard
instance ToLens (Path_ReportStandard ReportStandard)
    where type S (Path_ReportStandard ReportStandard) = ReportStandard
          type A (Path_ReportStandard ReportStandard) = ReportStandard
          toLens _ = id
instance ToLens (Path_ReportStatus String)
    where type S (Path_ReportStatus String) = ReportStatus
          type A (Path_ReportStatus String) = String
          toLens (Path_ReportStatus_View _) = viewLens :: Lens' ReportStatus String
instance ToLens (Path_ReportStatus JSONText)
    where type S (Path_ReportStatus JSONText) = ReportStatus
          type A (Path_ReportStatus JSONText) = JSONText
          toLens (Path_ReportStatus_View v) = (viewLens :: Lens' ReportStatus String) . toLens v
instance ToLens (Path_ReportStatus ReportStatus)
    where type S (Path_ReportStatus ReportStatus) = ReportStatus
          type A (Path_ReportStatus ReportStatus) = ReportStatus
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo JSONText)
    where type S (Path_ReportValueApproachInfo JSONText) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo JSONText) = JSONText
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueApproachInfo Markup)
    where type S (Path_ReportValueApproachInfo Markup) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Markup) = Markup
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription
instance ToLens (Path_ReportValueApproachInfo ReportValueApproachInfo)
    where type S (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo Text)
    where type S (Path_ReportValueApproachInfo Text) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Text) = Text
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueTypeInfo JSONText)
    where type S (Path_ReportValueTypeInfo JSONText) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo JSONText) = JSONText
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportValueTypeInfo Markup)
    where type S (Path_ReportValueTypeInfo Markup) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Markup) = Markup
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition
instance ToLens (Path_ReportValueTypeInfo ReportValueTypeInfo)
    where type S (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          toLens _ = id
instance ToLens (Path_ReportValueTypeInfo Text)
    where type S (Path_ReportValueTypeInfo Text) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Text) = Text
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportView String)
    where type S (Path_ReportView String) = ReportView
          type A (Path_ReportView String) = String
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Int64)
    where type S (Path_ReportView Int64) = ReportView
          type A (Path_ReportView Int64) = Int64
          toLens (Path_ReportView__reportCreated _x) = lens_ReportView__reportCreated
instance ToLens (Path_ReportView Bool)
    where type S (Path_ReportView Bool) = ReportView
          type A (Path_ReportView Bool) = Bool
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName
instance ToLens (Path_ReportView Double)
    where type S (Path_ReportView Double) = ReportView
          type A (Path_ReportView Double) = Double
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Int)
    where type S (Path_ReportView Int) = ReportView
          type A (Path_ReportView Int) = Int
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion . toLens _x
instance ToLens (Path_ReportView Dimension)
    where type S (Path_ReportView Dimension) = ReportView
          type A (Path_ReportView Dimension) = Dimension
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageCrop)
    where type S (Path_ReportView ImageCrop) = ReportView
          type A (Path_ReportView ImageCrop) = ImageCrop
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageSize)
    where type S (Path_ReportView ImageSize) = ReportView
          type A (Path_ReportView ImageSize) = ImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Units)
    where type S (Path_ReportView Units) = ReportView
          type A (Path_ReportView Units) = Units
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageFile)
    where type S (Path_ReportView ImageFile) = ReportView
          type A (Path_ReportView ImageFile) = ImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Integer)
    where type S (Path_ReportView Integer) = ReportView
          type A (Path_ReportView Integer) = Integer
          toLens (Path_ReportView__reportRevision _x) = lens_ReportView__reportRevision
instance ToLens (Path_ReportView JSONText)
    where type S (Path_ReportView JSONText) = ReportView
          type A (Path_ReportView JSONText) = JSONText
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Markup)
    where type S (Path_ReportView Markup) = ReportView
          type A (Path_ReportView Markup) = Markup
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy
instance ToLens (Path_ReportView Permissions)
    where type S (Path_ReportView Permissions) = ReportView
          type A (Path_ReportView Permissions) = Permissions
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms
instance ToLens (Path_ReportView UserIds)
    where type S (Path_ReportView UserIds) = ReportView
          type A (Path_ReportView UserIds) = UserIds
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView AbbrevPair)
    where type S (Path_ReportView AbbrevPair) = ReportView
          type A (Path_ReportView AbbrevPair) = AbbrevPair
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView AbbrevPairs)
    where type S (Path_ReportView AbbrevPairs) = ReportView
          type A (Path_ReportView AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs
instance ToLens (Path_ReportView Author)
    where type S (Path_ReportView Author) = ReportView
          type A (Path_ReportView Author) = Author
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
instance ToLens (Path_ReportView Authors)
    where type S (Path_ReportView Authors) = ReportView
          type A (Path_ReportView Authors) = Authors
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors
instance ToLens (Path_ReportView Branding)
    where type S (Path_ReportView Branding) = ReportView
          type A (Path_ReportView Branding) = Branding
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding
instance ToLens (Path_ReportView MarkupPair)
    where type S (Path_ReportView MarkupPair) = ReportView
          type A (Path_ReportView MarkupPair) = MarkupPair
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
instance ToLens (Path_ReportView MarkupPairs)
    where type S (Path_ReportView MarkupPairs) = ReportView
          type A (Path_ReportView MarkupPairs) = MarkupPairs
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources
instance ToLens (Path_ReportView Markups)
    where type S (Path_ReportView Markups) = ReportView
          type A (Path_ReportView Markups) = Markups
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions
instance ToLens (Path_ReportView MaybeReportIntendedUse)
    where type S (Path_ReportView MaybeReportIntendedUse) = ReportView
          type A (Path_ReportView MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse
instance ToLens (Path_ReportView ReportElem)
    where type S (Path_ReportView ReportElem) = ReportView
          type A (Path_ReportView ReportElem) = ReportElem
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportElems)
    where type S (Path_ReportView ReportElems) = ReportView
          type A (Path_ReportView ReportElems) = ReportElems
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody
instance ToLens (Path_ReportView ReportFlags)
    where type S (Path_ReportView ReportFlags) = ReportView
          type A (Path_ReportView ReportFlags) = ReportFlags
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags
instance ToLens (Path_ReportView ReportStandard)
    where type S (Path_ReportView ReportStandard) = ReportView
          type A (Path_ReportView ReportStandard) = ReportStandard
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion
instance ToLens (Path_ReportView ReportStatus)
    where type S (Path_ReportView ReportStatus) = ReportView
          type A (Path_ReportView ReportStatus) = ReportStatus
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus
instance ToLens (Path_ReportView ReportValueApproachInfo)
    where type S (Path_ReportView ReportValueApproachInfo) = ReportView
          type A (Path_ReportView ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo
instance ToLens (Path_ReportView ReportValueTypeInfo)
    where type S (Path_ReportView ReportValueTypeInfo) = ReportView
          type A (Path_ReportView ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo
instance ToLens (Path_ReportView EUI)
    where type S (Path_ReportView EUI) = ReportView
          type A (Path_ReportView EUI) = EUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MEUI)
    where type S (Path_ReportView MEUI) = ReportView
          type A (Path_ReportView MEUI) = MEUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MaybeImageFile)
    where type S (Path_ReportView MaybeImageFile) = ReportView
          type A (Path_ReportView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImage)
    where type S (Path_ReportView ReportImage) = ReportView
          type A (Path_ReportView ReportImage) = ReportImage
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImages)
    where type S (Path_ReportView ReportImages) = ReportView
          type A (Path_ReportView ReportImages) = ReportImages
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReadOnlyFilePath)
    where type S (Path_ReportView ReadOnlyFilePath) = ReportView
          type A (Path_ReportView ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder
instance ToLens (Path_ReportView ReportImageView)
    where type S (Path_ReportView ReportImageView) = ReportView
          type A (Path_ReportView ReportImageView) = ReportImageView
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportView)
    where type S (Path_ReportView ReportView) = ReportView
          type A (Path_ReportView ReportView) = ReportView
          toLens _ = id
instance ToLens (Path_ReportView SaneSizeImageSize)
    where type S (Path_ReportView SaneSizeImageSize) = ReportView
          type A (Path_ReportView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Item)
    where type S (Path_ReportView Item) = ReportView
          type A (Path_ReportView Item) = Item
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MIM)
    where type S (Path_ReportView MIM) = ReportView
          type A (Path_ReportView MIM) = MIM
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView CIString)
    where type S (Path_ReportView CIString) = ReportView
          type A (Path_ReportView CIString) = CIString
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView URI)
    where type S (Path_ReportView URI) = ReportView
          type A (Path_ReportView URI) = URI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Text)
    where type S (Path_ReportView Text) = ReportView
          type A (Path_ReportView Text) = Text
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
instance ToLens (Path_ReportView UserId)
    where type S (Path_ReportView UserId) = ReportView
          type A (Path_ReportView UserId) = UserId
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView UUID)
    where type S (Path_ReportView UUID) = ReportView
          type A (Path_ReportView UUID) = UUID
          toLens (Path_ReportView__reportUUID _x) = lens_ReportView__reportUUID
instance ToLens (Path_SaneSizeImageSize String)
    where type S (Path_SaneSizeImageSize String) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize String) = String
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Double)
    where type S (Path_SaneSizeImageSize Double) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Double) = Double
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Dimension)
    where type S (Path_SaneSizeImageSize Dimension) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Dimension) = Dimension
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize ImageSize)
    where type S (Path_SaneSizeImageSize ImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize ImageSize) = ImageSize
          toLens (Path_SaneSizeImageSize_View _) = viewLens :: Lens' SaneSizeImageSize ImageSize
instance ToLens (Path_SaneSizeImageSize Units)
    where type S (Path_SaneSizeImageSize Units) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Units) = Units
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize JSONText)
    where type S (Path_SaneSizeImageSize JSONText) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize JSONText) = JSONText
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize SaneSizeImageSize)
    where type S (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          toLens _ = id
instance ToLens (Path_String String)
    where type S (Path_String String) = String
          type A (Path_String String) = String
          toLens _ = id
instance ToLens (Path_String JSONText)
    where type S (Path_String JSONText) = String
          type A (Path_String JSONText) = JSONText
          toLens (Path_String_View _) = viewLens :: Lens' String JSONText
instance ToLens (Path_Text JSONText)
    where type S (Path_Text JSONText) = Text
          type A (Path_Text JSONText) = JSONText
          toLens (Path_Text_View _) = viewLens :: Lens' Text JSONText
instance ToLens (Path_Text Text)
    where type S (Path_Text Text) = Text
          type A (Path_Text Text) = Text
          toLens _ = id
instance ToLens (Path_URI URI)
    where type S (Path_URI URI) = URI
          type A (Path_URI URI) = URI
          toLens _ = id
instance ToLens (Path_UUID UUID)
    where type S (Path_UUID UUID) = UUID
          type A (Path_UUID UUID) = UUID
          toLens _ = id
instance ToLens (Path_Units Units)
    where type S (Path_Units Units) = Units
          type A (Path_Units Units) = Units
          toLens _ = id
instance ToLens (Path_Units JSONText)
    where type S (Path_Units JSONText) = Units
          type A (Path_Units JSONText) = JSONText
          toLens (Path_Units_View _) = viewLens :: Lens' Units JSONText
instance ToLens (Path_UserId UserId)
    where type S (Path_UserId UserId) = UserId
          type A (Path_UserId UserId) = UserId
          toLens _ = id
instance ToLens (Path_UserIds JSONText)
    where type S (Path_UserIds JSONText) = UserIds
          type A (Path_UserIds JSONText) = JSONText
          toLens (Path_UserIds_View v) = (viewLens :: Lens' UserIds Text) . toLens v
instance ToLens (Path_UserIds UserIds)
    where type S (Path_UserIds UserIds) = UserIds
          type A (Path_UserIds UserIds) = UserIds
          toLens _ = id
instance ToLens (Path_UserIds Text)
    where type S (Path_UserIds Text) = UserIds
          type A (Path_UserIds Text) = Text
          toLens (Path_UserIds_View _) = viewLens :: Lens' UserIds Text
instance ToLens (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)))
    where type S (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = ImageFile
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI)))
    where type S (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = EUI
          toLens (Path_Just _) = _Just
instance ToLens (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI)))
    where type S (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          toLens _ = id
instance ToLens (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI)))
    where type S (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = URI
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either UPath_URI UPath_ImageFile))
    where type S (Path_Maybe (Path_Either UPath_URI UPath_ImageFile)) = MEUI
          type A (Path_Maybe (Path_Either UPath_URI UPath_ImageFile)) = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (Path_Just v) = _Just . toLens v
instance ToLens UPath_Author
    where type S UPath_Author = Author
          type A UPath_Author = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Author_authorName _p) = lens_Author_authorName . toLens _p
          toLens (UPath_Author_authorCredentials _p) = lens_Author_authorCredentials . toLens _p
instance ToLens UPath_Bool
    where type S UPath_Bool = Bool
          type A UPath_Bool = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Bool_View v) = (viewLens :: Lens' Bool String) . toLens v
instance ToLens UPath_Branding
    where type S UPath_Branding = Branding
          type A UPath_Branding = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens UPath_CIString
    where type S UPath_CIString = CIString
          type A UPath_CIString = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens UPath_Dimension
    where type S UPath_Dimension = Dimension
          type A UPath_Dimension = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Dimension_View v) = (viewLens :: Lens' Dimension JSONText) . toLens v
instance ToLens UPath_Double
    where type S UPath_Double = Double
          type A UPath_Double = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Double_View v) = (viewLens :: Lens' Double String) . toLens v
instance ToLens UPath_ImageCrop
    where type S UPath_ImageCrop = ImageCrop
          type A UPath_ImageCrop = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_ImageFile
    where type S UPath_ImageFile = ImageFile
          type A UPath_ImageFile = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_ImageSize
    where type S UPath_ImageSize = ImageSize
          type A UPath_ImageSize = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ImageSize_dim _p) = lens_ImageSize_dim . toLens _p
          toLens (UPath_ImageSize_size _p) = lens_ImageSize_size . toLens _p
          toLens (UPath_ImageSize_units _p) = lens_ImageSize_units . toLens _p
instance ToLens UPath_Int
    where type S UPath_Int = Int
          type A UPath_Int = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_Int64
    where type S UPath_Int64 = Int64
          type A UPath_Int64 = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_Integer
    where type S UPath_Integer = Integer
          type A UPath_Integer = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_Item
    where type S UPath_Item = Item
          type A UPath_Item = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Item_itemName _p) = lens_Item_itemName . toLens _p
          toLens (UPath_Item_fields _p) = lens_Item_fields . toLens _p
          toLens (UPath_Item_images _p) = lens_Item_images . toLens _p
instance ToLens UPath_JSONText
    where type S UPath_JSONText = JSONText
          type A UPath_JSONText = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_Markup
    where type S UPath_Markup = Markup
          type A UPath_Markup = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Markup_markdownText _p) = lens_Markup_markdownText . toLens _p
          toLens (UPath_Markup_htmlText _p) = lens_Markup_htmlText . toLens _p
instance ToLens UPath_MaybeImageFile
    where type S UPath_MaybeImageFile = MaybeImageFile
          type A UPath_MaybeImageFile = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_MaybeImageFile_View v) = (viewLens :: Lens' MaybeImageFile String) . toLens v
instance ToLens UPath_MaybeReportIntendedUse
    where type S UPath_MaybeReportIntendedUse = MaybeReportIntendedUse
          type A UPath_MaybeReportIntendedUse = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_MaybeReportIntendedUse_View v) = (viewLens :: Lens' MaybeReportIntendedUse String) . toLens v
instance ToLens UPath_Permissions
    where type S UPath_Permissions = Permissions
          type A UPath_Permissions = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Permissions_owner _p) = lens_Permissions_owner . toLens _p
          toLens (UPath_Permissions_writers _p) = lens_Permissions_writers . toLens _p
          toLens (UPath_Permissions_readers _p) = lens_Permissions_readers . toLens _p
instance ToLens UPath_ReadOnlyFilePath
    where type S UPath_ReadOnlyFilePath = ReadOnlyFilePath
          type A UPath_ReadOnlyFilePath = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReadOnlyFilePath_View v) = (viewLens :: Lens' ReadOnlyFilePath String) . toLens v
instance ToLens UPath_Report
    where type S UPath_Report = Report
          type A UPath_Report = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens UPath_ReportElem
    where type S UPath_ReportElem = ReportElem
          type A UPath_ReportElem = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportElem_elemItem _p) = lens_ReportElem_elemItem . toLens _p
          toLens (UPath_ReportElem_elemText _p) = lens_ReportElem_elemText . toLens _p
instance ToLens UPath_ReportFlags
    where type S UPath_ReportFlags = ReportFlags
          type A UPath_ReportFlags = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportFlags_hideEmptyItemFields _p) = lens_ReportFlags_hideEmptyItemFields . toLens _p
instance ToLens UPath_ReportImage
    where type S UPath_ReportImage = ReportImage
          type A UPath_ReportImage = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens UPath_ReportImageView
    where type S UPath_ReportImageView = ReportImageView
          type A UPath_ReportImageView = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportImageView__picSize _p) = lens_ReportImageView__picSize . toLens _p
          toLens (UPath_ReportImageView__picCrop _p) = lens_ReportImageView__picCrop . toLens _p
          toLens (UPath_ReportImageView__picCaption _p) = lens_ReportImageView__picCaption . toLens _p
          toLens (UPath_ReportImageView__picOriginal _p) = lens_ReportImageView__picOriginal . toLens _p
          toLens (UPath_ReportImageView__picEditedDeprecated _p) = lens_ReportImageView__picEditedDeprecated . toLens _p
          toLens (UPath_ReportImageView__picThumbDeprecated _p) = lens_ReportImageView__picThumbDeprecated . toLens _p
          toLens (UPath_ReportImageView__picPrinterDeprecated _p) = lens_ReportImageView__picPrinterDeprecated . toLens _p
          toLens (UPath_ReportImageView__picMustEnlarge _p) = lens_ReportImageView__picMustEnlarge . toLens _p
          toLens (UPath_ReportImageView__picEnlargedDeprecated _p) = lens_ReportImageView__picEnlargedDeprecated . toLens _p
instance ToLens UPath_ReportIntendedUse
    where type S UPath_ReportIntendedUse = ReportIntendedUse
          type A UPath_ReportIntendedUse = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse String) . toLens v
instance ToLens UPath_ReportMap
    where type S UPath_ReportMap = ReportMap
          type A UPath_ReportMap = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportMap_unReportMap _p) = lens_ReportMap_unReportMap . toLens _p
instance ToLens UPath_ReportStandard
    where type S UPath_ReportStandard = ReportStandard
          type A UPath_ReportStandard = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportStandard_unReportStandard _p) = lens_ReportStandard_unReportStandard . toLens _p
instance ToLens UPath_ReportStatus
    where type S UPath_ReportStatus = ReportStatus
          type A UPath_ReportStatus = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportStatus_View v) = (viewLens :: Lens' ReportStatus String) . toLens v
instance ToLens UPath_ReportValueApproachInfo
    where type S UPath_ReportValueApproachInfo = ReportValueApproachInfo
          type A UPath_ReportValueApproachInfo = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportValueApproachInfo_reportValueApproachName _p) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _p
          toLens (UPath_ReportValueApproachInfo_reportValueApproachDescription _p) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _p
instance ToLens UPath_ReportValueTypeInfo
    where type S UPath_ReportValueTypeInfo = ReportValueTypeInfo
          type A UPath_ReportValueTypeInfo = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportValueTypeInfo_reportValueTypeName _p) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _p
          toLens (UPath_ReportValueTypeInfo_reportValueTypeDescription _p) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _p
          toLens (UPath_ReportValueTypeInfo_reportValueTypeDefinition _p) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _p
instance ToLens UPath_ReportView
    where type S UPath_ReportView = ReportView
          type A UPath_ReportView = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_ReportView__reportFolder _p) = lens_ReportView__reportFolder . toLens _p
          toLens (UPath_ReportView__reportName _p) = lens_ReportView__reportName . toLens _p
          toLens (UPath_ReportView__reportDate _p) = lens_ReportView__reportDate . toLens _p
          toLens (UPath_ReportView__reportContractDate _p) = lens_ReportView__reportContractDate . toLens _p
          toLens (UPath_ReportView__reportInspectionDate _p) = lens_ReportView__reportInspectionDate . toLens _p
          toLens (UPath_ReportView__reportEffectiveDate _p) = lens_ReportView__reportEffectiveDate . toLens _p
          toLens (UPath_ReportView__reportAuthors _p) = lens_ReportView__reportAuthors . toLens _p
          toLens (UPath_ReportView__reportPreparer _p) = lens_ReportView__reportPreparer . toLens _p
          toLens (UPath_ReportView__reportPreparerEIN _p) = lens_ReportView__reportPreparerEIN . toLens _p
          toLens (UPath_ReportView__reportPreparerAddress _p) = lens_ReportView__reportPreparerAddress . toLens _p
          toLens (UPath_ReportView__reportPreparerEMail _p) = lens_ReportView__reportPreparerEMail . toLens _p
          toLens (UPath_ReportView__reportPreparerWebsite _p) = lens_ReportView__reportPreparerWebsite . toLens _p
          toLens (UPath_ReportView__reportAbbrevs _p) = lens_ReportView__reportAbbrevs . toLens _p
          toLens (UPath_ReportView__reportTitle _p) = lens_ReportView__reportTitle . toLens _p
          toLens (UPath_ReportView__reportHeader _p) = lens_ReportView__reportHeader . toLens _p
          toLens (UPath_ReportView__reportFooter _p) = lens_ReportView__reportFooter . toLens _p
          toLens (UPath_ReportView__reportIntendedUse _p) = lens_ReportView__reportIntendedUse . toLens _p
          toLens (UPath_ReportView__reportValueTypeInfo _p) = lens_ReportView__reportValueTypeInfo . toLens _p
          toLens (UPath_ReportView__reportValueApproachInfo _p) = lens_ReportView__reportValueApproachInfo . toLens _p
          toLens (UPath_ReportView__reportClientName _p) = lens_ReportView__reportClientName . toLens _p
          toLens (UPath_ReportView__reportClientAddress _p) = lens_ReportView__reportClientAddress . toLens _p
          toLens (UPath_ReportView__reportClientGreeting _p) = lens_ReportView__reportClientGreeting . toLens _p
          toLens (UPath_ReportView__reportItemsOwnerFull _p) = lens_ReportView__reportItemsOwnerFull . toLens _p
          toLens (UPath_ReportView__reportItemsOwner _p) = lens_ReportView__reportItemsOwner . toLens _p
          toLens (UPath_ReportView__reportBriefItems _p) = lens_ReportView__reportBriefItems . toLens _p
          toLens (UPath_ReportView__reportInspectionLocation _p) = lens_ReportView__reportInspectionLocation . toLens _p
          toLens (UPath_ReportView__reportBody _p) = lens_ReportView__reportBody . toLens _p
          toLens (UPath_ReportView__reportGlossary _p) = lens_ReportView__reportGlossary . toLens _p
          toLens (UPath_ReportView__reportSources _p) = lens_ReportView__reportSources . toLens _p
          toLens (UPath_ReportView__reportLetterOfTransmittal _p) = lens_ReportView__reportLetterOfTransmittal . toLens _p
          toLens (UPath_ReportView__reportScopeOfWork _p) = lens_ReportView__reportScopeOfWork . toLens _p
          toLens (UPath_ReportView__reportCertification _p) = lens_ReportView__reportCertification . toLens _p
          toLens (UPath_ReportView__reportLimitingConditions _p) = lens_ReportView__reportLimitingConditions . toLens _p
          toLens (UPath_ReportView__reportPrivacyPolicy _p) = lens_ReportView__reportPrivacyPolicy . toLens _p
          toLens (UPath_ReportView__reportPerms _p) = lens_ReportView__reportPerms . toLens _p
          toLens (UPath_ReportView__reportRevision _p) = lens_ReportView__reportRevision . toLens _p
          toLens (UPath_ReportView__reportCreated _p) = lens_ReportView__reportCreated . toLens _p
          toLens (UPath_ReportView__reportBranding _p) = lens_ReportView__reportBranding . toLens _p
          toLens (UPath_ReportView__reportStatus _p) = lens_ReportView__reportStatus . toLens _p
          toLens (UPath_ReportView__reportRedacted _p) = lens_ReportView__reportRedacted . toLens _p
          toLens (UPath_ReportView__reportFlags _p) = lens_ReportView__reportFlags . toLens _p
          toLens (UPath_ReportView__reportUUID _p) = lens_ReportView__reportUUID . toLens _p
          toLens (UPath_ReportView__reportOrderByItemName _p) = lens_ReportView__reportOrderByItemName . toLens _p
          toLens (UPath_ReportView__reportDisplayItemName _p) = lens_ReportView__reportDisplayItemName . toLens _p
          toLens (UPath_ReportView__reportStandardsVersion _p) = lens_ReportView__reportStandardsVersion . toLens _p
instance ToLens UPath_SaneSizeImageSize
    where type S UPath_SaneSizeImageSize = SaneSizeImageSize
          type A UPath_SaneSizeImageSize = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens UPath_String
    where type S UPath_String = String
          type A UPath_String = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_String_View v) = (viewLens :: Lens' String JSONText) . toLens v
instance ToLens UPath_Text
    where type S UPath_Text = Text
          type A UPath_Text = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Text_View v) = (viewLens :: Lens' Text JSONText) . toLens v
instance ToLens UPath_URI
    where type S UPath_URI = URI
          type A UPath_URI = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_UUID
    where type S UPath_UUID = UUID
          type A UPath_UUID = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_Units
    where type S UPath_Units = Units
          type A UPath_Units = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_Units_View v) = (viewLens :: Lens' Units JSONText) . toLens v
instance ToLens UPath_UserId
    where type S UPath_UserId = UserId
          type A UPath_UserId = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
instance ToLens UPath_UserIds
    where type S UPath_UserIds = UserIds
          type A UPath_UserIds = Univ
          toLens p | p == idPath = lens u (\s a -> maybe s id (unU' a))
          toLens (UPath_UserIds_View v) = (viewLens :: Lens' UserIds Text) . toLens v
