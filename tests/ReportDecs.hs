-- | Use template haskell functions to generate the path types for appraisalscribe.
{-# LANGUAGE CPP #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wall -fno-warn-orphans -fno-warn-incomplete-patterns #-}
module ReportDecs where

import Appraisal.File (File)
import Appraisal.Image
import Appraisal.ImageFile
import Appraisal.IntJS
import Appraisal.Markup (Markup(..))
import Appraisal.Permissions
import Appraisal.Report
import Appraisal.ReportImage
import Appraisal.ReportInstances
import Appraisal.ReportItem
import Appraisal.ReportMap (ReportID(..), ReportMap(..), MRR)
import Appraisal.Utils.CIString (CIString(..))
import Control.Lens (iso, _Just, _1, _2, _Left, _Right, Lens', toListOf, Traversal')
import Data.Generics (Data, Typeable)
import Data.Int (Int64)
import Data.Map (Map, toList)
import Data.Proxy
import Data.Text (Text)
import Data.Tree (Tree(Node), Forest)
import Data.UserId (UserId(UserId))
import Data.UUID (UUID)
import Data.UUID.Orphans ()
import Language.Haskell.TH.Path.Core
import Language.Haskell.TH.Path.Order (lens_omat, Order, Path_OMap(Path_At), toPairs)
import Language.Haskell.TH.Path.View (View(viewLens))
import Network.URI (URI(URI), URIAuth)

data Path_Author _a
    = Path_Author_authorName (Path_Markup _a) | Path_Author_authorCredentials (Path_Markup _a) | Path_Author
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Bool _a = Path_Bool_View (Path_String _a) | Path_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Branding _a = Path_Branding_View (Path_Text _a) | Path_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_CIString _a = Path_CIString_View (Path_Text _a) | Path_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Dimension _a = Path_Dimension_View (Path_JSONText _a) | Path_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Double _a = Path_Double_View (Path_String _a) | Path_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageCrop _a = Path_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageFile _a = Path_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageSize _a
    = Path_ImageSize_dim (Path_Dimension _a) | Path_ImageSize_size (Path_Double _a) | Path_ImageSize_units (Path_Units _a) | Path_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int _a = Path_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int64 _a = Path_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Integer _a = Path_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Item _a
    = Path_Item_itemName (Path_Text _a) | Path_Item_fields (Path_MIM _a) | Path_Item_images (Path_ReportImages _a) | Path_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_JSONText _a = Path_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Markup _a = Path_Markup_markdownText (Path_Text _a) | Path_Markup_htmlText (Path_Text _a) | Path_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeImageFile _a = Path_MaybeImageFile_View (Path_String _a) | Path_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeReportIntendedUse _a = Path_MaybeReportIntendedUse_View (Path_String _a) | Path_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Permissions _a
    = Path_Permissions_owner (Path_UserId _a) | Path_Permissions_writers (Path_UserIds _a) | Path_Permissions_readers (Path_UserIds _a) | Path_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReadOnlyFilePath _a = Path_ReadOnlyFilePath_View (Path_String _a) | Path_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Report _a = Path_Report_View (Path_ReportView _a) | Path_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportElem _a
    = Path_ReportElem_elemItem (Path_Item _a) | Path_ReportElem_elemText (Path_Markup _a) | Path_ReportElem
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportFlags _a = Path_ReportFlags_hideEmptyItemFields (Path_Bool _a) | Path_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImage _a = Path_ReportImage_View (Path_ReportImageView _a) | Path_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImageView _a
    = Path_ReportImageView__picSize (Path_SaneSizeImageSize _a)
    | Path_ReportImageView__picCrop (Path_ImageCrop _a)
    | Path_ReportImageView__picCaption (Path_Markup _a)
    | Path_ReportImageView__picOriginal (Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a)))
    | Path_ReportImageView__picEditedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picThumbDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picPrinterDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picMustEnlarge (Path_Bool _a)
    | Path_ReportImageView__picEnlargedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportIntendedUse _a = Path_ReportIntendedUse_View (Path_String _a) | Path_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportMap _a = Path_ReportMap_unReportMap (Path_MRR _a) | Path_ReportMap deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStandard _a = Path_ReportStandard_unReportStandard (Path_Int _a) | Path_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStatus _a = Path_ReportStatus_View (Path_String _a) | Path_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueApproachInfo _a
    = Path_ReportValueApproachInfo_reportValueApproachName (Path_Markup _a)
    | Path_ReportValueApproachInfo_reportValueApproachDescription (Path_Markup _a)
    | Path_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueTypeInfo _a
    = Path_ReportValueTypeInfo_reportValueTypeName (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDescription (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDefinition (Path_Markup _a)
    | Path_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportView _a
    = Path_ReportView__reportFolder (Path_ReadOnlyFilePath _a)
    | Path_ReportView__reportName (Path_Markup _a)
    | Path_ReportView__reportDate (Path_Markup _a)
    | Path_ReportView__reportContractDate (Path_Markup _a)
    | Path_ReportView__reportInspectionDate (Path_Markup _a)
    | Path_ReportView__reportEffectiveDate (Path_Markup _a)
    | Path_ReportView__reportAuthors (Path_Authors _a)
    | Path_ReportView__reportPreparer (Path_Markup _a)
    | Path_ReportView__reportPreparerEIN (Path_Markup _a)
    | Path_ReportView__reportPreparerAddress (Path_Markup _a)
    | Path_ReportView__reportPreparerEMail (Path_Markup _a)
    | Path_ReportView__reportPreparerWebsite (Path_Markup _a)
    | Path_ReportView__reportAbbrevs (Path_AbbrevPairs _a)
    | Path_ReportView__reportTitle (Path_Markup _a)
    | Path_ReportView__reportHeader (Path_Markup _a)
    | Path_ReportView__reportFooter (Path_Markup _a)
    | Path_ReportView__reportIntendedUse (Path_MaybeReportIntendedUse _a)
    | Path_ReportView__reportValueTypeInfo (Path_ReportValueTypeInfo _a)
    | Path_ReportView__reportValueApproachInfo (Path_ReportValueApproachInfo _a)
    | Path_ReportView__reportClientName (Path_Markup _a)
    | Path_ReportView__reportClientAddress (Path_Markup _a)
    | Path_ReportView__reportClientGreeting (Path_Markup _a)
    | Path_ReportView__reportItemsOwnerFull (Path_Markup _a)
    | Path_ReportView__reportItemsOwner (Path_Markup _a)
    | Path_ReportView__reportBriefItems (Path_Markup _a)
    | Path_ReportView__reportInspectionLocation (Path_Markup _a)
    | Path_ReportView__reportBody (Path_ReportElems _a)
    | Path_ReportView__reportGlossary (Path_MarkupPairs _a)
    | Path_ReportView__reportSources (Path_MarkupPairs _a)
    | Path_ReportView__reportLetterOfTransmittal (Path_Markup _a)
    | Path_ReportView__reportScopeOfWork (Path_Markup _a)
    | Path_ReportView__reportCertification (Path_Markups _a)
    | Path_ReportView__reportLimitingConditions (Path_Markups _a)
    | Path_ReportView__reportPrivacyPolicy (Path_Markup _a)
    | Path_ReportView__reportPerms (Path_Permissions _a)
    | Path_ReportView__reportRevision (Path_Integer _a)
    | Path_ReportView__reportCreated (Path_EpochMilli _a)
    | Path_ReportView__reportBranding (Path_Branding _a)
    | Path_ReportView__reportStatus (Path_ReportStatus _a)
    | Path_ReportView__reportRedacted (Path_Bool _a)
    | Path_ReportView__reportFlags (Path_ReportFlags _a)
    | Path_ReportView__reportUUID (Path_UUID _a)
    | Path_ReportView__reportOrderByItemName (Path_Bool _a)
    | Path_ReportView__reportDisplayItemName (Path_Bool _a)
    | Path_ReportView__reportStandardsVersion (Path_ReportStandard _a)
    | Path_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_SaneSizeImageSize _a = Path_SaneSizeImageSize_View (Path_ImageSize _a) | Path_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_String _a = Path_String_View (Path_JSONText _a) | Path_String deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Text _a = Path_Text_View (Path_JSONText _a) | Path_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_URI _a = Path_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UUID _a = Path_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Units _a = Path_Units_View (Path_JSONText _a) | Path_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserId _a = Path_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserIds _a = Path_UserIds_View (Path_Text _a) | Path_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
type Path_AbbrevPair _a = Path_Pair (Path_CIString _a) (Path_Markup _a)
type Path_AbbrevPairs _a = Path_OMap AbbrevPairID (Path_Pair (Path_CIString _a) (Path_Markup _a))
type Path_Authors _a = Path_OMap AuthorID (Path_Author _a)
type Path_Checksum _a = Path_String _a
type Path_EUI _a = Path_Either (Path_URI _a) (Path_ImageFile _a)
type Path_EpochMilli _a = Path_Int64 _a
type Path_FilePath _a = Path_String _a
type Path_MEUI _a = Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a))
type Path_MIM _a = Path_Map ItemFieldName (Path_Markup _a)
type Path_MRR _a = Path_Map ReportID (Path_Report _a)
type Path_MarkupPair _a = Path_Pair (Path_Markup _a) (Path_Markup _a)
type Path_MarkupPairs _a = Path_OMap MarkupPairID (Path_Pair (Path_Markup _a) (Path_Markup _a))
type Path_Markups _a = Path_OMap MarkupID (Path_Markup _a)
type Path_ReportElems _a = Path_OMap ReportElemID (Path_ReportElem _a)
type Path_ReportImages _a = Path_OMap ReportImageID (Path_ReportImage _a)
type Path_Size _a = Path_Int _a
class HasAuthor c
    where lens_author :: Lens' c Author
          lens_Author_authorCredentials :: forall . Lens' c Markup
          lens_Author_authorCredentials = (.) lens_author lens_Author_authorCredentials
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName :: forall . Lens' c Markup
          lens_Author_authorName = (.) lens_author lens_Author_authorName
          {-# INLINE lens_Author_authorName #-}
class HasBool c
    where lens_bool :: Lens' c Bool
class HasBranding c
    where lens_branding :: Lens' c Branding
class HasCIString c
    where lens_cIString :: Lens' c CIString
          lens_CIString_unCIString :: forall . Lens' c String
          lens_CIString_unCIString = (.) lens_cIString lens_CIString_unCIString
          {-# INLINE lens_CIString_unCIString #-}
class HasDimension c
    where lens_dimension :: Lens' c Dimension
class HasDouble c
    where lens_double :: Lens' c Double
class HasImageCrop c
    where lens_imageCrop :: Lens' c ImageCrop
          lens_ImageCrop_bottomCrop :: forall . Lens' c Int
          lens_ImageCrop_bottomCrop = (.) lens_imageCrop lens_ImageCrop_bottomCrop
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop :: forall . Lens' c Int
          lens_ImageCrop_leftCrop = (.) lens_imageCrop lens_ImageCrop_leftCrop
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop :: forall . Lens' c Int
          lens_ImageCrop_rightCrop = (.) lens_imageCrop lens_ImageCrop_rightCrop
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation :: forall . Lens' c Int
          lens_ImageCrop_rotation = (.) lens_imageCrop lens_ImageCrop_rotation
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop :: forall . Lens' c Int
          lens_ImageCrop_topCrop = (.) lens_imageCrop lens_ImageCrop_topCrop
          {-# INLINE lens_ImageCrop_topCrop #-}
class HasImageFile c
    where lens_imageFile :: Lens' c ImageFile
          lens_ImageFile_imageFile :: forall . Lens' c File
          lens_ImageFile_imageFile = (.) lens_imageFile lens_ImageFile_imageFile
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight :: forall . Lens' c Int
          lens_ImageFile_imageFileHeight = (.) lens_imageFile lens_ImageFile_imageFileHeight
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal :: forall . Lens' c Int
          lens_ImageFile_imageFileMaxVal = (.) lens_imageFile lens_ImageFile_imageFileMaxVal
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType :: forall . Lens' c ImageType
          lens_ImageFile_imageFileType = (.) lens_imageFile lens_ImageFile_imageFileType
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth :: forall . Lens' c Int
          lens_ImageFile_imageFileWidth = (.) lens_imageFile lens_ImageFile_imageFileWidth
          {-# INLINE lens_ImageFile_imageFileWidth #-}
class HasImageSize c
    where lens_imageSize :: Lens' c ImageSize
          lens_ImageSize_dim :: forall . Lens' c Dimension
          lens_ImageSize_dim = (.) lens_imageSize lens_ImageSize_dim
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size :: forall . Lens' c Double
          lens_ImageSize_size = (.) lens_imageSize lens_ImageSize_size
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units :: forall . Lens' c Units
          lens_ImageSize_units = (.) lens_imageSize lens_ImageSize_units
          {-# INLINE lens_ImageSize_units #-}
class HasInt c
    where lens_int :: Lens' c Int
class HasInt64 c
    where lens_int64 :: Lens' c Int64
class HasInteger c
    where lens_integer :: Lens' c Integer
class HasItem c
    where lens_item :: Lens' c Item
          lens_Item_fields :: forall . Lens' c MIM
          lens_Item_fields = (.) lens_item lens_Item_fields
          {-# INLINE lens_Item_fields #-}
          lens_Item_images :: forall . Lens' c ReportImages
          lens_Item_images = (.) lens_item lens_Item_images
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName :: forall . Lens' c Text
          lens_Item_itemName = (.) lens_item lens_Item_itemName
          {-# INLINE lens_Item_itemName #-}
class HasJSONText c
    where lens_jSONText :: Lens' c JSONText
          lens_JSONText_unJSONText :: forall . Lens' c String
          lens_JSONText_unJSONText = (.) lens_jSONText lens_JSONText_unJSONText
          {-# INLINE lens_JSONText_unJSONText #-}
class HasMarkup c
    where lens_markup :: Lens' c Markup
          lens_Markup_htmlText :: forall . Traversal' c Text
          lens_Markup_htmlText = (.) lens_markup lens_Markup_htmlText
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText :: forall . Traversal' c Text
          lens_Markup_markdownText = (.) lens_markup lens_Markup_markdownText
          {-# INLINE lens_Markup_markdownText #-}
class HasPermissions c
    where lens_permissions :: Lens' c Permissions
          lens_Permissions_owner :: forall . Lens' c UserId
          lens_Permissions_owner = (.) lens_permissions lens_Permissions_owner
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers :: forall . Lens' c UserIds
          lens_Permissions_readers = (.) lens_permissions lens_Permissions_readers
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers :: forall . Lens' c UserIds
          lens_Permissions_writers = (.) lens_permissions lens_Permissions_writers
          {-# INLINE lens_Permissions_writers #-}
class HasReport c
    where lens_report :: Lens' c Report
          lens_Report_reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_Report_reportAbbrevs = (.) lens_report lens_Report_reportAbbrevs
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors :: forall . Lens' c Authors
          lens_Report_reportAuthors = (.) lens_report lens_Report_reportAuthors
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody :: forall . Lens' c ReportElems
          lens_Report_reportBody = (.) lens_report lens_Report_reportBody
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding :: forall . Lens' c Branding
          lens_Report_reportBranding = (.) lens_report lens_Report_reportBranding
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems :: forall . Lens' c Markup
          lens_Report_reportBriefItems = (.) lens_report lens_Report_reportBriefItems
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification :: forall . Lens' c Markups
          lens_Report_reportCertification = (.) lens_report lens_Report_reportCertification
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress :: forall . Lens' c Markup
          lens_Report_reportClientAddress = (.) lens_report lens_Report_reportClientAddress
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting :: forall . Lens' c Markup
          lens_Report_reportClientGreeting = (.) lens_report lens_Report_reportClientGreeting
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName :: forall . Lens' c Markup
          lens_Report_reportClientName = (.) lens_report lens_Report_reportClientName
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate :: forall . Lens' c Markup
          lens_Report_reportContractDate = (.) lens_report lens_Report_reportContractDate
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated :: forall . Lens' c EpochMilli
          lens_Report_reportCreated = (.) lens_report lens_Report_reportCreated
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate :: forall . Lens' c Markup
          lens_Report_reportDate = (.) lens_report lens_Report_reportDate
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName :: forall . Lens' c Bool
          lens_Report_reportDisplayItemName = (.) lens_report lens_Report_reportDisplayItemName
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate :: forall . Lens' c Markup
          lens_Report_reportEffectiveDate = (.) lens_report lens_Report_reportEffectiveDate
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags :: forall . Lens' c ReportFlags
          lens_Report_reportFlags = (.) lens_report lens_Report_reportFlags
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder :: forall . Lens' c FilePath
          lens_Report_reportFolder = (.) lens_report lens_Report_reportFolder
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter :: forall . Lens' c Markup
          lens_Report_reportFooter = (.) lens_report lens_Report_reportFooter
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary :: forall . Lens' c MarkupPairs
          lens_Report_reportGlossary = (.) lens_report lens_Report_reportGlossary
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader :: forall . Lens' c Markup
          lens_Report_reportHeader = (.) lens_report lens_Report_reportHeader
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate :: forall . Lens' c Markup
          lens_Report_reportInspectionDate = (.) lens_report lens_Report_reportInspectionDate
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation :: forall . Lens' c Markup
          lens_Report_reportInspectionLocation = (.) lens_report lens_Report_reportInspectionLocation
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_Report_reportIntendedUse = (.) lens_report lens_Report_reportIntendedUse
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner :: forall . Lens' c Markup
          lens_Report_reportItemsOwner = (.) lens_report lens_Report_reportItemsOwner
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull :: forall . Lens' c Markup
          lens_Report_reportItemsOwnerFull = (.) lens_report lens_Report_reportItemsOwnerFull
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_Report_reportLetterOfTransmittal = (.) lens_report lens_Report_reportLetterOfTransmittal
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions :: forall . Lens' c Markups
          lens_Report_reportLimitingConditions = (.) lens_report lens_Report_reportLimitingConditions
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName :: forall . Lens' c Markup
          lens_Report_reportName = (.) lens_report lens_Report_reportName
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName :: forall . Lens' c Bool
          lens_Report_reportOrderByItemName = (.) lens_report lens_Report_reportOrderByItemName
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms :: forall . Lens' c Permissions
          lens_Report_reportPerms = (.) lens_report lens_Report_reportPerms
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer :: forall . Lens' c Markup
          lens_Report_reportPreparer = (.) lens_report lens_Report_reportPreparer
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress :: forall . Lens' c Markup
          lens_Report_reportPreparerAddress = (.) lens_report lens_Report_reportPreparerAddress
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN :: forall . Lens' c Markup
          lens_Report_reportPreparerEIN = (.) lens_report lens_Report_reportPreparerEIN
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail :: forall . Lens' c Markup
          lens_Report_reportPreparerEMail = (.) lens_report lens_Report_reportPreparerEMail
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite :: forall . Lens' c Markup
          lens_Report_reportPreparerWebsite = (.) lens_report lens_Report_reportPreparerWebsite
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy :: forall . Lens' c Markup
          lens_Report_reportPrivacyPolicy = (.) lens_report lens_Report_reportPrivacyPolicy
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted :: forall . Lens' c Bool
          lens_Report_reportRedacted = (.) lens_report lens_Report_reportRedacted
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision :: forall . Lens' c Integer
          lens_Report_reportRevision = (.) lens_report lens_Report_reportRevision
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork :: forall . Lens' c Markup
          lens_Report_reportScopeOfWork = (.) lens_report lens_Report_reportScopeOfWork
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources :: forall . Lens' c MarkupPairs
          lens_Report_reportSources = (.) lens_report lens_Report_reportSources
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_Report_reportStandardsVersion = (.) lens_report lens_Report_reportStandardsVersion
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus :: forall . Lens' c ReportStatus
          lens_Report_reportStatus = (.) lens_report lens_Report_reportStatus
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle :: forall . Lens' c Markup
          lens_Report_reportTitle = (.) lens_report lens_Report_reportTitle
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID :: forall . Lens' c UUID
          lens_Report_reportUUID = (.) lens_report lens_Report_reportUUID
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_Report_reportValueApproachInfo = (.) lens_report lens_Report_reportValueApproachInfo
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_Report_reportValueTypeInfo = (.) lens_report lens_Report_reportValueTypeInfo
          {-# INLINE lens_Report_reportValueTypeInfo #-}
class HasReportElem c
    where lens_reportElem :: Lens' c ReportElem
          lens_ReportElem_elemItem :: forall . Traversal' c Item
          lens_ReportElem_elemItem = (.) lens_reportElem lens_ReportElem_elemItem
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText :: forall . Traversal' c Markup
          lens_ReportElem_elemText = (.) lens_reportElem lens_ReportElem_elemText
          {-# INLINE lens_ReportElem_elemText #-}
class HasReportFlags c
    where lens_reportFlags :: Lens' c ReportFlags
          lens_ReportFlags_hideEmptyItemFields :: forall . Lens' c Bool
          lens_ReportFlags_hideEmptyItemFields = (.) lens_reportFlags lens_ReportFlags_hideEmptyItemFields
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
class HasReportImage c
    where lens_reportImage :: Lens' c ReportImage
          lens_ReportImage_picCaption :: forall . Lens' c Markup
          lens_ReportImage_picCaption = (.) lens_reportImage lens_ReportImage_picCaption
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop :: forall . Lens' c ImageCrop
          lens_ReportImage_picCrop = (.) lens_reportImage lens_ReportImage_picCrop
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEditedDeprecated = (.) lens_reportImage lens_ReportImage_picEditedDeprecated
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEnlargedDeprecated = (.) lens_reportImage lens_ReportImage_picEnlargedDeprecated
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImage_picMustEnlarge = (.) lens_reportImage lens_ReportImage_picMustEnlarge
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal :: forall . Lens' c MEUI
          lens_ReportImage_picOriginal = (.) lens_reportImage lens_ReportImage_picOriginal
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picPrinterDeprecated = (.) lens_reportImage lens_ReportImage_picPrinterDeprecated
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize :: forall . Lens' c ImageSize
          lens_ReportImage_picSize = (.) lens_reportImage lens_ReportImage_picSize
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picThumbDeprecated = (.) lens_reportImage lens_ReportImage_picThumbDeprecated
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
class HasReportImageView c
    where lens_reportImageView :: Lens' c ReportImageView
          lens_ReportImageView__picCaption :: forall . Lens' c Markup
          lens_ReportImageView__picCaption = (.) lens_reportImageView lens_ReportImageView__picCaption
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop :: forall . Lens' c ImageCrop
          lens_ReportImageView__picCrop = (.) lens_reportImageView lens_ReportImageView__picCrop
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEditedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEditedDeprecated
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEnlargedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEnlargedDeprecated
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImageView__picMustEnlarge = (.) lens_reportImageView lens_ReportImageView__picMustEnlarge
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal :: forall . Lens' c (Maybe (Either URI ImageFile))
          lens_ReportImageView__picOriginal = (.) lens_reportImageView lens_ReportImageView__picOriginal
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picPrinterDeprecated = (.) lens_reportImageView lens_ReportImageView__picPrinterDeprecated
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize :: forall . Lens' c SaneSizeImageSize
          lens_ReportImageView__picSize = (.) lens_reportImageView lens_ReportImageView__picSize
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picThumbDeprecated = (.) lens_reportImageView lens_ReportImageView__picThumbDeprecated
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
class HasReportIntendedUse c
    where lens_reportIntendedUse :: Lens' c ReportIntendedUse
class HasReportMap c
    where lens_reportMap :: Lens' c ReportMap
          lens_ReportMap_unReportMap :: forall . Lens' c MRR
          lens_ReportMap_unReportMap = (.) lens_reportMap lens_ReportMap_unReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
class HasReportStandard c
    where lens_reportStandard :: Lens' c ReportStandard
          lens_ReportStandard_unReportStandard :: forall . Lens' c Int
          lens_ReportStandard_unReportStandard = (.) lens_reportStandard lens_ReportStandard_unReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
class HasReportStatus c
    where lens_reportStatus :: Lens' c ReportStatus
class HasReportValueApproachInfo c
    where lens_reportValueApproachInfo :: Lens' c ReportValueApproachInfo
          lens_ReportValueApproachInfo_reportValueApproachDescription :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachDescription = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachDescription
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachName = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachName
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
class HasReportValueTypeInfo c
    where lens_reportValueTypeInfo :: Lens' c ReportValueTypeInfo
          lens_ReportValueTypeInfo_reportValueTypeDefinition :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDefinition = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDefinition
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDescription = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDescription
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeName = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeName
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
class HasReportView c
    where lens_reportView :: Lens' c ReportView
          lens_ReportView__reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_ReportView__reportAbbrevs = (.) lens_reportView lens_ReportView__reportAbbrevs
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors :: forall . Lens' c Authors
          lens_ReportView__reportAuthors = (.) lens_reportView lens_ReportView__reportAuthors
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody :: forall . Lens' c ReportElems
          lens_ReportView__reportBody = (.) lens_reportView lens_ReportView__reportBody
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding :: forall . Lens' c Branding
          lens_ReportView__reportBranding = (.) lens_reportView lens_ReportView__reportBranding
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems :: forall . Lens' c Markup
          lens_ReportView__reportBriefItems = (.) lens_reportView lens_ReportView__reportBriefItems
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification :: forall . Lens' c Markups
          lens_ReportView__reportCertification = (.) lens_reportView lens_ReportView__reportCertification
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress :: forall . Lens' c Markup
          lens_ReportView__reportClientAddress = (.) lens_reportView lens_ReportView__reportClientAddress
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting :: forall . Lens' c Markup
          lens_ReportView__reportClientGreeting = (.) lens_reportView lens_ReportView__reportClientGreeting
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName :: forall . Lens' c Markup
          lens_ReportView__reportClientName = (.) lens_reportView lens_ReportView__reportClientName
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate :: forall . Lens' c Markup
          lens_ReportView__reportContractDate = (.) lens_reportView lens_ReportView__reportContractDate
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated :: forall . Lens' c EpochMilli
          lens_ReportView__reportCreated = (.) lens_reportView lens_ReportView__reportCreated
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate :: forall . Lens' c Markup
          lens_ReportView__reportDate = (.) lens_reportView lens_ReportView__reportDate
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName :: forall . Lens' c Bool
          lens_ReportView__reportDisplayItemName = (.) lens_reportView lens_ReportView__reportDisplayItemName
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate :: forall . Lens' c Markup
          lens_ReportView__reportEffectiveDate = (.) lens_reportView lens_ReportView__reportEffectiveDate
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags :: forall . Lens' c ReportFlags
          lens_ReportView__reportFlags = (.) lens_reportView lens_ReportView__reportFlags
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder :: forall . Lens' c ReadOnlyFilePath
          lens_ReportView__reportFolder = (.) lens_reportView lens_ReportView__reportFolder
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter :: forall . Lens' c Markup
          lens_ReportView__reportFooter = (.) lens_reportView lens_ReportView__reportFooter
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary :: forall . Lens' c MarkupPairs
          lens_ReportView__reportGlossary = (.) lens_reportView lens_ReportView__reportGlossary
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader :: forall . Lens' c Markup
          lens_ReportView__reportHeader = (.) lens_reportView lens_ReportView__reportHeader
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate :: forall . Lens' c Markup
          lens_ReportView__reportInspectionDate = (.) lens_reportView lens_ReportView__reportInspectionDate
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation :: forall . Lens' c Markup
          lens_ReportView__reportInspectionLocation = (.) lens_reportView lens_ReportView__reportInspectionLocation
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_ReportView__reportIntendedUse = (.) lens_reportView lens_ReportView__reportIntendedUse
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwner = (.) lens_reportView lens_ReportView__reportItemsOwner
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwnerFull = (.) lens_reportView lens_ReportView__reportItemsOwnerFull
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_ReportView__reportLetterOfTransmittal = (.) lens_reportView lens_ReportView__reportLetterOfTransmittal
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions :: forall . Lens' c Markups
          lens_ReportView__reportLimitingConditions = (.) lens_reportView lens_ReportView__reportLimitingConditions
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName :: forall . Lens' c Markup
          lens_ReportView__reportName = (.) lens_reportView lens_ReportView__reportName
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName :: forall . Lens' c Bool
          lens_ReportView__reportOrderByItemName = (.) lens_reportView lens_ReportView__reportOrderByItemName
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms :: forall . Lens' c Permissions
          lens_ReportView__reportPerms = (.) lens_reportView lens_ReportView__reportPerms
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer :: forall . Lens' c Markup
          lens_ReportView__reportPreparer = (.) lens_reportView lens_ReportView__reportPreparer
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress :: forall . Lens' c Markup
          lens_ReportView__reportPreparerAddress = (.) lens_reportView lens_ReportView__reportPreparerAddress
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEIN = (.) lens_reportView lens_ReportView__reportPreparerEIN
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEMail = (.) lens_reportView lens_ReportView__reportPreparerEMail
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite :: forall . Lens' c Markup
          lens_ReportView__reportPreparerWebsite = (.) lens_reportView lens_ReportView__reportPreparerWebsite
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy :: forall . Lens' c Markup
          lens_ReportView__reportPrivacyPolicy = (.) lens_reportView lens_ReportView__reportPrivacyPolicy
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted :: forall . Lens' c Bool
          lens_ReportView__reportRedacted = (.) lens_reportView lens_ReportView__reportRedacted
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision :: forall . Lens' c Integer
          lens_ReportView__reportRevision = (.) lens_reportView lens_ReportView__reportRevision
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork :: forall . Lens' c Markup
          lens_ReportView__reportScopeOfWork = (.) lens_reportView lens_ReportView__reportScopeOfWork
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources :: forall . Lens' c MarkupPairs
          lens_ReportView__reportSources = (.) lens_reportView lens_ReportView__reportSources
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_ReportView__reportStandardsVersion = (.) lens_reportView lens_ReportView__reportStandardsVersion
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus :: forall . Lens' c ReportStatus
          lens_ReportView__reportStatus = (.) lens_reportView lens_ReportView__reportStatus
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle :: forall . Lens' c Markup
          lens_ReportView__reportTitle = (.) lens_reportView lens_ReportView__reportTitle
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID :: forall . Lens' c UUID
          lens_ReportView__reportUUID = (.) lens_reportView lens_ReportView__reportUUID
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_ReportView__reportValueApproachInfo = (.) lens_reportView lens_ReportView__reportValueApproachInfo
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_ReportView__reportValueTypeInfo = (.) lens_reportView lens_ReportView__reportValueTypeInfo
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
class HasText c
    where lens_text :: Lens' c Text
class HasURI c
    where lens_uRI :: Lens' c URI
          lens_URI_uriAuthority :: forall . Lens' c (Maybe URIAuth)
          lens_URI_uriAuthority = (.) lens_uRI lens_URI_uriAuthority
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment :: forall . Lens' c String
          lens_URI_uriFragment = (.) lens_uRI lens_URI_uriFragment
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath :: forall . Lens' c String
          lens_URI_uriPath = (.) lens_uRI lens_URI_uriPath
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery :: forall . Lens' c String
          lens_URI_uriQuery = (.) lens_uRI lens_URI_uriQuery
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme :: forall . Lens' c String
          lens_URI_uriScheme = (.) lens_uRI lens_URI_uriScheme
          {-# INLINE lens_URI_uriScheme #-}
class HasUUID c
    where lens_uUID :: Lens' c UUID
class HasUnits c
    where lens_units :: Lens' c Units
class HasUserId c
    where lens_userId :: Lens' c UserId
          lens_UserId__unUserId :: forall . Lens' c Integer
          lens_UserId__unUserId = (.) lens_userId lens_UserId__unUserId
          {-# INLINE lens_UserId__unUserId #-}
instance Paths String String
    where type Path String String = Path_String String
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek String
          peekPath (Peek_String_String _p _) = _p :: Path String String
          peekValue (Peek_String_String _ _x) = _x :: Maybe String
instance Paths String JSONText
    where type Path String JSONText = Path_String JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_String_View,
                                                                                                a')) (toListOf (toLens (Path_String_View (idPath :: Path JSONText JSONText))) _s))
          peek _p _s = undefined :: Peek String
          peekPath (Peek_String_JSONText _p _) = _p :: Path String JSONText
          peekValue (Peek_String_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Int64 Int64
    where type Path Int64 Int64 = Path_Int64 Int64
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Int64
          peekPath (Peek_Int64_Int64 _p _) = _p :: Path Int64 Int64
          peekValue (Peek_Int64_Int64 _ _x) = _x :: Maybe Int64
instance Paths Bool String
    where type Path Bool String = Path_Bool String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_Bool_View, a')) (toListOf (toLens (Path_Bool_View (idPath :: Path String
                                                                                                                                                                     String))) _s))
          peek _p _s = undefined :: Peek Bool
          peekPath (Peek_Bool_String _p _) = _p :: Path Bool String
          peekValue (Peek_Bool_String _ _x) = _x :: Maybe String
instance Paths Bool Bool
    where type Path Bool Bool = Path_Bool Bool
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Bool
          peekPath (Peek_Bool_Bool _p _) = _p :: Path Bool Bool
          peekValue (Peek_Bool_Bool _ _x) = _x :: Maybe Bool
instance Paths Bool JSONText
    where type Path Bool JSONText = Path_Bool JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_Bool_View, a')) (toListOf (toLens (Path_Bool_View (idPath :: Path String
                                                                                                                                                                     String))) _s))
          peek _p _s = undefined :: Peek Bool
          peekPath (Peek_Bool_JSONText _p _) = _p :: Path Bool JSONText
          peekValue (Peek_Bool_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Double String
    where type Path Double String = Path_Double String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_Double_View, a')) (toListOf (toLens (Path_Double_View (idPath :: Path String
                                                                                                                                                                         String))) _s))
          peek _p _s = undefined :: Peek Double
          peekPath (Peek_Double_String _p _) = _p :: Path Double String
          peekValue (Peek_Double_String _ _x) = _x :: Maybe String
instance Paths Double Double
    where type Path Double Double = Path_Double Double
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Double
          peekPath (Peek_Double_Double _p _) = _p :: Path Double Double
          peekValue (Peek_Double_Double _ _x) = _x :: Maybe Double
instance Paths Double JSONText
    where type Path Double JSONText = Path_Double JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_Double_View, a')) (toListOf (toLens (Path_Double_View (idPath :: Path String
                                                                                                                                                                         String))) _s))
          peek _p _s = undefined :: Peek Double
          peekPath (Peek_Double_JSONText _p _) = _p :: Path Double JSONText
          peekValue (Peek_Double_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Int Int
    where type Path Int Int = Path_Int Int
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Int
          peekPath (Peek_Int_Int _p _) = _p :: Path Int Int
          peekValue (Peek_Int_Int _ _x) = _x :: Maybe Int
instance Paths Dimension Dimension
    where type Path Dimension Dimension = Path_Dimension Dimension
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Dimension
          peekPath (Peek_Dimension_Dimension _p _) = _p :: Path Dimension Dimension
          peekValue (Peek_Dimension_Dimension _ _x) = _x :: Maybe Dimension
instance Paths Dimension JSONText
    where type Path Dimension JSONText = Path_Dimension JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Dimension_View,
                                                                                                a')) (toListOf (toLens (Path_Dimension_View (idPath :: Path JSONText JSONText))) _s))
          peek _p _s = undefined :: Peek Dimension
          peekPath (Peek_Dimension_JSONText _p _) = _p :: Path Dimension JSONText
          peekValue (Peek_Dimension_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ImageCrop ImageCrop
    where type Path ImageCrop ImageCrop = Path_ImageCrop ImageCrop
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ImageCrop
          peekPath (Peek_ImageCrop_ImageCrop _p _) = _p :: Path ImageCrop ImageCrop
          peekValue (Peek_ImageCrop_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ImageSize String
    where type Path ImageSize String = Path_ImageSize String
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)]
          peek _p (_s@(ImageSize {})) = undefined :: Peek ImageSize
          peekPath (Peek_ImageSize_String _p _) = _p :: Path ImageSize String
          peekValue (Peek_ImageSize_String _ _x) = _x :: Maybe String
instance Paths ImageSize Double
    where type Path ImageSize Double = Path_ImageSize Double
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)]
          peek _p (_s@(ImageSize {})) = undefined :: Peek ImageSize
          peekPath (Peek_ImageSize_Double _p _) = _p :: Path ImageSize Double
          peekValue (Peek_ImageSize_Double _ _x) = _x :: Maybe Double
instance Paths ImageSize Dimension
    where type Path ImageSize Dimension = Path_ImageSize Dimension
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Dimension) _g)) [(Path_ImageSize_dim, dim _s)]
          peek _p (_s@(ImageSize {})) = undefined :: Peek ImageSize
          peekPath (Peek_ImageSize_Dimension _p _) = _p :: Path ImageSize Dimension
          peekValue (Peek_ImageSize_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ImageSize ImageSize
    where type Path ImageSize ImageSize = Path_ImageSize ImageSize
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ImageSize
          peekPath (Peek_ImageSize_ImageSize _p _) = _p :: Path ImageSize ImageSize
          peekValue (Peek_ImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ImageSize Units
    where type Path ImageSize Units = Path_ImageSize Units
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Units) _g)) [(Path_ImageSize_units, units _s)]
          peek _p (_s@(ImageSize {})) = undefined :: Peek ImageSize
          peekPath (Peek_ImageSize_Units _p _) = _p :: Path ImageSize Units
          peekValue (Peek_ImageSize_Units _ _x) = _x :: Maybe Units
instance Paths ImageSize JSONText
    where type Path ImageSize JSONText = Path_ImageSize JSONText
          paths (_s@(ImageSize {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Dimension) _g)) [(Path_ImageSize_dim, dim _s)],
                                                  concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)],
                                                  concatMap (\(p, a') -> map p (paths (a' :: Units) _g)) [(Path_ImageSize_units, units _s)]]
          peek _p (_s@(ImageSize {})) = undefined :: Peek ImageSize
          peekPath (Peek_ImageSize_JSONText _p _) = _p :: Path ImageSize JSONText
          peekValue (Peek_ImageSize_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Units Units
    where type Path Units Units = Path_Units Units
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Units
          peekPath (Peek_Units_Units _p _) = _p :: Path Units Units
          peekValue (Peek_Units_Units _ _x) = _x :: Maybe Units
instance Paths Units JSONText
    where type Path Units JSONText = Path_Units JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Units_View, a')) (toListOf (toLens (Path_Units_View (idPath :: Path JSONText
                                                                                                                                                                         JSONText))) _s))
          peek _p _s = undefined :: Peek Units
          peekPath (Peek_Units_JSONText _p _) = _p :: Path Units JSONText
          peekValue (Peek_Units_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ImageFile ImageFile
    where type Path ImageFile ImageFile = Path_ImageFile ImageFile
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ImageFile
          peekPath (Peek_ImageFile_ImageFile _p _) = _p :: Path ImageFile ImageFile
          peekValue (Peek_ImageFile_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths Integer Integer
    where type Path Integer Integer = Path_Integer Integer
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Integer
          peekPath (Peek_Integer_Integer _p _) = _p :: Path Integer Integer
          peekValue (Peek_Integer_Integer _ _x) = _x :: Maybe Integer
instance Paths JSONText JSONText
    where type Path JSONText JSONText = Path_JSONText JSONText
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek JSONText
          peekPath (Peek_JSONText_JSONText _p _) = _p :: Path JSONText JSONText
          peekValue (Peek_JSONText_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Markup JSONText
    where type Path Markup JSONText = Path_Markup JSONText
          paths (_s@(Markdown {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_markdownText, markdownText _s)]
          paths (_s@(Html {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_htmlText, htmlText _s)]
          paths (_s@(LaTeX {})) _g = mempty
          paths (_s@(Pandoc {})) _g = mempty
          paths (_s@(Markup {})) _g = mempty
          peek _p (_s@(Markdown {})) = undefined :: Peek Markup
          peek _p (_s@(Html {})) = undefined :: Peek Markup
          peek _p (_s@(LaTeX {})) = undefined :: Peek Markup
          peek _p (_s@(Pandoc {})) = undefined :: Peek Markup
          peek _p (_s@(Markup {})) = undefined :: Peek Markup
          peekPath (Peek_Markup_JSONText _p _) = _p :: Path Markup JSONText
          peekValue (Peek_Markup_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Markup Markup
    where type Path Markup Markup = Path_Markup Markup
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Markup
          peekPath (Peek_Markup_Markup _p _) = _p :: Path Markup Markup
          peekValue (Peek_Markup_Markup _ _x) = _x :: Maybe Markup
instance Paths Markup Text
    where type Path Markup Text = Path_Markup Text
          paths (_s@(Markdown {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_markdownText, markdownText _s)]
          paths (_s@(Html {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_htmlText, htmlText _s)]
          paths (_s@(LaTeX {})) _g = mempty
          paths (_s@(Pandoc {})) _g = mempty
          paths (_s@(Markup {})) _g = mempty
          peek _p (_s@(Markdown {})) = undefined :: Peek Markup
          peek _p (_s@(Html {})) = undefined :: Peek Markup
          peek _p (_s@(LaTeX {})) = undefined :: Peek Markup
          peek _p (_s@(Pandoc {})) = undefined :: Peek Markup
          peek _p (_s@(Markup {})) = undefined :: Peek Markup
          peekPath (Peek_Markup_Text _p _) = _p :: Path Markup Text
          peekValue (Peek_Markup_Text _ _x) = _x :: Maybe Text
instance Paths Permissions JSONText
    where type Path Permissions JSONText = Path_Permissions JSONText
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
          peek _p (_s@(Permissions {})) = undefined :: Peek Permissions
          peekPath (Peek_Permissions_JSONText _p _) = _p :: Path Permissions JSONText
          peekValue (Peek_Permissions_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Permissions Permissions
    where type Path Permissions Permissions = Path_Permissions Permissions
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Permissions
          peekPath (Peek_Permissions_Permissions _p _) = _p :: Path Permissions Permissions
          peekValue (Peek_Permissions_Permissions _ _x) = _x :: Maybe Permissions
instance Paths Permissions UserIds
    where type Path Permissions UserIds = Path_Permissions UserIds
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
          peek _p (_s@(Permissions {})) = undefined :: Peek Permissions
          peekPath (Peek_Permissions_UserIds _p _) = _p :: Path Permissions UserIds
          peekValue (Peek_Permissions_UserIds _ _x) = _x :: Maybe UserIds
instance Paths Permissions Text
    where type Path Permissions Text = Path_Permissions Text
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
          peek _p (_s@(Permissions {})) = undefined :: Peek Permissions
          peekPath (Peek_Permissions_Text _p _) = _p :: Path Permissions Text
          peekValue (Peek_Permissions_Text _ _x) = _x :: Maybe Text
instance Paths Permissions UserId
    where type Path Permissions UserId = Path_Permissions UserId
          paths (_s@(Permissions {})) _g = concatMap (\(p, a') -> map p (paths (a' :: UserId) _g)) [(Path_Permissions_owner, owner _s)]
          peek _p (_s@(Permissions {})) = undefined :: Peek Permissions
          peekPath (Peek_Permissions_UserId _p _) = _p :: Path Permissions UserId
          peekValue (Peek_Permissions_UserId _ _x) = _x :: Maybe UserId
instance Paths UserIds JSONText
    where type Path UserIds JSONText = Path_UserIds JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_UserIds_View, a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Text
                                                                                                                                                                         Text))) _s))
          peek _p _s = undefined :: Peek UserIds
          peekPath (Peek_UserIds_JSONText _p _) = _p :: Path UserIds JSONText
          peekValue (Peek_UserIds_JSONText _ _x) = _x :: Maybe JSONText
instance Paths UserIds UserIds
    where type Path UserIds UserIds = Path_UserIds UserIds
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek UserIds
          peekPath (Peek_UserIds_UserIds _p _) = _p :: Path UserIds UserIds
          peekValue (Peek_UserIds_UserIds _ _x) = _x :: Maybe UserIds
instance Paths UserIds Text
    where type Path UserIds Text = Path_UserIds Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_UserIds_View, a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Text
                                                                                                                                                                         Text))) _s))
          peek _p _s = undefined :: Peek UserIds
          peekPath (Peek_UserIds_Text _p _) = _p :: Path UserIds Text
          peekValue (Peek_UserIds_Text _ _x) = _x :: Maybe Text
instance Paths AbbrevPair JSONText
    where type Path AbbrevPair JSONText = Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
          peek _p _s = undefined :: Peek AbbrevPair
          peekPath (Peek_AbbrevPair_JSONText _p _) = _p :: Path AbbrevPair JSONText
          peekValue (Peek_AbbrevPair_JSONText _ _x) = _x :: Maybe JSONText
instance Paths AbbrevPair Markup
    where type Path AbbrevPair Markup = Path_Pair (Path_CIString Markup) (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]
          peek _p _s = undefined :: Peek AbbrevPair
          peekPath (Peek_AbbrevPair_Markup _p _) = _p :: Path AbbrevPair Markup
          peekValue (Peek_AbbrevPair_Markup _ _x) = _x :: Maybe Markup
instance Paths AbbrevPair AbbrevPair
    where type Path AbbrevPair AbbrevPair = Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek AbbrevPair
          peekPath (Peek_AbbrevPair_AbbrevPair _p _) = _p :: Path AbbrevPair AbbrevPair
          peekValue (Peek_AbbrevPair_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths AbbrevPair CIString
    where type Path AbbrevPair CIString = Path_Pair (Path_CIString CIString) (Path_Markup CIString)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)]
          peek _p _s = undefined :: Peek AbbrevPair
          peekPath (Peek_AbbrevPair_CIString _p _) = _p :: Path AbbrevPair CIString
          peekValue (Peek_AbbrevPair_CIString _ _x) = _x :: Maybe CIString
instance Paths AbbrevPair Text
    where type Path AbbrevPair Text = Path_Pair (Path_CIString Text) (Path_Markup Text)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
          peek _p _s = undefined :: Peek AbbrevPair
          peekPath (Peek_AbbrevPair_Text _p _) = _p :: Path AbbrevPair Text
          peekValue (Peek_AbbrevPair_Text _ _x) = _x :: Maybe Text
instance Paths AbbrevPairs JSONText
    where type Path AbbrevPairs JSONText = Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_JSONText _p _) = _p :: Path AbbrevPairs JSONText
          peekValue (Peek_AbbrevPairs_JSONText _ _x) = _x :: Maybe JSONText
instance Paths AbbrevPairs Markup
    where type Path AbbrevPairs Markup = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_Markup _p _) = _p :: Path AbbrevPairs Markup
          peekValue (Peek_AbbrevPairs_Markup _ _x) = _x :: Maybe Markup
instance Paths AbbrevPairs AbbrevPair
    where type Path AbbrevPairs AbbrevPair = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_AbbrevPair _p _) = _p :: Path AbbrevPairs AbbrevPair
          peekValue (Peek_AbbrevPairs_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths AbbrevPairs AbbrevPairs
    where type Path AbbrevPairs AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_AbbrevPairs _p _) = _p :: Path AbbrevPairs AbbrevPairs
          peekValue (Peek_AbbrevPairs_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
instance Paths AbbrevPairs CIString
    where type Path AbbrevPairs CIString = Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_CIString _p _) = _p :: Path AbbrevPairs CIString
          peekValue (Peek_AbbrevPairs_CIString _ _x) = _x :: Maybe CIString
instance Paths AbbrevPairs Text
    where type Path AbbrevPairs Text = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek AbbrevPairs
          peekPath (Peek_AbbrevPairs_Text _p _) = _p :: Path AbbrevPairs Text
          peekValue (Peek_AbbrevPairs_Text _ _x) = _x :: Maybe Text
instance Paths Author JSONText
    where type Path Author JSONText = Path_Author JSONText
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
          peek _p (_s@(Author {})) = undefined :: Peek Author
          peekPath (Peek_Author_JSONText _p _) = _p :: Path Author JSONText
          peekValue (Peek_Author_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Author Markup
    where type Path Author Markup = Path_Author Markup
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
          peek _p (_s@(Author {})) = undefined :: Peek Author
          peekPath (Peek_Author_Markup _p _) = _p :: Path Author Markup
          peekValue (Peek_Author_Markup _ _x) = _x :: Maybe Markup
instance Paths Author Author
    where type Path Author Author = Path_Author Author
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Author
          peekPath (Peek_Author_Author _p _) = _p :: Path Author Author
          peekValue (Peek_Author_Author _ _x) = _x :: Maybe Author
instance Paths Author Text
    where type Path Author Text = Path_Author Text
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
          peek _p (_s@(Author {})) = undefined :: Peek Author
          peekPath (Peek_Author_Text _p _) = _p :: Path Author Text
          peekValue (Peek_Author_Text _ _x) = _x :: Maybe Text
instance Paths Authors JSONText
    where type Path Authors JSONText = Path_OMap AuthorID (Path_Author JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Authors
          peekPath (Peek_Authors_JSONText _p _) = _p :: Path Authors JSONText
          peekValue (Peek_Authors_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Authors Markup
    where type Path Authors Markup = Path_OMap AuthorID (Path_Author Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Authors
          peekPath (Peek_Authors_Markup _p _) = _p :: Path Authors Markup
          peekValue (Peek_Authors_Markup _ _x) = _x :: Maybe Markup
instance Paths Authors Author
    where type Path Authors Author = Path_OMap AuthorID (Path_Author Author)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Authors
          peekPath (Peek_Authors_Author _p _) = _p :: Path Authors Author
          peekValue (Peek_Authors_Author _ _x) = _x :: Maybe Author
instance Paths Authors Authors
    where type Path Authors Authors = Path_OMap AuthorID (Path_Author Authors)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Authors
          peekPath (Peek_Authors_Authors _p _) = _p :: Path Authors Authors
          peekValue (Peek_Authors_Authors _ _x) = _x :: Maybe Authors
instance Paths Authors Text
    where type Path Authors Text = Path_OMap AuthorID (Path_Author Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Authors
          peekPath (Peek_Authors_Text _p _) = _p :: Path Authors Text
          peekValue (Peek_Authors_Text _ _x) = _x :: Maybe Text
instance Paths Branding JSONText
    where type Path Branding JSONText = Path_Branding JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_Branding_View, a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Text
                                                                                                                                                                           Text))) _s))
          peek _p _s = undefined :: Peek Branding
          peekPath (Peek_Branding_JSONText _p _) = _p :: Path Branding JSONText
          peekValue (Peek_Branding_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Branding Branding
    where type Path Branding Branding = Path_Branding Branding
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Branding
          peekPath (Peek_Branding_Branding _p _) = _p :: Path Branding Branding
          peekValue (Peek_Branding_Branding _ _x) = _x :: Maybe Branding
instance Paths Branding Text
    where type Path Branding Text = Path_Branding Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_Branding_View, a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Text
                                                                                                                                                                           Text))) _s))
          peek _p _s = undefined :: Peek Branding
          peekPath (Peek_Branding_Text _p _) = _p :: Path Branding Text
          peekValue (Peek_Branding_Text _ _x) = _x :: Maybe Text
instance Paths MarkupPair JSONText
    where type Path MarkupPair JSONText = Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
          peek _p _s = undefined :: Peek MarkupPair
          peekPath (Peek_MarkupPair_JSONText _p _) = _p :: Path MarkupPair JSONText
          peekValue (Peek_MarkupPair_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MarkupPair Markup
    where type Path MarkupPair Markup = Path_Pair (Path_Markup Markup) (Path_Markup Markup)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
          peek _p _s = undefined :: Peek MarkupPair
          peekPath (Peek_MarkupPair_Markup _p _) = _p :: Path MarkupPair Markup
          peekValue (Peek_MarkupPair_Markup _ _x) = _x :: Maybe Markup
instance Paths MarkupPair MarkupPair
    where type Path MarkupPair MarkupPair = Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MarkupPair
          peekPath (Peek_MarkupPair_MarkupPair _p _) = _p :: Path MarkupPair MarkupPair
          peekValue (Peek_MarkupPair_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths MarkupPair Text
    where type Path MarkupPair Text = Path_Pair (Path_Markup Text) (Path_Markup Text)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
          peek _p _s = undefined :: Peek MarkupPair
          peekPath (Peek_MarkupPair_Text _p _) = _p :: Path MarkupPair Text
          peekValue (Peek_MarkupPair_Text _ _x) = _x :: Maybe Text
instance Paths MarkupPairs JSONText
    where type Path MarkupPairs JSONText = Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: MarkupPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek MarkupPairs
          peekPath (Peek_MarkupPairs_JSONText _p _) = _p :: Path MarkupPairs JSONText
          peekValue (Peek_MarkupPairs_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MarkupPairs Markup
    where type Path MarkupPairs Markup = Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: MarkupPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek MarkupPairs
          peekPath (Peek_MarkupPairs_Markup _p _) = _p :: Path MarkupPairs Markup
          peekValue (Peek_MarkupPairs_Markup _ _x) = _x :: Maybe Markup
instance Paths MarkupPairs MarkupPair
    where type Path MarkupPairs MarkupPair = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: MarkupPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek MarkupPairs
          peekPath (Peek_MarkupPairs_MarkupPair _p _) = _p :: Path MarkupPairs MarkupPair
          peekValue (Peek_MarkupPairs_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths MarkupPairs MarkupPairs
    where type Path MarkupPairs MarkupPairs = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MarkupPairs
          peekPath (Peek_MarkupPairs_MarkupPairs _p _) = _p :: Path MarkupPairs MarkupPairs
          peekValue (Peek_MarkupPairs_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
instance Paths MarkupPairs Text
    where type Path MarkupPairs Text = Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: MarkupPair) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek MarkupPairs
          peekPath (Peek_MarkupPairs_Text _p _) = _p :: Path MarkupPairs Text
          peekValue (Peek_MarkupPairs_Text _ _x) = _x :: Maybe Text
instance Paths Markups JSONText
    where type Path Markups JSONText = Path_OMap MarkupID (Path_Markup JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Markups
          peekPath (Peek_Markups_JSONText _p _) = _p :: Path Markups JSONText
          peekValue (Peek_Markups_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Markups Markup
    where type Path Markups Markup = Path_OMap MarkupID (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Markups
          peekPath (Peek_Markups_Markup _p _) = _p :: Path Markups Markup
          peekValue (Peek_Markups_Markup _ _x) = _x :: Maybe Markup
instance Paths Markups Markups
    where type Path Markups Markups = Path_OMap MarkupID (Path_Markup Markups)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Markups
          peekPath (Peek_Markups_Markups _p _) = _p :: Path Markups Markups
          peekValue (Peek_Markups_Markups _ _x) = _x :: Maybe Markups
instance Paths Markups Text
    where type Path Markups Text = Path_OMap MarkupID (Path_Markup Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek Markups
          peekPath (Peek_Markups_Text _p _) = _p :: Path Markups Text
          peekValue (Peek_Markups_Text _ _x) = _x :: Maybe Text
instance Paths MaybeReportIntendedUse String
    where type Path MaybeReportIntendedUse String = Path_MaybeReportIntendedUse String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek MaybeReportIntendedUse
          peekPath (Peek_MaybeReportIntendedUse_String _p _) = _p :: Path MaybeReportIntendedUse String
          peekValue (Peek_MaybeReportIntendedUse_String _ _x) = _x :: Maybe String
instance Paths MaybeReportIntendedUse JSONText
    where type Path MaybeReportIntendedUse JSONText = Path_MaybeReportIntendedUse JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek MaybeReportIntendedUse
          peekPath (Peek_MaybeReportIntendedUse_JSONText _p _) = _p :: Path MaybeReportIntendedUse JSONText
          peekValue (Peek_MaybeReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MaybeReportIntendedUse MaybeReportIntendedUse
    where type Path MaybeReportIntendedUse MaybeReportIntendedUse = Path_MaybeReportIntendedUse MaybeReportIntendedUse
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MaybeReportIntendedUse
          peekPath (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _p _) = _p :: Path MaybeReportIntendedUse MaybeReportIntendedUse
          peekValue (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
instance Paths Report String
    where type Path Report String = Path_Report String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_String _p _) = _p :: Path Report String
          peekValue (Peek_Report_String _ _x) = _x :: Maybe String
instance Paths Report Int64
    where type Path Report Int64 = Path_Report Int64
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Int64 _p _) = _p :: Path Report Int64
          peekValue (Peek_Report_Int64 _ _x) = _x :: Maybe Int64
instance Paths Report Bool
    where type Path Report Bool = Path_Report Bool
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Bool _p _) = _p :: Path Report Bool
          peekValue (Peek_Report_Bool _ _x) = _x :: Maybe Bool
instance Paths Report Double
    where type Path Report Double = Path_Report Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Double _p _) = _p :: Path Report Double
          peekValue (Peek_Report_Double _ _x) = _x :: Maybe Double
instance Paths Report Int
    where type Path Report Int = Path_Report Int
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Int _p _) = _p :: Path Report Int
          peekValue (Peek_Report_Int _ _x) = _x :: Maybe Int
instance Paths Report Dimension
    where type Path Report Dimension = Path_Report Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Dimension _p _) = _p :: Path Report Dimension
          peekValue (Peek_Report_Dimension _ _x) = _x :: Maybe Dimension
instance Paths Report ImageCrop
    where type Path Report ImageCrop = Path_Report ImageCrop
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ImageCrop _p _) = _p :: Path Report ImageCrop
          peekValue (Peek_Report_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths Report ImageSize
    where type Path Report ImageSize = Path_Report ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ImageSize _p _) = _p :: Path Report ImageSize
          peekValue (Peek_Report_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths Report Units
    where type Path Report Units = Path_Report Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Units _p _) = _p :: Path Report Units
          peekValue (Peek_Report_Units _ _x) = _x :: Maybe Units
instance Paths Report ImageFile
    where type Path Report ImageFile = Path_Report ImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ImageFile _p _) = _p :: Path Report ImageFile
          peekValue (Peek_Report_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths Report Integer
    where type Path Report Integer = Path_Report Integer
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Integer _p _) = _p :: Path Report Integer
          peekValue (Peek_Report_Integer _ _x) = _x :: Maybe Integer
instance Paths Report JSONText
    where type Path Report JSONText = Path_Report JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_JSONText _p _) = _p :: Path Report JSONText
          peekValue (Peek_Report_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Report Markup
    where type Path Report Markup = Path_Report Markup
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Markup _p _) = _p :: Path Report Markup
          peekValue (Peek_Report_Markup _ _x) = _x :: Maybe Markup
instance Paths Report Permissions
    where type Path Report Permissions = Path_Report Permissions
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Permissions _p _) = _p :: Path Report Permissions
          peekValue (Peek_Report_Permissions _ _x) = _x :: Maybe Permissions
instance Paths Report UserIds
    where type Path Report UserIds = Path_Report UserIds
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_UserIds _p _) = _p :: Path Report UserIds
          peekValue (Peek_Report_UserIds _ _x) = _x :: Maybe UserIds
instance Paths Report AbbrevPair
    where type Path Report AbbrevPair = Path_Report AbbrevPair
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_AbbrevPair _p _) = _p :: Path Report AbbrevPair
          peekValue (Peek_Report_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths Report AbbrevPairs
    where type Path Report AbbrevPairs = Path_Report AbbrevPairs
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_AbbrevPairs _p _) = _p :: Path Report AbbrevPairs
          peekValue (Peek_Report_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
instance Paths Report Author
    where type Path Report Author = Path_Report Author
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Author _p _) = _p :: Path Report Author
          peekValue (Peek_Report_Author _ _x) = _x :: Maybe Author
instance Paths Report Authors
    where type Path Report Authors = Path_Report Authors
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Authors _p _) = _p :: Path Report Authors
          peekValue (Peek_Report_Authors _ _x) = _x :: Maybe Authors
instance Paths Report Branding
    where type Path Report Branding = Path_Report Branding
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Branding _p _) = _p :: Path Report Branding
          peekValue (Peek_Report_Branding _ _x) = _x :: Maybe Branding
instance Paths Report MarkupPair
    where type Path Report MarkupPair = Path_Report MarkupPair
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MarkupPair _p _) = _p :: Path Report MarkupPair
          peekValue (Peek_Report_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths Report MarkupPairs
    where type Path Report MarkupPairs = Path_Report MarkupPairs
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MarkupPairs _p _) = _p :: Path Report MarkupPairs
          peekValue (Peek_Report_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
instance Paths Report Markups
    where type Path Report Markups = Path_Report Markups
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Markups _p _) = _p :: Path Report Markups
          peekValue (Peek_Report_Markups _ _x) = _x :: Maybe Markups
instance Paths Report MaybeReportIntendedUse
    where type Path Report MaybeReportIntendedUse = Path_Report MaybeReportIntendedUse
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MaybeReportIntendedUse _p _) = _p :: Path Report MaybeReportIntendedUse
          peekValue (Peek_Report_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
instance Paths Report Report
    where type Path Report Report = Path_Report Report
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Report
          peekPath (Peek_Report_Report _p _) = _p :: Path Report Report
          peekValue (Peek_Report_Report _ _x) = _x :: Maybe Report
instance Paths Report ReportElem
    where type Path Report ReportElem = Path_Report ReportElem
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportElem _p _) = _p :: Path Report ReportElem
          peekValue (Peek_Report_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths Report ReportElems
    where type Path Report ReportElems = Path_Report ReportElems
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportElems _p _) = _p :: Path Report ReportElems
          peekValue (Peek_Report_ReportElems _ _x) = _x :: Maybe ReportElems
instance Paths Report ReportFlags
    where type Path Report ReportFlags = Path_Report ReportFlags
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportFlags _p _) = _p :: Path Report ReportFlags
          peekValue (Peek_Report_ReportFlags _ _x) = _x :: Maybe ReportFlags
instance Paths Report ReportStandard
    where type Path Report ReportStandard = Path_Report ReportStandard
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportStandard _p _) = _p :: Path Report ReportStandard
          peekValue (Peek_Report_ReportStandard _ _x) = _x :: Maybe ReportStandard
instance Paths Report ReportStatus
    where type Path Report ReportStatus = Path_Report ReportStatus
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportStatus _p _) = _p :: Path Report ReportStatus
          peekValue (Peek_Report_ReportStatus _ _x) = _x :: Maybe ReportStatus
instance Paths Report ReportValueApproachInfo
    where type Path Report ReportValueApproachInfo = Path_Report ReportValueApproachInfo
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportValueApproachInfo _p _) = _p :: Path Report ReportValueApproachInfo
          peekValue (Peek_Report_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
instance Paths Report ReportValueTypeInfo
    where type Path Report ReportValueTypeInfo = Path_Report ReportValueTypeInfo
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportValueTypeInfo _p _) = _p :: Path Report ReportValueTypeInfo
          peekValue (Peek_Report_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
instance Paths Report EUI
    where type Path Report EUI = Path_Report EUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_EUI _p _) = _p :: Path Report EUI
          peekValue (Peek_Report_EUI _ _x) = _x :: Maybe EUI
instance Paths Report MEUI
    where type Path Report MEUI = Path_Report MEUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MEUI _p _) = _p :: Path Report MEUI
          peekValue (Peek_Report_MEUI _ _x) = _x :: Maybe MEUI
instance Paths Report MaybeImageFile
    where type Path Report MaybeImageFile = Path_Report MaybeImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MaybeImageFile _p _) = _p :: Path Report MaybeImageFile
          peekValue (Peek_Report_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths Report ReportImage
    where type Path Report ReportImage = Path_Report ReportImage
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportImage _p _) = _p :: Path Report ReportImage
          peekValue (Peek_Report_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths Report ReportImages
    where type Path Report ReportImages = Path_Report ReportImages
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportImages _p _) = _p :: Path Report ReportImages
          peekValue (Peek_Report_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths Report ReadOnlyFilePath
    where type Path Report ReadOnlyFilePath = Path_Report ReadOnlyFilePath
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReadOnlyFilePath _p _) = _p :: Path Report ReadOnlyFilePath
          peekValue (Peek_Report_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
instance Paths Report ReportImageView
    where type Path Report ReportImageView = Path_Report ReportImageView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportImageView _p _) = _p :: Path Report ReportImageView
          peekValue (Peek_Report_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths Report ReportView
    where type Path Report ReportView = Path_Report ReportView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_ReportView _p _) = _p :: Path Report ReportView
          peekValue (Peek_Report_ReportView _ _x) = _x :: Maybe ReportView
instance Paths Report SaneSizeImageSize
    where type Path Report SaneSizeImageSize = Path_Report SaneSizeImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_SaneSizeImageSize _p _) = _p :: Path Report SaneSizeImageSize
          peekValue (Peek_Report_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths Report Item
    where type Path Report Item = Path_Report Item
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Item _p _) = _p :: Path Report Item
          peekValue (Peek_Report_Item _ _x) = _x :: Maybe Item
instance Paths Report MIM
    where type Path Report MIM = Path_Report MIM
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_MIM _p _) = _p :: Path Report MIM
          peekValue (Peek_Report_MIM _ _x) = _x :: Maybe MIM
instance Paths Report CIString
    where type Path Report CIString = Path_Report CIString
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_CIString _p _) = _p :: Path Report CIString
          peekValue (Peek_Report_CIString _ _x) = _x :: Maybe CIString
instance Paths Report URI
    where type Path Report URI = Path_Report URI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_URI _p _) = _p :: Path Report URI
          peekValue (Peek_Report_URI _ _x) = _x :: Maybe URI
instance Paths Report Text
    where type Path Report Text = Path_Report Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_Text _p _) = _p :: Path Report Text
          peekValue (Peek_Report_Text _ _x) = _x :: Maybe Text
instance Paths Report UserId
    where type Path Report UserId = Path_Report UserId
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_UserId _p _) = _p :: Path Report UserId
          peekValue (Peek_Report_UserId _ _x) = _x :: Maybe UserId
instance Paths Report UUID
    where type Path Report UUID = Path_Report UUID
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: Path ReportView ReportView))) _s))
          peek _p _s = undefined :: Peek Report
          peekPath (Peek_Report_UUID _p _) = _p :: Path Report UUID
          peekValue (Peek_Report_UUID _ _x) = _x :: Maybe UUID
instance Paths ReportElem String
    where type Path ReportElem String = Path_ReportElem String
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_String _p _) = _p :: Path ReportElem String
          peekValue (Peek_ReportElem_String _ _x) = _x :: Maybe String
instance Paths ReportElem Bool
    where type Path ReportElem Bool = Path_ReportElem Bool
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Bool _p _) = _p :: Path ReportElem Bool
          peekValue (Peek_ReportElem_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportElem Double
    where type Path ReportElem Double = Path_ReportElem Double
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Double _p _) = _p :: Path ReportElem Double
          peekValue (Peek_ReportElem_Double _ _x) = _x :: Maybe Double
instance Paths ReportElem Dimension
    where type Path ReportElem Dimension = Path_ReportElem Dimension
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Dimension _p _) = _p :: Path ReportElem Dimension
          peekValue (Peek_ReportElem_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportElem ImageCrop
    where type Path ReportElem ImageCrop = Path_ReportElem ImageCrop
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ImageCrop _p _) = _p :: Path ReportElem ImageCrop
          peekValue (Peek_ReportElem_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportElem ImageSize
    where type Path ReportElem ImageSize = Path_ReportElem ImageSize
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ImageSize _p _) = _p :: Path ReportElem ImageSize
          peekValue (Peek_ReportElem_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportElem Units
    where type Path ReportElem Units = Path_ReportElem Units
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Units _p _) = _p :: Path ReportElem Units
          peekValue (Peek_ReportElem_Units _ _x) = _x :: Maybe Units
instance Paths ReportElem ImageFile
    where type Path ReportElem ImageFile = Path_ReportElem ImageFile
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ImageFile _p _) = _p :: Path ReportElem ImageFile
          peekValue (Peek_ReportElem_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportElem JSONText
    where type Path ReportElem JSONText = Path_ReportElem JSONText
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_JSONText _p _) = _p :: Path ReportElem JSONText
          peekValue (Peek_ReportElem_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportElem Markup
    where type Path ReportElem Markup = Path_ReportElem Markup
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Markup _p _) = _p :: Path ReportElem Markup
          peekValue (Peek_ReportElem_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportElem ReportElem
    where type Path ReportElem ReportElem = Path_ReportElem ReportElem
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportElem
          peekPath (Peek_ReportElem_ReportElem _p _) = _p :: Path ReportElem ReportElem
          peekValue (Peek_ReportElem_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths ReportElem EUI
    where type Path ReportElem EUI = Path_ReportElem EUI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_EUI _p _) = _p :: Path ReportElem EUI
          peekValue (Peek_ReportElem_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportElem MEUI
    where type Path ReportElem MEUI = Path_ReportElem MEUI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_MEUI _p _) = _p :: Path ReportElem MEUI
          peekValue (Peek_ReportElem_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportElem MaybeImageFile
    where type Path ReportElem MaybeImageFile = Path_ReportElem MaybeImageFile
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_MaybeImageFile _p _) = _p :: Path ReportElem MaybeImageFile
          peekValue (Peek_ReportElem_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportElem ReportImage
    where type Path ReportElem ReportImage = Path_ReportElem ReportImage
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ReportImage _p _) = _p :: Path ReportElem ReportImage
          peekValue (Peek_ReportElem_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportElem ReportImages
    where type Path ReportElem ReportImages = Path_ReportElem ReportImages
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ReportImages _p _) = _p :: Path ReportElem ReportImages
          peekValue (Peek_ReportElem_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths ReportElem ReportImageView
    where type Path ReportElem ReportImageView = Path_ReportElem ReportImageView
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_ReportImageView _p _) = _p :: Path ReportElem ReportImageView
          peekValue (Peek_ReportElem_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportElem SaneSizeImageSize
    where type Path ReportElem SaneSizeImageSize = Path_ReportElem SaneSizeImageSize
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_SaneSizeImageSize _p _) = _p :: Path ReportElem SaneSizeImageSize
          peekValue (Peek_ReportElem_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportElem Item
    where type Path ReportElem Item = Path_ReportElem Item
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Item _p _) = _p :: Path ReportElem Item
          peekValue (Peek_ReportElem_Item _ _x) = _x :: Maybe Item
instance Paths ReportElem MIM
    where type Path ReportElem MIM = Path_ReportElem MIM
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_MIM _p _) = _p :: Path ReportElem MIM
          peekValue (Peek_ReportElem_MIM _ _x) = _x :: Maybe MIM
instance Paths ReportElem URI
    where type Path ReportElem URI = Path_ReportElem URI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_URI _p _) = _p :: Path ReportElem URI
          peekValue (Peek_ReportElem_URI _ _x) = _x :: Maybe URI
instance Paths ReportElem Text
    where type Path ReportElem Text = Path_ReportElem Text
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
          peek _p (_s@(ReportItem {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportParagraph {})) = undefined :: Peek ReportElem
          peek _p (_s@(ReportUndecided {})) = undefined :: Peek ReportElem
          peekPath (Peek_ReportElem_Text _p _) = _p :: Path ReportElem Text
          peekValue (Peek_ReportElem_Text _ _x) = _x :: Maybe Text
instance Paths ReportElems String
    where type Path ReportElems String = Path_OMap ReportElemID (Path_ReportElem String)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_String _p _) = _p :: Path ReportElems String
          peekValue (Peek_ReportElems_String _ _x) = _x :: Maybe String
instance Paths ReportElems Bool
    where type Path ReportElems Bool = Path_OMap ReportElemID (Path_ReportElem Bool)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Bool _p _) = _p :: Path ReportElems Bool
          peekValue (Peek_ReportElems_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportElems Double
    where type Path ReportElems Double = Path_OMap ReportElemID (Path_ReportElem Double)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Double _p _) = _p :: Path ReportElems Double
          peekValue (Peek_ReportElems_Double _ _x) = _x :: Maybe Double
instance Paths ReportElems Dimension
    where type Path ReportElems Dimension = Path_OMap ReportElemID (Path_ReportElem Dimension)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Dimension _p _) = _p :: Path ReportElems Dimension
          peekValue (Peek_ReportElems_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportElems ImageCrop
    where type Path ReportElems ImageCrop = Path_OMap ReportElemID (Path_ReportElem ImageCrop)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ImageCrop _p _) = _p :: Path ReportElems ImageCrop
          peekValue (Peek_ReportElems_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportElems ImageSize
    where type Path ReportElems ImageSize = Path_OMap ReportElemID (Path_ReportElem ImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ImageSize _p _) = _p :: Path ReportElems ImageSize
          peekValue (Peek_ReportElems_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportElems Units
    where type Path ReportElems Units = Path_OMap ReportElemID (Path_ReportElem Units)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Units _p _) = _p :: Path ReportElems Units
          peekValue (Peek_ReportElems_Units _ _x) = _x :: Maybe Units
instance Paths ReportElems ImageFile
    where type Path ReportElems ImageFile = Path_OMap ReportElemID (Path_ReportElem ImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ImageFile _p _) = _p :: Path ReportElems ImageFile
          peekValue (Peek_ReportElems_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportElems JSONText
    where type Path ReportElems JSONText = Path_OMap ReportElemID (Path_ReportElem JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_JSONText _p _) = _p :: Path ReportElems JSONText
          peekValue (Peek_ReportElems_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportElems Markup
    where type Path ReportElems Markup = Path_OMap ReportElemID (Path_ReportElem Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Markup _p _) = _p :: Path ReportElems Markup
          peekValue (Peek_ReportElems_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportElems ReportElem
    where type Path ReportElems ReportElem = Path_OMap ReportElemID (Path_ReportElem ReportElem)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ReportElem _p _) = _p :: Path ReportElems ReportElem
          peekValue (Peek_ReportElems_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths ReportElems ReportElems
    where type Path ReportElems ReportElems = Path_OMap ReportElemID (Path_ReportElem ReportElems)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportElems
          peekPath (Peek_ReportElems_ReportElems _p _) = _p :: Path ReportElems ReportElems
          peekValue (Peek_ReportElems_ReportElems _ _x) = _x :: Maybe ReportElems
instance Paths ReportElems EUI
    where type Path ReportElems EUI = Path_OMap ReportElemID (Path_ReportElem EUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_EUI _p _) = _p :: Path ReportElems EUI
          peekValue (Peek_ReportElems_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportElems MEUI
    where type Path ReportElems MEUI = Path_OMap ReportElemID (Path_ReportElem MEUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_MEUI _p _) = _p :: Path ReportElems MEUI
          peekValue (Peek_ReportElems_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportElems MaybeImageFile
    where type Path ReportElems MaybeImageFile = Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_MaybeImageFile _p _) = _p :: Path ReportElems MaybeImageFile
          peekValue (Peek_ReportElems_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportElems ReportImage
    where type Path ReportElems ReportImage = Path_OMap ReportElemID (Path_ReportElem ReportImage)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ReportImage _p _) = _p :: Path ReportElems ReportImage
          peekValue (Peek_ReportElems_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportElems ReportImages
    where type Path ReportElems ReportImages = Path_OMap ReportElemID (Path_ReportElem ReportImages)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ReportImages _p _) = _p :: Path ReportElems ReportImages
          peekValue (Peek_ReportElems_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths ReportElems ReportImageView
    where type Path ReportElems ReportImageView = Path_OMap ReportElemID (Path_ReportElem ReportImageView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_ReportImageView _p _) = _p :: Path ReportElems ReportImageView
          peekValue (Peek_ReportElems_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportElems SaneSizeImageSize
    where type Path ReportElems SaneSizeImageSize = Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_SaneSizeImageSize _p _) = _p :: Path ReportElems SaneSizeImageSize
          peekValue (Peek_ReportElems_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportElems Item
    where type Path ReportElems Item = Path_OMap ReportElemID (Path_ReportElem Item)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Item _p _) = _p :: Path ReportElems Item
          peekValue (Peek_ReportElems_Item _ _x) = _x :: Maybe Item
instance Paths ReportElems MIM
    where type Path ReportElems MIM = Path_OMap ReportElemID (Path_ReportElem MIM)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_MIM _p _) = _p :: Path ReportElems MIM
          peekValue (Peek_ReportElems_MIM _ _x) = _x :: Maybe MIM
instance Paths ReportElems URI
    where type Path ReportElems URI = Path_OMap ReportElemID (Path_ReportElem URI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_URI _p _) = _p :: Path ReportElems URI
          peekValue (Peek_ReportElems_URI _ _x) = _x :: Maybe URI
instance Paths ReportElems Text
    where type Path ReportElems Text = Path_OMap ReportElemID (Path_ReportElem Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportElems
          peekPath (Peek_ReportElems_Text _p _) = _p :: Path ReportElems Text
          peekValue (Peek_ReportElems_Text _ _x) = _x :: Maybe Text
instance Paths ReportFlags String
    where type Path ReportFlags String = Path_ReportFlags String
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
          peek _p (_s@(ReportFlags {})) = undefined :: Peek ReportFlags
          peekPath (Peek_ReportFlags_String _p _) = _p :: Path ReportFlags String
          peekValue (Peek_ReportFlags_String _ _x) = _x :: Maybe String
instance Paths ReportFlags Bool
    where type Path ReportFlags Bool = Path_ReportFlags Bool
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
          peek _p (_s@(ReportFlags {})) = undefined :: Peek ReportFlags
          peekPath (Peek_ReportFlags_Bool _p _) = _p :: Path ReportFlags Bool
          peekValue (Peek_ReportFlags_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportFlags JSONText
    where type Path ReportFlags JSONText = Path_ReportFlags JSONText
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
          peek _p (_s@(ReportFlags {})) = undefined :: Peek ReportFlags
          peekPath (Peek_ReportFlags_JSONText _p _) = _p :: Path ReportFlags JSONText
          peekValue (Peek_ReportFlags_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportFlags ReportFlags
    where type Path ReportFlags ReportFlags = Path_ReportFlags ReportFlags
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportFlags
          peekPath (Peek_ReportFlags_ReportFlags _p _) = _p :: Path ReportFlags ReportFlags
          peekValue (Peek_ReportFlags_ReportFlags _ _x) = _x :: Maybe ReportFlags
instance Paths ReportIntendedUse String
    where type Path ReportIntendedUse String = Path_ReportIntendedUse String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReportIntendedUse
          peekPath (Peek_ReportIntendedUse_String _p _) = _p :: Path ReportIntendedUse String
          peekValue (Peek_ReportIntendedUse_String _ _x) = _x :: Maybe String
instance Paths ReportIntendedUse JSONText
    where type Path ReportIntendedUse JSONText = Path_ReportIntendedUse JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReportIntendedUse
          peekPath (Peek_ReportIntendedUse_JSONText _p _) = _p :: Path ReportIntendedUse JSONText
          peekValue (Peek_ReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportIntendedUse ReportIntendedUse
    where type Path ReportIntendedUse ReportIntendedUse = Path_ReportIntendedUse ReportIntendedUse
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportIntendedUse
          peekPath (Peek_ReportIntendedUse_ReportIntendedUse _p _) = _p :: Path ReportIntendedUse ReportIntendedUse
          peekValue (Peek_ReportIntendedUse_ReportIntendedUse _ _x) = _x :: Maybe ReportIntendedUse
instance Paths ReportStandard Int
    where type Path ReportStandard Int = Path_ReportStandard Int
          paths (_s@(ReportStandard {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Int) _g)) [(Path_ReportStandard_unReportStandard, unReportStandard _s)]
          peek _p (_s@(ReportStandard {})) = undefined :: Peek ReportStandard
          peekPath (Peek_ReportStandard_Int _p _) = _p :: Path ReportStandard Int
          peekValue (Peek_ReportStandard_Int _ _x) = _x :: Maybe Int
instance Paths ReportStandard ReportStandard
    where type Path ReportStandard ReportStandard = Path_ReportStandard ReportStandard
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportStandard
          peekPath (Peek_ReportStandard_ReportStandard _p _) = _p :: Path ReportStandard ReportStandard
          peekValue (Peek_ReportStandard_ReportStandard _ _x) = _x :: Maybe ReportStandard
instance Paths ReportStatus String
    where type Path ReportStatus String = Path_ReportStatus String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReportStatus_View,
                                                                                              a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReportStatus
          peekPath (Peek_ReportStatus_String _p _) = _p :: Path ReportStatus String
          peekValue (Peek_ReportStatus_String _ _x) = _x :: Maybe String
instance Paths ReportStatus JSONText
    where type Path ReportStatus JSONText = Path_ReportStatus JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReportStatus_View,
                                                                                              a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReportStatus
          peekPath (Peek_ReportStatus_JSONText _p _) = _p :: Path ReportStatus JSONText
          peekValue (Peek_ReportStatus_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportStatus ReportStatus
    where type Path ReportStatus ReportStatus = Path_ReportStatus ReportStatus
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportStatus
          peekPath (Peek_ReportStatus_ReportStatus _p _) = _p :: Path ReportStatus ReportStatus
          peekValue (Peek_ReportStatus_ReportStatus _ _x) = _x :: Maybe ReportStatus
instance Paths ReportValueApproachInfo JSONText
    where type Path ReportValueApproachInfo JSONText = Path_ReportValueApproachInfo JSONText
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
          peek _p (_s@(ReportValueApproachInfo {})) = undefined :: Peek ReportValueApproachInfo
          peekPath (Peek_ReportValueApproachInfo_JSONText _p _) = _p :: Path ReportValueApproachInfo JSONText
          peekValue (Peek_ReportValueApproachInfo_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportValueApproachInfo Markup
    where type Path ReportValueApproachInfo Markup = Path_ReportValueApproachInfo Markup
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
          peek _p (_s@(ReportValueApproachInfo {})) = undefined :: Peek ReportValueApproachInfo
          peekPath (Peek_ReportValueApproachInfo_Markup _p _) = _p :: Path ReportValueApproachInfo Markup
          peekValue (Peek_ReportValueApproachInfo_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportValueApproachInfo ReportValueApproachInfo
    where type Path ReportValueApproachInfo ReportValueApproachInfo = Path_ReportValueApproachInfo ReportValueApproachInfo
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportValueApproachInfo
          peekPath (Peek_ReportValueApproachInfo_ReportValueApproachInfo _p _) = _p :: Path ReportValueApproachInfo ReportValueApproachInfo
          peekValue (Peek_ReportValueApproachInfo_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
instance Paths ReportValueApproachInfo Text
    where type Path ReportValueApproachInfo Text = Path_ReportValueApproachInfo Text
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
          peek _p (_s@(ReportValueApproachInfo {})) = undefined :: Peek ReportValueApproachInfo
          peekPath (Peek_ReportValueApproachInfo_Text _p _) = _p :: Path ReportValueApproachInfo Text
          peekValue (Peek_ReportValueApproachInfo_Text _ _x) = _x :: Maybe Text
instance Paths ReportValueTypeInfo JSONText
    where type Path ReportValueTypeInfo JSONText = Path_ReportValueTypeInfo JSONText
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
          peek _p (_s@(ReportValueTypeInfo {})) = undefined :: Peek ReportValueTypeInfo
          peekPath (Peek_ReportValueTypeInfo_JSONText _p _) = _p :: Path ReportValueTypeInfo JSONText
          peekValue (Peek_ReportValueTypeInfo_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportValueTypeInfo Markup
    where type Path ReportValueTypeInfo Markup = Path_ReportValueTypeInfo Markup
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
          peek _p (_s@(ReportValueTypeInfo {})) = undefined :: Peek ReportValueTypeInfo
          peekPath (Peek_ReportValueTypeInfo_Markup _p _) = _p :: Path ReportValueTypeInfo Markup
          peekValue (Peek_ReportValueTypeInfo_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportValueTypeInfo ReportValueTypeInfo
    where type Path ReportValueTypeInfo ReportValueTypeInfo = Path_ReportValueTypeInfo ReportValueTypeInfo
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportValueTypeInfo
          peekPath (Peek_ReportValueTypeInfo_ReportValueTypeInfo _p _) = _p :: Path ReportValueTypeInfo ReportValueTypeInfo
          peekValue (Peek_ReportValueTypeInfo_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
instance Paths ReportValueTypeInfo Text
    where type Path ReportValueTypeInfo Text = Path_ReportValueTypeInfo Text
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
          peek _p (_s@(ReportValueTypeInfo {})) = undefined :: Peek ReportValueTypeInfo
          peekPath (Peek_ReportValueTypeInfo_Text _p _) = _p :: Path ReportValueTypeInfo Text
          peekValue (Peek_ReportValueTypeInfo_Text _ _x) = _x :: Maybe Text
instance Paths EUI ImageFile
    where type Path EUI ImageFile = Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)
          paths (_s@(Left _)) _g = mempty
          paths (_s@(Right _)) _g = concatMap (\(p, a') -> map p (paths (a' :: ImageFile) _g)) (case _s of
                                                                                                    Left _ -> []
                                                                                                    Right a' -> [(Path_Right, a')])
          peek _p (_s@(Left _)) = undefined :: Peek EUI
          peek _p (_s@(Right _)) = undefined :: Peek EUI
          peekPath (Peek_EUI_ImageFile _p _) = _p :: Path EUI ImageFile
          peekValue (Peek_EUI_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths EUI EUI
    where type Path EUI EUI = Path_Either (Path_URI EUI) (Path_ImageFile EUI)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek EUI
          peekPath (Peek_EUI_EUI _p _) = _p :: Path EUI EUI
          peekValue (Peek_EUI_EUI _ _x) = _x :: Maybe EUI
instance Paths EUI URI
    where type Path EUI URI = Path_Either (Path_URI URI) (Path_ImageFile URI)
          paths (_s@(Left _)) _g = concatMap (\(p, a') -> map p (paths (a' :: URI) _g)) (case _s of
                                                                                             Left a' -> [(Path_Left, a')]
                                                                                             Right _ -> [])
          paths (_s@(Right _)) _g = mempty
          peek _p (_s@(Left _)) = undefined :: Peek EUI
          peek _p (_s@(Right _)) = undefined :: Peek EUI
          peekPath (Peek_EUI_URI _p _) = _p :: Path EUI URI
          peekValue (Peek_EUI_URI _ _x) = _x :: Maybe URI
instance Paths MEUI ImageFile
    where type Path MEUI ImageFile = Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: EUI) _g)) (case _s of
                                                                                  Nothing -> []
                                                                                  Just a' -> [(Path_Just, a')])
          peek _p _s = undefined :: Peek MEUI
          peekPath (Peek_MEUI_ImageFile _p _) = _p :: Path MEUI ImageFile
          peekValue (Peek_MEUI_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths MEUI EUI
    where type Path MEUI EUI = Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: EUI) _g)) (case _s of
                                                                                  Nothing -> []
                                                                                  Just a' -> [(Path_Just, a')])
          peek _p _s = undefined :: Peek MEUI
          peekPath (Peek_MEUI_EUI _p _) = _p :: Path MEUI EUI
          peekValue (Peek_MEUI_EUI _ _x) = _x :: Maybe EUI
instance Paths MEUI MEUI
    where type Path MEUI MEUI = Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MEUI
          peekPath (Peek_MEUI_MEUI _p _) = _p :: Path MEUI MEUI
          peekValue (Peek_MEUI_MEUI _ _x) = _x :: Maybe MEUI
instance Paths MEUI URI
    where type Path MEUI URI = Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: EUI) _g)) (case _s of
                                                                                  Nothing -> []
                                                                                  Just a' -> [(Path_Just, a')])
          peek _p _s = undefined :: Peek MEUI
          peekPath (Peek_MEUI_URI _p _) = _p :: Path MEUI URI
          peekValue (Peek_MEUI_URI _ _x) = _x :: Maybe URI
instance Paths MaybeImageFile String
    where type Path MaybeImageFile String = Path_MaybeImageFile String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_MaybeImageFile_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek MaybeImageFile
          peekPath (Peek_MaybeImageFile_String _p _) = _p :: Path MaybeImageFile String
          peekValue (Peek_MaybeImageFile_String _ _x) = _x :: Maybe String
instance Paths MaybeImageFile JSONText
    where type Path MaybeImageFile JSONText = Path_MaybeImageFile JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_MaybeImageFile_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek MaybeImageFile
          peekPath (Peek_MaybeImageFile_JSONText _p _) = _p :: Path MaybeImageFile JSONText
          peekValue (Peek_MaybeImageFile_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MaybeImageFile MaybeImageFile
    where type Path MaybeImageFile MaybeImageFile = Path_MaybeImageFile MaybeImageFile
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MaybeImageFile
          peekPath (Peek_MaybeImageFile_MaybeImageFile _p _) = _p :: Path MaybeImageFile MaybeImageFile
          peekValue (Peek_MaybeImageFile_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportImage String
    where type Path ReportImage String = Path_ReportImage String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_String _p _) = _p :: Path ReportImage String
          peekValue (Peek_ReportImage_String _ _x) = _x :: Maybe String
instance Paths ReportImage Bool
    where type Path ReportImage Bool = Path_ReportImage Bool
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Bool _p _) = _p :: Path ReportImage Bool
          peekValue (Peek_ReportImage_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportImage Double
    where type Path ReportImage Double = Path_ReportImage Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Double _p _) = _p :: Path ReportImage Double
          peekValue (Peek_ReportImage_Double _ _x) = _x :: Maybe Double
instance Paths ReportImage Dimension
    where type Path ReportImage Dimension = Path_ReportImage Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Dimension _p _) = _p :: Path ReportImage Dimension
          peekValue (Peek_ReportImage_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportImage ImageCrop
    where type Path ReportImage ImageCrop = Path_ReportImage ImageCrop
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_ImageCrop _p _) = _p :: Path ReportImage ImageCrop
          peekValue (Peek_ReportImage_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportImage ImageSize
    where type Path ReportImage ImageSize = Path_ReportImage ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_ImageSize _p _) = _p :: Path ReportImage ImageSize
          peekValue (Peek_ReportImage_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportImage Units
    where type Path ReportImage Units = Path_ReportImage Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Units _p _) = _p :: Path ReportImage Units
          peekValue (Peek_ReportImage_Units _ _x) = _x :: Maybe Units
instance Paths ReportImage ImageFile
    where type Path ReportImage ImageFile = Path_ReportImage ImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_ImageFile _p _) = _p :: Path ReportImage ImageFile
          peekValue (Peek_ReportImage_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportImage JSONText
    where type Path ReportImage JSONText = Path_ReportImage JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_JSONText _p _) = _p :: Path ReportImage JSONText
          peekValue (Peek_ReportImage_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportImage Markup
    where type Path ReportImage Markup = Path_ReportImage Markup
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Markup _p _) = _p :: Path ReportImage Markup
          peekValue (Peek_ReportImage_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportImage EUI
    where type Path ReportImage EUI = Path_ReportImage EUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_EUI _p _) = _p :: Path ReportImage EUI
          peekValue (Peek_ReportImage_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportImage MEUI
    where type Path ReportImage MEUI = Path_ReportImage MEUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_MEUI _p _) = _p :: Path ReportImage MEUI
          peekValue (Peek_ReportImage_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportImage MaybeImageFile
    where type Path ReportImage MaybeImageFile = Path_ReportImage MaybeImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_MaybeImageFile _p _) = _p :: Path ReportImage MaybeImageFile
          peekValue (Peek_ReportImage_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportImage ReportImage
    where type Path ReportImage ReportImage = Path_ReportImage ReportImage
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportImage
          peekPath (Peek_ReportImage_ReportImage _p _) = _p :: Path ReportImage ReportImage
          peekValue (Peek_ReportImage_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportImage ReportImageView
    where type Path ReportImage ReportImageView = Path_ReportImage ReportImageView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_ReportImageView _p _) = _p :: Path ReportImage ReportImageView
          peekValue (Peek_ReportImage_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportImage SaneSizeImageSize
    where type Path ReportImage SaneSizeImageSize = Path_ReportImage SaneSizeImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_SaneSizeImageSize _p _) = _p :: Path ReportImage SaneSizeImageSize
          peekValue (Peek_ReportImage_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportImage URI
    where type Path ReportImage URI = Path_ReportImage URI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_URI _p _) = _p :: Path ReportImage URI
          peekValue (Peek_ReportImage_URI _ _x) = _x :: Maybe URI
instance Paths ReportImage Text
    where type Path ReportImage Text = Path_ReportImage Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path ReportImageView ReportImageView))) _s))
          peek _p _s = undefined :: Peek ReportImage
          peekPath (Peek_ReportImage_Text _p _) = _p :: Path ReportImage Text
          peekValue (Peek_ReportImage_Text _ _x) = _x :: Maybe Text
instance Paths ReportImages String
    where type Path ReportImages String = Path_OMap ReportImageID (Path_ReportImage String)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_String _p _) = _p :: Path ReportImages String
          peekValue (Peek_ReportImages_String _ _x) = _x :: Maybe String
instance Paths ReportImages Bool
    where type Path ReportImages Bool = Path_OMap ReportImageID (Path_ReportImage Bool)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Bool _p _) = _p :: Path ReportImages Bool
          peekValue (Peek_ReportImages_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportImages Double
    where type Path ReportImages Double = Path_OMap ReportImageID (Path_ReportImage Double)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Double _p _) = _p :: Path ReportImages Double
          peekValue (Peek_ReportImages_Double _ _x) = _x :: Maybe Double
instance Paths ReportImages Dimension
    where type Path ReportImages Dimension = Path_OMap ReportImageID (Path_ReportImage Dimension)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Dimension _p _) = _p :: Path ReportImages Dimension
          peekValue (Peek_ReportImages_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportImages ImageCrop
    where type Path ReportImages ImageCrop = Path_OMap ReportImageID (Path_ReportImage ImageCrop)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_ImageCrop _p _) = _p :: Path ReportImages ImageCrop
          peekValue (Peek_ReportImages_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportImages ImageSize
    where type Path ReportImages ImageSize = Path_OMap ReportImageID (Path_ReportImage ImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_ImageSize _p _) = _p :: Path ReportImages ImageSize
          peekValue (Peek_ReportImages_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportImages Units
    where type Path ReportImages Units = Path_OMap ReportImageID (Path_ReportImage Units)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Units _p _) = _p :: Path ReportImages Units
          peekValue (Peek_ReportImages_Units _ _x) = _x :: Maybe Units
instance Paths ReportImages ImageFile
    where type Path ReportImages ImageFile = Path_OMap ReportImageID (Path_ReportImage ImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_ImageFile _p _) = _p :: Path ReportImages ImageFile
          peekValue (Peek_ReportImages_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportImages JSONText
    where type Path ReportImages JSONText = Path_OMap ReportImageID (Path_ReportImage JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_JSONText _p _) = _p :: Path ReportImages JSONText
          peekValue (Peek_ReportImages_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportImages Markup
    where type Path ReportImages Markup = Path_OMap ReportImageID (Path_ReportImage Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Markup _p _) = _p :: Path ReportImages Markup
          peekValue (Peek_ReportImages_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportImages EUI
    where type Path ReportImages EUI = Path_OMap ReportImageID (Path_ReportImage EUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_EUI _p _) = _p :: Path ReportImages EUI
          peekValue (Peek_ReportImages_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportImages MEUI
    where type Path ReportImages MEUI = Path_OMap ReportImageID (Path_ReportImage MEUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_MEUI _p _) = _p :: Path ReportImages MEUI
          peekValue (Peek_ReportImages_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportImages MaybeImageFile
    where type Path ReportImages MaybeImageFile = Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_MaybeImageFile _p _) = _p :: Path ReportImages MaybeImageFile
          peekValue (Peek_ReportImages_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportImages ReportImage
    where type Path ReportImages ReportImage = Path_OMap ReportImageID (Path_ReportImage ReportImage)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_ReportImage _p _) = _p :: Path ReportImages ReportImage
          peekValue (Peek_ReportImages_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportImages ReportImages
    where type Path ReportImages ReportImages = Path_OMap ReportImageID (Path_ReportImage ReportImages)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportImages
          peekPath (Peek_ReportImages_ReportImages _p _) = _p :: Path ReportImages ReportImages
          peekValue (Peek_ReportImages_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths ReportImages ReportImageView
    where type Path ReportImages ReportImageView = Path_OMap ReportImageID (Path_ReportImage ReportImageView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_ReportImageView _p _) = _p :: Path ReportImages ReportImageView
          peekValue (Peek_ReportImages_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportImages SaneSizeImageSize
    where type Path ReportImages SaneSizeImageSize = Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_SaneSizeImageSize _p _) = _p :: Path ReportImages SaneSizeImageSize
          peekValue (Peek_ReportImages_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportImages URI
    where type Path ReportImages URI = Path_OMap ReportImageID (Path_ReportImage URI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_URI _p _) = _p :: Path ReportImages URI
          peekValue (Peek_ReportImages_URI _ _x) = _x :: Maybe URI
instance Paths ReportImages Text
    where type Path ReportImages Text = Path_OMap ReportImageID (Path_ReportImage Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
          peek _p _s = undefined :: Peek ReportImages
          peekPath (Peek_ReportImages_Text _p _) = _p :: Path ReportImages Text
          peekValue (Peek_ReportImages_Text _ _x) = _x :: Maybe Text
instance Paths ReadOnlyFilePath String
    where type Path ReadOnlyFilePath String = Path_ReadOnlyFilePath String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                              a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReadOnlyFilePath
          peekPath (Peek_ReadOnlyFilePath_String _p _) = _p :: Path ReadOnlyFilePath String
          peekValue (Peek_ReadOnlyFilePath_String _ _x) = _x :: Maybe String
instance Paths ReadOnlyFilePath JSONText
    where type Path ReadOnlyFilePath JSONText = Path_ReadOnlyFilePath JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: String) _g)) (map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                              a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path String String))) _s))
          peek _p _s = undefined :: Peek ReadOnlyFilePath
          peekPath (Peek_ReadOnlyFilePath_JSONText _p _) = _p :: Path ReadOnlyFilePath JSONText
          peekValue (Peek_ReadOnlyFilePath_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReadOnlyFilePath ReadOnlyFilePath
    where type Path ReadOnlyFilePath ReadOnlyFilePath = Path_ReadOnlyFilePath ReadOnlyFilePath
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReadOnlyFilePath
          peekPath (Peek_ReadOnlyFilePath_ReadOnlyFilePath _p _) = _p :: Path ReadOnlyFilePath ReadOnlyFilePath
          peekValue (Peek_ReadOnlyFilePath_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
instance Paths ReportImageView String
    where type Path ReportImageView String = Path_ReportImageView String
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_String _p _) = _p :: Path ReportImageView String
          peekValue (Peek_ReportImageView_String _ _x) = _x :: Maybe String
instance Paths ReportImageView Bool
    where type Path ReportImageView Bool = Path_ReportImageView Bool
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Bool _p _) = _p :: Path ReportImageView Bool
          peekValue (Peek_ReportImageView_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportImageView Double
    where type Path ReportImageView Double = Path_ReportImageView Double
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Double _p _) = _p :: Path ReportImageView Double
          peekValue (Peek_ReportImageView_Double _ _x) = _x :: Maybe Double
instance Paths ReportImageView Dimension
    where type Path ReportImageView Dimension = Path_ReportImageView Dimension
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Dimension _p _) = _p :: Path ReportImageView Dimension
          peekValue (Peek_ReportImageView_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportImageView ImageCrop
    where type Path ReportImageView ImageCrop = Path_ReportImageView ImageCrop
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ImageCrop) _g)) [(Path_ReportImageView__picCrop, _picCrop _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_ImageCrop _p _) = _p :: Path ReportImageView ImageCrop
          peekValue (Peek_ReportImageView_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportImageView ImageSize
    where type Path ReportImageView ImageSize = Path_ReportImageView ImageSize
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_ImageSize _p _) = _p :: Path ReportImageView ImageSize
          peekValue (Peek_ReportImageView_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportImageView Units
    where type Path ReportImageView Units = Path_ReportImageView Units
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Units _p _) = _p :: Path ReportImageView Units
          peekValue (Peek_ReportImageView_Units _ _x) = _x :: Maybe Units
instance Paths ReportImageView ImageFile
    where type Path ReportImageView ImageFile = Path_ReportImageView ImageFile
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_ImageFile _p _) = _p :: Path ReportImageView ImageFile
          peekValue (Peek_ReportImageView_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportImageView JSONText
    where type Path ReportImageView JSONText = Path_ReportImageView JSONText
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_JSONText _p _) = _p :: Path ReportImageView JSONText
          peekValue (Peek_ReportImageView_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportImageView Markup
    where type Path ReportImageView Markup = Path_ReportImageView Markup
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Markup _p _) = _p :: Path ReportImageView Markup
          peekValue (Peek_ReportImageView_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportImageView EUI
    where type Path ReportImageView EUI = Path_ReportImageView EUI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_EUI _p _) = _p :: Path ReportImageView EUI
          peekValue (Peek_ReportImageView_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportImageView MEUI
    where type Path ReportImageView MEUI = Path_ReportImageView MEUI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_MEUI _p _) = _p :: Path ReportImageView MEUI
          peekValue (Peek_ReportImageView_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportImageView MaybeImageFile
    where type Path ReportImageView MaybeImageFile = Path_ReportImageView MaybeImageFile
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated,
                                                                                                                          _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_MaybeImageFile _p _) = _p :: Path ReportImageView MaybeImageFile
          peekValue (Peek_ReportImageView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportImageView ReportImageView
    where type Path ReportImageView ReportImageView = Path_ReportImageView ReportImageView
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportImageView
          peekPath (Peek_ReportImageView_ReportImageView _p _) = _p :: Path ReportImageView ReportImageView
          peekValue (Peek_ReportImageView_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportImageView SaneSizeImageSize
    where type Path ReportImageView SaneSizeImageSize = Path_ReportImageView SaneSizeImageSize
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_SaneSizeImageSize _p _) = _p :: Path ReportImageView SaneSizeImageSize
          peekValue (Peek_ReportImageView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportImageView URI
    where type Path ReportImageView URI = Path_ReportImageView URI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_URI _p _) = _p :: Path ReportImageView URI
          peekValue (Peek_ReportImageView_URI _ _x) = _x :: Maybe URI
instance Paths ReportImageView Text
    where type Path ReportImageView Text = Path_ReportImageView Text
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)]
          peek _p (_s@(ReportImageView {})) = undefined :: Peek ReportImageView
          peekPath (Peek_ReportImageView_Text _p _) = _p :: Path ReportImageView Text
          peekValue (Peek_ReportImageView_Text _ _x) = _x :: Maybe Text
instance Paths ReportView String
    where type Path ReportView String = Path_ReportView String
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_String _p _) = _p :: Path ReportView String
          peekValue (Peek_ReportView_String _ _x) = _x :: Maybe String
instance Paths ReportView Int64
    where type Path ReportView Int64 = Path_ReportView Int64
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: EpochMilli) _g)) [(Path_ReportView__reportCreated, _reportCreated _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Int64 _p _) = _p :: Path ReportView Int64
          peekValue (Peek_ReportView_Int64 _ _x) = _x :: Maybe Int64
instance Paths ReportView Bool
    where type Path ReportView Bool = Path_ReportView Bool
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Bool _p _) = _p :: Path ReportView Bool
          peekValue (Peek_ReportView_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportView Double
    where type Path ReportView Double = Path_ReportView Double
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Double _p _) = _p :: Path ReportView Double
          peekValue (Peek_ReportView_Double _ _x) = _x :: Maybe Double
instance Paths ReportView Int
    where type Path ReportView Int = Path_ReportView Int
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStandard) _g)) [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Int _p _) = _p :: Path ReportView Int
          peekValue (Peek_ReportView_Int _ _x) = _x :: Maybe Int
instance Paths ReportView Dimension
    where type Path ReportView Dimension = Path_ReportView Dimension
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Dimension _p _) = _p :: Path ReportView Dimension
          peekValue (Peek_ReportView_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportView ImageCrop
    where type Path ReportView ImageCrop = Path_ReportView ImageCrop
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ImageCrop _p _) = _p :: Path ReportView ImageCrop
          peekValue (Peek_ReportView_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportView ImageSize
    where type Path ReportView ImageSize = Path_ReportView ImageSize
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ImageSize _p _) = _p :: Path ReportView ImageSize
          peekValue (Peek_ReportView_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportView Units
    where type Path ReportView Units = Path_ReportView Units
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Units _p _) = _p :: Path ReportView Units
          peekValue (Peek_ReportView_Units _ _x) = _x :: Maybe Units
instance Paths ReportView ImageFile
    where type Path ReportView ImageFile = Path_ReportView ImageFile
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ImageFile _p _) = _p :: Path ReportView ImageFile
          peekValue (Peek_ReportView_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportView Integer
    where type Path ReportView Integer = Path_ReportView Integer
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Integer) _g)) [(Path_ReportView__reportRevision, _reportRevision _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Integer _p _) = _p :: Path ReportView Integer
          peekValue (Peek_ReportView_Integer _ _x) = _x :: Maybe Integer
instance Paths ReportView JSONText
    where type Path ReportView JSONText = Path_ReportView JSONText
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_JSONText _p _) = _p :: Path ReportView JSONText
          peekValue (Peek_ReportView_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportView Markup
    where type Path ReportView Markup = Path_ReportView Markup
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Markup _p _) = _p :: Path ReportView Markup
          peekValue (Peek_ReportView_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportView Permissions
    where type Path ReportView Permissions = Path_ReportView Permissions
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Permissions _p _) = _p :: Path ReportView Permissions
          peekValue (Peek_ReportView_Permissions _ _x) = _x :: Maybe Permissions
instance Paths ReportView UserIds
    where type Path ReportView UserIds = Path_ReportView UserIds
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_UserIds _p _) = _p :: Path ReportView UserIds
          peekValue (Peek_ReportView_UserIds _ _x) = _x :: Maybe UserIds
instance Paths ReportView AbbrevPair
    where type Path ReportView AbbrevPair = Path_ReportView AbbrevPair
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_AbbrevPair _p _) = _p :: Path ReportView AbbrevPair
          peekValue (Peek_ReportView_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths ReportView AbbrevPairs
    where type Path ReportView AbbrevPairs = Path_ReportView AbbrevPairs
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_AbbrevPairs _p _) = _p :: Path ReportView AbbrevPairs
          peekValue (Peek_ReportView_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
instance Paths ReportView Author
    where type Path ReportView Author = Path_ReportView Author
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Author _p _) = _p :: Path ReportView Author
          peekValue (Peek_ReportView_Author _ _x) = _x :: Maybe Author
instance Paths ReportView Authors
    where type Path ReportView Authors = Path_ReportView Authors
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Authors _p _) = _p :: Path ReportView Authors
          peekValue (Peek_ReportView_Authors _ _x) = _x :: Maybe Authors
instance Paths ReportView Branding
    where type Path ReportView Branding = Path_ReportView Branding
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Branding _p _) = _p :: Path ReportView Branding
          peekValue (Peek_ReportView_Branding _ _x) = _x :: Maybe Branding
instance Paths ReportView MarkupPair
    where type Path ReportView MarkupPair = Path_ReportView MarkupPair
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MarkupPair _p _) = _p :: Path ReportView MarkupPair
          peekValue (Peek_ReportView_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths ReportView MarkupPairs
    where type Path ReportView MarkupPairs = Path_ReportView MarkupPairs
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MarkupPairs _p _) = _p :: Path ReportView MarkupPairs
          peekValue (Peek_ReportView_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
instance Paths ReportView Markups
    where type Path ReportView Markups = Path_ReportView Markups
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Markups _p _) = _p :: Path ReportView Markups
          peekValue (Peek_ReportView_Markups _ _x) = _x :: Maybe Markups
instance Paths ReportView MaybeReportIntendedUse
    where type Path ReportView MaybeReportIntendedUse = Path_ReportView MaybeReportIntendedUse
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MaybeReportIntendedUse _p _) = _p :: Path ReportView MaybeReportIntendedUse
          peekValue (Peek_ReportView_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
instance Paths ReportView ReportElem
    where type Path ReportView ReportElem = Path_ReportView ReportElem
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportElem _p _) = _p :: Path ReportView ReportElem
          peekValue (Peek_ReportView_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths ReportView ReportElems
    where type Path ReportView ReportElems = Path_ReportView ReportElems
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportElems _p _) = _p :: Path ReportView ReportElems
          peekValue (Peek_ReportView_ReportElems _ _x) = _x :: Maybe ReportElems
instance Paths ReportView ReportFlags
    where type Path ReportView ReportFlags = Path_ReportView ReportFlags
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportFlags _p _) = _p :: Path ReportView ReportFlags
          peekValue (Peek_ReportView_ReportFlags _ _x) = _x :: Maybe ReportFlags
instance Paths ReportView ReportStandard
    where type Path ReportView ReportStandard = Path_ReportView ReportStandard
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStandard) _g)) [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportStandard _p _) = _p :: Path ReportView ReportStandard
          peekValue (Peek_ReportView_ReportStandard _ _x) = _x :: Maybe ReportStandard
instance Paths ReportView ReportStatus
    where type Path ReportView ReportStatus = Path_ReportView ReportStatus
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportStatus _p _) = _p :: Path ReportView ReportStatus
          peekValue (Peek_ReportView_ReportStatus _ _x) = _x :: Maybe ReportStatus
instance Paths ReportView ReportValueApproachInfo
    where type Path ReportView ReportValueApproachInfo = Path_ReportView ReportValueApproachInfo
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo,
                                                                                                                     _reportValueApproachInfo _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportValueApproachInfo _p _) = _p :: Path ReportView ReportValueApproachInfo
          peekValue (Peek_ReportView_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
instance Paths ReportView ReportValueTypeInfo
    where type Path ReportView ReportValueTypeInfo = Path_ReportView ReportValueTypeInfo
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportValueTypeInfo _p _) = _p :: Path ReportView ReportValueTypeInfo
          peekValue (Peek_ReportView_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
instance Paths ReportView EUI
    where type Path ReportView EUI = Path_ReportView EUI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_EUI _p _) = _p :: Path ReportView EUI
          peekValue (Peek_ReportView_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportView MEUI
    where type Path ReportView MEUI = Path_ReportView MEUI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MEUI _p _) = _p :: Path ReportView MEUI
          peekValue (Peek_ReportView_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportView MaybeImageFile
    where type Path ReportView MaybeImageFile = Path_ReportView MaybeImageFile
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MaybeImageFile _p _) = _p :: Path ReportView MaybeImageFile
          peekValue (Peek_ReportView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportView ReportImage
    where type Path ReportView ReportImage = Path_ReportView ReportImage
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportImage _p _) = _p :: Path ReportView ReportImage
          peekValue (Peek_ReportView_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportView ReportImages
    where type Path ReportView ReportImages = Path_ReportView ReportImages
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportImages _p _) = _p :: Path ReportView ReportImages
          peekValue (Peek_ReportView_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths ReportView ReadOnlyFilePath
    where type Path ReportView ReadOnlyFilePath = Path_ReportView ReadOnlyFilePath
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReadOnlyFilePath _p _) = _p :: Path ReportView ReadOnlyFilePath
          peekValue (Peek_ReportView_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
instance Paths ReportView ReportImageView
    where type Path ReportView ReportImageView = Path_ReportView ReportImageView
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_ReportImageView _p _) = _p :: Path ReportView ReportImageView
          peekValue (Peek_ReportView_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportView ReportView
    where type Path ReportView ReportView = Path_ReportView ReportView
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportView
          peekPath (Peek_ReportView_ReportView _p _) = _p :: Path ReportView ReportView
          peekValue (Peek_ReportView_ReportView _ _x) = _x :: Maybe ReportView
instance Paths ReportView SaneSizeImageSize
    where type Path ReportView SaneSizeImageSize = Path_ReportView SaneSizeImageSize
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_SaneSizeImageSize _p _) = _p :: Path ReportView SaneSizeImageSize
          peekValue (Peek_ReportView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportView Item
    where type Path ReportView Item = Path_ReportView Item
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Item _p _) = _p :: Path ReportView Item
          peekValue (Peek_ReportView_Item _ _x) = _x :: Maybe Item
instance Paths ReportView MIM
    where type Path ReportView MIM = Path_ReportView MIM
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_MIM _p _) = _p :: Path ReportView MIM
          peekValue (Peek_ReportView_MIM _ _x) = _x :: Maybe MIM
instance Paths ReportView CIString
    where type Path ReportView CIString = Path_ReportView CIString
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_CIString _p _) = _p :: Path ReportView CIString
          peekValue (Peek_ReportView_CIString _ _x) = _x :: Maybe CIString
instance Paths ReportView URI
    where type Path ReportView URI = Path_ReportView URI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_URI _p _) = _p :: Path ReportView URI
          peekValue (Peek_ReportView_URI _ _x) = _x :: Maybe URI
instance Paths ReportView Text
    where type Path ReportView Text = Path_ReportView Text
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)]]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_Text _p _) = _p :: Path ReportView Text
          peekValue (Peek_ReportView_Text _ _x) = _x :: Maybe Text
instance Paths ReportView UserId
    where type Path ReportView UserId = Path_ReportView UserId
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_UserId _p _) = _p :: Path ReportView UserId
          peekValue (Peek_ReportView_UserId _ _x) = _x :: Maybe UserId
instance Paths ReportView UUID
    where type Path ReportView UUID = Path_ReportView UUID
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: UUID) _g)) [(Path_ReportView__reportUUID, _reportUUID _s)]
          peek _p (_s@(ReportView {})) = undefined :: Peek ReportView
          peekPath (Peek_ReportView_UUID _p _) = _p :: Path ReportView UUID
          peekValue (Peek_ReportView_UUID _ _x) = _x :: Maybe UUID
instance Paths SaneSizeImageSize String
    where type Path SaneSizeImageSize String = Path_SaneSizeImageSize String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_String _p _) = _p :: Path SaneSizeImageSize String
          peekValue (Peek_SaneSizeImageSize_String _ _x) = _x :: Maybe String
instance Paths SaneSizeImageSize Double
    where type Path SaneSizeImageSize Double = Path_SaneSizeImageSize Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_Double _p _) = _p :: Path SaneSizeImageSize Double
          peekValue (Peek_SaneSizeImageSize_Double _ _x) = _x :: Maybe Double
instance Paths SaneSizeImageSize Dimension
    where type Path SaneSizeImageSize Dimension = Path_SaneSizeImageSize Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_Dimension _p _) = _p :: Path SaneSizeImageSize Dimension
          peekValue (Peek_SaneSizeImageSize_Dimension _ _x) = _x :: Maybe Dimension
instance Paths SaneSizeImageSize ImageSize
    where type Path SaneSizeImageSize ImageSize = Path_SaneSizeImageSize ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_ImageSize _p _) = _p :: Path SaneSizeImageSize ImageSize
          peekValue (Peek_SaneSizeImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths SaneSizeImageSize Units
    where type Path SaneSizeImageSize Units = Path_SaneSizeImageSize Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_Units _p _) = _p :: Path SaneSizeImageSize Units
          peekValue (Peek_SaneSizeImageSize_Units _ _x) = _x :: Maybe Units
instance Paths SaneSizeImageSize JSONText
    where type Path SaneSizeImageSize JSONText = Path_SaneSizeImageSize JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path ImageSize ImageSize))) _s))
          peek _p _s = undefined :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_JSONText _p _) = _p :: Path SaneSizeImageSize JSONText
          peekValue (Peek_SaneSizeImageSize_JSONText _ _x) = _x :: Maybe JSONText
instance Paths SaneSizeImageSize SaneSizeImageSize
    where type Path SaneSizeImageSize SaneSizeImageSize = Path_SaneSizeImageSize SaneSizeImageSize
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek SaneSizeImageSize
          peekPath (Peek_SaneSizeImageSize_SaneSizeImageSize _p _) = _p :: Path SaneSizeImageSize SaneSizeImageSize
          peekValue (Peek_SaneSizeImageSize_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths Item String
    where type Path Item String = Path_Item String
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_String _p _) = _p :: Path Item String
          peekValue (Peek_Item_String _ _x) = _x :: Maybe String
instance Paths Item Bool
    where type Path Item Bool = Path_Item Bool
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Bool _p _) = _p :: Path Item Bool
          peekValue (Peek_Item_Bool _ _x) = _x :: Maybe Bool
instance Paths Item Double
    where type Path Item Double = Path_Item Double
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Double _p _) = _p :: Path Item Double
          peekValue (Peek_Item_Double _ _x) = _x :: Maybe Double
instance Paths Item Dimension
    where type Path Item Dimension = Path_Item Dimension
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Dimension _p _) = _p :: Path Item Dimension
          peekValue (Peek_Item_Dimension _ _x) = _x :: Maybe Dimension
instance Paths Item ImageCrop
    where type Path Item ImageCrop = Path_Item ImageCrop
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ImageCrop _p _) = _p :: Path Item ImageCrop
          peekValue (Peek_Item_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths Item ImageSize
    where type Path Item ImageSize = Path_Item ImageSize
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ImageSize _p _) = _p :: Path Item ImageSize
          peekValue (Peek_Item_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths Item Units
    where type Path Item Units = Path_Item Units
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Units _p _) = _p :: Path Item Units
          peekValue (Peek_Item_Units _ _x) = _x :: Maybe Units
instance Paths Item ImageFile
    where type Path Item ImageFile = Path_Item ImageFile
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ImageFile _p _) = _p :: Path Item ImageFile
          peekValue (Peek_Item_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths Item JSONText
    where type Path Item JSONText = Path_Item JSONText
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Item_itemName, itemName _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_JSONText _p _) = _p :: Path Item JSONText
          peekValue (Peek_Item_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Item Markup
    where type Path Item Markup = Path_Item Markup
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Markup _p _) = _p :: Path Item Markup
          peekValue (Peek_Item_Markup _ _x) = _x :: Maybe Markup
instance Paths Item EUI
    where type Path Item EUI = Path_Item EUI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_EUI _p _) = _p :: Path Item EUI
          peekValue (Peek_Item_EUI _ _x) = _x :: Maybe EUI
instance Paths Item MEUI
    where type Path Item MEUI = Path_Item MEUI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_MEUI _p _) = _p :: Path Item MEUI
          peekValue (Peek_Item_MEUI _ _x) = _x :: Maybe MEUI
instance Paths Item MaybeImageFile
    where type Path Item MaybeImageFile = Path_Item MaybeImageFile
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_MaybeImageFile _p _) = _p :: Path Item MaybeImageFile
          peekValue (Peek_Item_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths Item ReportImage
    where type Path Item ReportImage = Path_Item ReportImage
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ReportImage _p _) = _p :: Path Item ReportImage
          peekValue (Peek_Item_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths Item ReportImages
    where type Path Item ReportImages = Path_Item ReportImages
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ReportImages _p _) = _p :: Path Item ReportImages
          peekValue (Peek_Item_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths Item ReportImageView
    where type Path Item ReportImageView = Path_Item ReportImageView
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_ReportImageView _p _) = _p :: Path Item ReportImageView
          peekValue (Peek_Item_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths Item SaneSizeImageSize
    where type Path Item SaneSizeImageSize = Path_Item SaneSizeImageSize
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_SaneSizeImageSize _p _) = _p :: Path Item SaneSizeImageSize
          peekValue (Peek_Item_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths Item Item
    where type Path Item Item = Path_Item Item
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Item
          peekPath (Peek_Item_Item _p _) = _p :: Path Item Item
          peekValue (Peek_Item_Item _ _x) = _x :: Maybe Item
instance Paths Item MIM
    where type Path Item MIM = Path_Item MIM
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_MIM _p _) = _p :: Path Item MIM
          peekValue (Peek_Item_MIM _ _x) = _x :: Maybe MIM
instance Paths Item URI
    where type Path Item URI = Path_Item URI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_URI _p _) = _p :: Path Item URI
          peekValue (Peek_Item_URI _ _x) = _x :: Maybe URI
instance Paths Item Text
    where type Path Item Text = Path_Item Text
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Item_itemName, itemName _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
          peek _p (_s@(Item {})) = undefined :: Peek Item
          peekPath (Peek_Item_Text _p _) = _p :: Path Item Text
          peekValue (Peek_Item_Text _ _x) = _x :: Maybe Text
instance Paths MIM JSONText
    where type Path MIM JSONText = Path_Map ItemFieldName (Path_Markup JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MIM
          peekPath (Peek_MIM_JSONText _p _) = _p :: Path MIM JSONText
          peekValue (Peek_MIM_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MIM Markup
    where type Path MIM Markup = Path_Map ItemFieldName (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MIM
          peekPath (Peek_MIM_Markup _p _) = _p :: Path MIM Markup
          peekValue (Peek_MIM_Markup _ _x) = _x :: Maybe Markup
instance Paths MIM MIM
    where type Path MIM MIM = Path_Map ItemFieldName (Path_Markup MIM)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MIM
          peekPath (Peek_MIM_MIM _p _) = _p :: Path MIM MIM
          peekValue (Peek_MIM_MIM _ _x) = _x :: Maybe MIM
instance Paths MIM Text
    where type Path MIM Text = Path_Map ItemFieldName (Path_Markup Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MIM
          peekPath (Peek_MIM_Text _p _) = _p :: Path MIM Text
          peekValue (Peek_MIM_Text _ _x) = _x :: Maybe Text
instance Paths MRR String
    where type Path MRR String = Path_Map ReportID (Path_Report String)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_String _p _) = _p :: Path MRR String
          peekValue (Peek_MRR_String _ _x) = _x :: Maybe String
instance Paths MRR Int64
    where type Path MRR Int64 = Path_Map ReportID (Path_Report Int64)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Int64 _p _) = _p :: Path MRR Int64
          peekValue (Peek_MRR_Int64 _ _x) = _x :: Maybe Int64
instance Paths MRR Bool
    where type Path MRR Bool = Path_Map ReportID (Path_Report Bool)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Bool _p _) = _p :: Path MRR Bool
          peekValue (Peek_MRR_Bool _ _x) = _x :: Maybe Bool
instance Paths MRR Double
    where type Path MRR Double = Path_Map ReportID (Path_Report Double)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Double _p _) = _p :: Path MRR Double
          peekValue (Peek_MRR_Double _ _x) = _x :: Maybe Double
instance Paths MRR Int
    where type Path MRR Int = Path_Map ReportID (Path_Report Int)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Int _p _) = _p :: Path MRR Int
          peekValue (Peek_MRR_Int _ _x) = _x :: Maybe Int
instance Paths MRR Dimension
    where type Path MRR Dimension = Path_Map ReportID (Path_Report Dimension)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Dimension _p _) = _p :: Path MRR Dimension
          peekValue (Peek_MRR_Dimension _ _x) = _x :: Maybe Dimension
instance Paths MRR ImageCrop
    where type Path MRR ImageCrop = Path_Map ReportID (Path_Report ImageCrop)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ImageCrop _p _) = _p :: Path MRR ImageCrop
          peekValue (Peek_MRR_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths MRR ImageSize
    where type Path MRR ImageSize = Path_Map ReportID (Path_Report ImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ImageSize _p _) = _p :: Path MRR ImageSize
          peekValue (Peek_MRR_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths MRR Units
    where type Path MRR Units = Path_Map ReportID (Path_Report Units)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Units _p _) = _p :: Path MRR Units
          peekValue (Peek_MRR_Units _ _x) = _x :: Maybe Units
instance Paths MRR ImageFile
    where type Path MRR ImageFile = Path_Map ReportID (Path_Report ImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ImageFile _p _) = _p :: Path MRR ImageFile
          peekValue (Peek_MRR_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths MRR Integer
    where type Path MRR Integer = Path_Map ReportID (Path_Report Integer)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Integer _p _) = _p :: Path MRR Integer
          peekValue (Peek_MRR_Integer _ _x) = _x :: Maybe Integer
instance Paths MRR JSONText
    where type Path MRR JSONText = Path_Map ReportID (Path_Report JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_JSONText _p _) = _p :: Path MRR JSONText
          peekValue (Peek_MRR_JSONText _ _x) = _x :: Maybe JSONText
instance Paths MRR Markup
    where type Path MRR Markup = Path_Map ReportID (Path_Report Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Markup _p _) = _p :: Path MRR Markup
          peekValue (Peek_MRR_Markup _ _x) = _x :: Maybe Markup
instance Paths MRR Permissions
    where type Path MRR Permissions = Path_Map ReportID (Path_Report Permissions)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Permissions _p _) = _p :: Path MRR Permissions
          peekValue (Peek_MRR_Permissions _ _x) = _x :: Maybe Permissions
instance Paths MRR UserIds
    where type Path MRR UserIds = Path_Map ReportID (Path_Report UserIds)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_UserIds _p _) = _p :: Path MRR UserIds
          peekValue (Peek_MRR_UserIds _ _x) = _x :: Maybe UserIds
instance Paths MRR AbbrevPair
    where type Path MRR AbbrevPair = Path_Map ReportID (Path_Report AbbrevPair)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_AbbrevPair _p _) = _p :: Path MRR AbbrevPair
          peekValue (Peek_MRR_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths MRR AbbrevPairs
    where type Path MRR AbbrevPairs = Path_Map ReportID (Path_Report AbbrevPairs)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_AbbrevPairs _p _) = _p :: Path MRR AbbrevPairs
          peekValue (Peek_MRR_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
instance Paths MRR Author
    where type Path MRR Author = Path_Map ReportID (Path_Report Author)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Author _p _) = _p :: Path MRR Author
          peekValue (Peek_MRR_Author _ _x) = _x :: Maybe Author
instance Paths MRR Authors
    where type Path MRR Authors = Path_Map ReportID (Path_Report Authors)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Authors _p _) = _p :: Path MRR Authors
          peekValue (Peek_MRR_Authors _ _x) = _x :: Maybe Authors
instance Paths MRR Branding
    where type Path MRR Branding = Path_Map ReportID (Path_Report Branding)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Branding _p _) = _p :: Path MRR Branding
          peekValue (Peek_MRR_Branding _ _x) = _x :: Maybe Branding
instance Paths MRR MarkupPair
    where type Path MRR MarkupPair = Path_Map ReportID (Path_Report MarkupPair)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MarkupPair _p _) = _p :: Path MRR MarkupPair
          peekValue (Peek_MRR_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths MRR MarkupPairs
    where type Path MRR MarkupPairs = Path_Map ReportID (Path_Report MarkupPairs)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MarkupPairs _p _) = _p :: Path MRR MarkupPairs
          peekValue (Peek_MRR_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
instance Paths MRR Markups
    where type Path MRR Markups = Path_Map ReportID (Path_Report Markups)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Markups _p _) = _p :: Path MRR Markups
          peekValue (Peek_MRR_Markups _ _x) = _x :: Maybe Markups
instance Paths MRR MaybeReportIntendedUse
    where type Path MRR MaybeReportIntendedUse = Path_Map ReportID (Path_Report MaybeReportIntendedUse)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MaybeReportIntendedUse _p _) = _p :: Path MRR MaybeReportIntendedUse
          peekValue (Peek_MRR_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
instance Paths MRR Report
    where type Path MRR Report = Path_Map ReportID (Path_Report Report)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Report _p _) = _p :: Path MRR Report
          peekValue (Peek_MRR_Report _ _x) = _x :: Maybe Report
instance Paths MRR ReportElem
    where type Path MRR ReportElem = Path_Map ReportID (Path_Report ReportElem)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportElem _p _) = _p :: Path MRR ReportElem
          peekValue (Peek_MRR_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths MRR ReportElems
    where type Path MRR ReportElems = Path_Map ReportID (Path_Report ReportElems)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportElems _p _) = _p :: Path MRR ReportElems
          peekValue (Peek_MRR_ReportElems _ _x) = _x :: Maybe ReportElems
instance Paths MRR ReportFlags
    where type Path MRR ReportFlags = Path_Map ReportID (Path_Report ReportFlags)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportFlags _p _) = _p :: Path MRR ReportFlags
          peekValue (Peek_MRR_ReportFlags _ _x) = _x :: Maybe ReportFlags
instance Paths MRR ReportStandard
    where type Path MRR ReportStandard = Path_Map ReportID (Path_Report ReportStandard)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportStandard _p _) = _p :: Path MRR ReportStandard
          peekValue (Peek_MRR_ReportStandard _ _x) = _x :: Maybe ReportStandard
instance Paths MRR ReportStatus
    where type Path MRR ReportStatus = Path_Map ReportID (Path_Report ReportStatus)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportStatus _p _) = _p :: Path MRR ReportStatus
          peekValue (Peek_MRR_ReportStatus _ _x) = _x :: Maybe ReportStatus
instance Paths MRR ReportValueApproachInfo
    where type Path MRR ReportValueApproachInfo = Path_Map ReportID (Path_Report ReportValueApproachInfo)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportValueApproachInfo _p _) = _p :: Path MRR ReportValueApproachInfo
          peekValue (Peek_MRR_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
instance Paths MRR ReportValueTypeInfo
    where type Path MRR ReportValueTypeInfo = Path_Map ReportID (Path_Report ReportValueTypeInfo)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportValueTypeInfo _p _) = _p :: Path MRR ReportValueTypeInfo
          peekValue (Peek_MRR_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
instance Paths MRR EUI
    where type Path MRR EUI = Path_Map ReportID (Path_Report EUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_EUI _p _) = _p :: Path MRR EUI
          peekValue (Peek_MRR_EUI _ _x) = _x :: Maybe EUI
instance Paths MRR MEUI
    where type Path MRR MEUI = Path_Map ReportID (Path_Report MEUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MEUI _p _) = _p :: Path MRR MEUI
          peekValue (Peek_MRR_MEUI _ _x) = _x :: Maybe MEUI
instance Paths MRR MaybeImageFile
    where type Path MRR MaybeImageFile = Path_Map ReportID (Path_Report MaybeImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MaybeImageFile _p _) = _p :: Path MRR MaybeImageFile
          peekValue (Peek_MRR_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths MRR ReportImage
    where type Path MRR ReportImage = Path_Map ReportID (Path_Report ReportImage)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportImage _p _) = _p :: Path MRR ReportImage
          peekValue (Peek_MRR_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths MRR ReportImages
    where type Path MRR ReportImages = Path_Map ReportID (Path_Report ReportImages)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportImages _p _) = _p :: Path MRR ReportImages
          peekValue (Peek_MRR_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths MRR ReadOnlyFilePath
    where type Path MRR ReadOnlyFilePath = Path_Map ReportID (Path_Report ReadOnlyFilePath)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReadOnlyFilePath _p _) = _p :: Path MRR ReadOnlyFilePath
          peekValue (Peek_MRR_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
instance Paths MRR ReportImageView
    where type Path MRR ReportImageView = Path_Map ReportID (Path_Report ReportImageView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportImageView _p _) = _p :: Path MRR ReportImageView
          peekValue (Peek_MRR_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths MRR ReportView
    where type Path MRR ReportView = Path_Map ReportID (Path_Report ReportView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_ReportView _p _) = _p :: Path MRR ReportView
          peekValue (Peek_MRR_ReportView _ _x) = _x :: Maybe ReportView
instance Paths MRR SaneSizeImageSize
    where type Path MRR SaneSizeImageSize = Path_Map ReportID (Path_Report SaneSizeImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_SaneSizeImageSize _p _) = _p :: Path MRR SaneSizeImageSize
          peekValue (Peek_MRR_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths MRR Item
    where type Path MRR Item = Path_Map ReportID (Path_Report Item)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Item _p _) = _p :: Path MRR Item
          peekValue (Peek_MRR_Item _ _x) = _x :: Maybe Item
instance Paths MRR MIM
    where type Path MRR MIM = Path_Map ReportID (Path_Report MIM)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_MIM _p _) = _p :: Path MRR MIM
          peekValue (Peek_MRR_MIM _ _x) = _x :: Maybe MIM
instance Paths MRR MRR
    where type Path MRR MRR = Path_Map ReportID (Path_Report MRR)
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek MRR
          peekPath (Peek_MRR_MRR _p _) = _p :: Path MRR MRR
          peekValue (Peek_MRR_MRR _ _x) = _x :: Maybe MRR
instance Paths MRR CIString
    where type Path MRR CIString = Path_Map ReportID (Path_Report CIString)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_CIString _p _) = _p :: Path MRR CIString
          peekValue (Peek_MRR_CIString _ _x) = _x :: Maybe CIString
instance Paths MRR URI
    where type Path MRR URI = Path_Map ReportID (Path_Report URI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_URI _p _) = _p :: Path MRR URI
          peekValue (Peek_MRR_URI _ _x) = _x :: Maybe URI
instance Paths MRR Text
    where type Path MRR Text = Path_Map ReportID (Path_Report Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_Text _p _) = _p :: Path MRR Text
          peekValue (Peek_MRR_Text _ _x) = _x :: Maybe Text
instance Paths MRR UserId
    where type Path MRR UserId = Path_Map ReportID (Path_Report UserId)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_UserId _p _) = _p :: Path MRR UserId
          peekValue (Peek_MRR_UserId _ _x) = _x :: Maybe UserId
instance Paths MRR UUID
    where type Path MRR UUID = Path_Map ReportID (Path_Report UUID)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Report) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
          peek _p _s = undefined :: Peek MRR
          peekPath (Peek_MRR_UUID _p _) = _p :: Path MRR UUID
          peekValue (Peek_MRR_UUID _ _x) = _x :: Maybe UUID
instance Paths ReportMap String
    where type Path ReportMap String = Path_ReportMap String
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_String _p _) = _p :: Path ReportMap String
          peekValue (Peek_ReportMap_String _ _x) = _x :: Maybe String
instance Paths ReportMap Int64
    where type Path ReportMap Int64 = Path_ReportMap Int64
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Int64 _p _) = _p :: Path ReportMap Int64
          peekValue (Peek_ReportMap_Int64 _ _x) = _x :: Maybe Int64
instance Paths ReportMap Bool
    where type Path ReportMap Bool = Path_ReportMap Bool
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Bool _p _) = _p :: Path ReportMap Bool
          peekValue (Peek_ReportMap_Bool _ _x) = _x :: Maybe Bool
instance Paths ReportMap Double
    where type Path ReportMap Double = Path_ReportMap Double
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Double _p _) = _p :: Path ReportMap Double
          peekValue (Peek_ReportMap_Double _ _x) = _x :: Maybe Double
instance Paths ReportMap Int
    where type Path ReportMap Int = Path_ReportMap Int
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Int _p _) = _p :: Path ReportMap Int
          peekValue (Peek_ReportMap_Int _ _x) = _x :: Maybe Int
instance Paths ReportMap Dimension
    where type Path ReportMap Dimension = Path_ReportMap Dimension
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Dimension _p _) = _p :: Path ReportMap Dimension
          peekValue (Peek_ReportMap_Dimension _ _x) = _x :: Maybe Dimension
instance Paths ReportMap ImageCrop
    where type Path ReportMap ImageCrop = Path_ReportMap ImageCrop
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ImageCrop _p _) = _p :: Path ReportMap ImageCrop
          peekValue (Peek_ReportMap_ImageCrop _ _x) = _x :: Maybe ImageCrop
instance Paths ReportMap ImageSize
    where type Path ReportMap ImageSize = Path_ReportMap ImageSize
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ImageSize _p _) = _p :: Path ReportMap ImageSize
          peekValue (Peek_ReportMap_ImageSize _ _x) = _x :: Maybe ImageSize
instance Paths ReportMap Units
    where type Path ReportMap Units = Path_ReportMap Units
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Units _p _) = _p :: Path ReportMap Units
          peekValue (Peek_ReportMap_Units _ _x) = _x :: Maybe Units
instance Paths ReportMap ImageFile
    where type Path ReportMap ImageFile = Path_ReportMap ImageFile
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ImageFile _p _) = _p :: Path ReportMap ImageFile
          peekValue (Peek_ReportMap_ImageFile _ _x) = _x :: Maybe ImageFile
instance Paths ReportMap Integer
    where type Path ReportMap Integer = Path_ReportMap Integer
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Integer _p _) = _p :: Path ReportMap Integer
          peekValue (Peek_ReportMap_Integer _ _x) = _x :: Maybe Integer
instance Paths ReportMap JSONText
    where type Path ReportMap JSONText = Path_ReportMap JSONText
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_JSONText _p _) = _p :: Path ReportMap JSONText
          peekValue (Peek_ReportMap_JSONText _ _x) = _x :: Maybe JSONText
instance Paths ReportMap Markup
    where type Path ReportMap Markup = Path_ReportMap Markup
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Markup _p _) = _p :: Path ReportMap Markup
          peekValue (Peek_ReportMap_Markup _ _x) = _x :: Maybe Markup
instance Paths ReportMap Permissions
    where type Path ReportMap Permissions = Path_ReportMap Permissions
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Permissions _p _) = _p :: Path ReportMap Permissions
          peekValue (Peek_ReportMap_Permissions _ _x) = _x :: Maybe Permissions
instance Paths ReportMap UserIds
    where type Path ReportMap UserIds = Path_ReportMap UserIds
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_UserIds _p _) = _p :: Path ReportMap UserIds
          peekValue (Peek_ReportMap_UserIds _ _x) = _x :: Maybe UserIds
instance Paths ReportMap AbbrevPair
    where type Path ReportMap AbbrevPair = Path_ReportMap AbbrevPair
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_AbbrevPair _p _) = _p :: Path ReportMap AbbrevPair
          peekValue (Peek_ReportMap_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
instance Paths ReportMap AbbrevPairs
    where type Path ReportMap AbbrevPairs = Path_ReportMap AbbrevPairs
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_AbbrevPairs _p _) = _p :: Path ReportMap AbbrevPairs
          peekValue (Peek_ReportMap_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
instance Paths ReportMap Author
    where type Path ReportMap Author = Path_ReportMap Author
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Author _p _) = _p :: Path ReportMap Author
          peekValue (Peek_ReportMap_Author _ _x) = _x :: Maybe Author
instance Paths ReportMap Authors
    where type Path ReportMap Authors = Path_ReportMap Authors
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Authors _p _) = _p :: Path ReportMap Authors
          peekValue (Peek_ReportMap_Authors _ _x) = _x :: Maybe Authors
instance Paths ReportMap Branding
    where type Path ReportMap Branding = Path_ReportMap Branding
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Branding _p _) = _p :: Path ReportMap Branding
          peekValue (Peek_ReportMap_Branding _ _x) = _x :: Maybe Branding
instance Paths ReportMap MarkupPair
    where type Path ReportMap MarkupPair = Path_ReportMap MarkupPair
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MarkupPair _p _) = _p :: Path ReportMap MarkupPair
          peekValue (Peek_ReportMap_MarkupPair _ _x) = _x :: Maybe MarkupPair
instance Paths ReportMap MarkupPairs
    where type Path ReportMap MarkupPairs = Path_ReportMap MarkupPairs
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MarkupPairs _p _) = _p :: Path ReportMap MarkupPairs
          peekValue (Peek_ReportMap_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
instance Paths ReportMap Markups
    where type Path ReportMap Markups = Path_ReportMap Markups
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Markups _p _) = _p :: Path ReportMap Markups
          peekValue (Peek_ReportMap_Markups _ _x) = _x :: Maybe Markups
instance Paths ReportMap MaybeReportIntendedUse
    where type Path ReportMap MaybeReportIntendedUse = Path_ReportMap MaybeReportIntendedUse
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MaybeReportIntendedUse _p _) = _p :: Path ReportMap MaybeReportIntendedUse
          peekValue (Peek_ReportMap_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
instance Paths ReportMap Report
    where type Path ReportMap Report = Path_ReportMap Report
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Report _p _) = _p :: Path ReportMap Report
          peekValue (Peek_ReportMap_Report _ _x) = _x :: Maybe Report
instance Paths ReportMap ReportElem
    where type Path ReportMap ReportElem = Path_ReportMap ReportElem
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportElem _p _) = _p :: Path ReportMap ReportElem
          peekValue (Peek_ReportMap_ReportElem _ _x) = _x :: Maybe ReportElem
instance Paths ReportMap ReportElems
    where type Path ReportMap ReportElems = Path_ReportMap ReportElems
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportElems _p _) = _p :: Path ReportMap ReportElems
          peekValue (Peek_ReportMap_ReportElems _ _x) = _x :: Maybe ReportElems
instance Paths ReportMap ReportFlags
    where type Path ReportMap ReportFlags = Path_ReportMap ReportFlags
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportFlags _p _) = _p :: Path ReportMap ReportFlags
          peekValue (Peek_ReportMap_ReportFlags _ _x) = _x :: Maybe ReportFlags
instance Paths ReportMap ReportStandard
    where type Path ReportMap ReportStandard = Path_ReportMap ReportStandard
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportStandard _p _) = _p :: Path ReportMap ReportStandard
          peekValue (Peek_ReportMap_ReportStandard _ _x) = _x :: Maybe ReportStandard
instance Paths ReportMap ReportStatus
    where type Path ReportMap ReportStatus = Path_ReportMap ReportStatus
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportStatus _p _) = _p :: Path ReportMap ReportStatus
          peekValue (Peek_ReportMap_ReportStatus _ _x) = _x :: Maybe ReportStatus
instance Paths ReportMap ReportValueApproachInfo
    where type Path ReportMap ReportValueApproachInfo = Path_ReportMap ReportValueApproachInfo
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportValueApproachInfo _p _) = _p :: Path ReportMap ReportValueApproachInfo
          peekValue (Peek_ReportMap_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
instance Paths ReportMap ReportValueTypeInfo
    where type Path ReportMap ReportValueTypeInfo = Path_ReportMap ReportValueTypeInfo
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportValueTypeInfo _p _) = _p :: Path ReportMap ReportValueTypeInfo
          peekValue (Peek_ReportMap_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
instance Paths ReportMap EUI
    where type Path ReportMap EUI = Path_ReportMap EUI
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_EUI _p _) = _p :: Path ReportMap EUI
          peekValue (Peek_ReportMap_EUI _ _x) = _x :: Maybe EUI
instance Paths ReportMap MEUI
    where type Path ReportMap MEUI = Path_ReportMap MEUI
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MEUI _p _) = _p :: Path ReportMap MEUI
          peekValue (Peek_ReportMap_MEUI _ _x) = _x :: Maybe MEUI
instance Paths ReportMap MaybeImageFile
    where type Path ReportMap MaybeImageFile = Path_ReportMap MaybeImageFile
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MaybeImageFile _p _) = _p :: Path ReportMap MaybeImageFile
          peekValue (Peek_ReportMap_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
instance Paths ReportMap ReportImage
    where type Path ReportMap ReportImage = Path_ReportMap ReportImage
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportImage _p _) = _p :: Path ReportMap ReportImage
          peekValue (Peek_ReportMap_ReportImage _ _x) = _x :: Maybe ReportImage
instance Paths ReportMap ReportImages
    where type Path ReportMap ReportImages = Path_ReportMap ReportImages
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportImages _p _) = _p :: Path ReportMap ReportImages
          peekValue (Peek_ReportMap_ReportImages _ _x) = _x :: Maybe ReportImages
instance Paths ReportMap ReadOnlyFilePath
    where type Path ReportMap ReadOnlyFilePath = Path_ReportMap ReadOnlyFilePath
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReadOnlyFilePath _p _) = _p :: Path ReportMap ReadOnlyFilePath
          peekValue (Peek_ReportMap_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
instance Paths ReportMap ReportImageView
    where type Path ReportMap ReportImageView = Path_ReportMap ReportImageView
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportImageView _p _) = _p :: Path ReportMap ReportImageView
          peekValue (Peek_ReportMap_ReportImageView _ _x) = _x :: Maybe ReportImageView
instance Paths ReportMap ReportView
    where type Path ReportMap ReportView = Path_ReportMap ReportView
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportView _p _) = _p :: Path ReportMap ReportView
          peekValue (Peek_ReportMap_ReportView _ _x) = _x :: Maybe ReportView
instance Paths ReportMap SaneSizeImageSize
    where type Path ReportMap SaneSizeImageSize = Path_ReportMap SaneSizeImageSize
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_SaneSizeImageSize _p _) = _p :: Path ReportMap SaneSizeImageSize
          peekValue (Peek_ReportMap_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
instance Paths ReportMap Item
    where type Path ReportMap Item = Path_ReportMap Item
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Item _p _) = _p :: Path ReportMap Item
          peekValue (Peek_ReportMap_Item _ _x) = _x :: Maybe Item
instance Paths ReportMap MIM
    where type Path ReportMap MIM = Path_ReportMap MIM
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MIM _p _) = _p :: Path ReportMap MIM
          peekValue (Peek_ReportMap_MIM _ _x) = _x :: Maybe MIM
instance Paths ReportMap MRR
    where type Path ReportMap MRR = Path_ReportMap MRR
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_MRR _p _) = _p :: Path ReportMap MRR
          peekValue (Peek_ReportMap_MRR _ _x) = _x :: Maybe MRR
instance Paths ReportMap ReportMap
    where type Path ReportMap ReportMap = Path_ReportMap ReportMap
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek ReportMap
          peekPath (Peek_ReportMap_ReportMap _p _) = _p :: Path ReportMap ReportMap
          peekValue (Peek_ReportMap_ReportMap _ _x) = _x :: Maybe ReportMap
instance Paths ReportMap CIString
    where type Path ReportMap CIString = Path_ReportMap CIString
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_CIString _p _) = _p :: Path ReportMap CIString
          peekValue (Peek_ReportMap_CIString _ _x) = _x :: Maybe CIString
instance Paths ReportMap URI
    where type Path ReportMap URI = Path_ReportMap URI
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_URI _p _) = _p :: Path ReportMap URI
          peekValue (Peek_ReportMap_URI _ _x) = _x :: Maybe URI
instance Paths ReportMap Text
    where type Path ReportMap Text = Path_ReportMap Text
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_Text _p _) = _p :: Path ReportMap Text
          peekValue (Peek_ReportMap_Text _ _x) = _x :: Maybe Text
instance Paths ReportMap UserId
    where type Path ReportMap UserId = Path_ReportMap UserId
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_UserId _p _) = _p :: Path ReportMap UserId
          peekValue (Peek_ReportMap_UserId _ _x) = _x :: Maybe UserId
instance Paths ReportMap UUID
    where type Path ReportMap UUID = Path_ReportMap UUID
          paths (_s@(ReportMap {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MRR) _g)) [(Path_ReportMap_unReportMap, unReportMap _s)]
          peek _p (_s@(ReportMap {})) = undefined :: Peek ReportMap
          peekPath (Peek_ReportMap_UUID _p _) = _p :: Path ReportMap UUID
          peekValue (Peek_ReportMap_UUID _ _x) = _x :: Maybe UUID
instance Paths CIString JSONText
    where type Path CIString JSONText = Path_CIString JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_CIString_View, a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Text
                                                                                                                                                                           Text))) _s))
          peek _p _s = undefined :: Peek CIString
          peekPath (Peek_CIString_JSONText _p _) = _p :: Path CIString JSONText
          peekValue (Peek_CIString_JSONText _ _x) = _x :: Maybe JSONText
instance Paths CIString CIString
    where type Path CIString CIString = Path_CIString CIString
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek CIString
          peekPath (Peek_CIString_CIString _p _) = _p :: Path CIString CIString
          peekValue (Peek_CIString_CIString _ _x) = _x :: Maybe CIString
instance Paths CIString Text
    where type Path CIString Text = Path_CIString Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_CIString_View, a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Text
                                                                                                                                                                           Text))) _s))
          peek _p _s = undefined :: Peek CIString
          peekPath (Peek_CIString_Text _p _) = _p :: Path CIString Text
          peekValue (Peek_CIString_Text _ _x) = _x :: Maybe Text
instance Paths URI URI
    where type Path URI URI = Path_URI URI
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek URI
          peekPath (Peek_URI_URI _p _) = _p :: Path URI URI
          peekValue (Peek_URI_URI _ _x) = _x :: Maybe URI
instance Paths Text JSONText
    where type Path Text JSONText = Path_Text JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Text_View, a')) (toListOf (toLens (Path_Text_View (idPath :: Path JSONText
                                                                                                                                                                       JSONText))) _s))
          peek _p _s = undefined :: Peek Text
          peekPath (Peek_Text_JSONText _p _) = _p :: Path Text JSONText
          peekValue (Peek_Text_JSONText _ _x) = _x :: Maybe JSONText
instance Paths Text Text
    where type Path Text Text = Path_Text Text
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek Text
          peekPath (Peek_Text_Text _p _) = _p :: Path Text Text
          peekValue (Peek_Text_Text _ _x) = _x :: Maybe Text
instance Paths UserId UserId
    where type Path UserId UserId = Path_UserId UserId
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek UserId
          peekPath (Peek_UserId_UserId _p _) = _p :: Path UserId UserId
          peekValue (Peek_UserId_UserId _ _x) = _x :: Maybe UserId
instance Paths UUID UUID
    where type Path UUID UUID = Path_UUID UUID
          paths _ _ = [idPath]
          peek _ _ = undefined "idpeek" :: Peek UUID
          peekPath (Peek_UUID_UUID _p _) = _p :: Path UUID UUID
          peekValue (Peek_UUID_UUID _ _x) = _x :: Maybe UUID
instance HasAuthor Author
    where lens_author = id
          lens_Author_authorCredentials f (Author x1 x2) = fmap (\y1 -> Author x1 y1) (f x2)
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName f (Author x1 x2) = fmap (\y1 -> Author y1 x2) (f x1)
          {-# INLINE lens_Author_authorName #-}
instance HasBool Bool
    where lens_bool = id
instance HasBranding Branding
    where lens_branding = id
instance HasCIString CIString
    where lens_cIString = id
          lens_CIString_unCIString = iso (\(CIString x) -> x) CIString
          {-# INLINE lens_CIString_unCIString #-}
instance HasDimension Dimension
    where lens_dimension = id
instance HasDouble Double
    where lens_double = id
instance HasImageCrop ImageCrop
    where lens_imageCrop = id
          lens_ImageCrop_bottomCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageCrop_topCrop #-}
instance HasImageFile ImageFile
    where lens_imageFile = id
          lens_ImageFile_imageFile f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance HasImageSize ImageSize
    where lens_imageSize = id
          lens_ImageSize_dim f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize y1 x2 x3) (f x1)
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 y1 x3) (f x2)
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 x2 y1) (f x3)
          {-# INLINE lens_ImageSize_units #-}
instance HasInt Int
    where lens_int = id
instance HasInt64 Int64
    where lens_int64 = id
instance HasInteger Integer
    where lens_integer = id
instance HasItem Item
    where lens_item = id
          lens_Item_fields f (Item x1 x2 x3) = fmap (\y1 -> Item x1 y1 x3) (f x2)
          {-# INLINE lens_Item_fields #-}
          lens_Item_images f (Item x1 x2 x3) = fmap (\y1 -> Item x1 x2 y1) (f x3)
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName f (Item x1 x2 x3) = fmap (\y1 -> Item y1 x2 x3) (f x1)
          {-# INLINE lens_Item_itemName #-}
instance HasJSONText JSONText
    where lens_jSONText = id
          lens_JSONText_unJSONText = iso (\(JSONText x) -> x) JSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance HasMarkup Markup
    where lens_markup = id
          lens_Markup_htmlText _ (Markdown x1) = pure (Markdown x1)
          lens_Markup_htmlText f (Html x1) = fmap (\y1 -> Html y1) (f x1)
          lens_Markup_htmlText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_htmlText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_htmlText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText f (Markdown x1) = fmap (\y1 -> Markdown y1) (f x1)
          lens_Markup_markdownText _ (Html x1) = pure (Html x1)
          lens_Markup_markdownText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_markdownText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_markdownText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_markdownText #-}
instance HasPermissions Permissions
    where lens_permissions = id
          lens_Permissions_owner f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions y1 x2 x3) (f x1)
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 x2 y1) (f x3)
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 y1 x3) (f x2)
          {-# INLINE lens_Permissions_writers #-}
instance HasReport Report
    where lens_report = id
          lens_Report_reportAbbrevs f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate f (Report x1
                                                   x2
                                                   x3
                                                   x4
                                                   x5
                                                   x6
                                                   x7
                                                   x8
                                                   x9
                                                   x10
                                                   x11
                                                   x12
                                                   x13
                                                   x14
                                                   x15
                                                   x16
                                                   x17
                                                   x18
                                                   x19
                                                   x20
                                                   x21
                                                   x22
                                                   x23
                                                   x24
                                                   x25
                                                   x26
                                                   x27
                                                   x28
                                                   x29
                                                   x30
                                                   x31
                                                   x32
                                                   x33
                                                   x34
                                                   x35
                                                   x36
                                                   x37
                                                   x38
                                                   x39
                                                   x40
                                                   x41
                                                   x42
                                                   x43
                                                   x44
                                                   x45) = fmap (\y1 -> Report x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal f (Report x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion f (Report x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo f (Report x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance HasReportElem ReportElem
    where lens_reportElem = id
          lens_ReportElem_elemItem f (ReportItem x1) = fmap (\y1 -> ReportItem y1) (f x1)
          lens_ReportElem_elemItem _ (ReportParagraph x1) = pure (ReportParagraph x1)
          lens_ReportElem_elemItem _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText _ (ReportItem x1) = pure (ReportItem x1)
          lens_ReportElem_elemText f (ReportParagraph x1) = fmap (\y1 -> ReportParagraph y1) (f x1)
          lens_ReportElem_elemText _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemText #-}
instance HasReportFlags ReportFlags
    where lens_reportFlags = id
          lens_ReportFlags_hideEmptyItemFields = iso (\(ReportFlags x) -> x) ReportFlags
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance HasReportImage ReportImage
    where lens_reportImage = id
          lens_ReportImage_picCaption f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance HasReportImageView ReportImageView
    where lens_reportImageView = id
          lens_ReportImageView__picCaption f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance HasReportIntendedUse ReportIntendedUse
    where lens_reportIntendedUse = id
instance HasReportMap ReportMap
    where lens_reportMap = id
          lens_ReportMap_unReportMap = iso (\(ReportMap x) -> x) ReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
instance HasReportStandard ReportStandard
    where lens_reportStandard = id
          lens_ReportStandard_unReportStandard = iso (\(ReportStandard x) -> x) ReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance HasReportStatus ReportStatus
    where lens_reportStatus = id
instance HasReportValueApproachInfo ReportValueApproachInfo
    where lens_reportValueApproachInfo = id
          lens_ReportValueApproachInfo_reportValueApproachDescription f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo x1 y1) (f x2)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo y1 x2) (f x1)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance HasReportValueTypeInfo ReportValueTypeInfo
    where lens_reportValueTypeInfo = id
          lens_ReportValueTypeInfo_reportValueTypeDefinition f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 x2 y1) (f x3)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 y1 x3) (f x2)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo y1 x2 x3) (f x1)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance HasReportView ReportView
    where lens_reportView = id
          lens_ReportView__reportAbbrevs f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate f (ReportView x1
                                                            x2
                                                            x3
                                                            x4
                                                            x5
                                                            x6
                                                            x7
                                                            x8
                                                            x9
                                                            x10
                                                            x11
                                                            x12
                                                            x13
                                                            x14
                                                            x15
                                                            x16
                                                            x17
                                                            x18
                                                            x19
                                                            x20
                                                            x21
                                                            x22
                                                            x23
                                                            x24
                                                            x25
                                                            x26
                                                            x27
                                                            x28
                                                            x29
                                                            x30
                                                            x31
                                                            x32
                                                            x33
                                                            x34
                                                            x35
                                                            x36
                                                            x37
                                                            x38
                                                            x39
                                                            x40
                                                            x41
                                                            x42
                                                            x43
                                                            x44
                                                            x45) = fmap (\y1 -> ReportView x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal f (ReportView x1
                                                                   x2
                                                                   x3
                                                                   x4
                                                                   x5
                                                                   x6
                                                                   x7
                                                                   x8
                                                                   x9
                                                                   x10
                                                                   x11
                                                                   x12
                                                                   x13
                                                                   x14
                                                                   x15
                                                                   x16
                                                                   x17
                                                                   x18
                                                                   x19
                                                                   x20
                                                                   x21
                                                                   x22
                                                                   x23
                                                                   x24
                                                                   x25
                                                                   x26
                                                                   x27
                                                                   x28
                                                                   x29
                                                                   x30
                                                                   x31
                                                                   x32
                                                                   x33
                                                                   x34
                                                                   x35
                                                                   x36
                                                                   x37
                                                                   x38
                                                                   x39
                                                                   x40
                                                                   x41
                                                                   x42
                                                                   x43
                                                                   x44
                                                                   x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion f (ReportView x1
                                                                x2
                                                                x3
                                                                x4
                                                                x5
                                                                x6
                                                                x7
                                                                x8
                                                                x9
                                                                x10
                                                                x11
                                                                x12
                                                                x13
                                                                x14
                                                                x15
                                                                x16
                                                                x17
                                                                x18
                                                                x19
                                                                x20
                                                                x21
                                                                x22
                                                                x23
                                                                x24
                                                                x25
                                                                x26
                                                                x27
                                                                x28
                                                                x29
                                                                x30
                                                                x31
                                                                x32
                                                                x33
                                                                x34
                                                                x35
                                                                x36
                                                                x37
                                                                x38
                                                                x39
                                                                x40
                                                                x41
                                                                x42
                                                                x43
                                                                x44
                                                                x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo f (ReportView x1
                                                                 x2
                                                                 x3
                                                                 x4
                                                                 x5
                                                                 x6
                                                                 x7
                                                                 x8
                                                                 x9
                                                                 x10
                                                                 x11
                                                                 x12
                                                                 x13
                                                                 x14
                                                                 x15
                                                                 x16
                                                                 x17
                                                                 x18
                                                                 x19
                                                                 x20
                                                                 x21
                                                                 x22
                                                                 x23
                                                                 x24
                                                                 x25
                                                                 x26
                                                                 x27
                                                                 x28
                                                                 x29
                                                                 x30
                                                                 x31
                                                                 x32
                                                                 x33
                                                                 x34
                                                                 x35
                                                                 x36
                                                                 x37
                                                                 x38
                                                                 x39
                                                                 x40
                                                                 x41
                                                                 x42
                                                                 x43
                                                                 x44
                                                                 x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance HasText Text
    where lens_text = id
instance HasURI URI
    where lens_uRI = id
          lens_URI_uriAuthority f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_URI_uriScheme #-}
instance HasUUID UUID
    where lens_uUID = id
instance HasUnits Units
    where lens_units = id
instance HasUserId UserId
    where lens_userId = id
          lens_UserId__unUserId = iso (\(UserId x) -> x) UserId
          {-# INLINE lens_UserId__unUserId #-}
instance Describe (Proxy Int64)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int64"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Int)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Dimension)
    where describe' _f _ = case _f of
                               Nothing -> Just "Dimension"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageCrop)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Crop"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Units)
    where describe' _f _ = case _f of
                               Nothing -> Just "Units"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Integer)
    where describe' _f _ = case _f of
                               Nothing -> Just "Integer"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Permissions)
    where describe' _f _ = case _f of
                               Nothing -> Just "Permissions"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserIds)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Ids"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Author)
    where describe' _f _ = case _f of
                               Nothing -> Just "Author"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Authors)
    where describe' _f _ = case _f of
                               Nothing -> Just "Authors"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Branding)
    where describe' _f _ = case _f of
                               Nothing -> Just "Branding"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Markups)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markups"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Report)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElem)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elem"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElems)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elems"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportFlags)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Flags"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStandard)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Standard"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStatus)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Status"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueApproachInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Approach Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueTypeInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Type Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy EUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "EUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MEUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "MEUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImage)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImages)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Images"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReadOnlyFilePath)
    where describe' _f _ = case _f of
                               Nothing -> Just "Read Only File Path"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImageView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy SaneSizeImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Sane Size Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Item)
    where describe' _f _ = case _f of
                               Nothing -> Just "Item"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MIM)
    where describe' _f _ = case _f of
                               Nothing -> Just "MIM"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MRR)
    where describe' _f _ = case _f of
                               Nothing -> Just "MRR"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportMap)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Map"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy CIString)
    where describe' _f _ = case _f of
                               Nothing -> Just "CIString"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy URI)
    where describe' _f _ = case _f of
                               Nothing -> Just "URI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserId)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Id"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UUID)
    where describe' _f _ = case _f of
                               Nothing -> Just "UUID"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Peek String)
    where describe' _f (Peek_String_JSONText (_p@(Path_String_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy String)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy String)
instance Describe (Peek Int64)
    where describe' _ _ = Nothing
instance Describe (Peek Bool)
    where describe' _f (Peek_Bool_String (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_String_String _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy Bool)}
                                                                          in maybe top Just next
          describe' _f (Peek_Bool_JSONText (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Bool)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Bool)
instance Describe (Peek Double)
    where describe' _f (Peek_Double_String (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_String_String _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Double)}
                                                                              in maybe top Just next
          describe' _f (Peek_Double_JSONText (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Double)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Double)
instance Describe (Peek Int)
    where describe' _ _ = Nothing
instance Describe (Peek Dimension)
    where describe' _f (Peek_Dimension_JSONText (_p@(Path_Dimension_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy Dimension)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Dimension)
instance Describe (Peek ImageCrop)
    where describe' _ _ = Nothing
instance Describe (Peek ImageSize)
    where describe' _f (Peek_ImageSize_Dimension (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                          next = describe' wfld (Peek_Dimension_Dimension _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                         next = describe' wfld (Peek_Dimension_JSONText _wp undefined);
                                                                                         top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ImageSize_String (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (Peek_Double_String _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_Double (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (Peek_Double_Double _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                          next = describe' wfld (Peek_Double_JSONText _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_Units (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                        next = describe' wfld (Peek_Units_Units _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                           next = describe' wfld (Peek_Units_JSONText _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ImageSize)
instance Describe (Peek Units)
    where describe' _f (Peek_Units_JSONText (_p@(Path_Units_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Units)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Units)
instance Describe (Peek ImageFile)
    where describe' _ _ = Nothing
instance Describe (Peek Integer)
    where describe' _ _ = Nothing
instance Describe (Peek JSONText)
    where describe' _ _ = Nothing
instance Describe (Peek Markup)
    where describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                            next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy Markup)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                        next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                        next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                    next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Markup)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markup)
instance Describe (Peek Permissions)
    where describe' _f (Peek_Permissions_UserId (_p@(Path_Permissions_owner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "owner");
                                                                                             next = describe' wfld (Peek_UserId_UserId _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                 next = describe' wfld (Peek_UserIds_JSONText _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                next = describe' wfld (Peek_UserIds_UserIds _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                             next = describe' wfld (Peek_UserIds_Text _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                 next = describe' wfld (Peek_UserIds_JSONText _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                next = describe' wfld (Peek_UserIds_UserIds _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                             next = describe' wfld (Peek_UserIds_Text _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Permissions)
instance Describe (Peek UserIds)
    where describe' _f (Peek_UserIds_JSONText (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy UserIds)}
                                                                                  in maybe top Just next
          describe' _f (Peek_UserIds_Text (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy UserIds)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy UserIds)
instance Describe (Peek AbbrevPair)
    where describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_CIString_JSONText _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_CIString (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_CIString_CIString _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_CIString_Text _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPair)
instance Describe (Peek AbbrevPairs)
    where describe' _f (Peek_AbbrevPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_AbbrevPair_JSONText _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_AbbrevPair_Markup _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPairs_AbbrevPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_AbbrevPair_AbbrevPair _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_AbbrevPairs_CIString (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_AbbrevPair_CIString _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_AbbrevPair_Text _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPairs)
instance Describe (Peek Author)
    where describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("Author", "Author", Right "authorName");
                                                                                          next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy Author)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Author", "Author", Right "authorName");
                                                                                        next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Author)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Author", "Author", Right "authorName");
                                                                                      next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Author)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                                 next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy Author)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                               next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy Author)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                             next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy Author)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Author)
instance Describe (Peek Authors)
    where describe' _f (Peek_Authors_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Author_JSONText _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Authors)}
                                                                           in maybe top Just next
          describe' _f (Peek_Authors_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Author_Markup _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Author (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Author_Author _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Author_Text _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy Authors)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Authors)
instance Describe (Peek Branding)
    where describe' _f (Peek_Branding_JSONText (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Branding)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Branding_Text (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Branding)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Branding)
instance Describe (Peek MarkupPair)
    where describe' _f (Peek_MarkupPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                            in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_MarkupPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPair)
instance Describe (Peek MarkupPairs)
    where describe' _f (Peek_MarkupPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_MarkupPair_JSONText _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_MarkupPair_Markup _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPairs_MarkupPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_MarkupPair_MarkupPair _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MarkupPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_MarkupPair_Text _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPairs)
instance Describe (Peek Markups)
    where describe' _f (Peek_Markups_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Markups)}
                                                                           in maybe top Just next
          describe' _f (Peek_Markups_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Markups)}
                                                                         in maybe top Just next
          describe' _f (Peek_Markups_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy Markups)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markups)
instance Describe (Peek MaybeReportIntendedUse)
    where describe' _f (Peek_MaybeReportIntendedUse_String (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Nothing;
                                                                                                                  next = describe' wfld (Peek_String_String _wp undefined);
                                                                                                                  top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeReportIntendedUse_JSONText (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Nothing;
                                                                                                                    next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                                                    top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)
instance Describe (Peek Report)
    where describe' _f (Peek_Report_String (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportView_String _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Int64 (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportView_Int64 _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_Int (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportView_Int _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Bool (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportView_Bool _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_Double (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportView_Double _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Dimension (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportView_Dimension _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageCrop (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportView_ImageCrop _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportView_ImageSize _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Units (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportView_Units _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_ImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportView_ImageFile _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Integer (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_ReportView_Integer _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_JSONText (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportView_JSONText _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_Markup (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportView_Markup _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Permissions (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_Permissions _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_UserIds (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_ReportView_UserIds _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_AbbrevPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_ReportView_AbbrevPair _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_AbbrevPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_AbbrevPairs _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Author (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportView_Author _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Authors (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_ReportView_Authors _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_Branding (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportView_Branding _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_MarkupPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_ReportView_MarkupPair _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_MarkupPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_MarkupPairs _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Markups (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_ReportView_Markups _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_MaybeReportIntendedUse (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (Peek_ReportView_MaybeReportIntendedUse _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                                              in maybe top Just next
          describe' _f (Peek_Report_ReportElem (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_ReportView_ReportElem _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_ReportElems (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_ReportElems _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportFlags (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_ReportFlags _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportStandard (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportView_ReportStandard _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportStatus (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (Peek_ReportView_ReportStatus _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReportValueApproachInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Nothing;
                                                                                                   next = describe' wfld (Peek_ReportView_ReportValueApproachInfo _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                                               in maybe top Just next
          describe' _f (Peek_Report_ReportValueTypeInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (Peek_ReportView_ReportValueTypeInfo _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Report_EUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportView_EUI _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_MEUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportView_MEUI _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MaybeImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportView_MaybeImageFile _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportImage (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportView_ReportImage _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportImages (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (Peek_ReportView_ReportImages _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReadOnlyFilePath (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_ReportView_ReadOnlyFilePath _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy Report)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Report_ReportImageView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (Peek_ReportView_ReportImageView _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy Report)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Report_ReportView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_ReportView_ReportView _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_SaneSizeImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (Peek_ReportView_SaneSizeImageSize _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy Report)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Report_Item (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportView_Item _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MIM (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportView_MIM _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_CIString (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportView_CIString _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_URI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportView_URI _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Text (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportView_Text _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_UserId (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportView_UserId _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_UUID (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportView_UUID _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Report)
instance Describe (Peek ReportElem)
    where describe' _f (Peek_ReportElem_String (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (Peek_Item_String _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Bool (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (Peek_Item_Bool _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_Double (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (Peek_Item_Double _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Dimension (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (Peek_Item_Dimension _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageCrop (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (Peek_Item_ImageCrop _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (Peek_Item_ImageSize _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_Units (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             next = describe' wfld (Peek_Item_Units _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportElem_ImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (Peek_Item_ImageFile _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                next = describe' wfld (Peek_Item_JSONText _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (Peek_Item_Markup _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_EUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (Peek_Item_EUI _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_MEUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (Peek_Item_MEUI _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MaybeImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                      next = describe' wfld (Peek_Item_MaybeImageFile _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImage (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                   next = describe' wfld (Peek_Item_ReportImage _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImages (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                    next = describe' wfld (Peek_Item_ReportImages _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImageView (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                       next = describe' wfld (Peek_Item_ReportImageView _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElem_SaneSizeImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                         next = describe' wfld (Peek_Item_SaneSizeImageSize _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElem_Item (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (Peek_Item_Item _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MIM (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (Peek_Item_MIM _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_URI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (Peek_Item_URI _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (Peek_Item_Text _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                                next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                              next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                            next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElem)
instance Describe (Peek ReportElems)
    where describe' _f (Peek_ReportElems_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportElem_String _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportElem_Bool _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportElem_Double _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportElem_Dimension _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportElem_ImageCrop _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportElem_ImageSize _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportElem_Units _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportElems_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportElem_ImageFile _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_ReportElem_JSONText _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                               in maybe top Just next
          describe' _f (Peek_ReportElems_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportElem_Markup _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_ReportElem (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportElem_ReportElem _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportElems_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_ReportElem_EUI _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportElem_MEUI _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (Peek_ReportElem_MaybeImageFile _wp undefined);
                                                                                         top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_ReportElem_ReportImage _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImages (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportElem_ReportImages _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportElem_ReportImageView _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportElems_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_ReportElem_SaneSizeImageSize _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElems_Item (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportElem_Item _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MIM (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_ReportElem_MIM _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_ReportElem_URI _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportElem_Text _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElems)
instance Describe (Peek ReportFlags)
    where describe' _f (Peek_ReportFlags_String (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                           next = describe' wfld (Peek_Bool_String _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportFlags_Bool (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                         next = describe' wfld (Peek_Bool_Bool _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportFlags_JSONText (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                             next = describe' wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportFlags)
instance Describe (Peek ReportIntendedUse)
    where describe' _f (Peek_ReportIntendedUse_String (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (Peek_String_String _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportIntendedUse_JSONText (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportIntendedUse)
instance Describe (Peek ReportStandard)
    where describe' _f (Peek_ReportStandard_Int (_p@(Path_ReportStandard_unReportStandard _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportStandard", "ReportStandard", Right "unReportStandard");
                                                                                                           next = describe' wfld (Peek_Int_Int _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportStandard)}
                                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStandard)
instance Describe (Peek ReportStatus)
    where describe' _f (Peek_ReportStatus_String (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (Peek_String_String _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportStatus_JSONText (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Nothing;
                                                                                                next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStatus)
instance Describe (Peek ReportValueApproachInfo)
    where describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                         String,
                                                                                                                                                         Either Int String));
                                                                                                                                         wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                         next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                       String,
                                                                                                                                                       Either Int String));
                                                                                                                                       wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                       next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                       top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                     String,
                                                                                                                                                     Either Int String));
                                                                                                                                     wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                     next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                                                     top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                                String,
                                                                                                                                                                Either Int String));
                                                                                                                                                wfld = Just ("ReportValueApproachInfo",
                                                                                                                                                             "ReportValueApproachInfo",
                                                                                                                                                             Right "reportValueApproachDescription");
                                                                                                                                                next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                              String,
                                                                                                                                                              Either Int String));
                                                                                                                                              wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                              next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                              top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                            String,
                                                                                                                                                            Either Int String));
                                                                                                                                            wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                            next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                                                            top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueApproachInfo)
instance Describe (Peek ReportValueTypeInfo)
    where describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                             String,
                                                                                                                                             Either Int String));
                                                                                                                             wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                         wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                    String,
                                                                                                                                                    Either Int String));
                                                                                                                                    wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                    next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                    top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                  String,
                                                                                                                                                  Either Int String));
                                                                                                                                  wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                  next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                  top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                String,
                                                                                                                                                Either Int String));
                                                                                                                                wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                   String,
                                                                                                                                                   Either Int String));
                                                                                                                                   wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                   next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                   top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                 String,
                                                                                                                                                 Either Int String));
                                                                                                                                 wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                 next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                 top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                               next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueTypeInfo)
instance Describe (Peek EUI)
    where describe' _f (Peek_EUI_URI (_p@(Path_Left _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                     wfld = Nothing;
                                                                     next = describe' wfld (Peek_URI_URI _wp undefined);
                                                                     top = describe' _f (Proxy :: Proxy EUI)}
                                                                 in maybe top Just next
          describe' _f (Peek_EUI_ImageFile (_p@(Path_Right _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_ImageFile_ImageFile _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy EUI)}
                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy EUI)
instance Describe (Peek MEUI)
    where describe' _f (Peek_MEUI_ImageFile (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_EUI_ImageFile _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy MEUI)}
                                                                        in maybe top Just next
          describe' _f (Peek_MEUI_EUI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (Peek_EUI_EUI _wp undefined);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f (Peek_MEUI_URI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (Peek_EUI_URI _wp undefined);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MEUI)
instance Describe (Peek MaybeImageFile)
    where describe' _f (Peek_MaybeImageFile_String (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (Peek_String_String _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeImageFile_JSONText (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeImageFile)
instance Describe (Peek ReportImage)
    where describe' _f (Peek_ReportImage_String (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_ReportImageView_String _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Bool (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportImageView_Bool _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_Double (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_ReportImageView_Double _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Dimension (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (Peek_ReportImageView_Dimension _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageCrop (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (Peek_ReportImageView_ImageCrop _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (Peek_ReportImageView_ImageSize _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_Units (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (Peek_ReportImageView_Units _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImage_ImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (Peek_ReportImageView_ImageFile _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_JSONText (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (Peek_ReportImageView_JSONText _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportImage_Markup (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_ReportImageView_Markup _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_EUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (Peek_ReportImageView_EUI _wp undefined);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_MEUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportImageView_MEUI _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_MaybeImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (Peek_ReportImageView_MaybeImageFile _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImage_ReportImageView (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Nothing;
                                                                                                     next = describe' wfld (Peek_ReportImageView_ReportImageView _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImage_SaneSizeImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (Peek_ReportImageView_SaneSizeImageSize _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImage_URI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (Peek_ReportImageView_URI _wp undefined);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_Text (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportImageView_Text _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImage)
instance Describe (Peek ReportImages)
    where describe' _f (Peek_ReportImages_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportImage_String _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportImage_Bool _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportImage_Double _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportImage_Dimension _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportImage_ImageCrop _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportImage_ImageSize _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_ReportImage_Units _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportImages_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_ReportImage_ImageFile _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_ReportImage_JSONText _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportImages_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (Peek_ReportImage_Markup _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportImage_EUI _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportImage_MEUI _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (Peek_ReportImage_MaybeImageFile _wp undefined);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (Peek_ReportImage_ReportImage _wp undefined);
                                                                                       top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (Peek_ReportImage_ReportImageView _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImages_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (Peek_ReportImage_SaneSizeImageSize _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImages_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_ReportImage_URI _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_ReportImage_Text _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImages)
instance Describe (Peek ReadOnlyFilePath)
    where describe' _f (Peek_ReadOnlyFilePath_String (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Nothing;
                                                                                                      next = describe' wfld (Peek_String_String _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReadOnlyFilePath_JSONText (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (Peek_String_JSONText _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                    in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReadOnlyFilePath)
instance Describe (Peek ReportImageView)
    where describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (Peek_SaneSizeImageSize_String _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Double (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (Peek_SaneSizeImageSize_Double _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Dimension (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (Peek_SaneSizeImageSize_Dimension _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (Peek_SaneSizeImageSize_ImageSize _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Units (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                       next = describe' wfld (Peek_SaneSizeImageSize_Units _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                          next = describe' wfld (Peek_SaneSizeImageSize_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_SaneSizeImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                                   next = describe' wfld (Peek_SaneSizeImageSize_SaneSizeImageSize _wp undefined);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageCrop (_p@(Path_ReportImageView__picCrop _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCrop");
                                                                                                           next = describe' wfld (Peek_ImageCrop_ImageCrop _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_Markup (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Text (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageFile (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                               next = describe' wfld (Peek_MEUI_ImageFile _wp undefined);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_EUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (Peek_MEUI_EUI _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_MEUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                          next = describe' wfld (Peek_MEUI_MEUI _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_URI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (Peek_MEUI_URI _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                    next = describe' wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                    top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                      next = describe' wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                            wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                            next = describe' wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                            top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                   next = describe' wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                     next = describe' wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                           next = describe' wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                     next = describe' wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                       next = describe' wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                             next = describe' wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                               next = describe' wfld (Peek_Bool_String _wp undefined);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_Bool (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                             next = describe' wfld (Peek_Bool_Bool _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                                 next = describe' wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                      next = describe' wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                        next = describe' wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                              String,
                                                                                                                                              Either Int String));
                                                                                                                              wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                              next = describe' wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                              top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImageView)
instance Describe (Peek ReportView)
    where describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                   next = describe' wfld (Peek_ReadOnlyFilePath_String _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                     next = describe' wfld (Peek_ReadOnlyFilePath_JSONText _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReadOnlyFilePath (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                             next = describe' wfld (Peek_ReadOnlyFilePath_ReadOnlyFilePath _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                   next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                 next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                               next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                   next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                 next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                               next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                           next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                         next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                       next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                            next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                          next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                        next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                      next = describe' wfld (Peek_Authors_JSONText _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (Peek_Authors_Markup _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Author (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (Peek_Authors_Author _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Authors (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                     next = describe' wfld (Peek_Authors_Authors _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                  next = describe' wfld (Peek_Authors_Text _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                       next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                     next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                   next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                          next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                        next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                      next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                              next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                            next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                          next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                            next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                          next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                        next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                              next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                            next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                          next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (Peek_AbbrevPairs_JSONText _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                    next = describe' wfld (Peek_AbbrevPairs_Markup _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPair (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                        next = describe' wfld (Peek_AbbrevPairs_AbbrevPair _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPairs (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                         next = describe' wfld (Peek_AbbrevPairs_AbbrevPairs _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_CIString (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (Peek_AbbrevPairs_CIString _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                  next = describe' wfld (Peek_AbbrevPairs_Text _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                    next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                  next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                     next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                   next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                 next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                     next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                   next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                 next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                        next = describe' wfld (Peek_MaybeReportIntendedUse_String _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                          next = describe' wfld (Peek_MaybeReportIntendedUse_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_MaybeReportIntendedUse (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                                        next = describe' wfld (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _wp undefined);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                            next = describe' wfld (Peek_ReportValueTypeInfo_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                          next = describe' wfld (Peek_ReportValueTypeInfo_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueTypeInfo (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                                       next = describe' wfld (Peek_ReportValueTypeInfo_ReportValueTypeInfo _wp undefined);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                        next = describe' wfld (Peek_ReportValueTypeInfo_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                next = describe' wfld (Peek_ReportValueApproachInfo_JSONText _wp undefined);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                              next = describe' wfld (Peek_ReportValueApproachInfo_Markup _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueApproachInfo (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                               next = describe' wfld (Peek_ReportValueApproachInfo_ReportValueApproachInfo _wp undefined);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                            next = describe' wfld (Peek_ReportValueApproachInfo_Text _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                         next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                       next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                     next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                            next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                          next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                        next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                         next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                       next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                     next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                         next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                       next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                     next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                                 next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                               next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                             next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (Peek_ReportElems_String _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (Peek_ReportElems_Bool _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Double (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (Peek_ReportElems_Double _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Dimension (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (Peek_ReportElems_Dimension _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageCrop (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (Peek_ReportElems_ImageCrop _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (Peek_ReportElems_ImageSize _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Units (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                next = describe' wfld (Peek_ReportElems_Units _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_ImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (Peek_ReportElems_ImageFile _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   next = describe' wfld (Peek_ReportElems_JSONText _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (Peek_ReportElems_Markup _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_ReportElem (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                     next = describe' wfld (Peek_ReportElems_ReportElem _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportElems (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (Peek_ReportElems_ReportElems _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_EUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (Peek_ReportElems_EUI _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_MEUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (Peek_ReportElems_MEUI _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MaybeImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                         next = describe' wfld (Peek_ReportElems_MaybeImageFile _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_ReportImage (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (Peek_ReportElems_ReportImage _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_ReportImages (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                       next = describe' wfld (Peek_ReportElems_ReportImages _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_ReportImageView (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                          next = describe' wfld (Peek_ReportElems_ReportImageView _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_SaneSizeImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                            next = describe' wfld (Peek_ReportElems_SaneSizeImageSize _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Item (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (Peek_ReportElems_Item _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MIM (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (Peek_ReportElems_MIM _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_URI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (Peek_ReportElems_URI _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (Peek_ReportElems_Text _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                       next = describe' wfld (Peek_MarkupPairs_JSONText _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                     next = describe' wfld (Peek_MarkupPairs_Markup _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                         next = describe' wfld (Peek_MarkupPairs_MarkupPair _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                          next = describe' wfld (Peek_MarkupPairs_MarkupPairs _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                   next = describe' wfld (Peek_MarkupPairs_Text _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                      next = describe' wfld (Peek_MarkupPairs_JSONText _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                    next = describe' wfld (Peek_MarkupPairs_Markup _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                        next = describe' wfld (Peek_MarkupPairs_MarkupPair _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                         next = describe' wfld (Peek_MarkupPairs_MarkupPairs _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                  next = describe' wfld (Peek_MarkupPairs_Text _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                  next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                              next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                          next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                        next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                      next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                            next = describe' wfld (Peek_Markups_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                          next = describe' wfld (Peek_Markups_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                           next = describe' wfld (Peek_Markups_Markups _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                        next = describe' wfld (Peek_Markups_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                 next = describe' wfld (Peek_Markups_JSONText _wp undefined);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                               next = describe' wfld (Peek_Markups_Markup _wp undefined);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                next = describe' wfld (Peek_Markups_Markups _wp undefined);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                             next = describe' wfld (Peek_Markups_Text _wp undefined);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                            next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                          next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                        next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                    next = describe' wfld (Peek_Permissions_JSONText _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Permissions (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                       next = describe' wfld (Peek_Permissions_Permissions _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UserIds (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                   next = describe' wfld (Peek_Permissions_UserIds _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                next = describe' wfld (Peek_Permissions_Text _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_UserId (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                  next = describe' wfld (Peek_Permissions_UserId _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Integer (_p@(Path_ReportView__reportRevision _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportRevision");
                                                                                                      next = describe' wfld (Peek_Integer_Integer _wp undefined);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Int64 (_p@(Path_ReportView__reportCreated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportCreated");
                                                                                                   next = describe' wfld (Peek_Int64_Int64 _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (Peek_Branding_JSONText _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Branding (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (Peek_Branding_Branding _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                   next = describe' wfld (Peek_Branding_Text _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                   next = describe' wfld (Peek_ReportStatus_String _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                     next = describe' wfld (Peek_ReportStatus_JSONText _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportStatus (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                         next = describe' wfld (Peek_ReportStatus_ReportStatus _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                     next = describe' wfld (Peek_Bool_String _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                   next = describe' wfld (Peek_Bool_Bool _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                       next = describe' wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                  next = describe' wfld (Peek_ReportFlags_String _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                next = describe' wfld (Peek_ReportFlags_Bool _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                    next = describe' wfld (Peek_ReportFlags_JSONText _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ReportFlags (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                       next = describe' wfld (Peek_ReportFlags_ReportFlags _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UUID (_p@(Path_ReportView__reportUUID _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportUUID");
                                                                                               next = describe' wfld (Peek_UUID_UUID _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                            next = describe' wfld (Peek_Bool_String _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                          next = describe' wfld (Peek_Bool_Bool _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                              next = describe' wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                            next = describe' wfld (Peek_Bool_String _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                          next = describe' wfld (Peek_Bool_Bool _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                              next = describe' wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Int (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                          next = describe' wfld (Peek_ReportStandard_Int _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportStandard (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                                     next = describe' wfld (Peek_ReportStandard_ReportStandard _wp undefined);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                 in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportView)
instance Describe (Peek SaneSizeImageSize)
    where describe' _f (Peek_SaneSizeImageSize_String (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (Peek_ImageSize_String _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Double (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (Peek_ImageSize_Double _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Dimension (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (Peek_ImageSize_Dimension _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_ImageSize (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (Peek_ImageSize_ImageSize _wp undefined);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Units (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (Peek_ImageSize_Units _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_JSONText (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (Peek_ImageSize_JSONText _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy SaneSizeImageSize)
instance Describe (Peek Item)
    where describe' _f (Peek_Item_JSONText (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Item", "Item", Right "itemName");
                                                                                    next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy Item)}
                                                                                in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "itemName");
                                                                                next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "fields");
                                                                                  next = describe' wfld (Peek_MIM_JSONText _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "fields");
                                                                                next = describe' wfld (Peek_MIM_Markup _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_MIM (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "fields");
                                                                             next = describe' wfld (Peek_MIM_MIM _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "fields");
                                                                              next = describe' wfld (Peek_MIM_Text _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_String (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (Peek_ReportImages_String _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Bool (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (Peek_ReportImages_Bool _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_Double (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (Peek_ReportImages_Double _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Dimension (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (Peek_ReportImages_Dimension _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageCrop (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (Peek_ReportImages_ImageCrop _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (Peek_ReportImages_ImageSize _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_Units (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Just ("Item", "Item", Right "images");
                                                                               next = describe' wfld (Peek_ReportImages_Units _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just next
          describe' _f (Peek_Item_ImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (Peek_ReportImages_ImageFile _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "images");
                                                                                  next = describe' wfld (Peek_ReportImages_JSONText _wp undefined);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (Peek_ReportImages_Markup _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_EUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (Peek_ReportImages_EUI _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_MEUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (Peek_ReportImages_MEUI _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_MaybeImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Item", "Item", Right "images");
                                                                                        next = describe' wfld (Peek_ReportImages_MaybeImageFile _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy Item)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Item_ReportImage (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Just ("Item", "Item", Right "images");
                                                                                     next = describe' wfld (Peek_ReportImages_ReportImage _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy Item)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Item_ReportImages (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Item", "Item", Right "images");
                                                                                      next = describe' wfld (Peek_ReportImages_ReportImages _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy Item)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Item_ReportImageView (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("Item", "Item", Right "images");
                                                                                         next = describe' wfld (Peek_ReportImages_ReportImageView _wp undefined);
                                                                                         top = describe' _f (Proxy :: Proxy Item)}
                                                                                     in maybe top Just next
          describe' _f (Peek_Item_SaneSizeImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("Item", "Item", Right "images");
                                                                                           next = describe' wfld (Peek_ReportImages_SaneSizeImageSize _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy Item)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Item_URI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (Peek_ReportImages_URI _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (Peek_ReportImages_Text _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Item)
instance Describe (Peek MIM)
    where describe' _f (Peek_MIM_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Markup_JSONText _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy MIM)}
                                                                         in maybe top Just next
          describe' _f (Peek_MIM_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Markup_Markup _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MIM)}
                                                                       in maybe top Just next
          describe' _f (Peek_MIM_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Markup_Text _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MIM)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MIM)
instance Describe (Peek MRR)
    where describe' _f (Peek_MRR_String (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_String _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Int64 (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (Peek_Report_Int64 _wp undefined);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_Int (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (Peek_Report_Int _wp undefined);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Bool (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Report_Bool _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_Double (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_Double _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Dimension (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_Report_Dimension _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageCrop (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_Report_ImageCrop _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_Report_ImageSize _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Units (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (Peek_Report_Units _wp undefined);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_ImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (Peek_Report_ImageFile _wp undefined);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Integer (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_Report_Integer _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Report_JSONText _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_Markup _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Permissions (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_Permissions _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_UserIds (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_Report_UserIds _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Report_AbbrevPair _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_AbbrevPairs _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Author (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_Author _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Authors (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_Report_Authors _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_Branding (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Report_Branding _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_MarkupPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Report_MarkupPair _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_MarkupPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_MarkupPairs _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Markups (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (Peek_Report_Markups _wp undefined);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_MaybeReportIntendedUse (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (Peek_Report_MaybeReportIntendedUse _wp undefined);
                                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Report (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_Report _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_ReportElem (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Report_ReportElem _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_ReportElems (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_ReportElems _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportFlags (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_ReportFlags _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportStandard (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_Report_ReportStandard _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportStatus (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_Report_ReportStatus _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReportValueApproachInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (Peek_Report_ReportValueApproachInfo _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                                        in maybe top Just next
          describe' _f (Peek_MRR_ReportValueTypeInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (Peek_Report_ReportValueTypeInfo _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                                    in maybe top Just next
          describe' _f (Peek_MRR_EUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (Peek_Report_EUI _wp undefined);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_MEUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Report_MEUI _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MaybeImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (Peek_Report_MaybeImageFile _wp undefined);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportImage (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_Report_ReportImage _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportImages (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (Peek_Report_ReportImages _wp undefined);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReadOnlyFilePath (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (Peek_Report_ReadOnlyFilePath _wp undefined);
                                                                                     top = describe' _f (Proxy :: Proxy MRR)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MRR_ReportImageView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_Report_ReportImageView _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy MRR)}
                                                                                in maybe top Just next
          describe' _f (Peek_MRR_ReportView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (Peek_Report_ReportView _wp undefined);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_SaneSizeImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (Peek_Report_SaneSizeImageSize _wp undefined);
                                                                                      top = describe' _f (Proxy :: Proxy MRR)}
                                                                                  in maybe top Just next
          describe' _f (Peek_MRR_Item (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Report_Item _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MIM (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (Peek_Report_MIM _wp undefined);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_CIString (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (Peek_Report_CIString _wp undefined);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_URI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (Peek_Report_URI _wp undefined);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Report_Text _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_UserId (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (Peek_Report_UserId _wp undefined);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_UUID (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (Peek_Report_UUID _wp undefined);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MRR)
instance Describe (Peek ReportMap)
    where describe' _f (Peek_ReportMap_String (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_String _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Int64 (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (Peek_MRR_Int64 _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_Int (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (Peek_MRR_Int _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Bool (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (Peek_MRR_Bool _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_Double (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_Double _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Dimension (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (Peek_MRR_Dimension _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageCrop (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (Peek_MRR_ImageCrop _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (Peek_MRR_ImageSize _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Units (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (Peek_MRR_Units _wp undefined);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_ImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (Peek_MRR_ImageFile _wp undefined);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Integer (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (Peek_MRR_Integer _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_JSONText (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (Peek_MRR_JSONText _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_Markup (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_Markup _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Permissions (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_Permissions _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_UserIds (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (Peek_MRR_UserIds _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (Peek_MRR_AbbrevPair _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_AbbrevPairs _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Author (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_Author _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Authors (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (Peek_MRR_Authors _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_Branding (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (Peek_MRR_Branding _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (Peek_MRR_MarkupPair _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_MarkupPairs _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Markups (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (Peek_MRR_Markups _wp undefined);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeReportIntendedUse (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                               next = describe' wfld (Peek_MRR_MaybeReportIntendedUse _wp undefined);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Report (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_Report _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElem (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (Peek_MRR_ReportElem _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElems (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_ReportElems _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportFlags (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_ReportFlags _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStandard (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (Peek_MRR_ReportStandard _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStatus (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (Peek_MRR_ReportStatus _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueApproachInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                                next = describe' wfld (Peek_MRR_ReportValueApproachInfo _wp undefined);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueTypeInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                            next = describe' wfld (Peek_MRR_ReportValueTypeInfo _wp undefined);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_EUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (Peek_MRR_EUI _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MEUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (Peek_MRR_MEUI _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (Peek_MRR_MaybeImageFile _wp undefined);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImage (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (Peek_MRR_ReportImage _wp undefined);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImages (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (Peek_MRR_ReportImages _wp undefined);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReadOnlyFilePath (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                         next = describe' wfld (Peek_MRR_ReadOnlyFilePath _wp undefined);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImageView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                        next = describe' wfld (Peek_MRR_ReportImageView _wp undefined);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportMap_ReportView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (Peek_MRR_ReportView _wp undefined);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_SaneSizeImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                          next = describe' wfld (Peek_MRR_SaneSizeImageSize _wp undefined);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportMap_Item (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (Peek_MRR_Item _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MIM (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (Peek_MRR_MIM _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MRR (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (Peek_MRR_MRR _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_CIString (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (Peek_MRR_CIString _wp undefined);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_URI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (Peek_MRR_URI _wp undefined);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Text (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (Peek_MRR_Text _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_UserId (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (Peek_MRR_UserId _wp undefined);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_UUID (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (Peek_MRR_UUID _wp undefined);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportMap)
instance Describe (Peek CIString)
    where describe' _f (Peek_CIString_JSONText (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (Peek_Text_JSONText _wp undefined);
                                                                                        top = describe' _f (Proxy :: Proxy CIString)}
                                                                                    in maybe top Just next
          describe' _f (Peek_CIString_Text (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (Peek_Text_Text _wp undefined);
                                                                                    top = describe' _f (Proxy :: Proxy CIString)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy CIString)
instance Describe (Peek URI)
    where describe' _ _ = Nothing
instance Describe (Peek Text)
    where describe' _f (Peek_Text_JSONText (_p@(Path_Text_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                top = describe' _f (Proxy :: Proxy Text)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Text)
instance Describe (Peek UserId)
    where describe' _ _ = Nothing
instance Describe (Peek UUID)
    where describe' _ _ = Nothing
instance IdPath (Path_Author a)
    where idPath = Path_Author
instance IdPath (Path_Bool a)
    where idPath = Path_Bool
instance IdPath (Path_Branding a)
    where idPath = Path_Branding
instance IdPath (Path_CIString a)
    where idPath = Path_CIString
instance IdPath (Path_Dimension a)
    where idPath = Path_Dimension
instance IdPath (Path_Double a)
    where idPath = Path_Double
instance IdPath (Path_ImageCrop a)
    where idPath = Path_ImageCrop
instance IdPath (Path_ImageFile a)
    where idPath = Path_ImageFile
instance IdPath (Path_ImageSize a)
    where idPath = Path_ImageSize
instance IdPath (Path_Int a)
    where idPath = Path_Int
instance IdPath (Path_Int64 a)
    where idPath = Path_Int64
instance IdPath (Path_Integer a)
    where idPath = Path_Integer
instance IdPath (Path_Item a)
    where idPath = Path_Item
instance IdPath (Path_JSONText a)
    where idPath = Path_JSONText
instance IdPath (Path_Markup a)
    where idPath = Path_Markup
instance IdPath (Path_MaybeImageFile a)
    where idPath = Path_MaybeImageFile
instance IdPath (Path_MaybeReportIntendedUse a)
    where idPath = Path_MaybeReportIntendedUse
instance IdPath (Path_Permissions a)
    where idPath = Path_Permissions
instance IdPath (Path_ReadOnlyFilePath a)
    where idPath = Path_ReadOnlyFilePath
instance IdPath (Path_Report a)
    where idPath = Path_Report
instance IdPath (Path_ReportElem a)
    where idPath = Path_ReportElem
instance IdPath (Path_ReportFlags a)
    where idPath = Path_ReportFlags
instance IdPath (Path_ReportImage a)
    where idPath = Path_ReportImage
instance IdPath (Path_ReportImageView a)
    where idPath = Path_ReportImageView
instance IdPath (Path_ReportIntendedUse a)
    where idPath = Path_ReportIntendedUse
instance IdPath (Path_ReportMap a)
    where idPath = Path_ReportMap
instance IdPath (Path_ReportStandard a)
    where idPath = Path_ReportStandard
instance IdPath (Path_ReportStatus a)
    where idPath = Path_ReportStatus
instance IdPath (Path_ReportValueApproachInfo a)
    where idPath = Path_ReportValueApproachInfo
instance IdPath (Path_ReportValueTypeInfo a)
    where idPath = Path_ReportValueTypeInfo
instance IdPath (Path_ReportView a)
    where idPath = Path_ReportView
instance IdPath (Path_SaneSizeImageSize a)
    where idPath = Path_SaneSizeImageSize
instance IdPath (Path_String a)
    where idPath = Path_String
instance IdPath (Path_Text a)
    where idPath = Path_Text
instance IdPath (Path_URI a)
    where idPath = Path_URI
instance IdPath (Path_UUID a)
    where idPath = Path_UUID
instance IdPath (Path_Units a)
    where idPath = Path_Units
instance IdPath (Path_UserId a)
    where idPath = Path_UserId
instance IdPath (Path_UserIds a)
    where idPath = Path_UserIds
instance PathStart String
    where data Peek String = Peek_String_String (Path String String) (Maybe String) | Peek_String_JSONText (Path String JSONText) (Maybe JSONText) deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_String_View _wp) -> map (\a -> let f = peekTree a
                                                                                         in Node (Peek_String_JSONText _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_JSONText_JSONText q z) = Peek_String_JSONText (Path_String_View q) z
                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                               _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek String)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_String_View _wp) -> map (\a -> Peek_String_JSONText _pp (Just a)) (toListOf (toLens _pp) _s :: [JSONText])
                                              _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: [Peek String]
instance PathStart Int64
    where data Peek Int64 = Peek_Int64_Int64 (Path Int64 Int64) (Maybe Int64) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart Bool
    where data Peek Bool
              = Peek_Bool_String (Path Bool String) (Maybe String) | Peek_Bool_Bool (Path Bool Bool) (Maybe Bool) | Peek_Bool_JSONText (Path Bool JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Bool_View _wp) -> map (\a -> let f = peekTree a
                                                                                       in Node (Peek_Bool_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q z) = Peek_Bool_String (Path_Bool_View q) z
                                                                                                                                                                liftPeek (Peek_String_JSONText q z) = Peek_Bool_JSONText (Path_Bool_View q) z
                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek Bool)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Bool_View _wp) -> map (\a -> Peek_Bool_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek Bool]
instance PathStart Double
    where data Peek Double
              = Peek_Double_String (Path Double String) (Maybe String)
              | Peek_Double_Double (Path Double Double) (Maybe Double)
              | Peek_Double_JSONText (Path Double JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Double_View _wp) -> map (\a -> let f = peekTree a
                                                                                         in Node (Peek_Double_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q z) = Peek_Double_String (Path_Double_View q) z
                                                                                                                                                                    liftPeek (Peek_String_JSONText q z) = Peek_Double_JSONText (Path_Double_View q) z
                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek Double)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Double_View _wp) -> map (\a -> Peek_Double_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek Double]
instance PathStart Int
    where data Peek Int = Peek_Int_Int (Path Int Int) (Maybe Int) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart Dimension
    where data Peek Dimension
              = Peek_Dimension_Dimension (Path Dimension Dimension) (Maybe Dimension) | Peek_Dimension_JSONText (Path Dimension JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Dimension_View _wp) -> map (\a -> let f = peekTree a
                                                                                            in Node (Peek_Dimension_JSONText _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_JSONText_JSONText q
                                                                                                                                                                                                             z) = Peek_Dimension_JSONText (Path_Dimension_View q) z
                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                               _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Dimension)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Dimension_View _wp) -> map (\a -> Peek_Dimension_JSONText _pp (Just a)) (toListOf (toLens _pp) _s :: [JSONText])
                                              _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: [Peek Dimension]
instance PathStart ImageCrop
    where data Peek ImageCrop = Peek_ImageCrop_ImageCrop (Path ImageCrop ImageCrop) (Maybe ImageCrop) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart ImageSize
    where data Peek ImageSize
              = Peek_ImageSize_String (Path ImageSize String) (Maybe String)
              | Peek_ImageSize_Double (Path ImageSize Double) (Maybe Double)
              | Peek_ImageSize_Dimension (Path ImageSize Dimension) (Maybe Dimension)
              | Peek_ImageSize_ImageSize (Path ImageSize ImageSize) (Maybe ImageSize)
              | Peek_ImageSize_Units (Path ImageSize Units) (Maybe Units)
              | Peek_ImageSize_JSONText (Path ImageSize JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (_s@(ImageSize {})) = mconcat [concatMap (\pth -> case pth of
                                                                         _pp@(Path_ImageSize_dim _wp) -> map (\a -> let f = peekTree a
                                                                                                                     in Node (Peek_ImageSize_Dimension _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Dimension_Dimension q
                                                                                                                                                                                                                                         z) = Peek_ImageSize_Dimension (Path_ImageSize_dim q) z
                                                                                                                                                                                                      liftPeek (Peek_Dimension_JSONText q
                                                                                                                                                                                                                                        z) = Peek_ImageSize_JSONText (Path_ImageSize_dim q) z
                                                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Dimension])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Dimension)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ImageSize_size _wp) -> map (\a -> let f = peekTree a
                                                                                                                      in Node (Peek_ImageSize_Double _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Double_String q
                                                                                                                                                                                                                                 z) = Peek_ImageSize_String (Path_ImageSize_size q) z
                                                                                                                                                                                                    liftPeek (Peek_Double_Double q
                                                                                                                                                                                                                                 z) = Peek_ImageSize_Double (Path_ImageSize_size q) z
                                                                                                                                                                                                    liftPeek (Peek_Double_JSONText q
                                                                                                                                                                                                                                   z) = Peek_ImageSize_JSONText (Path_ImageSize_size q) z
                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Double])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Double)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ImageSize_units _wp) -> map (\a -> let f = peekTree a
                                                                                                                       in Node (Peek_ImageSize_Units _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Units_Units q
                                                                                                                                                                                                                               z) = Peek_ImageSize_Units (Path_ImageSize_units q) z
                                                                                                                                                                                                    liftPeek (Peek_Units_JSONText q
                                                                                                                                                                                                                                  z) = Peek_ImageSize_JSONText (Path_ImageSize_units q) z
                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Units])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Units))] :: Forest (Peek ImageSize)
          peekRow (_s@(ImageSize {})) = mconcat [concatMap (\pth -> case pth of
                                                                        _pp@(Path_ImageSize_dim _wp) -> map (\a -> Peek_ImageSize_Dimension _pp (Just a)) (toListOf (toLens _pp) _s :: [Dimension])
                                                                        _ -> []) (paths _s (Proxy :: Proxy Dimension)),
                                                 concatMap (\pth -> case pth of
                                                                        _pp@(Path_ImageSize_size _wp) -> map (\a -> Peek_ImageSize_Double _pp (Just a)) (toListOf (toLens _pp) _s :: [Double])
                                                                        _ -> []) (paths _s (Proxy :: Proxy Double)),
                                                 concatMap (\pth -> case pth of
                                                                        _pp@(Path_ImageSize_units _wp) -> map (\a -> Peek_ImageSize_Units _pp (Just a)) (toListOf (toLens _pp) _s :: [Units])
                                                                        _ -> []) (paths _s (Proxy :: Proxy Units))] :: [Peek ImageSize]
instance PathStart Units
    where data Peek Units = Peek_Units_Units (Path Units Units) (Maybe Units) | Peek_Units_JSONText (Path Units JSONText) (Maybe JSONText) deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Units_View _wp) -> map (\a -> let f = peekTree a
                                                                                        in Node (Peek_Units_JSONText _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_JSONText_JSONText q z) = Peek_Units_JSONText (Path_Units_View q) z
                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                               _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Units)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Units_View _wp) -> map (\a -> Peek_Units_JSONText _pp (Just a)) (toListOf (toLens _pp) _s :: [JSONText])
                                              _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: [Peek Units]
instance PathStart ImageFile
    where data Peek ImageFile = Peek_ImageFile_ImageFile (Path ImageFile ImageFile) (Maybe ImageFile) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart Integer
    where data Peek Integer = Peek_Integer_Integer (Path Integer Integer) (Maybe Integer) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart JSONText
    where data Peek JSONText = Peek_JSONText_JSONText (Path JSONText JSONText) (Maybe JSONText) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart Markup
    where data Peek Markup
              = Peek_Markup_JSONText (Path Markup JSONText) (Maybe JSONText)
              | Peek_Markup_Markup (Path Markup Markup) (Maybe Markup)
              | Peek_Markup_Text (Path Markup Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(Markdown {})) = concatMap (\pth -> case pth of
                                                               _pp@(Path_Markup_markdownText _wp) -> map (\a -> let f = peekTree a
                                                                                                                 in Node (Peek_Markup_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q
                                                                                                                                                                                                                       z) = Peek_Markup_JSONText (Path_Markup_markdownText q) z
                                                                                                                                                                                          liftPeek (Peek_Text_Text q
                                                                                                                                                                                                                   z) = Peek_Markup_Text (Path_Markup_markdownText q) z
                                                                                                                                                                                       in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                               _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          peekTree (_s@(Html {})) = concatMap (\pth -> case pth of
                                                           _pp@(Path_Markup_htmlText _wp) -> map (\a -> let f = peekTree a
                                                                                                         in Node (Peek_Markup_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q
                                                                                                                                                                                                               z) = Peek_Markup_JSONText (Path_Markup_htmlText q) z
                                                                                                                                                                                  liftPeek (Peek_Text_Text q
                                                                                                                                                                                                           z) = Peek_Markup_Text (Path_Markup_htmlText q) z
                                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                           _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          peekTree (_s@(LaTeX {})) = mempty :: Forest (Peek Markup)
          peekTree (_s@(Pandoc {})) = mempty :: Forest (Peek Markup)
          peekTree (_s@(Markup {})) = mempty :: Forest (Peek Markup)
          peekRow (_s@(Markdown {})) = concatMap (\pth -> case pth of
                                                              _pp@(Path_Markup_markdownText _wp) -> map (\a -> Peek_Markup_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                                              _ -> []) (paths _s (Proxy :: Proxy Text)) :: [Peek Markup]
          peekRow (_s@(Html {})) = concatMap (\pth -> case pth of
                                                          _pp@(Path_Markup_htmlText _wp) -> map (\a -> Peek_Markup_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                                          _ -> []) (paths _s (Proxy :: Proxy Text)) :: [Peek Markup]
          peekRow (_s@(LaTeX {})) = mempty :: [Peek Markup]
          peekRow (_s@(Pandoc {})) = mempty :: [Peek Markup]
          peekRow (_s@(Markup {})) = mempty :: [Peek Markup]
instance PathStart Permissions
    where data Peek Permissions
              = Peek_Permissions_JSONText (Path Permissions JSONText) (Maybe JSONText)
              | Peek_Permissions_Permissions (Path Permissions Permissions) (Maybe Permissions)
              | Peek_Permissions_UserIds (Path Permissions UserIds) (Maybe UserIds)
              | Peek_Permissions_Text (Path Permissions Text) (Maybe Text)
              | Peek_Permissions_UserId (Path Permissions UserId) (Maybe UserId)
              deriving (Eq, Show)
          peekTree (_s@(Permissions {})) = mconcat [concatMap (\pth -> case pth of
                                                                           _pp@(Path_Permissions_owner _wp) -> map (\a -> let f = peekTree a
                                                                                                                           in Node (Peek_Permissions_UserId _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_UserId_UserId q
                                                                                                                                                                                                                                        z) = Peek_Permissions_UserId (Path_Permissions_owner q) z
                                                                                                                                                                                                        in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UserId])
                                                                           _ -> []) (paths _s (Proxy :: Proxy UserId)),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_Permissions_writers _wp) -> map (\a -> let f = peekTree a
                                                                                                                             in Node (Peek_Permissions_UserIds _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_UserIds_JSONText q
                                                                                                                                                                                                                                              z) = Peek_Permissions_JSONText (Path_Permissions_writers q) z
                                                                                                                                                                                                              liftPeek (Peek_UserIds_UserIds q
                                                                                                                                                                                                                                             z) = Peek_Permissions_UserIds (Path_Permissions_writers q) z
                                                                                                                                                                                                              liftPeek (Peek_UserIds_Text q
                                                                                                                                                                                                                                          z) = Peek_Permissions_Text (Path_Permissions_writers q) z
                                                                                                                                                                                                           in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UserIds])
                                                                           _ -> []) (paths _s (Proxy :: Proxy UserIds)),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_Permissions_readers _wp) -> map (\a -> let f = peekTree a
                                                                                                                             in Node (Peek_Permissions_UserIds _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_UserIds_JSONText q
                                                                                                                                                                                                                                              z) = Peek_Permissions_JSONText (Path_Permissions_readers q) z
                                                                                                                                                                                                              liftPeek (Peek_UserIds_UserIds q
                                                                                                                                                                                                                                             z) = Peek_Permissions_UserIds (Path_Permissions_readers q) z
                                                                                                                                                                                                              liftPeek (Peek_UserIds_Text q
                                                                                                                                                                                                                                          z) = Peek_Permissions_Text (Path_Permissions_readers q) z
                                                                                                                                                                                                           in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UserIds])
                                                                           _ -> []) (paths _s (Proxy :: Proxy UserIds))] :: Forest (Peek Permissions)
          peekRow (_s@(Permissions {})) = mconcat [concatMap (\pth -> case pth of
                                                                          _pp@(Path_Permissions_owner _wp) -> map (\a -> Peek_Permissions_UserId _pp (Just a)) (toListOf (toLens _pp) _s :: [UserId])
                                                                          _ -> []) (paths _s (Proxy :: Proxy UserId)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_Permissions_writers _wp) -> map (\a -> Peek_Permissions_UserIds _pp (Just a)) (toListOf (toLens _pp) _s :: [UserIds])
                                                                          _ -> []) (paths _s (Proxy :: Proxy UserIds)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_Permissions_readers _wp) -> map (\a -> Peek_Permissions_UserIds _pp (Just a)) (toListOf (toLens _pp) _s :: [UserIds])
                                                                          _ -> []) (paths _s (Proxy :: Proxy UserIds))] :: [Peek Permissions]
instance PathStart UserIds
    where data Peek UserIds
              = Peek_UserIds_JSONText (Path UserIds JSONText) (Maybe JSONText)
              | Peek_UserIds_UserIds (Path UserIds UserIds) (Maybe UserIds)
              | Peek_UserIds_Text (Path UserIds Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_UserIds_View _wp) -> map (\a -> let f = peekTree a
                                                                                          in Node (Peek_UserIds_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q z) = Peek_UserIds_JSONText (Path_UserIds_View q) z
                                                                                                                                                                    liftPeek (Peek_Text_Text q z) = Peek_UserIds_Text (Path_UserIds_View q) z
                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                               _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek UserIds)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_UserIds_View _wp) -> map (\a -> Peek_UserIds_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                              _ -> []) (paths _s (Proxy :: Proxy Text)) :: [Peek UserIds]
instance PathStart AbbrevPair
    where data Peek AbbrevPair
              = Peek_AbbrevPair_JSONText (Path AbbrevPair JSONText) (Maybe JSONText)
              | Peek_AbbrevPair_Markup (Path AbbrevPair Markup) (Maybe Markup)
              | Peek_AbbrevPair_AbbrevPair (Path AbbrevPair AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPair_CIString (Path AbbrevPair CIString) (Maybe CIString)
              | Peek_AbbrevPair_Text (Path AbbrevPair Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = mconcat [concatMap (\pth -> case pth of
                                                        _pp@(Path_First _wp) -> map (\a -> let f = peekTree a
                                                                                            in Node (Peek_AbbrevPair_CIString _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_CIString_JSONText q
                                                                                                                                                                                                              z) = Peek_AbbrevPair_JSONText (Path_First q) z
                                                                                                                                                                             liftPeek (Peek_CIString_CIString q
                                                                                                                                                                                                              z) = Peek_AbbrevPair_CIString (Path_First q) z
                                                                                                                                                                             liftPeek (Peek_CIString_Text q z) = Peek_AbbrevPair_Text (Path_First q) z
                                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [CIString])
                                                        _ -> []) (paths _s (Proxy :: Proxy CIString)),
                                 concatMap (\pth -> case pth of
                                                        _pp@(Path_Second _wp) -> map (\a -> let f = peekTree a
                                                                                             in Node (Peek_AbbrevPair_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                           z) = Peek_AbbrevPair_JSONText (Path_Second q) z
                                                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_AbbrevPair_Markup (Path_Second q) z
                                                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_AbbrevPair_Text (Path_Second q) z
                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                        _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek AbbrevPair)
          peekRow _s = mconcat [concatMap (\pth -> case pth of
                                                       _pp@(Path_First _wp) -> map (\a -> Peek_AbbrevPair_CIString _pp (Just a)) (toListOf (toLens _pp) _s :: [CIString])
                                                       _ -> []) (paths _s (Proxy :: Proxy CIString)),
                                concatMap (\pth -> case pth of
                                                       _pp@(Path_Second _wp) -> map (\a -> Peek_AbbrevPair_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                       _ -> []) (paths _s (Proxy :: Proxy Markup))] :: [Peek AbbrevPair]
instance PathStart AbbrevPairs
    where data Peek AbbrevPairs
              = Peek_AbbrevPairs_JSONText (Path AbbrevPairs JSONText) (Maybe JSONText)
              | Peek_AbbrevPairs_Markup (Path AbbrevPairs Markup) (Maybe Markup)
              | Peek_AbbrevPairs_AbbrevPair (Path AbbrevPairs AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPairs_AbbrevPairs (Path AbbrevPairs AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_AbbrevPairs_CIString (Path AbbrevPairs CIString) (Maybe CIString)
              | Peek_AbbrevPairs_Text (Path AbbrevPairs Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_AbbrevPairs_AbbrevPair _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_AbbrevPair_JSONText q
                                                                                                                                                                                                          z) = Peek_AbbrevPairs_JSONText (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_AbbrevPair_Markup q z) = Peek_AbbrevPairs_Markup (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_AbbrevPair_AbbrevPair q
                                                                                                                                                                                                            z) = Peek_AbbrevPairs_AbbrevPair (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_AbbrevPair_CIString q
                                                                                                                                                                                                          z) = Peek_AbbrevPairs_CIString (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_AbbrevPair_Text q z) = Peek_AbbrevPairs_Text (Path_At _k q) z
                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [AbbrevPair])
                                               _ -> []) (paths _s (Proxy :: Proxy AbbrevPair)) :: Forest (Peek AbbrevPairs)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_AbbrevPairs_AbbrevPair _pp (Just a)) (toListOf (toLens _pp) _s :: [AbbrevPair])
                                              _ -> []) (paths _s (Proxy :: Proxy AbbrevPair)) :: [Peek AbbrevPairs]
instance PathStart Author
    where data Peek Author
              = Peek_Author_JSONText (Path Author JSONText) (Maybe JSONText)
              | Peek_Author_Markup (Path Author Markup) (Maybe Markup)
              | Peek_Author_Author (Path Author Author) (Maybe Author)
              | Peek_Author_Text (Path Author Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(Author {})) = mconcat [concatMap (\pth -> case pth of
                                                                      _pp@(Path_Author_authorName _wp) -> map (\a -> let f = peekTree a
                                                                                                                      in Node (Peek_Author_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                z) = Peek_Author_JSONText (Path_Author_authorName q) z
                                                                                                                                                                                                 liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                              z) = Peek_Author_Markup (Path_Author_authorName q) z
                                                                                                                                                                                                 liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                            z) = Peek_Author_Text (Path_Author_authorName q) z
                                                                                                                                                                                              in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_Author_authorCredentials _wp) -> map (\a -> let f = peekTree a
                                                                                                                             in Node (Peek_Author_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                       z) = Peek_Author_JSONText (Path_Author_authorCredentials q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                     z) = Peek_Author_Markup (Path_Author_authorCredentials q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                   z) = Peek_Author_Text (Path_Author_authorCredentials q) z
                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek Author)
          peekRow (_s@(Author {})) = mconcat [concatMap (\pth -> case pth of
                                                                     _pp@(Path_Author_authorName _wp) -> map (\a -> Peek_Author_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_Author_authorCredentials _wp) -> map (\a -> Peek_Author_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup))] :: [Peek Author]
instance PathStart Authors
    where data Peek Authors
              = Peek_Authors_JSONText (Path Authors JSONText) (Maybe JSONText)
              | Peek_Authors_Markup (Path Authors Markup) (Maybe Markup)
              | Peek_Authors_Author (Path Authors Author) (Maybe Author)
              | Peek_Authors_Authors (Path Authors Authors) (Maybe Authors)
              | Peek_Authors_Text (Path Authors Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_Authors_Author _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Author_JSONText q z) = Peek_Authors_JSONText (Path_At _k q) z
                                                                                                                                                               liftPeek (Peek_Author_Markup q z) = Peek_Authors_Markup (Path_At _k q) z
                                                                                                                                                               liftPeek (Peek_Author_Author q z) = Peek_Authors_Author (Path_At _k q) z
                                                                                                                                                               liftPeek (Peek_Author_Text q z) = Peek_Authors_Text (Path_At _k q) z
                                                                                                                                                            in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Author])
                                               _ -> []) (paths _s (Proxy :: Proxy Author)) :: Forest (Peek Authors)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_Authors_Author _pp (Just a)) (toListOf (toLens _pp) _s :: [Author])
                                              _ -> []) (paths _s (Proxy :: Proxy Author)) :: [Peek Authors]
instance PathStart Branding
    where data Peek Branding
              = Peek_Branding_JSONText (Path Branding JSONText) (Maybe JSONText)
              | Peek_Branding_Branding (Path Branding Branding) (Maybe Branding)
              | Peek_Branding_Text (Path Branding Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Branding_View _wp) -> map (\a -> let f = peekTree a
                                                                                           in Node (Peek_Branding_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q z) = Peek_Branding_JSONText (Path_Branding_View q) z
                                                                                                                                                                      liftPeek (Peek_Text_Text q z) = Peek_Branding_Text (Path_Branding_View q) z
                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                               _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Branding)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Branding_View _wp) -> map (\a -> Peek_Branding_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                              _ -> []) (paths _s (Proxy :: Proxy Text)) :: [Peek Branding]
instance PathStart MarkupPair
    where data Peek MarkupPair
              = Peek_MarkupPair_JSONText (Path MarkupPair JSONText) (Maybe JSONText)
              | Peek_MarkupPair_Markup (Path MarkupPair Markup) (Maybe Markup)
              | Peek_MarkupPair_MarkupPair (Path MarkupPair MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPair_Text (Path MarkupPair Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = mconcat [concatMap (\pth -> case pth of
                                                        _pp@(Path_First _wp) -> map (\a -> let f = peekTree a
                                                                                            in Node (Peek_MarkupPair_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q z) = Peek_MarkupPair_JSONText (Path_First q) z
                                                                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_MarkupPair_Markup (Path_First q) z
                                                                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_MarkupPair_Text (Path_First q) z
                                                                                                                                                                        in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                        _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                 concatMap (\pth -> case pth of
                                                        _pp@(Path_Second _wp) -> map (\a -> let f = peekTree a
                                                                                             in Node (Peek_MarkupPair_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                           z) = Peek_MarkupPair_JSONText (Path_Second q) z
                                                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_MarkupPair_Markup (Path_Second q) z
                                                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_MarkupPair_Text (Path_Second q) z
                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                        _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek MarkupPair)
          peekRow _s = mconcat [concatMap (\pth -> case pth of
                                                       _pp@(Path_First _wp) -> map (\a -> Peek_MarkupPair_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                       _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                concatMap (\pth -> case pth of
                                                       _pp@(Path_Second _wp) -> map (\a -> Peek_MarkupPair_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                       _ -> []) (paths _s (Proxy :: Proxy Markup))] :: [Peek MarkupPair]
instance PathStart MarkupPairs
    where data Peek MarkupPairs
              = Peek_MarkupPairs_JSONText (Path MarkupPairs JSONText) (Maybe JSONText)
              | Peek_MarkupPairs_Markup (Path MarkupPairs Markup) (Maybe Markup)
              | Peek_MarkupPairs_MarkupPair (Path MarkupPairs MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPairs_MarkupPairs (Path MarkupPairs MarkupPairs) (Maybe MarkupPairs)
              | Peek_MarkupPairs_Text (Path MarkupPairs Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_MarkupPairs_MarkupPair _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_MarkupPair_JSONText q
                                                                                                                                                                                                          z) = Peek_MarkupPairs_JSONText (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_MarkupPair_Markup q z) = Peek_MarkupPairs_Markup (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_MarkupPair_MarkupPair q
                                                                                                                                                                                                            z) = Peek_MarkupPairs_MarkupPair (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_MarkupPair_Text q z) = Peek_MarkupPairs_Text (Path_At _k q) z
                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MarkupPair])
                                               _ -> []) (paths _s (Proxy :: Proxy MarkupPair)) :: Forest (Peek MarkupPairs)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_MarkupPairs_MarkupPair _pp (Just a)) (toListOf (toLens _pp) _s :: [MarkupPair])
                                              _ -> []) (paths _s (Proxy :: Proxy MarkupPair)) :: [Peek MarkupPairs]
instance PathStart Markups
    where data Peek Markups
              = Peek_Markups_JSONText (Path Markups JSONText) (Maybe JSONText)
              | Peek_Markups_Markup (Path Markups Markup) (Maybe Markup)
              | Peek_Markups_Markups (Path Markups Markups) (Maybe Markups)
              | Peek_Markups_Text (Path Markups Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_Markups_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q z) = Peek_Markups_JSONText (Path_At _k q) z
                                                                                                                                                               liftPeek (Peek_Markup_Markup q z) = Peek_Markups_Markup (Path_At _k q) z
                                                                                                                                                               liftPeek (Peek_Markup_Text q z) = Peek_Markups_Text (Path_At _k q) z
                                                                                                                                                            in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                               _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek Markups)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_Markups_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                              _ -> []) (paths _s (Proxy :: Proxy Markup)) :: [Peek Markups]
instance PathStart MaybeReportIntendedUse
    where data Peek MaybeReportIntendedUse
              = Peek_MaybeReportIntendedUse_String (Path MaybeReportIntendedUse String) (Maybe String)
              | Peek_MaybeReportIntendedUse_JSONText (Path MaybeReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_MaybeReportIntendedUse_MaybeReportIntendedUse (Path MaybeReportIntendedUse MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> let f = peekTree a
                                                                                                         in Node (Peek_MaybeReportIntendedUse_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q
                                                                                                                                                                                                                                 z) = Peek_MaybeReportIntendedUse_String (Path_MaybeReportIntendedUse_View q) z
                                                                                                                                                                                                    liftPeek (Peek_String_JSONText q
                                                                                                                                                                                                                                   z) = Peek_MaybeReportIntendedUse_JSONText (Path_MaybeReportIntendedUse_View q) z
                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek MaybeReportIntendedUse)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> Peek_MaybeReportIntendedUse_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek MaybeReportIntendedUse]
instance PathStart Report
    where data Peek Report
              = Peek_Report_String (Path Report String) (Maybe String)
              | Peek_Report_Int64 (Path Report Int64) (Maybe Int64)
              | Peek_Report_Int (Path Report Int) (Maybe Int)
              | Peek_Report_Bool (Path Report Bool) (Maybe Bool)
              | Peek_Report_Double (Path Report Double) (Maybe Double)
              | Peek_Report_Dimension (Path Report Dimension) (Maybe Dimension)
              | Peek_Report_ImageCrop (Path Report ImageCrop) (Maybe ImageCrop)
              | Peek_Report_ImageSize (Path Report ImageSize) (Maybe ImageSize)
              | Peek_Report_Units (Path Report Units) (Maybe Units)
              | Peek_Report_ImageFile (Path Report ImageFile) (Maybe ImageFile)
              | Peek_Report_Integer (Path Report Integer) (Maybe Integer)
              | Peek_Report_JSONText (Path Report JSONText) (Maybe JSONText)
              | Peek_Report_Markup (Path Report Markup) (Maybe Markup)
              | Peek_Report_Permissions (Path Report Permissions) (Maybe Permissions)
              | Peek_Report_UserIds (Path Report UserIds) (Maybe UserIds)
              | Peek_Report_AbbrevPair (Path Report AbbrevPair) (Maybe AbbrevPair)
              | Peek_Report_AbbrevPairs (Path Report AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_Report_Author (Path Report Author) (Maybe Author)
              | Peek_Report_Authors (Path Report Authors) (Maybe Authors)
              | Peek_Report_Branding (Path Report Branding) (Maybe Branding)
              | Peek_Report_MarkupPair (Path Report MarkupPair) (Maybe MarkupPair)
              | Peek_Report_MarkupPairs (Path Report MarkupPairs) (Maybe MarkupPairs)
              | Peek_Report_Markups (Path Report Markups) (Maybe Markups)
              | Peek_Report_MaybeReportIntendedUse (Path Report MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_Report_Report (Path Report Report) (Maybe Report)
              | Peek_Report_ReportElem (Path Report ReportElem) (Maybe ReportElem)
              | Peek_Report_ReportElems (Path Report ReportElems) (Maybe ReportElems)
              | Peek_Report_ReportFlags (Path Report ReportFlags) (Maybe ReportFlags)
              | Peek_Report_ReportStandard (Path Report ReportStandard) (Maybe ReportStandard)
              | Peek_Report_ReportStatus (Path Report ReportStatus) (Maybe ReportStatus)
              | Peek_Report_ReportValueApproachInfo (Path Report ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_Report_ReportValueTypeInfo (Path Report ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_Report_EUI (Path Report EUI) (Maybe EUI)
              | Peek_Report_MEUI (Path Report MEUI) (Maybe MEUI)
              | Peek_Report_MaybeImageFile (Path Report MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Report_ReportImage (Path Report ReportImage) (Maybe ReportImage)
              | Peek_Report_ReportImages (Path Report ReportImages) (Maybe ReportImages)
              | Peek_Report_ReadOnlyFilePath (Path Report ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_Report_ReportImageView (Path Report ReportImageView) (Maybe ReportImageView)
              | Peek_Report_ReportView (Path Report ReportView) (Maybe ReportView)
              | Peek_Report_SaneSizeImageSize (Path Report SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Report_Item (Path Report Item) (Maybe Item)
              | Peek_Report_MIM (Path Report MIM) (Maybe MIM)
              | Peek_Report_CIString (Path Report CIString) (Maybe CIString)
              | Peek_Report_URI (Path Report URI) (Maybe URI)
              | Peek_Report_Text (Path Report Text) (Maybe Text)
              | Peek_Report_UserId (Path Report UserId) (Maybe UserId)
              | Peek_Report_UUID (Path Report UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Report_View _wp) -> map (\a -> let f = peekTree a
                                                                                         in Node (Peek_Report_ReportView _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportView_String q z) = Peek_Report_String (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Int64 q z) = Peek_Report_Int64 (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Int q z) = Peek_Report_Int (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Bool q z) = Peek_Report_Bool (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Double q z) = Peek_Report_Double (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Dimension q
                                                                                                                                                                                                            z) = Peek_Report_Dimension (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ImageCrop q
                                                                                                                                                                                                            z) = Peek_Report_ImageCrop (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ImageSize q
                                                                                                                                                                                                            z) = Peek_Report_ImageSize (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Units q z) = Peek_Report_Units (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ImageFile q
                                                                                                                                                                                                            z) = Peek_Report_ImageFile (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Integer q
                                                                                                                                                                                                          z) = Peek_Report_Integer (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_JSONText q
                                                                                                                                                                                                           z) = Peek_Report_JSONText (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Markup q z) = Peek_Report_Markup (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Permissions q
                                                                                                                                                                                                              z) = Peek_Report_Permissions (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_UserIds q
                                                                                                                                                                                                          z) = Peek_Report_UserIds (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_AbbrevPair q
                                                                                                                                                                                                             z) = Peek_Report_AbbrevPair (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_AbbrevPairs q
                                                                                                                                                                                                              z) = Peek_Report_AbbrevPairs (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Author q z) = Peek_Report_Author (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Authors q
                                                                                                                                                                                                          z) = Peek_Report_Authors (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Branding q
                                                                                                                                                                                                           z) = Peek_Report_Branding (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MarkupPair q
                                                                                                                                                                                                             z) = Peek_Report_MarkupPair (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MarkupPairs q
                                                                                                                                                                                                              z) = Peek_Report_MarkupPairs (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Markups q
                                                                                                                                                                                                          z) = Peek_Report_Markups (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MaybeReportIntendedUse q
                                                                                                                                                                                                                         z) = Peek_Report_MaybeReportIntendedUse (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportElem q
                                                                                                                                                                                                             z) = Peek_Report_ReportElem (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportElems q
                                                                                                                                                                                                              z) = Peek_Report_ReportElems (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportFlags q
                                                                                                                                                                                                              z) = Peek_Report_ReportFlags (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportStandard q
                                                                                                                                                                                                                 z) = Peek_Report_ReportStandard (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportStatus q
                                                                                                                                                                                                               z) = Peek_Report_ReportStatus (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportValueApproachInfo q
                                                                                                                                                                                                                          z) = Peek_Report_ReportValueApproachInfo (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportValueTypeInfo q
                                                                                                                                                                                                                      z) = Peek_Report_ReportValueTypeInfo (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_EUI q z) = Peek_Report_EUI (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MEUI q z) = Peek_Report_MEUI (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MaybeImageFile q
                                                                                                                                                                                                                 z) = Peek_Report_MaybeImageFile (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportImage q
                                                                                                                                                                                                              z) = Peek_Report_ReportImage (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportImages q
                                                                                                                                                                                                               z) = Peek_Report_ReportImages (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReadOnlyFilePath q
                                                                                                                                                                                                                   z) = Peek_Report_ReadOnlyFilePath (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportImageView q
                                                                                                                                                                                                                  z) = Peek_Report_ReportImageView (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_ReportView q
                                                                                                                                                                                                             z) = Peek_Report_ReportView (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_SaneSizeImageSize q
                                                                                                                                                                                                                    z) = Peek_Report_SaneSizeImageSize (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Item q z) = Peek_Report_Item (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_MIM q z) = Peek_Report_MIM (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_CIString q
                                                                                                                                                                                                           z) = Peek_Report_CIString (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_URI q z) = Peek_Report_URI (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_Text q z) = Peek_Report_Text (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_UserId q z) = Peek_Report_UserId (Path_Report_View q) z
                                                                                                                                                                        liftPeek (Peek_ReportView_UUID q z) = Peek_Report_UUID (Path_Report_View q) z
                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportView])
                                               _ -> []) (paths _s (Proxy :: Proxy ReportView)) :: Forest (Peek Report)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Report_View _wp) -> map (\a -> Peek_Report_ReportView _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportView])
                                              _ -> []) (paths _s (Proxy :: Proxy ReportView)) :: [Peek Report]
instance PathStart ReportElem
    where data Peek ReportElem
              = Peek_ReportElem_String (Path ReportElem String) (Maybe String)
              | Peek_ReportElem_Bool (Path ReportElem Bool) (Maybe Bool)
              | Peek_ReportElem_Double (Path ReportElem Double) (Maybe Double)
              | Peek_ReportElem_Dimension (Path ReportElem Dimension) (Maybe Dimension)
              | Peek_ReportElem_ImageCrop (Path ReportElem ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElem_ImageSize (Path ReportElem ImageSize) (Maybe ImageSize)
              | Peek_ReportElem_Units (Path ReportElem Units) (Maybe Units)
              | Peek_ReportElem_ImageFile (Path ReportElem ImageFile) (Maybe ImageFile)
              | Peek_ReportElem_JSONText (Path ReportElem JSONText) (Maybe JSONText)
              | Peek_ReportElem_Markup (Path ReportElem Markup) (Maybe Markup)
              | Peek_ReportElem_ReportElem (Path ReportElem ReportElem) (Maybe ReportElem)
              | Peek_ReportElem_EUI (Path ReportElem EUI) (Maybe EUI)
              | Peek_ReportElem_MEUI (Path ReportElem MEUI) (Maybe MEUI)
              | Peek_ReportElem_MaybeImageFile (Path ReportElem MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElem_ReportImage (Path ReportElem ReportImage) (Maybe ReportImage)
              | Peek_ReportElem_ReportImages (Path ReportElem ReportImages) (Maybe ReportImages)
              | Peek_ReportElem_ReportImageView (Path ReportElem ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElem_SaneSizeImageSize (Path ReportElem SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElem_Item (Path ReportElem Item) (Maybe Item)
              | Peek_ReportElem_MIM (Path ReportElem MIM) (Maybe MIM)
              | Peek_ReportElem_URI (Path ReportElem URI) (Maybe URI)
              | Peek_ReportElem_Text (Path ReportElem Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(ReportItem {})) = concatMap (\pth -> case pth of
                                                                 _pp@(Path_ReportElem_elemItem _wp) -> map (\a -> let f = peekTree a
                                                                                                                   in Node (Peek_ReportElem_Item _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Item_String q
                                                                                                                                                                                                                           z) = Peek_ReportElem_String (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Bool q
                                                                                                                                                                                                                         z) = Peek_ReportElem_Bool (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Double q
                                                                                                                                                                                                                           z) = Peek_ReportElem_Double (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Dimension q
                                                                                                                                                                                                                              z) = Peek_ReportElem_Dimension (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ImageCrop q
                                                                                                                                                                                                                              z) = Peek_ReportElem_ImageCrop (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ImageSize q
                                                                                                                                                                                                                              z) = Peek_ReportElem_ImageSize (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Units q
                                                                                                                                                                                                                          z) = Peek_ReportElem_Units (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ImageFile q
                                                                                                                                                                                                                              z) = Peek_ReportElem_ImageFile (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_JSONText q
                                                                                                                                                                                                                             z) = Peek_ReportElem_JSONText (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Markup q
                                                                                                                                                                                                                           z) = Peek_ReportElem_Markup (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_EUI q
                                                                                                                                                                                                                        z) = Peek_ReportElem_EUI (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_MEUI q
                                                                                                                                                                                                                         z) = Peek_ReportElem_MEUI (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_MaybeImageFile q
                                                                                                                                                                                                                                   z) = Peek_ReportElem_MaybeImageFile (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ReportImage q
                                                                                                                                                                                                                                z) = Peek_ReportElem_ReportImage (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ReportImages q
                                                                                                                                                                                                                                 z) = Peek_ReportElem_ReportImages (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_ReportImageView q
                                                                                                                                                                                                                                    z) = Peek_ReportElem_ReportImageView (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_SaneSizeImageSize q
                                                                                                                                                                                                                                      z) = Peek_ReportElem_SaneSizeImageSize (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Item q
                                                                                                                                                                                                                         z) = Peek_ReportElem_Item (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_MIM q
                                                                                                                                                                                                                        z) = Peek_ReportElem_MIM (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_URI q
                                                                                                                                                                                                                        z) = Peek_ReportElem_URI (Path_ReportElem_elemItem q) z
                                                                                                                                                                                                liftPeek (Peek_Item_Text q
                                                                                                                                                                                                                         z) = Peek_ReportElem_Text (Path_ReportElem_elemItem q) z
                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Item])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Item)) :: Forest (Peek ReportElem)
          peekTree (_s@(ReportParagraph {})) = concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportElem_elemText _wp) -> map (\a -> let f = peekTree a
                                                                                                                        in Node (Peek_ReportElem_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                      z) = Peek_ReportElem_JSONText (Path_ReportElem_elemText q) z
                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                    z) = Peek_ReportElem_Markup (Path_ReportElem_elemText q) z
                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                  z) = Peek_ReportElem_Text (Path_ReportElem_elemText q) z
                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek ReportElem)
          peekTree (_s@(ReportUndecided {})) = mempty :: Forest (Peek ReportElem)
          peekRow (_s@(ReportItem {})) = concatMap (\pth -> case pth of
                                                                _pp@(Path_ReportElem_elemItem _wp) -> map (\a -> Peek_ReportElem_Item _pp (Just a)) (toListOf (toLens _pp) _s :: [Item])
                                                                _ -> []) (paths _s (Proxy :: Proxy Item)) :: [Peek ReportElem]
          peekRow (_s@(ReportParagraph {})) = concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportElem_elemText _wp) -> map (\a -> Peek_ReportElem_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)) :: [Peek ReportElem]
          peekRow (_s@(ReportUndecided {})) = mempty :: [Peek ReportElem]
instance PathStart ReportElems
    where data Peek ReportElems
              = Peek_ReportElems_String (Path ReportElems String) (Maybe String)
              | Peek_ReportElems_Bool (Path ReportElems Bool) (Maybe Bool)
              | Peek_ReportElems_Double (Path ReportElems Double) (Maybe Double)
              | Peek_ReportElems_Dimension (Path ReportElems Dimension) (Maybe Dimension)
              | Peek_ReportElems_ImageCrop (Path ReportElems ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElems_ImageSize (Path ReportElems ImageSize) (Maybe ImageSize)
              | Peek_ReportElems_Units (Path ReportElems Units) (Maybe Units)
              | Peek_ReportElems_ImageFile (Path ReportElems ImageFile) (Maybe ImageFile)
              | Peek_ReportElems_JSONText (Path ReportElems JSONText) (Maybe JSONText)
              | Peek_ReportElems_Markup (Path ReportElems Markup) (Maybe Markup)
              | Peek_ReportElems_ReportElem (Path ReportElems ReportElem) (Maybe ReportElem)
              | Peek_ReportElems_ReportElems (Path ReportElems ReportElems) (Maybe ReportElems)
              | Peek_ReportElems_EUI (Path ReportElems EUI) (Maybe EUI)
              | Peek_ReportElems_MEUI (Path ReportElems MEUI) (Maybe MEUI)
              | Peek_ReportElems_MaybeImageFile (Path ReportElems MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElems_ReportImage (Path ReportElems ReportImage) (Maybe ReportImage)
              | Peek_ReportElems_ReportImages (Path ReportElems ReportImages) (Maybe ReportImages)
              | Peek_ReportElems_ReportImageView (Path ReportElems ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElems_SaneSizeImageSize (Path ReportElems SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElems_Item (Path ReportElems Item) (Maybe Item)
              | Peek_ReportElems_MIM (Path ReportElems MIM) (Maybe MIM)
              | Peek_ReportElems_URI (Path ReportElems URI) (Maybe URI)
              | Peek_ReportElems_Text (Path ReportElems Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_ReportElems_ReportElem _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportElem_String q z) = Peek_ReportElems_String (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Bool q z) = Peek_ReportElems_Bool (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Double q z) = Peek_ReportElems_Double (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Dimension q
                                                                                                                                                                                                           z) = Peek_ReportElems_Dimension (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ImageCrop q
                                                                                                                                                                                                           z) = Peek_ReportElems_ImageCrop (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ImageSize q
                                                                                                                                                                                                           z) = Peek_ReportElems_ImageSize (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Units q z) = Peek_ReportElems_Units (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ImageFile q
                                                                                                                                                                                                           z) = Peek_ReportElems_ImageFile (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_JSONText q
                                                                                                                                                                                                          z) = Peek_ReportElems_JSONText (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Markup q z) = Peek_ReportElems_Markup (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ReportElem q
                                                                                                                                                                                                            z) = Peek_ReportElems_ReportElem (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_EUI q z) = Peek_ReportElems_EUI (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_MEUI q z) = Peek_ReportElems_MEUI (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_MaybeImageFile q
                                                                                                                                                                                                                z) = Peek_ReportElems_MaybeImageFile (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ReportImage q
                                                                                                                                                                                                             z) = Peek_ReportElems_ReportImage (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ReportImages q
                                                                                                                                                                                                              z) = Peek_ReportElems_ReportImages (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_ReportImageView q
                                                                                                                                                                                                                 z) = Peek_ReportElems_ReportImageView (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_SaneSizeImageSize q
                                                                                                                                                                                                                   z) = Peek_ReportElems_SaneSizeImageSize (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Item q z) = Peek_ReportElems_Item (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_MIM q z) = Peek_ReportElems_MIM (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_URI q z) = Peek_ReportElems_URI (Path_At _k q) z
                                                                                                                                                                       liftPeek (Peek_ReportElem_Text q z) = Peek_ReportElems_Text (Path_At _k q) z
                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportElem])
                                               _ -> []) (paths _s (Proxy :: Proxy ReportElem)) :: Forest (Peek ReportElems)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_ReportElems_ReportElem _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportElem])
                                              _ -> []) (paths _s (Proxy :: Proxy ReportElem)) :: [Peek ReportElems]
instance PathStart ReportFlags
    where data Peek ReportFlags
              = Peek_ReportFlags_String (Path ReportFlags String) (Maybe String)
              | Peek_ReportFlags_Bool (Path ReportFlags Bool) (Maybe Bool)
              | Peek_ReportFlags_JSONText (Path ReportFlags JSONText) (Maybe JSONText)
              | Peek_ReportFlags_ReportFlags (Path ReportFlags ReportFlags) (Maybe ReportFlags)
              deriving (Eq, Show)
          peekTree (_s@(ReportFlags {})) = concatMap (\pth -> case pth of
                                                                  _pp@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> let f = peekTree a
                                                                                                                                in Node (Peek_ReportFlags_Bool _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Bool_String q
                                                                                                                                                                                                                                         z) = Peek_ReportFlags_String (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                                                                                              liftPeek (Peek_Bool_Bool q
                                                                                                                                                                                                                                       z) = Peek_ReportFlags_Bool (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                                                                                              liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                                                                                           z) = Peek_ReportFlags_JSONText (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                                                                                           in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                  _ -> []) (paths _s (Proxy :: Proxy Bool)) :: Forest (Peek ReportFlags)
          peekRow (_s@(ReportFlags {})) = concatMap (\pth -> case pth of
                                                                 _pp@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> Peek_ReportFlags_Bool _pp (Just a)) (toListOf (toLens _pp) _s :: [Bool])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Bool)) :: [Peek ReportFlags]
instance PathStart ReportIntendedUse
    where data Peek ReportIntendedUse
              = Peek_ReportIntendedUse_String (Path ReportIntendedUse String) (Maybe String)
              | Peek_ReportIntendedUse_JSONText (Path ReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_ReportIntendedUse_ReportIntendedUse (Path ReportIntendedUse ReportIntendedUse) (Maybe ReportIntendedUse)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_ReportIntendedUse_View _wp) -> map (\a -> let f = peekTree a
                                                                                                    in Node (Peek_ReportIntendedUse_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q
                                                                                                                                                                                                                       z) = Peek_ReportIntendedUse_String (Path_ReportIntendedUse_View q) z
                                                                                                                                                                                          liftPeek (Peek_String_JSONText q
                                                                                                                                                                                                                         z) = Peek_ReportIntendedUse_JSONText (Path_ReportIntendedUse_View q) z
                                                                                                                                                                                       in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek ReportIntendedUse)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_ReportIntendedUse_View _wp) -> map (\a -> Peek_ReportIntendedUse_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek ReportIntendedUse]
instance PathStart ReportStandard
    where data Peek ReportStandard
              = Peek_ReportStandard_Int (Path ReportStandard Int) (Maybe Int) | Peek_ReportStandard_ReportStandard (Path ReportStandard ReportStandard) (Maybe ReportStandard)
              deriving (Eq, Show)
          peekTree (_s@(ReportStandard {})) = concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportStandard_Int _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Int_Int q
                                                                                                                                                                                                                                          z) = Peek_ReportStandard_Int (Path_ReportStandard_unReportStandard q) z
                                                                                                                                                                                                                in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Int])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Int)) :: Forest (Peek ReportStandard)
          peekRow (_s@(ReportStandard {})) = concatMap (\pth -> case pth of
                                                                    _pp@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> Peek_ReportStandard_Int _pp (Just a)) (toListOf (toLens _pp) _s :: [Int])
                                                                    _ -> []) (paths _s (Proxy :: Proxy Int)) :: [Peek ReportStandard]
instance PathStart ReportStatus
    where data Peek ReportStatus
              = Peek_ReportStatus_String (Path ReportStatus String) (Maybe String)
              | Peek_ReportStatus_JSONText (Path ReportStatus JSONText) (Maybe JSONText)
              | Peek_ReportStatus_ReportStatus (Path ReportStatus ReportStatus) (Maybe ReportStatus)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_ReportStatus_View _wp) -> map (\a -> let f = peekTree a
                                                                                               in Node (Peek_ReportStatus_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q
                                                                                                                                                                                                             z) = Peek_ReportStatus_String (Path_ReportStatus_View q) z
                                                                                                                                                                                liftPeek (Peek_String_JSONText q
                                                                                                                                                                                                               z) = Peek_ReportStatus_JSONText (Path_ReportStatus_View q) z
                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek ReportStatus)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_ReportStatus_View _wp) -> map (\a -> Peek_ReportStatus_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek ReportStatus]
instance PathStart ReportValueApproachInfo
    where data Peek ReportValueApproachInfo
              = Peek_ReportValueApproachInfo_JSONText (Path ReportValueApproachInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueApproachInfo_Markup (Path ReportValueApproachInfo Markup) (Maybe Markup)
              | Peek_ReportValueApproachInfo_ReportValueApproachInfo (Path ReportValueApproachInfo ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportValueApproachInfo_Text (Path ReportValueApproachInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(ReportValueApproachInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                       _pp@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                                     in Node (Peek_ReportValueApproachInfo_Markup _pp (if null f
                                                                                                                                                                                                                        then Just a
                                                                                                                                                                                                                        else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                           z) = Peek_ReportValueApproachInfo_JSONText (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                                                                                            liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                                         z) = Peek_ReportValueApproachInfo_Markup (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                                                                                            liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                                       z) = Peek_ReportValueApproachInfo_Text (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                       _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                                concatMap (\pth -> case pth of
                                                                                       _pp@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                                            in Node (Peek_ReportValueApproachInfo_Markup _pp (if null f
                                                                                                                                                                                                                               then Just a
                                                                                                                                                                                                                               else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                                  z) = Peek_ReportValueApproachInfo_JSONText (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                                                                                                   liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                                                z) = Peek_ReportValueApproachInfo_Markup (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                                                                                                   liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                                              z) = Peek_ReportValueApproachInfo_Text (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                                                                                                in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                       _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueApproachInfo)
          peekRow (_s@(ReportValueApproachInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                      _pp@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> Peek_ReportValueApproachInfo_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                               concatMap (\pth -> case pth of
                                                                                      _pp@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> Peek_ReportValueApproachInfo_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup))] :: [Peek ReportValueApproachInfo]
instance PathStart ReportValueTypeInfo
    where data Peek ReportValueTypeInfo
              = Peek_ReportValueTypeInfo_JSONText (Path ReportValueTypeInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueTypeInfo_Markup (Path ReportValueTypeInfo Markup) (Maybe Markup)
              | Peek_ReportValueTypeInfo_ReportValueTypeInfo (Path ReportValueTypeInfo ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportValueTypeInfo_Text (Path ReportValueTypeInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(ReportValueTypeInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                   _pp@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                         in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                        then Just a
                                                                                                                                                                                                        else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                           z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                                                                                            liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                         z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                                                                                            liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                       z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                   _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                            concatMap (\pth -> case pth of
                                                                                   _pp@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                                in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                               then Just a
                                                                                                                                                                                                               else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                  z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                                                                                   liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                                z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                                                                                   liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                              z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                                                                                in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                   _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                            concatMap (\pth -> case pth of
                                                                                   _pp@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                               in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                              then Just a
                                                                                                                                                                                                              else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                                 z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                                                                                                  liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                               z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                                                                                                  liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                             z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                   _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueTypeInfo)
          peekRow (_s@(ReportValueTypeInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                  _pp@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> Peek_ReportValueTypeInfo_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                           concatMap (\pth -> case pth of
                                                                                  _pp@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> Peek_ReportValueTypeInfo_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                           concatMap (\pth -> case pth of
                                                                                  _pp@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> Peek_ReportValueTypeInfo_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup))] :: [Peek ReportValueTypeInfo]
instance PathStart EUI
    where data Peek EUI
              = Peek_EUI_ImageFile (Path EUI ImageFile) (Maybe ImageFile) | Peek_EUI_EUI (Path EUI EUI) (Maybe EUI) | Peek_EUI_URI (Path EUI URI) (Maybe URI)
              deriving (Eq, Show)
          peekTree (_s@(Left _)) = concatMap (\pth -> case pth of
                                                          _pp@(Path_Left _wp) -> map (\a -> let f = peekTree a
                                                                                             in Node (Peek_EUI_URI _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_URI_URI q z) = Peek_EUI_URI (Path_Left q) z
                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [URI])
                                                          _ -> []) (paths _s (Proxy :: Proxy URI)) :: Forest (Peek EUI)
          peekTree (_s@(Right _)) = concatMap (\pth -> case pth of
                                                           _pp@(Path_Right _wp) -> map (\a -> let f = peekTree a
                                                                                               in Node (Peek_EUI_ImageFile _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ImageFile_ImageFile q z) = Peek_EUI_ImageFile (Path_Right q) z
                                                                                                                                                                       in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageFile])
                                                           _ -> []) (paths _s (Proxy :: Proxy ImageFile)) :: Forest (Peek EUI)
          peekRow (_s@(Left _)) = concatMap (\pth -> case pth of
                                                         _pp@(Path_Left _wp) -> map (\a -> Peek_EUI_URI _pp (Just a)) (toListOf (toLens _pp) _s :: [URI])
                                                         _ -> []) (paths _s (Proxy :: Proxy URI)) :: [Peek EUI]
          peekRow (_s@(Right _)) = concatMap (\pth -> case pth of
                                                          _pp@(Path_Right _wp) -> map (\a -> Peek_EUI_ImageFile _pp (Just a)) (toListOf (toLens _pp) _s :: [ImageFile])
                                                          _ -> []) (paths _s (Proxy :: Proxy ImageFile)) :: [Peek EUI]
instance PathStart MEUI
    where data Peek MEUI
              = Peek_MEUI_ImageFile (Path MEUI ImageFile) (Maybe ImageFile)
              | Peek_MEUI_EUI (Path MEUI EUI) (Maybe EUI)
              | Peek_MEUI_MEUI (Path MEUI MEUI) (Maybe MEUI)
              | Peek_MEUI_URI (Path MEUI URI) (Maybe URI)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Just _wp) -> map (\a -> let f = peekTree a
                                                                                  in Node (Peek_MEUI_EUI _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_EUI_ImageFile q z) = Peek_MEUI_ImageFile (Path_Just q) z
                                                                                                                                                        liftPeek (Peek_EUI_EUI q z) = Peek_MEUI_EUI (Path_Just q) z
                                                                                                                                                        liftPeek (Peek_EUI_URI q z) = Peek_MEUI_URI (Path_Just q) z
                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [EUI])
                                               _ -> []) (paths _s (Proxy :: Proxy EUI)) :: Forest (Peek MEUI)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Just _wp) -> map (\a -> Peek_MEUI_EUI _pp (Just a)) (toListOf (toLens _pp) _s :: [EUI])
                                              _ -> []) (paths _s (Proxy :: Proxy EUI)) :: [Peek MEUI]
instance PathStart MaybeImageFile
    where data Peek MaybeImageFile
              = Peek_MaybeImageFile_String (Path MaybeImageFile String) (Maybe String)
              | Peek_MaybeImageFile_JSONText (Path MaybeImageFile JSONText) (Maybe JSONText)
              | Peek_MaybeImageFile_MaybeImageFile (Path MaybeImageFile MaybeImageFile) (Maybe MaybeImageFile)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_MaybeImageFile_View _wp) -> map (\a -> let f = peekTree a
                                                                                                 in Node (Peek_MaybeImageFile_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q
                                                                                                                                                                                                                 z) = Peek_MaybeImageFile_String (Path_MaybeImageFile_View q) z
                                                                                                                                                                                    liftPeek (Peek_String_JSONText q
                                                                                                                                                                                                                   z) = Peek_MaybeImageFile_JSONText (Path_MaybeImageFile_View q) z
                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek MaybeImageFile)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_MaybeImageFile_View _wp) -> map (\a -> Peek_MaybeImageFile_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek MaybeImageFile]
instance PathStart ReportImage
    where data Peek ReportImage
              = Peek_ReportImage_String (Path ReportImage String) (Maybe String)
              | Peek_ReportImage_Bool (Path ReportImage Bool) (Maybe Bool)
              | Peek_ReportImage_Double (Path ReportImage Double) (Maybe Double)
              | Peek_ReportImage_Dimension (Path ReportImage Dimension) (Maybe Dimension)
              | Peek_ReportImage_ImageCrop (Path ReportImage ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImage_ImageSize (Path ReportImage ImageSize) (Maybe ImageSize)
              | Peek_ReportImage_Units (Path ReportImage Units) (Maybe Units)
              | Peek_ReportImage_ImageFile (Path ReportImage ImageFile) (Maybe ImageFile)
              | Peek_ReportImage_JSONText (Path ReportImage JSONText) (Maybe JSONText)
              | Peek_ReportImage_Markup (Path ReportImage Markup) (Maybe Markup)
              | Peek_ReportImage_EUI (Path ReportImage EUI) (Maybe EUI)
              | Peek_ReportImage_MEUI (Path ReportImage MEUI) (Maybe MEUI)
              | Peek_ReportImage_MaybeImageFile (Path ReportImage MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImage_ReportImage (Path ReportImage ReportImage) (Maybe ReportImage)
              | Peek_ReportImage_ReportImageView (Path ReportImage ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImage_SaneSizeImageSize (Path ReportImage SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImage_URI (Path ReportImage URI) (Maybe URI)
              | Peek_ReportImage_Text (Path ReportImage Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_ReportImage_View _wp) -> map (\a -> let f = peekTree a
                                                                                              in Node (Peek_ReportImage_ReportImageView _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportImageView_String q
                                                                                                                                                                                                                             z) = Peek_ReportImage_String (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Bool q
                                                                                                                                                                                                                           z) = Peek_ReportImage_Bool (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Double q
                                                                                                                                                                                                                             z) = Peek_ReportImage_Double (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Dimension q
                                                                                                                                                                                                                                z) = Peek_ReportImage_Dimension (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_ImageCrop q
                                                                                                                                                                                                                                z) = Peek_ReportImage_ImageCrop (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_ImageSize q
                                                                                                                                                                                                                                z) = Peek_ReportImage_ImageSize (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Units q
                                                                                                                                                                                                                            z) = Peek_ReportImage_Units (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_ImageFile q
                                                                                                                                                                                                                                z) = Peek_ReportImage_ImageFile (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_JSONText q
                                                                                                                                                                                                                               z) = Peek_ReportImage_JSONText (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Markup q
                                                                                                                                                                                                                             z) = Peek_ReportImage_Markup (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_EUI q
                                                                                                                                                                                                                          z) = Peek_ReportImage_EUI (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_MEUI q
                                                                                                                                                                                                                           z) = Peek_ReportImage_MEUI (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_MaybeImageFile q
                                                                                                                                                                                                                                     z) = Peek_ReportImage_MaybeImageFile (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_ReportImageView q
                                                                                                                                                                                                                                      z) = Peek_ReportImage_ReportImageView (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_SaneSizeImageSize q
                                                                                                                                                                                                                                        z) = Peek_ReportImage_SaneSizeImageSize (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_URI q
                                                                                                                                                                                                                          z) = Peek_ReportImage_URI (Path_ReportImage_View q) z
                                                                                                                                                                                       liftPeek (Peek_ReportImageView_Text q
                                                                                                                                                                                                                           z) = Peek_ReportImage_Text (Path_ReportImage_View q) z
                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportImageView])
                                               _ -> []) (paths _s (Proxy :: Proxy ReportImageView)) :: Forest (Peek ReportImage)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_ReportImage_View _wp) -> map (\a -> Peek_ReportImage_ReportImageView _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportImageView])
                                              _ -> []) (paths _s (Proxy :: Proxy ReportImageView)) :: [Peek ReportImage]
instance PathStart ReportImages
    where data Peek ReportImages
              = Peek_ReportImages_String (Path ReportImages String) (Maybe String)
              | Peek_ReportImages_Bool (Path ReportImages Bool) (Maybe Bool)
              | Peek_ReportImages_Double (Path ReportImages Double) (Maybe Double)
              | Peek_ReportImages_Dimension (Path ReportImages Dimension) (Maybe Dimension)
              | Peek_ReportImages_ImageCrop (Path ReportImages ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImages_ImageSize (Path ReportImages ImageSize) (Maybe ImageSize)
              | Peek_ReportImages_Units (Path ReportImages Units) (Maybe Units)
              | Peek_ReportImages_ImageFile (Path ReportImages ImageFile) (Maybe ImageFile)
              | Peek_ReportImages_JSONText (Path ReportImages JSONText) (Maybe JSONText)
              | Peek_ReportImages_Markup (Path ReportImages Markup) (Maybe Markup)
              | Peek_ReportImages_EUI (Path ReportImages EUI) (Maybe EUI)
              | Peek_ReportImages_MEUI (Path ReportImages MEUI) (Maybe MEUI)
              | Peek_ReportImages_MaybeImageFile (Path ReportImages MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImages_ReportImage (Path ReportImages ReportImage) (Maybe ReportImage)
              | Peek_ReportImages_ReportImages (Path ReportImages ReportImages) (Maybe ReportImages)
              | Peek_ReportImages_ReportImageView (Path ReportImages ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImages_SaneSizeImageSize (Path ReportImages SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImages_URI (Path ReportImages URI) (Maybe URI)
              | Peek_ReportImages_Text (Path ReportImages Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_At _k _wp) -> map (\a -> let f = peekTree a
                                                                                   in Node (Peek_ReportImages_ReportImage _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportImage_String q
                                                                                                                                                                                                           z) = Peek_ReportImages_String (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Bool q z) = Peek_ReportImages_Bool (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Double q
                                                                                                                                                                                                           z) = Peek_ReportImages_Double (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Dimension q
                                                                                                                                                                                                              z) = Peek_ReportImages_Dimension (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_ImageCrop q
                                                                                                                                                                                                              z) = Peek_ReportImages_ImageCrop (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_ImageSize q
                                                                                                                                                                                                              z) = Peek_ReportImages_ImageSize (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Units q z) = Peek_ReportImages_Units (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_ImageFile q
                                                                                                                                                                                                              z) = Peek_ReportImages_ImageFile (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_JSONText q
                                                                                                                                                                                                             z) = Peek_ReportImages_JSONText (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Markup q
                                                                                                                                                                                                           z) = Peek_ReportImages_Markup (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_EUI q z) = Peek_ReportImages_EUI (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_MEUI q z) = Peek_ReportImages_MEUI (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_MaybeImageFile q
                                                                                                                                                                                                                   z) = Peek_ReportImages_MaybeImageFile (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_ReportImage q
                                                                                                                                                                                                                z) = Peek_ReportImages_ReportImage (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_ReportImageView q
                                                                                                                                                                                                                    z) = Peek_ReportImages_ReportImageView (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_SaneSizeImageSize q
                                                                                                                                                                                                                      z) = Peek_ReportImages_SaneSizeImageSize (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_URI q z) = Peek_ReportImages_URI (Path_At _k q) z
                                                                                                                                                                         liftPeek (Peek_ReportImage_Text q z) = Peek_ReportImages_Text (Path_At _k q) z
                                                                                                                                                                      in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportImage])
                                               _ -> []) (paths _s (Proxy :: Proxy ReportImage)) :: Forest (Peek ReportImages)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_At _k _wp) -> map (\a -> Peek_ReportImages_ReportImage _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportImage])
                                              _ -> []) (paths _s (Proxy :: Proxy ReportImage)) :: [Peek ReportImages]
instance PathStart ReadOnlyFilePath
    where data Peek ReadOnlyFilePath
              = Peek_ReadOnlyFilePath_String (Path ReadOnlyFilePath String) (Maybe String)
              | Peek_ReadOnlyFilePath_JSONText (Path ReadOnlyFilePath JSONText) (Maybe JSONText)
              | Peek_ReadOnlyFilePath_ReadOnlyFilePath (Path ReadOnlyFilePath ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> let f = peekTree a
                                                                                                   in Node (Peek_ReadOnlyFilePath_String _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_String_String q
                                                                                                                                                                                                                     z) = Peek_ReadOnlyFilePath_String (Path_ReadOnlyFilePath_View q) z
                                                                                                                                                                                        liftPeek (Peek_String_JSONText q
                                                                                                                                                                                                                       z) = Peek_ReadOnlyFilePath_JSONText (Path_ReadOnlyFilePath_View q) z
                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [String])
                                               _ -> []) (paths _s (Proxy :: Proxy String)) :: Forest (Peek ReadOnlyFilePath)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> Peek_ReadOnlyFilePath_String _pp (Just a)) (toListOf (toLens _pp) _s :: [String])
                                              _ -> []) (paths _s (Proxy :: Proxy String)) :: [Peek ReadOnlyFilePath]
instance PathStart ReportImageView
    where data Peek ReportImageView
              = Peek_ReportImageView_String (Path ReportImageView String) (Maybe String)
              | Peek_ReportImageView_Bool (Path ReportImageView Bool) (Maybe Bool)
              | Peek_ReportImageView_Double (Path ReportImageView Double) (Maybe Double)
              | Peek_ReportImageView_Dimension (Path ReportImageView Dimension) (Maybe Dimension)
              | Peek_ReportImageView_ImageCrop (Path ReportImageView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImageView_ImageSize (Path ReportImageView ImageSize) (Maybe ImageSize)
              | Peek_ReportImageView_Units (Path ReportImageView Units) (Maybe Units)
              | Peek_ReportImageView_ImageFile (Path ReportImageView ImageFile) (Maybe ImageFile)
              | Peek_ReportImageView_JSONText (Path ReportImageView JSONText) (Maybe JSONText)
              | Peek_ReportImageView_Markup (Path ReportImageView Markup) (Maybe Markup)
              | Peek_ReportImageView_EUI (Path ReportImageView EUI) (Maybe EUI)
              | Peek_ReportImageView_MEUI (Path ReportImageView MEUI) (Maybe MEUI)
              | Peek_ReportImageView_MaybeImageFile (Path ReportImageView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImageView_ReportImageView (Path ReportImageView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImageView_SaneSizeImageSize (Path ReportImageView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImageView_URI (Path ReportImageView URI) (Maybe URI)
              | Peek_ReportImageView_Text (Path ReportImageView Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(ReportImageView {})) = mconcat [concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picSize _wp) -> map (\a -> let f = peekTree a
                                                                                                                                      in Node (Peek_ReportImageView_SaneSizeImageSize _pp (if null f
                                                                                                                                                                                            then Just a
                                                                                                                                                                                            else Nothing)) (let liftPeek (Peek_SaneSizeImageSize_String q
                                                                                                                                                                                                                                                        z) = Peek_ReportImageView_String (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_Double q
                                                                                                                                                                                                                                                        z) = Peek_ReportImageView_Double (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_Dimension q
                                                                                                                                                                                                                                                           z) = Peek_ReportImageView_Dimension (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_ImageSize q
                                                                                                                                                                                                                                                           z) = Peek_ReportImageView_ImageSize (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_Units q
                                                                                                                                                                                                                                                       z) = Peek_ReportImageView_Units (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_JSONText q
                                                                                                                                                                                                                                                          z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                                liftPeek (Peek_SaneSizeImageSize_SaneSizeImageSize q
                                                                                                                                                                                                                                                                   z) = Peek_ReportImageView_SaneSizeImageSize (Path_ReportImageView__picSize q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [SaneSizeImageSize])
                                                                               _ -> []) (paths _s (Proxy :: Proxy SaneSizeImageSize)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picCrop _wp) -> map (\a -> let f = peekTree a
                                                                                                                                      in Node (Peek_ReportImageView_ImageCrop _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (let liftPeek (Peek_ImageCrop_ImageCrop q
                                                                                                                                                                                                                                           z) = Peek_ReportImageView_ImageCrop (Path_ReportImageView__picCrop q) z
                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageCrop])
                                                                               _ -> []) (paths _s (Proxy :: Proxy ImageCrop)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picCaption _wp) -> map (\a -> let f = peekTree a
                                                                                                                                         in Node (Peek_ReportImageView_Markup _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                       z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picCaption q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                     z) = Peek_ReportImageView_Markup (Path_ReportImageView__picCaption q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                   z) = Peek_ReportImageView_Text (Path_ReportImageView__picCaption q) z
                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                               _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picOriginal _wp) -> map (\a -> let f = peekTree a
                                                                                                                                          in Node (Peek_ReportImageView_MEUI _pp (if null f
                                                                                                                                                                                   then Just a
                                                                                                                                                                                   else Nothing)) (let liftPeek (Peek_MEUI_ImageFile q
                                                                                                                                                                                                                                     z) = Peek_ReportImageView_ImageFile (Path_ReportImageView__picOriginal q) z
                                                                                                                                                                                                       liftPeek (Peek_MEUI_EUI q
                                                                                                                                                                                                                               z) = Peek_ReportImageView_EUI (Path_ReportImageView__picOriginal q) z
                                                                                                                                                                                                       liftPeek (Peek_MEUI_MEUI q
                                                                                                                                                                                                                                z) = Peek_ReportImageView_MEUI (Path_ReportImageView__picOriginal q) z
                                                                                                                                                                                                       liftPeek (Peek_MEUI_URI q
                                                                                                                                                                                                                               z) = Peek_ReportImageView_URI (Path_ReportImageView__picOriginal q) z
                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MEUI])
                                                                               _ -> []) (paths _s (Proxy :: Proxy MEUI)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                  in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                     then Just a
                                                                                                                                                                                                     else Nothing)) (let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                              z) = Peek_ReportImageView_String (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                                                                                         liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                                z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                                                                                         liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                      z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                                                                                      in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                               _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                 in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                    then Just a
                                                                                                                                                                                                    else Nothing)) (let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                             z) = Peek_ReportImageView_String (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                                                                                        liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                               z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                                                                                        liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                     z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                               _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                   in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                      then Just a
                                                                                                                                                                                                      else Nothing)) (let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                               z) = Peek_ReportImageView_String (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                                                                                          liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                                 z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                                                                                          liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                       z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                                                                                       in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                               _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> let f = peekTree a
                                                                                                                                             in Node (Peek_ReportImageView_Bool _pp (if null f
                                                                                                                                                                                      then Just a
                                                                                                                                                                                      else Nothing)) (let liftPeek (Peek_Bool_String q
                                                                                                                                                                                                                                     z) = Peek_ReportImageView_String (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                                                                                          liftPeek (Peek_Bool_Bool q
                                                                                                                                                                                                                                   z) = Peek_ReportImageView_Bool (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                                                                                          liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                                                                                       z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                                                                                       in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                               _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> let f = peekTree a
                                                                                                                                                    in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                       then Just a
                                                                                                                                                                                                       else Nothing)) (let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                                                                                                z) = Peek_ReportImageView_String (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                                                                                           liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                                                                                                  z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                                                                                           liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                                                                                        z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                                                                                        in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                               _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile))] :: Forest (Peek ReportImageView)
          peekRow (_s@(ReportImageView {})) = mconcat [concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picSize _wp) -> map (\a -> Peek_ReportImageView_SaneSizeImageSize _pp (Just a)) (toListOf (toLens _pp) _s :: [SaneSizeImageSize])
                                                                              _ -> []) (paths _s (Proxy :: Proxy SaneSizeImageSize)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picCrop _wp) -> map (\a -> Peek_ReportImageView_ImageCrop _pp (Just a)) (toListOf (toLens _pp) _s :: [ImageCrop])
                                                                              _ -> []) (paths _s (Proxy :: Proxy ImageCrop)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picCaption _wp) -> map (\a -> Peek_ReportImageView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                              _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picOriginal _wp) -> map (\a -> Peek_ReportImageView_MEUI _pp (Just a)) (toListOf (toLens _pp) _s :: [MEUI])
                                                                              _ -> []) (paths _s (Proxy :: Proxy MEUI)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> Peek_ReportImageView_MaybeImageFile _pp (Just a)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                              _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> Peek_ReportImageView_MaybeImageFile _pp (Just a)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                              _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> Peek_ReportImageView_MaybeImageFile _pp (Just a)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                              _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> Peek_ReportImageView_Bool _pp (Just a)) (toListOf (toLens _pp) _s :: [Bool])
                                                                              _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> Peek_ReportImageView_MaybeImageFile _pp (Just a)) (toListOf (toLens _pp) _s :: [MaybeImageFile])
                                                                              _ -> []) (paths _s (Proxy :: Proxy MaybeImageFile))] :: [Peek ReportImageView]
instance PathStart ReportView
    where data Peek ReportView
              = Peek_ReportView_String (Path ReportView String) (Maybe String)
              | Peek_ReportView_Int64 (Path ReportView Int64) (Maybe Int64)
              | Peek_ReportView_Int (Path ReportView Int) (Maybe Int)
              | Peek_ReportView_Bool (Path ReportView Bool) (Maybe Bool)
              | Peek_ReportView_Double (Path ReportView Double) (Maybe Double)
              | Peek_ReportView_Dimension (Path ReportView Dimension) (Maybe Dimension)
              | Peek_ReportView_ImageCrop (Path ReportView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportView_ImageSize (Path ReportView ImageSize) (Maybe ImageSize)
              | Peek_ReportView_Units (Path ReportView Units) (Maybe Units)
              | Peek_ReportView_ImageFile (Path ReportView ImageFile) (Maybe ImageFile)
              | Peek_ReportView_Integer (Path ReportView Integer) (Maybe Integer)
              | Peek_ReportView_JSONText (Path ReportView JSONText) (Maybe JSONText)
              | Peek_ReportView_Markup (Path ReportView Markup) (Maybe Markup)
              | Peek_ReportView_Permissions (Path ReportView Permissions) (Maybe Permissions)
              | Peek_ReportView_UserIds (Path ReportView UserIds) (Maybe UserIds)
              | Peek_ReportView_AbbrevPair (Path ReportView AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportView_AbbrevPairs (Path ReportView AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportView_Author (Path ReportView Author) (Maybe Author)
              | Peek_ReportView_Authors (Path ReportView Authors) (Maybe Authors)
              | Peek_ReportView_Branding (Path ReportView Branding) (Maybe Branding)
              | Peek_ReportView_MarkupPair (Path ReportView MarkupPair) (Maybe MarkupPair)
              | Peek_ReportView_MarkupPairs (Path ReportView MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportView_Markups (Path ReportView Markups) (Maybe Markups)
              | Peek_ReportView_MaybeReportIntendedUse (Path ReportView MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportView_ReportElem (Path ReportView ReportElem) (Maybe ReportElem)
              | Peek_ReportView_ReportElems (Path ReportView ReportElems) (Maybe ReportElems)
              | Peek_ReportView_ReportFlags (Path ReportView ReportFlags) (Maybe ReportFlags)
              | Peek_ReportView_ReportStandard (Path ReportView ReportStandard) (Maybe ReportStandard)
              | Peek_ReportView_ReportStatus (Path ReportView ReportStatus) (Maybe ReportStatus)
              | Peek_ReportView_ReportValueApproachInfo (Path ReportView ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportView_ReportValueTypeInfo (Path ReportView ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportView_EUI (Path ReportView EUI) (Maybe EUI)
              | Peek_ReportView_MEUI (Path ReportView MEUI) (Maybe MEUI)
              | Peek_ReportView_MaybeImageFile (Path ReportView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportView_ReportImage (Path ReportView ReportImage) (Maybe ReportImage)
              | Peek_ReportView_ReportImages (Path ReportView ReportImages) (Maybe ReportImages)
              | Peek_ReportView_ReadOnlyFilePath (Path ReportView ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportView_ReportImageView (Path ReportView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportView_ReportView (Path ReportView ReportView) (Maybe ReportView)
              | Peek_ReportView_SaneSizeImageSize (Path ReportView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportView_Item (Path ReportView Item) (Maybe Item)
              | Peek_ReportView_MIM (Path ReportView MIM) (Maybe MIM)
              | Peek_ReportView_CIString (Path ReportView CIString) (Maybe CIString)
              | Peek_ReportView_URI (Path ReportView URI) (Maybe URI)
              | Peek_ReportView_Text (Path ReportView Text) (Maybe Text)
              | Peek_ReportView_UserId (Path ReportView UserId) (Maybe UserId)
              | Peek_ReportView_UUID (Path ReportView UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (_s@(ReportView {})) = mconcat [concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportFolder _wp) -> map (\a -> let f = peekTree a
                                                                                                                                 in Node (Peek_ReportView_ReadOnlyFilePath _pp (if null f
                                                                                                                                                                                 then Just a
                                                                                                                                                                                 else Nothing)) (let liftPeek (Peek_ReadOnlyFilePath_String q
                                                                                                                                                                                                                                            z) = Peek_ReportView_String (Path_ReportView__reportFolder q) z
                                                                                                                                                                                                     liftPeek (Peek_ReadOnlyFilePath_JSONText q
                                                                                                                                                                                                                                              z) = Peek_ReportView_JSONText (Path_ReportView__reportFolder q) z
                                                                                                                                                                                                     liftPeek (Peek_ReadOnlyFilePath_ReadOnlyFilePath q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_ReadOnlyFilePath (Path_ReportView__reportFolder q) z
                                                                                                                                                                                                  in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReadOnlyFilePath])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReadOnlyFilePath)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportName _wp) -> map (\a -> let f = peekTree a
                                                                                                                               in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                             z) = Peek_ReportView_JSONText (Path_ReportView__reportName q) z
                                                                                                                                                                                                              liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                           z) = Peek_ReportView_Markup (Path_ReportView__reportName q) z
                                                                                                                                                                                                              liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                         z) = Peek_ReportView_Text (Path_ReportView__reportName q) z
                                                                                                                                                                                                           in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportDate _wp) -> map (\a -> let f = peekTree a
                                                                                                                               in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                             z) = Peek_ReportView_JSONText (Path_ReportView__reportDate q) z
                                                                                                                                                                                                              liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                           z) = Peek_ReportView_Markup (Path_ReportView__reportDate q) z
                                                                                                                                                                                                              liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                         z) = Peek_ReportView_Text (Path_ReportView__reportDate q) z
                                                                                                                                                                                                           in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportContractDate _wp) -> map (\a -> let f = peekTree a
                                                                                                                                       in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_JSONText (Path_ReportView__reportContractDate q) z
                                                                                                                                                                                                                      liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Markup (Path_ReportView__reportContractDate q) z
                                                                                                                                                                                                                      liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Text (Path_ReportView__reportContractDate q) z
                                                                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> let f = peekTree a
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportInspectionDate q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportInspectionDate q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportInspectionDate q) z
                                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportAuthors _wp) -> map (\a -> let f = peekTree a
                                                                                                                                  in Node (Peek_ReportView_Authors _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Authors_JSONText q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_JSONText (Path_ReportView__reportAuthors q) z
                                                                                                                                                                                                                  liftPeek (Peek_Authors_Markup q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Markup (Path_ReportView__reportAuthors q) z
                                                                                                                                                                                                                  liftPeek (Peek_Authors_Author q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Author (Path_ReportView__reportAuthors q) z
                                                                                                                                                                                                                  liftPeek (Peek_Authors_Authors q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Authors (Path_ReportView__reportAuthors q) z
                                                                                                                                                                                                                  liftPeek (Peek_Authors_Text q
                                                                                                                                                                                                                                              z) = Peek_ReportView_Text (Path_ReportView__reportAuthors q) z
                                                                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Authors])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Authors)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPreparer _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparer q) z
                                                                                                                                                                                                                  liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                               z) = Peek_ReportView_Markup (Path_ReportView__reportPreparer q) z
                                                                                                                                                                                                                  liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                             z) = Peek_ReportView_Text (Path_ReportView__reportPreparer q) z
                                                                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> let f = peekTree a
                                                                                                                                      in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                                                                                                     liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                                                                                                     liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Text (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                                                                                                  in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> let f = peekTree a
                                                                                                                                          in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                                                                                                         liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                                                                                                         liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Text (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                                                                                                      in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> let f = peekTree a
                                                                                                                                          in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                                                                                                         liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                                                                                                         liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Text (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                                                                                                      in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> let f = peekTree a
                                                                                                                                  in Node (Peek_ReportView_AbbrevPairs _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (let liftPeek (Peek_AbbrevPairs_JSONText q
                                                                                                                                                                                                                                     z) = Peek_ReportView_JSONText (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                                 liftPeek (Peek_AbbrevPairs_Markup q
                                                                                                                                                                                                                                   z) = Peek_ReportView_Markup (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                                 liftPeek (Peek_AbbrevPairs_AbbrevPair q
                                                                                                                                                                                                                                       z) = Peek_ReportView_AbbrevPair (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                                 liftPeek (Peek_AbbrevPairs_AbbrevPairs q
                                                                                                                                                                                                                                        z) = Peek_ReportView_AbbrevPairs (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                                 liftPeek (Peek_AbbrevPairs_CIString q
                                                                                                                                                                                                                                     z) = Peek_ReportView_CIString (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                                 liftPeek (Peek_AbbrevPairs_Text q
                                                                                                                                                                                                                                 z) = Peek_ReportView_Text (Path_ReportView__reportAbbrevs q) z
                                                                                                                                                                                              in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [AbbrevPairs])
                                                                          _ -> []) (paths _s (Proxy :: Proxy AbbrevPairs)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportTitle _wp) -> map (\a -> let f = peekTree a
                                                                                                                                in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                              z) = Peek_ReportView_JSONText (Path_ReportView__reportTitle q) z
                                                                                                                                                                                                               liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                            z) = Peek_ReportView_Markup (Path_ReportView__reportTitle q) z
                                                                                                                                                                                                               liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                          z) = Peek_ReportView_Text (Path_ReportView__reportTitle q) z
                                                                                                                                                                                                            in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportHeader _wp) -> map (\a -> let f = peekTree a
                                                                                                                                 in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                               z) = Peek_ReportView_JSONText (Path_ReportView__reportHeader q) z
                                                                                                                                                                                                                liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                             z) = Peek_ReportView_Markup (Path_ReportView__reportHeader q) z
                                                                                                                                                                                                                liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                           z) = Peek_ReportView_Text (Path_ReportView__reportHeader q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportFooter _wp) -> map (\a -> let f = peekTree a
                                                                                                                                 in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                               z) = Peek_ReportView_JSONText (Path_ReportView__reportFooter q) z
                                                                                                                                                                                                                liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                             z) = Peek_ReportView_Markup (Path_ReportView__reportFooter q) z
                                                                                                                                                                                                                liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                           z) = Peek_ReportView_Text (Path_ReportView__reportFooter q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> let f = peekTree a
                                                                                                                                      in Node (Peek_ReportView_MaybeReportIntendedUse _pp (if null f
                                                                                                                                                                                            then Just a
                                                                                                                                                                                            else Nothing)) (let liftPeek (Peek_MaybeReportIntendedUse_String q
                                                                                                                                                                                                                                                             z) = Peek_ReportView_String (Path_ReportView__reportIntendedUse q) z
                                                                                                                                                                                                                liftPeek (Peek_MaybeReportIntendedUse_JSONText q
                                                                                                                                                                                                                                                               z) = Peek_ReportView_JSONText (Path_ReportView__reportIntendedUse q) z
                                                                                                                                                                                                                liftPeek (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse q
                                                                                                                                                                                                                                                                             z) = Peek_ReportView_MaybeReportIntendedUse (Path_ReportView__reportIntendedUse q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MaybeReportIntendedUse])
                                                                          _ -> []) (paths _s (Proxy :: Proxy MaybeReportIntendedUse)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_ReportValueTypeInfo _pp (if null f
                                                                                                                                                                                           then Just a
                                                                                                                                                                                           else Nothing)) (let liftPeek (Peek_ReportValueTypeInfo_JSONText q
                                                                                                                                                                                                                                                           z) = Peek_ReportView_JSONText (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                                                                                               liftPeek (Peek_ReportValueTypeInfo_Markup q
                                                                                                                                                                                                                                                         z) = Peek_ReportView_Markup (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                                                                                               liftPeek (Peek_ReportValueTypeInfo_ReportValueTypeInfo q
                                                                                                                                                                                                                                                                      z) = Peek_ReportView_ReportValueTypeInfo (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                                                                                               liftPeek (Peek_ReportValueTypeInfo_Text q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_Text (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                                                                                            in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportValueTypeInfo])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportValueTypeInfo)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> let f = peekTree a
                                                                                                                                            in Node (Peek_ReportView_ReportValueApproachInfo _pp (if null f
                                                                                                                                                                                                   then Just a
                                                                                                                                                                                                   else Nothing)) (let liftPeek (Peek_ReportValueApproachInfo_JSONText q
                                                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                                                                                                       liftPeek (Peek_ReportValueApproachInfo_Markup q
                                                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                                                                                                       liftPeek (Peek_ReportValueApproachInfo_ReportValueApproachInfo q
                                                                                                                                                                                                                                                                                      z) = Peek_ReportView_ReportValueApproachInfo (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                                                                                                       liftPeek (Peek_ReportValueApproachInfo_Text q
                                                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportValueApproachInfo])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportValueApproachInfo)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportClientName _wp) -> map (\a -> let f = peekTree a
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_JSONText (Path_ReportView__reportClientName q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Markup (Path_ReportView__reportClientName q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                               z) = Peek_ReportView_Text (Path_ReportView__reportClientName q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportClientAddress _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportClientAddress q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportClientAddress q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportClientAddress q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> let f = peekTree a
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportClientGreeting q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportClientGreeting q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportClientGreeting q) z
                                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> let f = peekTree a
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> let f = peekTree a
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_JSONText (Path_ReportView__reportItemsOwner q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Markup (Path_ReportView__reportItemsOwner q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                               z) = Peek_ReportView_Text (Path_ReportView__reportItemsOwner q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportBriefItems _wp) -> map (\a -> let f = peekTree a
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_JSONText (Path_ReportView__reportBriefItems q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Markup (Path_ReportView__reportBriefItems q) z
                                                                                                                                                                                                                    liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                               z) = Peek_ReportView_Text (Path_ReportView__reportBriefItems q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> let f = peekTree a
                                                                                                                                             in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                   then Just a
                                                                                                                                                                                   else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportBody _wp) -> map (\a -> let f = peekTree a
                                                                                                                               in Node (Peek_ReportView_ReportElems _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportElems_String q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_String (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Bool q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Bool (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Double q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Double (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Dimension q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_Dimension (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ImageCrop q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_ImageCrop (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ImageSize q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_ImageSize (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Units q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Units (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ImageFile q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_ImageFile (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_JSONText q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Markup q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ReportElem q
                                                                                                                                                                                                                                                         z) = Peek_ReportView_ReportElem (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ReportElems q
                                                                                                                                                                                                                                                          z) = Peek_ReportView_ReportElems (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_EUI q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_EUI (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_MEUI q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_MEUI (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_MaybeImageFile q
                                                                                                                                                                                                                                                             z) = Peek_ReportView_MaybeImageFile (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ReportImage q
                                                                                                                                                                                                                                                          z) = Peek_ReportView_ReportImage (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ReportImages q
                                                                                                                                                                                                                                                           z) = Peek_ReportView_ReportImages (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_ReportImageView q
                                                                                                                                                                                                                                                              z) = Peek_ReportView_ReportImageView (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_SaneSizeImageSize q
                                                                                                                                                                                                                                                                z) = Peek_ReportView_SaneSizeImageSize (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Item q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Item (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_MIM q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_MIM (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_URI q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_URI (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                   liftPeek (Peek_ReportElems_Text q
                                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportBody q) z
                                                                                                                                                                                                                in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportElems])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportElems)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportGlossary _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportView_MarkupPairs _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (let liftPeek (Peek_MarkupPairs_JSONText q
                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportGlossary q) z
                                                                                                                                                                                                  liftPeek (Peek_MarkupPairs_Markup q
                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportGlossary q) z
                                                                                                                                                                                                  liftPeek (Peek_MarkupPairs_MarkupPair q
                                                                                                                                                                                                                                        z) = Peek_ReportView_MarkupPair (Path_ReportView__reportGlossary q) z
                                                                                                                                                                                                  liftPeek (Peek_MarkupPairs_MarkupPairs q
                                                                                                                                                                                                                                         z) = Peek_ReportView_MarkupPairs (Path_ReportView__reportGlossary q) z
                                                                                                                                                                                                  liftPeek (Peek_MarkupPairs_Text q
                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportGlossary q) z
                                                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MarkupPairs])
                                                                          _ -> []) (paths _s (Proxy :: Proxy MarkupPairs)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportSources _wp) -> map (\a -> let f = peekTree a
                                                                                                                                  in Node (Peek_ReportView_MarkupPairs _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (let liftPeek (Peek_MarkupPairs_JSONText q
                                                                                                                                                                                                                                     z) = Peek_ReportView_JSONText (Path_ReportView__reportSources q) z
                                                                                                                                                                                                 liftPeek (Peek_MarkupPairs_Markup q
                                                                                                                                                                                                                                   z) = Peek_ReportView_Markup (Path_ReportView__reportSources q) z
                                                                                                                                                                                                 liftPeek (Peek_MarkupPairs_MarkupPair q
                                                                                                                                                                                                                                       z) = Peek_ReportView_MarkupPair (Path_ReportView__reportSources q) z
                                                                                                                                                                                                 liftPeek (Peek_MarkupPairs_MarkupPairs q
                                                                                                                                                                                                                                        z) = Peek_ReportView_MarkupPairs (Path_ReportView__reportSources q) z
                                                                                                                                                                                                 liftPeek (Peek_MarkupPairs_Text q
                                                                                                                                                                                                                                 z) = Peek_ReportView_Text (Path_ReportView__reportSources q) z
                                                                                                                                                                                              in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MarkupPairs])
                                                                          _ -> []) (paths _s (Proxy :: Proxy MarkupPairs)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> let f = peekTree a
                                                                                                                                              in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                   z) = Peek_ReportView_Text (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> let f = peekTree a
                                                                                                                                      in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_JSONText (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                                                                                                     liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Markup (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                                                                                                     liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Text (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                                                                                                  in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportCertification _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_Markups _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markups_JSONText q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportCertification q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markups_Markup q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_Markup (Path_ReportView__reportCertification q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markups_Markups q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_Markups (Path_ReportView__reportCertification q) z
                                                                                                                                                                                                                        liftPeek (Peek_Markups_Text q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Text (Path_ReportView__reportCertification q) z
                                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markups])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markups)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> let f = peekTree a
                                                                                                                                             in Node (Peek_ReportView_Markups _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (let liftPeek (Peek_Markups_JSONText q
                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                                                                        liftPeek (Peek_Markups_Markup q
                                                                                                                                                                                                                                      z) = Peek_ReportView_Markup (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                                                                        liftPeek (Peek_Markups_Markups q
                                                                                                                                                                                                                                       z) = Peek_ReportView_Markups (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                                                                        liftPeek (Peek_Markups_Text q
                                                                                                                                                                                                                                    z) = Peek_ReportView_Text (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                                                                     in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markups])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markups)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> let f = peekTree a
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_JSONText (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Markup (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                                                                                                       liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Text (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportPerms _wp) -> map (\a -> let f = peekTree a
                                                                                                                                in Node (Peek_ReportView_Permissions _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Permissions_JSONText q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportPerms q) z
                                                                                                                                                                                                                    liftPeek (Peek_Permissions_Permissions q
                                                                                                                                                                                                                                                           z) = Peek_ReportView_Permissions (Path_ReportView__reportPerms q) z
                                                                                                                                                                                                                    liftPeek (Peek_Permissions_UserIds q
                                                                                                                                                                                                                                                       z) = Peek_ReportView_UserIds (Path_ReportView__reportPerms q) z
                                                                                                                                                                                                                    liftPeek (Peek_Permissions_Text q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Text (Path_ReportView__reportPerms q) z
                                                                                                                                                                                                                    liftPeek (Peek_Permissions_UserId q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_UserId (Path_ReportView__reportPerms q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Permissions])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Permissions)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportRevision _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportView_Integer _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Integer_Integer q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_Integer (Path_ReportView__reportRevision q) z
                                                                                                                                                                                                                in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Integer])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Integer)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportCreated _wp) -> map (\a -> let f = peekTree a
                                                                                                                                  in Node (Peek_ReportView_Int64 _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Int64_Int64 q
                                                                                                                                                                                                                                           z) = Peek_ReportView_Int64 (Path_ReportView__reportCreated q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Int64])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Int64)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportBranding _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportView_Branding _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Branding_JSONText q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_JSONText (Path_ReportView__reportBranding q) z
                                                                                                                                                                                                                    liftPeek (Peek_Branding_Branding q
                                                                                                                                                                                                                                                     z) = Peek_ReportView_Branding (Path_ReportView__reportBranding q) z
                                                                                                                                                                                                                    liftPeek (Peek_Branding_Text q
                                                                                                                                                                                                                                                 z) = Peek_ReportView_Text (Path_ReportView__reportBranding q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Branding])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Branding)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportStatus _wp) -> map (\a -> let f = peekTree a
                                                                                                                                 in Node (Peek_ReportView_ReportStatus _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportStatus_String q
                                                                                                                                                                                                                                                         z) = Peek_ReportView_String (Path_ReportView__reportStatus q) z
                                                                                                                                                                                                                      liftPeek (Peek_ReportStatus_JSONText q
                                                                                                                                                                                                                                                           z) = Peek_ReportView_JSONText (Path_ReportView__reportStatus q) z
                                                                                                                                                                                                                      liftPeek (Peek_ReportStatus_ReportStatus q
                                                                                                                                                                                                                                                               z) = Peek_ReportView_ReportStatus (Path_ReportView__reportStatus q) z
                                                                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportStatus])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportStatus)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportRedacted _wp) -> map (\a -> let f = peekTree a
                                                                                                                                   in Node (Peek_ReportView_Bool _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Bool_String q
                                                                                                                                                                                                                                           z) = Peek_ReportView_String (Path_ReportView__reportRedacted q) z
                                                                                                                                                                                                                liftPeek (Peek_Bool_Bool q
                                                                                                                                                                                                                                         z) = Peek_ReportView_Bool (Path_ReportView__reportRedacted q) z
                                                                                                                                                                                                                liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                                                                                             z) = Peek_ReportView_JSONText (Path_ReportView__reportRedacted q) z
                                                                                                                                                                                                             in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportFlags _wp) -> map (\a -> let f = peekTree a
                                                                                                                                in Node (Peek_ReportView_ReportFlags _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportFlags_String q
                                                                                                                                                                                                                                                      z) = Peek_ReportView_String (Path_ReportView__reportFlags q) z
                                                                                                                                                                                                                    liftPeek (Peek_ReportFlags_Bool q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_Bool (Path_ReportView__reportFlags q) z
                                                                                                                                                                                                                    liftPeek (Peek_ReportFlags_JSONText q
                                                                                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportFlags q) z
                                                                                                                                                                                                                    liftPeek (Peek_ReportFlags_ReportFlags q
                                                                                                                                                                                                                                                           z) = Peek_ReportView_ReportFlags (Path_ReportView__reportFlags q) z
                                                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportFlags])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportFlags)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportUUID _wp) -> map (\a -> let f = peekTree a
                                                                                                                               in Node (Peek_ReportView_UUID _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_UUID_UUID q
                                                                                                                                                                                                                                     z) = Peek_ReportView_UUID (Path_ReportView__reportUUID q) z
                                                                                                                                                                                                         in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UUID])
                                                                          _ -> []) (paths _s (Proxy :: Proxy UUID)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> let f = peekTree a
                                                                                                                                          in Node (Peek_ReportView_Bool _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Bool_String q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_String (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                                                                                                       liftPeek (Peek_Bool_Bool q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Bool (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                                                                                                       liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_JSONText (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> let f = peekTree a
                                                                                                                                          in Node (Peek_ReportView_Bool _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Bool_String q
                                                                                                                                                                                                                                                  z) = Peek_ReportView_String (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                                                                                                       liftPeek (Peek_Bool_Bool q
                                                                                                                                                                                                                                                z) = Peek_ReportView_Bool (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                                                                                                       liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                                                                                                    z) = Peek_ReportView_JSONText (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> let f = peekTree a
                                                                                                                                           in Node (Peek_ReportView_ReportStandard _pp (if null f
                                                                                                                                                                                         then Just a
                                                                                                                                                                                         else Nothing)) (let liftPeek (Peek_ReportStandard_Int q
                                                                                                                                                                                                                                               z) = Peek_ReportView_Int (Path_ReportView__reportStandardsVersion q) z
                                                                                                                                                                                                             liftPeek (Peek_ReportStandard_ReportStandard q
                                                                                                                                                                                                                                                          z) = Peek_ReportView_ReportStandard (Path_ReportView__reportStandardsVersion q) z
                                                                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportStandard])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ReportStandard))] :: Forest (Peek ReportView)
          peekRow (_s@(ReportView {})) = mconcat [concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportFolder _wp) -> map (\a -> Peek_ReportView_ReadOnlyFilePath _pp (Just a)) (toListOf (toLens _pp) _s :: [ReadOnlyFilePath])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReadOnlyFilePath)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportName _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportDate _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportContractDate _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportAuthors _wp) -> map (\a -> Peek_ReportView_Authors _pp (Just a)) (toListOf (toLens _pp) _s :: [Authors])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Authors)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPreparer _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> Peek_ReportView_AbbrevPairs _pp (Just a)) (toListOf (toLens _pp) _s :: [AbbrevPairs])
                                                                         _ -> []) (paths _s (Proxy :: Proxy AbbrevPairs)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportTitle _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportHeader _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportFooter _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> Peek_ReportView_MaybeReportIntendedUse _pp (Just a)) (toListOf (toLens _pp) _s :: [MaybeReportIntendedUse])
                                                                         _ -> []) (paths _s (Proxy :: Proxy MaybeReportIntendedUse)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> Peek_ReportView_ReportValueTypeInfo _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportValueTypeInfo])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportValueTypeInfo)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> Peek_ReportView_ReportValueApproachInfo _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportValueApproachInfo])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportValueApproachInfo)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportClientName _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportClientAddress _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportBriefItems _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportBody _wp) -> map (\a -> Peek_ReportView_ReportElems _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportElems])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportElems)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportGlossary _wp) -> map (\a -> Peek_ReportView_MarkupPairs _pp (Just a)) (toListOf (toLens _pp) _s :: [MarkupPairs])
                                                                         _ -> []) (paths _s (Proxy :: Proxy MarkupPairs)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportSources _wp) -> map (\a -> Peek_ReportView_MarkupPairs _pp (Just a)) (toListOf (toLens _pp) _s :: [MarkupPairs])
                                                                         _ -> []) (paths _s (Proxy :: Proxy MarkupPairs)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportCertification _wp) -> map (\a -> Peek_ReportView_Markups _pp (Just a)) (toListOf (toLens _pp) _s :: [Markups])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markups)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> Peek_ReportView_Markups _pp (Just a)) (toListOf (toLens _pp) _s :: [Markups])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markups)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> Peek_ReportView_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportPerms _wp) -> map (\a -> Peek_ReportView_Permissions _pp (Just a)) (toListOf (toLens _pp) _s :: [Permissions])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Permissions)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportRevision _wp) -> map (\a -> Peek_ReportView_Integer _pp (Just a)) (toListOf (toLens _pp) _s :: [Integer])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Integer)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportCreated _wp) -> map (\a -> Peek_ReportView_Int64 _pp (Just a)) (toListOf (toLens _pp) _s :: [Int64])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Int64)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportBranding _wp) -> map (\a -> Peek_ReportView_Branding _pp (Just a)) (toListOf (toLens _pp) _s :: [Branding])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Branding)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportStatus _wp) -> map (\a -> Peek_ReportView_ReportStatus _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportStatus])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportStatus)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportRedacted _wp) -> map (\a -> Peek_ReportView_Bool _pp (Just a)) (toListOf (toLens _pp) _s :: [Bool])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportFlags _wp) -> map (\a -> Peek_ReportView_ReportFlags _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportFlags])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportFlags)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportUUID _wp) -> map (\a -> Peek_ReportView_UUID _pp (Just a)) (toListOf (toLens _pp) _s :: [UUID])
                                                                         _ -> []) (paths _s (Proxy :: Proxy UUID)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> Peek_ReportView_Bool _pp (Just a)) (toListOf (toLens _pp) _s :: [Bool])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> Peek_ReportView_Bool _pp (Just a)) (toListOf (toLens _pp) _s :: [Bool])
                                                                         _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                  concatMap (\pth -> case pth of
                                                                         _pp@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> Peek_ReportView_ReportStandard _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportStandard])
                                                                         _ -> []) (paths _s (Proxy :: Proxy ReportStandard))] :: [Peek ReportView]
instance PathStart SaneSizeImageSize
    where data Peek SaneSizeImageSize
              = Peek_SaneSizeImageSize_String (Path SaneSizeImageSize String) (Maybe String)
              | Peek_SaneSizeImageSize_Double (Path SaneSizeImageSize Double) (Maybe Double)
              | Peek_SaneSizeImageSize_Dimension (Path SaneSizeImageSize Dimension) (Maybe Dimension)
              | Peek_SaneSizeImageSize_ImageSize (Path SaneSizeImageSize ImageSize) (Maybe ImageSize)
              | Peek_SaneSizeImageSize_Units (Path SaneSizeImageSize Units) (Maybe Units)
              | Peek_SaneSizeImageSize_JSONText (Path SaneSizeImageSize JSONText) (Maybe JSONText)
              | Peek_SaneSizeImageSize_SaneSizeImageSize (Path SaneSizeImageSize SaneSizeImageSize) (Maybe SaneSizeImageSize)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_SaneSizeImageSize_View _wp) -> map (\a -> let f = peekTree a
                                                                                                    in Node (Peek_SaneSizeImageSize_ImageSize _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ImageSize_String q
                                                                                                                                                                                                                             z) = Peek_SaneSizeImageSize_String (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                             liftPeek (Peek_ImageSize_Double q
                                                                                                                                                                                                                             z) = Peek_SaneSizeImageSize_Double (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                             liftPeek (Peek_ImageSize_Dimension q
                                                                                                                                                                                                                                z) = Peek_SaneSizeImageSize_Dimension (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                             liftPeek (Peek_ImageSize_ImageSize q
                                                                                                                                                                                                                                z) = Peek_SaneSizeImageSize_ImageSize (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                             liftPeek (Peek_ImageSize_Units q
                                                                                                                                                                                                                            z) = Peek_SaneSizeImageSize_Units (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                             liftPeek (Peek_ImageSize_JSONText q
                                                                                                                                                                                                                               z) = Peek_SaneSizeImageSize_JSONText (Path_SaneSizeImageSize_View q) z
                                                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageSize])
                                               _ -> []) (paths _s (Proxy :: Proxy ImageSize)) :: Forest (Peek SaneSizeImageSize)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_SaneSizeImageSize_View _wp) -> map (\a -> Peek_SaneSizeImageSize_ImageSize _pp (Just a)) (toListOf (toLens _pp) _s :: [ImageSize])
                                              _ -> []) (paths _s (Proxy :: Proxy ImageSize)) :: [Peek SaneSizeImageSize]
instance PathStart Item
    where data Peek Item
              = Peek_Item_String (Path Item String) (Maybe String)
              | Peek_Item_Bool (Path Item Bool) (Maybe Bool)
              | Peek_Item_Double (Path Item Double) (Maybe Double)
              | Peek_Item_Dimension (Path Item Dimension) (Maybe Dimension)
              | Peek_Item_ImageCrop (Path Item ImageCrop) (Maybe ImageCrop)
              | Peek_Item_ImageSize (Path Item ImageSize) (Maybe ImageSize)
              | Peek_Item_Units (Path Item Units) (Maybe Units)
              | Peek_Item_ImageFile (Path Item ImageFile) (Maybe ImageFile)
              | Peek_Item_JSONText (Path Item JSONText) (Maybe JSONText)
              | Peek_Item_Markup (Path Item Markup) (Maybe Markup)
              | Peek_Item_EUI (Path Item EUI) (Maybe EUI)
              | Peek_Item_MEUI (Path Item MEUI) (Maybe MEUI)
              | Peek_Item_MaybeImageFile (Path Item MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Item_ReportImage (Path Item ReportImage) (Maybe ReportImage)
              | Peek_Item_ReportImages (Path Item ReportImages) (Maybe ReportImages)
              | Peek_Item_ReportImageView (Path Item ReportImageView) (Maybe ReportImageView)
              | Peek_Item_SaneSizeImageSize (Path Item SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Item_Item (Path Item Item) (Maybe Item)
              | Peek_Item_MIM (Path Item MIM) (Maybe MIM)
              | Peek_Item_URI (Path Item URI) (Maybe URI)
              | Peek_Item_Text (Path Item Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (_s@(Item {})) = mconcat [concatMap (\pth -> case pth of
                                                                    _pp@(Path_Item_itemName _wp) -> map (\a -> let f = peekTree a
                                                                                                                in Node (Peek_Item_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q
                                                                                                                                                                                                                    z) = Peek_Item_JSONText (Path_Item_itemName q) z
                                                                                                                                                                                       liftPeek (Peek_Text_Text q
                                                                                                                                                                                                                z) = Peek_Item_Text (Path_Item_itemName q) z
                                                                                                                                                                                    in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                                    _ -> []) (paths _s (Proxy :: Proxy Text)),
                                             concatMap (\pth -> case pth of
                                                                    _pp@(Path_Item_fields _wp) -> map (\a -> let f = peekTree a
                                                                                                              in Node (Peek_Item_MIM _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_MIM_JSONText q
                                                                                                                                                                                                                z) = Peek_Item_JSONText (Path_Item_fields q) z
                                                                                                                                                                                    liftPeek (Peek_MIM_Markup q
                                                                                                                                                                                                              z) = Peek_Item_Markup (Path_Item_fields q) z
                                                                                                                                                                                    liftPeek (Peek_MIM_MIM q z) = Peek_Item_MIM (Path_Item_fields q) z
                                                                                                                                                                                    liftPeek (Peek_MIM_Text q z) = Peek_Item_Text (Path_Item_fields q) z
                                                                                                                                                                                 in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MIM])
                                                                    _ -> []) (paths _s (Proxy :: Proxy MIM)),
                                             concatMap (\pth -> case pth of
                                                                    _pp@(Path_Item_images _wp) -> map (\a -> let f = peekTree a
                                                                                                              in Node (Peek_Item_ReportImages _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_ReportImages_String q
                                                                                                                                                                                                                                z) = Peek_Item_String (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Bool q
                                                                                                                                                                                                                              z) = Peek_Item_Bool (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Double q
                                                                                                                                                                                                                                z) = Peek_Item_Double (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Dimension q
                                                                                                                                                                                                                                   z) = Peek_Item_Dimension (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ImageCrop q
                                                                                                                                                                                                                                   z) = Peek_Item_ImageCrop (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ImageSize q
                                                                                                                                                                                                                                   z) = Peek_Item_ImageSize (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Units q
                                                                                                                                                                                                                               z) = Peek_Item_Units (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ImageFile q
                                                                                                                                                                                                                                   z) = Peek_Item_ImageFile (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_JSONText q
                                                                                                                                                                                                                                  z) = Peek_Item_JSONText (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Markup q
                                                                                                                                                                                                                                z) = Peek_Item_Markup (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_EUI q
                                                                                                                                                                                                                             z) = Peek_Item_EUI (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_MEUI q
                                                                                                                                                                                                                              z) = Peek_Item_MEUI (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_MaybeImageFile q
                                                                                                                                                                                                                                        z) = Peek_Item_MaybeImageFile (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ReportImage q
                                                                                                                                                                                                                                     z) = Peek_Item_ReportImage (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ReportImages q
                                                                                                                                                                                                                                      z) = Peek_Item_ReportImages (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_ReportImageView q
                                                                                                                                                                                                                                         z) = Peek_Item_ReportImageView (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_SaneSizeImageSize q
                                                                                                                                                                                                                                           z) = Peek_Item_SaneSizeImageSize (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_URI q
                                                                                                                                                                                                                             z) = Peek_Item_URI (Path_Item_images q) z
                                                                                                                                                                                             liftPeek (Peek_ReportImages_Text q
                                                                                                                                                                                                                              z) = Peek_Item_Text (Path_Item_images q) z
                                                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportImages])
                                                                    _ -> []) (paths _s (Proxy :: Proxy ReportImages))] :: Forest (Peek Item)
          peekRow (_s@(Item {})) = mconcat [concatMap (\pth -> case pth of
                                                                   _pp@(Path_Item_itemName _wp) -> map (\a -> Peek_Item_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                                                   _ -> []) (paths _s (Proxy :: Proxy Text)),
                                            concatMap (\pth -> case pth of
                                                                   _pp@(Path_Item_fields _wp) -> map (\a -> Peek_Item_MIM _pp (Just a)) (toListOf (toLens _pp) _s :: [MIM])
                                                                   _ -> []) (paths _s (Proxy :: Proxy MIM)),
                                            concatMap (\pth -> case pth of
                                                                   _pp@(Path_Item_images _wp) -> map (\a -> Peek_Item_ReportImages _pp (Just a)) (toListOf (toLens _pp) _s :: [ReportImages])
                                                                   _ -> []) (paths _s (Proxy :: Proxy ReportImages))] :: [Peek Item]
instance PathStart MIM
    where data Peek MIM
              = Peek_MIM_JSONText (Path MIM JSONText) (Maybe JSONText)
              | Peek_MIM_Markup (Path MIM Markup) (Maybe Markup)
              | Peek_MIM_MIM (Path MIM MIM) (Maybe MIM)
              | Peek_MIM_Text (Path MIM Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Look _k _wp) -> map (\a -> let f = peekTree a
                                                                                     in Node (Peek_MIM_Markup _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Markup_JSONText q z) = Peek_MIM_JSONText (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Markup_Markup q z) = Peek_MIM_Markup (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Markup_Text q z) = Peek_MIM_Text (Path_Look _k q) z
                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                               _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek MIM)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Look _k _wp) -> map (\a -> Peek_MIM_Markup _pp (Just a)) (toListOf (toLens _pp) _s :: [Markup])
                                              _ -> []) (paths _s (Proxy :: Proxy Markup)) :: [Peek MIM]
instance PathStart MRR
    where data Peek MRR
              = Peek_MRR_String (Path MRR String) (Maybe String)
              | Peek_MRR_Int64 (Path MRR Int64) (Maybe Int64)
              | Peek_MRR_Int (Path MRR Int) (Maybe Int)
              | Peek_MRR_Bool (Path MRR Bool) (Maybe Bool)
              | Peek_MRR_Double (Path MRR Double) (Maybe Double)
              | Peek_MRR_Dimension (Path MRR Dimension) (Maybe Dimension)
              | Peek_MRR_ImageCrop (Path MRR ImageCrop) (Maybe ImageCrop)
              | Peek_MRR_ImageSize (Path MRR ImageSize) (Maybe ImageSize)
              | Peek_MRR_Units (Path MRR Units) (Maybe Units)
              | Peek_MRR_ImageFile (Path MRR ImageFile) (Maybe ImageFile)
              | Peek_MRR_Integer (Path MRR Integer) (Maybe Integer)
              | Peek_MRR_JSONText (Path MRR JSONText) (Maybe JSONText)
              | Peek_MRR_Markup (Path MRR Markup) (Maybe Markup)
              | Peek_MRR_Permissions (Path MRR Permissions) (Maybe Permissions)
              | Peek_MRR_UserIds (Path MRR UserIds) (Maybe UserIds)
              | Peek_MRR_AbbrevPair (Path MRR AbbrevPair) (Maybe AbbrevPair)
              | Peek_MRR_AbbrevPairs (Path MRR AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_MRR_Author (Path MRR Author) (Maybe Author)
              | Peek_MRR_Authors (Path MRR Authors) (Maybe Authors)
              | Peek_MRR_Branding (Path MRR Branding) (Maybe Branding)
              | Peek_MRR_MarkupPair (Path MRR MarkupPair) (Maybe MarkupPair)
              | Peek_MRR_MarkupPairs (Path MRR MarkupPairs) (Maybe MarkupPairs)
              | Peek_MRR_Markups (Path MRR Markups) (Maybe Markups)
              | Peek_MRR_MaybeReportIntendedUse (Path MRR MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_MRR_Report (Path MRR Report) (Maybe Report)
              | Peek_MRR_ReportElem (Path MRR ReportElem) (Maybe ReportElem)
              | Peek_MRR_ReportElems (Path MRR ReportElems) (Maybe ReportElems)
              | Peek_MRR_ReportFlags (Path MRR ReportFlags) (Maybe ReportFlags)
              | Peek_MRR_ReportStandard (Path MRR ReportStandard) (Maybe ReportStandard)
              | Peek_MRR_ReportStatus (Path MRR ReportStatus) (Maybe ReportStatus)
              | Peek_MRR_ReportValueApproachInfo (Path MRR ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_MRR_ReportValueTypeInfo (Path MRR ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_MRR_EUI (Path MRR EUI) (Maybe EUI)
              | Peek_MRR_MEUI (Path MRR MEUI) (Maybe MEUI)
              | Peek_MRR_MaybeImageFile (Path MRR MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_MRR_ReportImage (Path MRR ReportImage) (Maybe ReportImage)
              | Peek_MRR_ReportImages (Path MRR ReportImages) (Maybe ReportImages)
              | Peek_MRR_ReadOnlyFilePath (Path MRR ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_MRR_ReportImageView (Path MRR ReportImageView) (Maybe ReportImageView)
              | Peek_MRR_ReportView (Path MRR ReportView) (Maybe ReportView)
              | Peek_MRR_SaneSizeImageSize (Path MRR SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_MRR_Item (Path MRR Item) (Maybe Item)
              | Peek_MRR_MIM (Path MRR MIM) (Maybe MIM)
              | Peek_MRR_MRR (Path MRR MRR) (Maybe MRR)
              | Peek_MRR_CIString (Path MRR CIString) (Maybe CIString)
              | Peek_MRR_URI (Path MRR URI) (Maybe URI)
              | Peek_MRR_Text (Path MRR Text) (Maybe Text)
              | Peek_MRR_UserId (Path MRR UserId) (Maybe UserId)
              | Peek_MRR_UUID (Path MRR UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Look _k _wp) -> map (\a -> let f = peekTree a
                                                                                     in Node (Peek_MRR_Report _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Report_String q z) = Peek_MRR_String (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Int64 q z) = Peek_MRR_Int64 (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Int q z) = Peek_MRR_Int (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Bool q z) = Peek_MRR_Bool (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Double q z) = Peek_MRR_Double (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Dimension q z) = Peek_MRR_Dimension (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ImageCrop q z) = Peek_MRR_ImageCrop (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ImageSize q z) = Peek_MRR_ImageSize (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Units q z) = Peek_MRR_Units (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ImageFile q z) = Peek_MRR_ImageFile (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Integer q z) = Peek_MRR_Integer (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_JSONText q z) = Peek_MRR_JSONText (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Markup q z) = Peek_MRR_Markup (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Permissions q z) = Peek_MRR_Permissions (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_UserIds q z) = Peek_MRR_UserIds (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_AbbrevPair q z) = Peek_MRR_AbbrevPair (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_AbbrevPairs q z) = Peek_MRR_AbbrevPairs (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Author q z) = Peek_MRR_Author (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Authors q z) = Peek_MRR_Authors (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Branding q z) = Peek_MRR_Branding (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MarkupPair q z) = Peek_MRR_MarkupPair (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MarkupPairs q z) = Peek_MRR_MarkupPairs (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Markups q z) = Peek_MRR_Markups (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MaybeReportIntendedUse q
                                                                                                                                                                                                          z) = Peek_MRR_MaybeReportIntendedUse (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Report q z) = Peek_MRR_Report (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportElem q z) = Peek_MRR_ReportElem (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportElems q z) = Peek_MRR_ReportElems (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportFlags q z) = Peek_MRR_ReportFlags (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportStandard q z) = Peek_MRR_ReportStandard (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportStatus q z) = Peek_MRR_ReportStatus (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportValueApproachInfo q
                                                                                                                                                                                                           z) = Peek_MRR_ReportValueApproachInfo (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportValueTypeInfo q
                                                                                                                                                                                                       z) = Peek_MRR_ReportValueTypeInfo (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_EUI q z) = Peek_MRR_EUI (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MEUI q z) = Peek_MRR_MEUI (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MaybeImageFile q z) = Peek_MRR_MaybeImageFile (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportImage q z) = Peek_MRR_ReportImage (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportImages q z) = Peek_MRR_ReportImages (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReadOnlyFilePath q z) = Peek_MRR_ReadOnlyFilePath (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportImageView q z) = Peek_MRR_ReportImageView (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_ReportView q z) = Peek_MRR_ReportView (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_SaneSizeImageSize q z) = Peek_MRR_SaneSizeImageSize (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Item q z) = Peek_MRR_Item (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_MIM q z) = Peek_MRR_MIM (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_CIString q z) = Peek_MRR_CIString (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_URI q z) = Peek_MRR_URI (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_Text q z) = Peek_MRR_Text (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_UserId q z) = Peek_MRR_UserId (Path_Look _k q) z
                                                                                                                                                             liftPeek (Peek_Report_UUID q z) = Peek_MRR_UUID (Path_Look _k q) z
                                                                                                                                                          in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Report])
                                               _ -> []) (paths _s (Proxy :: Proxy Report)) :: Forest (Peek MRR)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Look _k _wp) -> map (\a -> Peek_MRR_Report _pp (Just a)) (toListOf (toLens _pp) _s :: [Report])
                                              _ -> []) (paths _s (Proxy :: Proxy Report)) :: [Peek MRR]
instance PathStart ReportMap
    where data Peek ReportMap
              = Peek_ReportMap_String (Path ReportMap String) (Maybe String)
              | Peek_ReportMap_Int64 (Path ReportMap Int64) (Maybe Int64)
              | Peek_ReportMap_Int (Path ReportMap Int) (Maybe Int)
              | Peek_ReportMap_Bool (Path ReportMap Bool) (Maybe Bool)
              | Peek_ReportMap_Double (Path ReportMap Double) (Maybe Double)
              | Peek_ReportMap_Dimension (Path ReportMap Dimension) (Maybe Dimension)
              | Peek_ReportMap_ImageCrop (Path ReportMap ImageCrop) (Maybe ImageCrop)
              | Peek_ReportMap_ImageSize (Path ReportMap ImageSize) (Maybe ImageSize)
              | Peek_ReportMap_Units (Path ReportMap Units) (Maybe Units)
              | Peek_ReportMap_ImageFile (Path ReportMap ImageFile) (Maybe ImageFile)
              | Peek_ReportMap_Integer (Path ReportMap Integer) (Maybe Integer)
              | Peek_ReportMap_JSONText (Path ReportMap JSONText) (Maybe JSONText)
              | Peek_ReportMap_Markup (Path ReportMap Markup) (Maybe Markup)
              | Peek_ReportMap_Permissions (Path ReportMap Permissions) (Maybe Permissions)
              | Peek_ReportMap_UserIds (Path ReportMap UserIds) (Maybe UserIds)
              | Peek_ReportMap_AbbrevPair (Path ReportMap AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportMap_AbbrevPairs (Path ReportMap AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportMap_Author (Path ReportMap Author) (Maybe Author)
              | Peek_ReportMap_Authors (Path ReportMap Authors) (Maybe Authors)
              | Peek_ReportMap_Branding (Path ReportMap Branding) (Maybe Branding)
              | Peek_ReportMap_MarkupPair (Path ReportMap MarkupPair) (Maybe MarkupPair)
              | Peek_ReportMap_MarkupPairs (Path ReportMap MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportMap_Markups (Path ReportMap Markups) (Maybe Markups)
              | Peek_ReportMap_MaybeReportIntendedUse (Path ReportMap MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportMap_Report (Path ReportMap Report) (Maybe Report)
              | Peek_ReportMap_ReportElem (Path ReportMap ReportElem) (Maybe ReportElem)
              | Peek_ReportMap_ReportElems (Path ReportMap ReportElems) (Maybe ReportElems)
              | Peek_ReportMap_ReportFlags (Path ReportMap ReportFlags) (Maybe ReportFlags)
              | Peek_ReportMap_ReportStandard (Path ReportMap ReportStandard) (Maybe ReportStandard)
              | Peek_ReportMap_ReportStatus (Path ReportMap ReportStatus) (Maybe ReportStatus)
              | Peek_ReportMap_ReportValueApproachInfo (Path ReportMap ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportMap_ReportValueTypeInfo (Path ReportMap ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportMap_EUI (Path ReportMap EUI) (Maybe EUI)
              | Peek_ReportMap_MEUI (Path ReportMap MEUI) (Maybe MEUI)
              | Peek_ReportMap_MaybeImageFile (Path ReportMap MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportMap_ReportImage (Path ReportMap ReportImage) (Maybe ReportImage)
              | Peek_ReportMap_ReportImages (Path ReportMap ReportImages) (Maybe ReportImages)
              | Peek_ReportMap_ReadOnlyFilePath (Path ReportMap ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportMap_ReportImageView (Path ReportMap ReportImageView) (Maybe ReportImageView)
              | Peek_ReportMap_ReportView (Path ReportMap ReportView) (Maybe ReportView)
              | Peek_ReportMap_SaneSizeImageSize (Path ReportMap SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportMap_Item (Path ReportMap Item) (Maybe Item)
              | Peek_ReportMap_MIM (Path ReportMap MIM) (Maybe MIM)
              | Peek_ReportMap_MRR (Path ReportMap MRR) (Maybe MRR)
              | Peek_ReportMap_ReportMap (Path ReportMap ReportMap) (Maybe ReportMap)
              | Peek_ReportMap_CIString (Path ReportMap CIString) (Maybe CIString)
              | Peek_ReportMap_URI (Path ReportMap URI) (Maybe URI)
              | Peek_ReportMap_Text (Path ReportMap Text) (Maybe Text)
              | Peek_ReportMap_UserId (Path ReportMap UserId) (Maybe UserId)
              | Peek_ReportMap_UUID (Path ReportMap UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (_s@(ReportMap {})) = concatMap (\pth -> case pth of
                                                                _pp@(Path_ReportMap_unReportMap _wp) -> map (\a -> let f = peekTree a
                                                                                                                    in Node (Peek_ReportMap_MRR _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_MRR_String q
                                                                                                                                                                                                                         z) = Peek_ReportMap_String (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Int64 q
                                                                                                                                                                                                                        z) = Peek_ReportMap_Int64 (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Int q
                                                                                                                                                                                                                      z) = Peek_ReportMap_Int (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Bool q
                                                                                                                                                                                                                       z) = Peek_ReportMap_Bool (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Double q
                                                                                                                                                                                                                         z) = Peek_ReportMap_Double (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Dimension q
                                                                                                                                                                                                                            z) = Peek_ReportMap_Dimension (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ImageCrop q
                                                                                                                                                                                                                            z) = Peek_ReportMap_ImageCrop (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ImageSize q
                                                                                                                                                                                                                            z) = Peek_ReportMap_ImageSize (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Units q
                                                                                                                                                                                                                        z) = Peek_ReportMap_Units (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ImageFile q
                                                                                                                                                                                                                            z) = Peek_ReportMap_ImageFile (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Integer q
                                                                                                                                                                                                                          z) = Peek_ReportMap_Integer (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_JSONText q
                                                                                                                                                                                                                           z) = Peek_ReportMap_JSONText (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Markup q
                                                                                                                                                                                                                         z) = Peek_ReportMap_Markup (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Permissions q
                                                                                                                                                                                                                              z) = Peek_ReportMap_Permissions (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_UserIds q
                                                                                                                                                                                                                          z) = Peek_ReportMap_UserIds (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_AbbrevPair q
                                                                                                                                                                                                                             z) = Peek_ReportMap_AbbrevPair (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_AbbrevPairs q
                                                                                                                                                                                                                              z) = Peek_ReportMap_AbbrevPairs (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Author q
                                                                                                                                                                                                                         z) = Peek_ReportMap_Author (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Authors q
                                                                                                                                                                                                                          z) = Peek_ReportMap_Authors (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Branding q
                                                                                                                                                                                                                           z) = Peek_ReportMap_Branding (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MarkupPair q
                                                                                                                                                                                                                             z) = Peek_ReportMap_MarkupPair (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MarkupPairs q
                                                                                                                                                                                                                              z) = Peek_ReportMap_MarkupPairs (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Markups q
                                                                                                                                                                                                                          z) = Peek_ReportMap_Markups (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MaybeReportIntendedUse q
                                                                                                                                                                                                                                         z) = Peek_ReportMap_MaybeReportIntendedUse (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Report q
                                                                                                                                                                                                                         z) = Peek_ReportMap_Report (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportElem q
                                                                                                                                                                                                                             z) = Peek_ReportMap_ReportElem (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportElems q
                                                                                                                                                                                                                              z) = Peek_ReportMap_ReportElems (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportFlags q
                                                                                                                                                                                                                              z) = Peek_ReportMap_ReportFlags (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportStandard q
                                                                                                                                                                                                                                 z) = Peek_ReportMap_ReportStandard (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportStatus q
                                                                                                                                                                                                                               z) = Peek_ReportMap_ReportStatus (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportValueApproachInfo q
                                                                                                                                                                                                                                          z) = Peek_ReportMap_ReportValueApproachInfo (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportValueTypeInfo q
                                                                                                                                                                                                                                      z) = Peek_ReportMap_ReportValueTypeInfo (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_EUI q
                                                                                                                                                                                                                      z) = Peek_ReportMap_EUI (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MEUI q
                                                                                                                                                                                                                       z) = Peek_ReportMap_MEUI (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MaybeImageFile q
                                                                                                                                                                                                                                 z) = Peek_ReportMap_MaybeImageFile (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportImage q
                                                                                                                                                                                                                              z) = Peek_ReportMap_ReportImage (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportImages q
                                                                                                                                                                                                                               z) = Peek_ReportMap_ReportImages (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReadOnlyFilePath q
                                                                                                                                                                                                                                   z) = Peek_ReportMap_ReadOnlyFilePath (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportImageView q
                                                                                                                                                                                                                                  z) = Peek_ReportMap_ReportImageView (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_ReportView q
                                                                                                                                                                                                                             z) = Peek_ReportMap_ReportView (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_SaneSizeImageSize q
                                                                                                                                                                                                                                    z) = Peek_ReportMap_SaneSizeImageSize (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Item q
                                                                                                                                                                                                                       z) = Peek_ReportMap_Item (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MIM q
                                                                                                                                                                                                                      z) = Peek_ReportMap_MIM (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_MRR q
                                                                                                                                                                                                                      z) = Peek_ReportMap_MRR (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_CIString q
                                                                                                                                                                                                                           z) = Peek_ReportMap_CIString (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_URI q
                                                                                                                                                                                                                      z) = Peek_ReportMap_URI (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_Text q
                                                                                                                                                                                                                       z) = Peek_ReportMap_Text (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_UserId q
                                                                                                                                                                                                                         z) = Peek_ReportMap_UserId (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                               liftPeek (Peek_MRR_UUID q
                                                                                                                                                                                                                       z) = Peek_ReportMap_UUID (Path_ReportMap_unReportMap q) z
                                                                                                                                                                                            in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [MRR])
                                                                _ -> []) (paths _s (Proxy :: Proxy MRR)) :: Forest (Peek ReportMap)
          peekRow (_s@(ReportMap {})) = concatMap (\pth -> case pth of
                                                               _pp@(Path_ReportMap_unReportMap _wp) -> map (\a -> Peek_ReportMap_MRR _pp (Just a)) (toListOf (toLens _pp) _s :: [MRR])
                                                               _ -> []) (paths _s (Proxy :: Proxy MRR)) :: [Peek ReportMap]
instance PathStart CIString
    where data Peek CIString
              = Peek_CIString_JSONText (Path CIString JSONText) (Maybe JSONText)
              | Peek_CIString_CIString (Path CIString CIString) (Maybe CIString)
              | Peek_CIString_Text (Path CIString Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_CIString_View _wp) -> map (\a -> let f = peekTree a
                                                                                           in Node (Peek_CIString_Text _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_Text_JSONText q z) = Peek_CIString_JSONText (Path_CIString_View q) z
                                                                                                                                                                      liftPeek (Peek_Text_Text q z) = Peek_CIString_Text (Path_CIString_View q) z
                                                                                                                                                                   in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                               _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek CIString)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_CIString_View _wp) -> map (\a -> Peek_CIString_Text _pp (Just a)) (toListOf (toLens _pp) _s :: [Text])
                                              _ -> []) (paths _s (Proxy :: Proxy Text)) :: [Peek CIString]
instance PathStart URI
    where data Peek URI = Peek_URI_URI (Path URI URI) (Maybe URI) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart Text
    where data Peek Text = Peek_Text_JSONText (Path Text JSONText) (Maybe JSONText) | Peek_Text_Text (Path Text Text) (Maybe Text) deriving (Eq, Show)
          peekTree _s = concatMap (\pth -> case pth of
                                               _pp@(Path_Text_View _wp) -> map (\a -> let f = peekTree a
                                                                                       in Node (Peek_Text_JSONText _pp (if null f then Just a else Nothing)) (let liftPeek (Peek_JSONText_JSONText q z) = Peek_Text_JSONText (Path_Text_View q) z
                                                                                                                                                               in forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                               _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Text)
          peekRow _s = concatMap (\pth -> case pth of
                                              _pp@(Path_Text_View _wp) -> map (\a -> Peek_Text_JSONText _pp (Just a)) (toListOf (toLens _pp) _s :: [JSONText])
                                              _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: [Peek Text]
instance PathStart UserId
    where data Peek UserId = Peek_UserId_UserId (Path UserId UserId) (Maybe UserId) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance PathStart UUID
    where data Peek UUID = Peek_UUID_UUID (Path UUID UUID) (Maybe UUID) deriving (Eq, Show)
          peekTree _ = []
          peekRow _ = []
instance ToLens (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
    where type S (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = EUI
          type A (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = ImageFile
          toLens (Path_Right _) = _Right
instance ToLens (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
    where type S (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          type A (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          toLens _ = id
instance ToLens (Path_Either (Path_URI URI) (Path_ImageFile URI))
    where type S (Path_Either (Path_URI URI) (Path_ImageFile URI)) = EUI
          type A (Path_Either (Path_URI URI) (Path_ImageFile URI)) = URI
          toLens (Path_Left _) = _Left
instance ToLens (Path_Map ItemFieldName (Path_Markup JSONText))
    where type S (Path_Map ItemFieldName (Path_Markup JSONText)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup Markup))
    where type S (Path_Map ItemFieldName (Path_Markup Markup)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Markup)) = Markup
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ItemFieldName (Path_Markup MIM))
    where type S (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          toLens _ = id
instance ToLens (Path_Map ItemFieldName (Path_Markup Text))
    where type S (Path_Map ItemFieldName (Path_Markup Text)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report String))
    where type S (Path_Map ReportID (Path_Report String)) = MRR
          type A (Path_Map ReportID (Path_Report String)) = String
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int64))
    where type S (Path_Map ReportID (Path_Report Int64)) = MRR
          type A (Path_Map ReportID (Path_Report Int64)) = Int64
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Bool))
    where type S (Path_Map ReportID (Path_Report Bool)) = MRR
          type A (Path_Map ReportID (Path_Report Bool)) = Bool
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Double))
    where type S (Path_Map ReportID (Path_Report Double)) = MRR
          type A (Path_Map ReportID (Path_Report Double)) = Double
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int))
    where type S (Path_Map ReportID (Path_Report Int)) = MRR
          type A (Path_Map ReportID (Path_Report Int)) = Int
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Dimension))
    where type S (Path_Map ReportID (Path_Report Dimension)) = MRR
          type A (Path_Map ReportID (Path_Report Dimension)) = Dimension
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageCrop))
    where type S (Path_Map ReportID (Path_Report ImageCrop)) = MRR
          type A (Path_Map ReportID (Path_Report ImageCrop)) = ImageCrop
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageSize))
    where type S (Path_Map ReportID (Path_Report ImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report ImageSize)) = ImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Units))
    where type S (Path_Map ReportID (Path_Report Units)) = MRR
          type A (Path_Map ReportID (Path_Report Units)) = Units
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageFile))
    where type S (Path_Map ReportID (Path_Report ImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report ImageFile)) = ImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Integer))
    where type S (Path_Map ReportID (Path_Report Integer)) = MRR
          type A (Path_Map ReportID (Path_Report Integer)) = Integer
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report JSONText))
    where type S (Path_Map ReportID (Path_Report JSONText)) = MRR
          type A (Path_Map ReportID (Path_Report JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markup))
    where type S (Path_Map ReportID (Path_Report Markup)) = MRR
          type A (Path_Map ReportID (Path_Report Markup)) = Markup
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Permissions))
    where type S (Path_Map ReportID (Path_Report Permissions)) = MRR
          type A (Path_Map ReportID (Path_Report Permissions)) = Permissions
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserIds))
    where type S (Path_Map ReportID (Path_Report UserIds)) = MRR
          type A (Path_Map ReportID (Path_Report UserIds)) = UserIds
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPair))
    where type S (Path_Map ReportID (Path_Report AbbrevPair)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPair)) = AbbrevPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPairs))
    where type S (Path_Map ReportID (Path_Report AbbrevPairs)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPairs)) = AbbrevPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Author))
    where type S (Path_Map ReportID (Path_Report Author)) = MRR
          type A (Path_Map ReportID (Path_Report Author)) = Author
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Authors))
    where type S (Path_Map ReportID (Path_Report Authors)) = MRR
          type A (Path_Map ReportID (Path_Report Authors)) = Authors
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Branding))
    where type S (Path_Map ReportID (Path_Report Branding)) = MRR
          type A (Path_Map ReportID (Path_Report Branding)) = Branding
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPair))
    where type S (Path_Map ReportID (Path_Report MarkupPair)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPair)) = MarkupPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPairs))
    where type S (Path_Map ReportID (Path_Report MarkupPairs)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPairs)) = MarkupPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markups))
    where type S (Path_Map ReportID (Path_Report Markups)) = MRR
          type A (Path_Map ReportID (Path_Report Markups)) = Markups
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeReportIntendedUse))
    where type S (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MaybeReportIntendedUse
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Report))
    where type S (Path_Map ReportID (Path_Report Report)) = MRR
          type A (Path_Map ReportID (Path_Report Report)) = Report
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ReportID (Path_Report ReportElem))
    where type S (Path_Map ReportID (Path_Report ReportElem)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElem)) = ReportElem
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportElems))
    where type S (Path_Map ReportID (Path_Report ReportElems)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElems)) = ReportElems
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportFlags))
    where type S (Path_Map ReportID (Path_Report ReportFlags)) = MRR
          type A (Path_Map ReportID (Path_Report ReportFlags)) = ReportFlags
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStandard))
    where type S (Path_Map ReportID (Path_Report ReportStandard)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStandard)) = ReportStandard
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStatus))
    where type S (Path_Map ReportID (Path_Report ReportStatus)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStatus)) = ReportStatus
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueApproachInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = ReportValueApproachInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueTypeInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = ReportValueTypeInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report EUI))
    where type S (Path_Map ReportID (Path_Report EUI)) = MRR
          type A (Path_Map ReportID (Path_Report EUI)) = EUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MEUI))
    where type S (Path_Map ReportID (Path_Report MEUI)) = MRR
          type A (Path_Map ReportID (Path_Report MEUI)) = MEUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeImageFile))
    where type S (Path_Map ReportID (Path_Report MaybeImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeImageFile)) = MaybeImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImage))
    where type S (Path_Map ReportID (Path_Report ReportImage)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImage)) = ReportImage
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImages))
    where type S (Path_Map ReportID (Path_Report ReportImages)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImages)) = ReportImages
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReadOnlyFilePath))
    where type S (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = MRR
          type A (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = ReadOnlyFilePath
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImageView))
    where type S (Path_Map ReportID (Path_Report ReportImageView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImageView)) = ReportImageView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportView))
    where type S (Path_Map ReportID (Path_Report ReportView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportView)) = ReportView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report SaneSizeImageSize))
    where type S (Path_Map ReportID (Path_Report SaneSizeImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Item))
    where type S (Path_Map ReportID (Path_Report Item)) = MRR
          type A (Path_Map ReportID (Path_Report Item)) = Item
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MIM))
    where type S (Path_Map ReportID (Path_Report MIM)) = MRR
          type A (Path_Map ReportID (Path_Report MIM)) = MIM
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MRR))
    where type S (Path_Map ReportID (Path_Report MRR)) = MRR
          type A (Path_Map ReportID (Path_Report MRR)) = MRR
          toLens _ = id
instance ToLens (Path_Map ReportID (Path_Report CIString))
    where type S (Path_Map ReportID (Path_Report CIString)) = MRR
          type A (Path_Map ReportID (Path_Report CIString)) = CIString
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report URI))
    where type S (Path_Map ReportID (Path_Report URI)) = MRR
          type A (Path_Map ReportID (Path_Report URI)) = URI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Text))
    where type S (Path_Map ReportID (Path_Report Text)) = MRR
          type A (Path_Map ReportID (Path_Report Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserId))
    where type S (Path_Map ReportID (Path_Report UserId)) = MRR
          type A (Path_Map ReportID (Path_Report UserId)) = UserId
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UUID))
    where type S (Path_Map ReportID (Path_Report UUID)) = MRR
          type A (Path_Map ReportID (Path_Report UUID)) = UUID
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = AbbrevPair
          type A (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = AbbrevPair
          type A (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = Markup
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
    where type S (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          type A (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          toLens _ = id
instance ToLens (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
    where type S (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = AbbrevPair
          type A (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = CIString
          toLens (Path_First _) = _1
instance ToLens (Path_Pair (Path_CIString Text) (Path_Markup Text))
    where type S (Path_Pair (Path_CIString Text) (Path_Markup Text)) = AbbrevPair
          type A (Path_Pair (Path_CIString Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = MarkupPair
          type A (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = MarkupPair
          type A (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = Markup
          toLens (Path_First _) = _1
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
    where type S (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          type A (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          toLens _ = id
instance ToLens (Path_Pair (Path_Markup Text) (Path_Markup Text))
    where type S (Path_Pair (Path_Markup Text) (Path_Markup Text)) = MarkupPair
          type A (Path_Pair (Path_Markup Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          toLens _ = id
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = CIString
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author JSONText))
    where type S (Path_OMap AuthorID (Path_Author JSONText)) = Authors
          type A (Path_OMap AuthorID (Path_Author JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Markup))
    where type S (Path_OMap AuthorID (Path_Author Markup)) = Authors
          type A (Path_OMap AuthorID (Path_Author Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Author))
    where type S (Path_OMap AuthorID (Path_Author Author)) = Authors
          type A (Path_OMap AuthorID (Path_Author Author)) = Author
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AuthorID (Path_Author Authors))
    where type S (Path_OMap AuthorID (Path_Author Authors)) = Authors
          type A (Path_OMap AuthorID (Path_Author Authors)) = Authors
          toLens _ = id
instance ToLens (Path_OMap AuthorID (Path_Author Text))
    where type S (Path_OMap AuthorID (Path_Author Text)) = Authors
          type A (Path_OMap AuthorID (Path_Author Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup JSONText))
    where type S (Path_OMap MarkupID (Path_Markup JSONText)) = Markups
          type A (Path_OMap MarkupID (Path_Markup JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup Markup))
    where type S (Path_OMap MarkupID (Path_Markup Markup)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markup)) = Markup
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupID (Path_Markup Markups))
    where type S (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          toLens _ = id
instance ToLens (Path_OMap MarkupID (Path_Markup Text))
    where type S (Path_OMap MarkupID (Path_Markup Text)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          toLens _ = id
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem String))
    where type S (Path_OMap ReportElemID (Path_ReportElem String)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Bool))
    where type S (Path_OMap ReportElemID (Path_ReportElem Bool)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Double))
    where type S (Path_OMap ReportElemID (Path_ReportElem Double)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Dimension))
    where type S (Path_OMap ReportElemID (Path_ReportElem Dimension)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageCrop))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Units))
    where type S (Path_OMap ReportElemID (Path_ReportElem Units)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem JSONText))
    where type S (Path_OMap ReportElemID (Path_ReportElem JSONText)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Markup))
    where type S (Path_OMap ReportElemID (Path_ReportElem Markup)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElem))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElem
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElems))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          toLens _ = id
instance ToLens (Path_OMap ReportElemID (Path_ReportElem EUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem EUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MEUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem MEUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImage))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportImage
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImages))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportImages
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImageView))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Item))
    where type S (Path_OMap ReportElemID (Path_ReportElem Item)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Item)) = Item
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MIM))
    where type S (Path_OMap ReportElemID (Path_ReportElem MIM)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MIM)) = MIM
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem URI))
    where type S (Path_OMap ReportElemID (Path_ReportElem URI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Text))
    where type S (Path_OMap ReportElemID (Path_ReportElem Text)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage String))
    where type S (Path_OMap ReportImageID (Path_ReportImage String)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Bool))
    where type S (Path_OMap ReportImageID (Path_ReportImage Bool)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Double))
    where type S (Path_OMap ReportImageID (Path_ReportImage Double)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Dimension))
    where type S (Path_OMap ReportImageID (Path_ReportImage Dimension)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageCrop))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Units))
    where type S (Path_OMap ReportImageID (Path_ReportImage Units)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage JSONText))
    where type S (Path_OMap ReportImageID (Path_ReportImage JSONText)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Markup))
    where type S (Path_OMap ReportImageID (Path_ReportImage Markup)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage EUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage EUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MEUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage MEUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImage))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImage
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImages))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          toLens _ = id
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImageView))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage URI))
    where type S (Path_OMap ReportImageID (Path_ReportImage URI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Text))
    where type S (Path_OMap ReportImageID (Path_ReportImage Text)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_Author JSONText)
    where type S (Path_Author JSONText) = Author
          type A (Path_Author JSONText) = JSONText
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Author Markup)
    where type S (Path_Author Markup) = Author
          type A (Path_Author Markup) = Markup
          toLens (Path_Author_authorName _x) = lens_Author_authorName
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials
instance ToLens (Path_Author Author)
    where type S (Path_Author Author) = Author
          type A (Path_Author Author) = Author
          toLens _ = id
instance ToLens (Path_Author Text)
    where type S (Path_Author Text) = Author
          type A (Path_Author Text) = Text
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Bool String)
    where type S (Path_Bool String) = Bool
          type A (Path_Bool String) = String
          toLens (Path_Bool_View _) = viewLens :: Lens' Bool String
instance ToLens (Path_Bool Bool)
    where type S (Path_Bool Bool) = Bool
          type A (Path_Bool Bool) = Bool
          toLens _ = id
instance ToLens (Path_Bool JSONText)
    where type S (Path_Bool JSONText) = Bool
          type A (Path_Bool JSONText) = JSONText
          toLens (Path_Bool_View v) = (viewLens :: Lens' Bool String) . toLens v
instance ToLens (Path_Branding JSONText)
    where type S (Path_Branding JSONText) = Branding
          type A (Path_Branding JSONText) = JSONText
          toLens (Path_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens (Path_Branding Branding)
    where type S (Path_Branding Branding) = Branding
          type A (Path_Branding Branding) = Branding
          toLens _ = id
instance ToLens (Path_Branding Text)
    where type S (Path_Branding Text) = Branding
          type A (Path_Branding Text) = Text
          toLens (Path_Branding_View _) = viewLens :: Lens' Branding Text
instance ToLens (Path_CIString JSONText)
    where type S (Path_CIString JSONText) = CIString
          type A (Path_CIString JSONText) = JSONText
          toLens (Path_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens (Path_CIString CIString)
    where type S (Path_CIString CIString) = CIString
          type A (Path_CIString CIString) = CIString
          toLens _ = id
instance ToLens (Path_CIString Text)
    where type S (Path_CIString Text) = CIString
          type A (Path_CIString Text) = Text
          toLens (Path_CIString_View _) = viewLens :: Lens' CIString Text
instance ToLens (Path_Dimension Dimension)
    where type S (Path_Dimension Dimension) = Dimension
          type A (Path_Dimension Dimension) = Dimension
          toLens _ = id
instance ToLens (Path_Dimension JSONText)
    where type S (Path_Dimension JSONText) = Dimension
          type A (Path_Dimension JSONText) = JSONText
          toLens (Path_Dimension_View _) = viewLens :: Lens' Dimension JSONText
instance ToLens (Path_Double String)
    where type S (Path_Double String) = Double
          type A (Path_Double String) = String
          toLens (Path_Double_View _) = viewLens :: Lens' Double String
instance ToLens (Path_Double Double)
    where type S (Path_Double Double) = Double
          type A (Path_Double Double) = Double
          toLens _ = id
instance ToLens (Path_Double JSONText)
    where type S (Path_Double JSONText) = Double
          type A (Path_Double JSONText) = JSONText
          toLens (Path_Double_View v) = (viewLens :: Lens' Double String) . toLens v
instance ToLens (Path_ImageCrop ImageCrop)
    where type S (Path_ImageCrop ImageCrop) = ImageCrop
          type A (Path_ImageCrop ImageCrop) = ImageCrop
          toLens _ = id
instance ToLens (Path_ImageFile ImageFile)
    where type S (Path_ImageFile ImageFile) = ImageFile
          type A (Path_ImageFile ImageFile) = ImageFile
          toLens _ = id
instance ToLens (Path_ImageSize String)
    where type S (Path_ImageSize String) = ImageSize
          type A (Path_ImageSize String) = String
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
instance ToLens (Path_ImageSize Double)
    where type S (Path_ImageSize Double) = ImageSize
          type A (Path_ImageSize Double) = Double
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size
instance ToLens (Path_ImageSize Dimension)
    where type S (Path_ImageSize Dimension) = ImageSize
          type A (Path_ImageSize Dimension) = Dimension
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim
instance ToLens (Path_ImageSize ImageSize)
    where type S (Path_ImageSize ImageSize) = ImageSize
          type A (Path_ImageSize ImageSize) = ImageSize
          toLens _ = id
instance ToLens (Path_ImageSize Units)
    where type S (Path_ImageSize Units) = ImageSize
          type A (Path_ImageSize Units) = Units
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units
instance ToLens (Path_ImageSize JSONText)
    where type S (Path_ImageSize JSONText) = ImageSize
          type A (Path_ImageSize JSONText) = JSONText
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim . toLens _x
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units . toLens _x
instance ToLens (Path_Int Int)
    where type S (Path_Int Int) = Int
          type A (Path_Int Int) = Int
          toLens _ = id
instance ToLens (Path_Int64 Int64)
    where type S (Path_Int64 Int64) = Int64
          type A (Path_Int64 Int64) = Int64
          toLens _ = id
instance ToLens (Path_Integer Integer)
    where type S (Path_Integer Integer) = Integer
          type A (Path_Integer Integer) = Integer
          toLens _ = id
instance ToLens (Path_Item String)
    where type S (Path_Item String) = Item
          type A (Path_Item String) = String
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Bool)
    where type S (Path_Item Bool) = Item
          type A (Path_Item Bool) = Bool
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Double)
    where type S (Path_Item Double) = Item
          type A (Path_Item Double) = Double
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Dimension)
    where type S (Path_Item Dimension) = Item
          type A (Path_Item Dimension) = Dimension
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageCrop)
    where type S (Path_Item ImageCrop) = Item
          type A (Path_Item ImageCrop) = ImageCrop
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageSize)
    where type S (Path_Item ImageSize) = Item
          type A (Path_Item ImageSize) = ImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Units)
    where type S (Path_Item Units) = Item
          type A (Path_Item Units) = Units
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageFile)
    where type S (Path_Item ImageFile) = Item
          type A (Path_Item ImageFile) = ImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item JSONText)
    where type S (Path_Item JSONText) = Item
          type A (Path_Item JSONText) = JSONText
          toLens (Path_Item_itemName _x) = lens_Item_itemName . toLens _x
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Markup)
    where type S (Path_Item Markup) = Item
          type A (Path_Item Markup) = Markup
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item EUI)
    where type S (Path_Item EUI) = Item
          type A (Path_Item EUI) = EUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MEUI)
    where type S (Path_Item MEUI) = Item
          type A (Path_Item MEUI) = MEUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MaybeImageFile)
    where type S (Path_Item MaybeImageFile) = Item
          type A (Path_Item MaybeImageFile) = MaybeImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImage)
    where type S (Path_Item ReportImage) = Item
          type A (Path_Item ReportImage) = ReportImage
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImages)
    where type S (Path_Item ReportImages) = Item
          type A (Path_Item ReportImages) = ReportImages
          toLens (Path_Item_images _x) = lens_Item_images
instance ToLens (Path_Item ReportImageView)
    where type S (Path_Item ReportImageView) = Item
          type A (Path_Item ReportImageView) = ReportImageView
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item SaneSizeImageSize)
    where type S (Path_Item SaneSizeImageSize) = Item
          type A (Path_Item SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Item)
    where type S (Path_Item Item) = Item
          type A (Path_Item Item) = Item
          toLens _ = id
instance ToLens (Path_Item MIM)
    where type S (Path_Item MIM) = Item
          type A (Path_Item MIM) = MIM
          toLens (Path_Item_fields _x) = lens_Item_fields
instance ToLens (Path_Item URI)
    where type S (Path_Item URI) = Item
          type A (Path_Item URI) = URI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Text)
    where type S (Path_Item Text) = Item
          type A (Path_Item Text) = Text
          toLens (Path_Item_itemName _x) = lens_Item_itemName
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_JSONText JSONText)
    where type S (Path_JSONText JSONText) = JSONText
          type A (Path_JSONText JSONText) = JSONText
          toLens _ = id
instance ToLens (Path_Markup JSONText)
    where type S (Path_Markup JSONText) = Markup
          type A (Path_Markup JSONText) = JSONText
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText . toLens _x
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText . toLens _x
instance ToLens (Path_Markup Markup)
    where type S (Path_Markup Markup) = Markup
          type A (Path_Markup Markup) = Markup
          toLens _ = id
instance ToLens (Path_Markup Text)
    where type S (Path_Markup Text) = Markup
          type A (Path_Markup Text) = Text
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText
instance ToLens (Path_MaybeImageFile String)
    where type S (Path_MaybeImageFile String) = MaybeImageFile
          type A (Path_MaybeImageFile String) = String
          toLens (Path_MaybeImageFile_View _) = viewLens :: Lens' MaybeImageFile String
instance ToLens (Path_MaybeImageFile JSONText)
    where type S (Path_MaybeImageFile JSONText) = MaybeImageFile
          type A (Path_MaybeImageFile JSONText) = JSONText
          toLens (Path_MaybeImageFile_View v) = (viewLens :: Lens' MaybeImageFile String) . toLens v
instance ToLens (Path_MaybeImageFile MaybeImageFile)
    where type S (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          type A (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          toLens _ = id
instance ToLens (Path_MaybeReportIntendedUse String)
    where type S (Path_MaybeReportIntendedUse String) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse String) = String
          toLens (Path_MaybeReportIntendedUse_View _) = viewLens :: Lens' MaybeReportIntendedUse String
instance ToLens (Path_MaybeReportIntendedUse JSONText)
    where type S (Path_MaybeReportIntendedUse JSONText) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse JSONText) = JSONText
          toLens (Path_MaybeReportIntendedUse_View v) = (viewLens :: Lens' MaybeReportIntendedUse String) . toLens v
instance ToLens (Path_MaybeReportIntendedUse MaybeReportIntendedUse)
    where type S (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens _ = id
instance ToLens (Path_Permissions JSONText)
    where type S (Path_Permissions JSONText) = Permissions
          type A (Path_Permissions JSONText) = JSONText
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions Permissions)
    where type S (Path_Permissions Permissions) = Permissions
          type A (Path_Permissions Permissions) = Permissions
          toLens _ = id
instance ToLens (Path_Permissions UserIds)
    where type S (Path_Permissions UserIds) = Permissions
          type A (Path_Permissions UserIds) = UserIds
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers
instance ToLens (Path_Permissions Text)
    where type S (Path_Permissions Text) = Permissions
          type A (Path_Permissions Text) = Text
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions UserId)
    where type S (Path_Permissions UserId) = Permissions
          type A (Path_Permissions UserId) = UserId
          toLens (Path_Permissions_owner _x) = lens_Permissions_owner
instance ToLens (Path_ReadOnlyFilePath String)
    where type S (Path_ReadOnlyFilePath String) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath String) = String
          toLens (Path_ReadOnlyFilePath_View _) = viewLens :: Lens' ReadOnlyFilePath String
instance ToLens (Path_ReadOnlyFilePath JSONText)
    where type S (Path_ReadOnlyFilePath JSONText) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath JSONText) = JSONText
          toLens (Path_ReadOnlyFilePath_View v) = (viewLens :: Lens' ReadOnlyFilePath String) . toLens v
instance ToLens (Path_ReadOnlyFilePath ReadOnlyFilePath)
    where type S (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          toLens _ = id
instance ToLens (Path_Report String)
    where type S (Path_Report String) = Report
          type A (Path_Report String) = String
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int64)
    where type S (Path_Report Int64) = Report
          type A (Path_Report Int64) = Int64
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Bool)
    where type S (Path_Report Bool) = Report
          type A (Path_Report Bool) = Bool
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Double)
    where type S (Path_Report Double) = Report
          type A (Path_Report Double) = Double
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int)
    where type S (Path_Report Int) = Report
          type A (Path_Report Int) = Int
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Dimension)
    where type S (Path_Report Dimension) = Report
          type A (Path_Report Dimension) = Dimension
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageCrop)
    where type S (Path_Report ImageCrop) = Report
          type A (Path_Report ImageCrop) = ImageCrop
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageSize)
    where type S (Path_Report ImageSize) = Report
          type A (Path_Report ImageSize) = ImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Units)
    where type S (Path_Report Units) = Report
          type A (Path_Report Units) = Units
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageFile)
    where type S (Path_Report ImageFile) = Report
          type A (Path_Report ImageFile) = ImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Integer)
    where type S (Path_Report Integer) = Report
          type A (Path_Report Integer) = Integer
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report JSONText)
    where type S (Path_Report JSONText) = Report
          type A (Path_Report JSONText) = JSONText
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markup)
    where type S (Path_Report Markup) = Report
          type A (Path_Report Markup) = Markup
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Permissions)
    where type S (Path_Report Permissions) = Report
          type A (Path_Report Permissions) = Permissions
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserIds)
    where type S (Path_Report UserIds) = Report
          type A (Path_Report UserIds) = UserIds
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPair)
    where type S (Path_Report AbbrevPair) = Report
          type A (Path_Report AbbrevPair) = AbbrevPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPairs)
    where type S (Path_Report AbbrevPairs) = Report
          type A (Path_Report AbbrevPairs) = AbbrevPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Author)
    where type S (Path_Report Author) = Report
          type A (Path_Report Author) = Author
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Authors)
    where type S (Path_Report Authors) = Report
          type A (Path_Report Authors) = Authors
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Branding)
    where type S (Path_Report Branding) = Report
          type A (Path_Report Branding) = Branding
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPair)
    where type S (Path_Report MarkupPair) = Report
          type A (Path_Report MarkupPair) = MarkupPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPairs)
    where type S (Path_Report MarkupPairs) = Report
          type A (Path_Report MarkupPairs) = MarkupPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markups)
    where type S (Path_Report Markups) = Report
          type A (Path_Report Markups) = Markups
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeReportIntendedUse)
    where type S (Path_Report MaybeReportIntendedUse) = Report
          type A (Path_Report MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Report)
    where type S (Path_Report Report) = Report
          type A (Path_Report Report) = Report
          toLens _ = id
instance ToLens (Path_Report ReportElem)
    where type S (Path_Report ReportElem) = Report
          type A (Path_Report ReportElem) = ReportElem
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportElems)
    where type S (Path_Report ReportElems) = Report
          type A (Path_Report ReportElems) = ReportElems
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportFlags)
    where type S (Path_Report ReportFlags) = Report
          type A (Path_Report ReportFlags) = ReportFlags
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStandard)
    where type S (Path_Report ReportStandard) = Report
          type A (Path_Report ReportStandard) = ReportStandard
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStatus)
    where type S (Path_Report ReportStatus) = Report
          type A (Path_Report ReportStatus) = ReportStatus
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueApproachInfo)
    where type S (Path_Report ReportValueApproachInfo) = Report
          type A (Path_Report ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueTypeInfo)
    where type S (Path_Report ReportValueTypeInfo) = Report
          type A (Path_Report ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report EUI)
    where type S (Path_Report EUI) = Report
          type A (Path_Report EUI) = EUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MEUI)
    where type S (Path_Report MEUI) = Report
          type A (Path_Report MEUI) = MEUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeImageFile)
    where type S (Path_Report MaybeImageFile) = Report
          type A (Path_Report MaybeImageFile) = MaybeImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImage)
    where type S (Path_Report ReportImage) = Report
          type A (Path_Report ReportImage) = ReportImage
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImages)
    where type S (Path_Report ReportImages) = Report
          type A (Path_Report ReportImages) = ReportImages
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReadOnlyFilePath)
    where type S (Path_Report ReadOnlyFilePath) = Report
          type A (Path_Report ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImageView)
    where type S (Path_Report ReportImageView) = Report
          type A (Path_Report ReportImageView) = ReportImageView
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportView)
    where type S (Path_Report ReportView) = Report
          type A (Path_Report ReportView) = ReportView
          toLens (Path_Report_View _) = viewLens :: Lens' Report ReportView
instance ToLens (Path_Report SaneSizeImageSize)
    where type S (Path_Report SaneSizeImageSize) = Report
          type A (Path_Report SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Item)
    where type S (Path_Report Item) = Report
          type A (Path_Report Item) = Item
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MIM)
    where type S (Path_Report MIM) = Report
          type A (Path_Report MIM) = MIM
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report CIString)
    where type S (Path_Report CIString) = Report
          type A (Path_Report CIString) = CIString
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report URI)
    where type S (Path_Report URI) = Report
          type A (Path_Report URI) = URI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Text)
    where type S (Path_Report Text) = Report
          type A (Path_Report Text) = Text
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserId)
    where type S (Path_Report UserId) = Report
          type A (Path_Report UserId) = UserId
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UUID)
    where type S (Path_Report UUID) = Report
          type A (Path_Report UUID) = UUID
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_ReportElem String)
    where type S (Path_ReportElem String) = ReportElem
          type A (Path_ReportElem String) = String
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Bool)
    where type S (Path_ReportElem Bool) = ReportElem
          type A (Path_ReportElem Bool) = Bool
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Double)
    where type S (Path_ReportElem Double) = ReportElem
          type A (Path_ReportElem Double) = Double
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Dimension)
    where type S (Path_ReportElem Dimension) = ReportElem
          type A (Path_ReportElem Dimension) = Dimension
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageCrop)
    where type S (Path_ReportElem ImageCrop) = ReportElem
          type A (Path_ReportElem ImageCrop) = ImageCrop
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageSize)
    where type S (Path_ReportElem ImageSize) = ReportElem
          type A (Path_ReportElem ImageSize) = ImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Units)
    where type S (Path_ReportElem Units) = ReportElem
          type A (Path_ReportElem Units) = Units
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageFile)
    where type S (Path_ReportElem ImageFile) = ReportElem
          type A (Path_ReportElem ImageFile) = ImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem JSONText)
    where type S (Path_ReportElem JSONText) = ReportElem
          type A (Path_ReportElem JSONText) = JSONText
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportElem Markup)
    where type S (Path_ReportElem Markup) = ReportElem
          type A (Path_ReportElem Markup) = Markup
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText
instance ToLens (Path_ReportElem ReportElem)
    where type S (Path_ReportElem ReportElem) = ReportElem
          type A (Path_ReportElem ReportElem) = ReportElem
          toLens _ = id
instance ToLens (Path_ReportElem EUI)
    where type S (Path_ReportElem EUI) = ReportElem
          type A (Path_ReportElem EUI) = EUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MEUI)
    where type S (Path_ReportElem MEUI) = ReportElem
          type A (Path_ReportElem MEUI) = MEUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MaybeImageFile)
    where type S (Path_ReportElem MaybeImageFile) = ReportElem
          type A (Path_ReportElem MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImage)
    where type S (Path_ReportElem ReportImage) = ReportElem
          type A (Path_ReportElem ReportImage) = ReportImage
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImages)
    where type S (Path_ReportElem ReportImages) = ReportElem
          type A (Path_ReportElem ReportImages) = ReportImages
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImageView)
    where type S (Path_ReportElem ReportImageView) = ReportElem
          type A (Path_ReportElem ReportImageView) = ReportImageView
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem SaneSizeImageSize)
    where type S (Path_ReportElem SaneSizeImageSize) = ReportElem
          type A (Path_ReportElem SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Item)
    where type S (Path_ReportElem Item) = ReportElem
          type A (Path_ReportElem Item) = Item
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem
instance ToLens (Path_ReportElem MIM)
    where type S (Path_ReportElem MIM) = ReportElem
          type A (Path_ReportElem MIM) = MIM
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem URI)
    where type S (Path_ReportElem URI) = ReportElem
          type A (Path_ReportElem URI) = URI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Text)
    where type S (Path_ReportElem Text) = ReportElem
          type A (Path_ReportElem Text) = Text
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportFlags String)
    where type S (Path_ReportFlags String) = ReportFlags
          type A (Path_ReportFlags String) = String
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags Bool)
    where type S (Path_ReportFlags Bool) = ReportFlags
          type A (Path_ReportFlags Bool) = Bool
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields
instance ToLens (Path_ReportFlags JSONText)
    where type S (Path_ReportFlags JSONText) = ReportFlags
          type A (Path_ReportFlags JSONText) = JSONText
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags ReportFlags)
    where type S (Path_ReportFlags ReportFlags) = ReportFlags
          type A (Path_ReportFlags ReportFlags) = ReportFlags
          toLens _ = id
instance ToLens (Path_ReportImage String)
    where type S (Path_ReportImage String) = ReportImage
          type A (Path_ReportImage String) = String
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Bool)
    where type S (Path_ReportImage Bool) = ReportImage
          type A (Path_ReportImage Bool) = Bool
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Double)
    where type S (Path_ReportImage Double) = ReportImage
          type A (Path_ReportImage Double) = Double
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Dimension)
    where type S (Path_ReportImage Dimension) = ReportImage
          type A (Path_ReportImage Dimension) = Dimension
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageCrop)
    where type S (Path_ReportImage ImageCrop) = ReportImage
          type A (Path_ReportImage ImageCrop) = ImageCrop
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageSize)
    where type S (Path_ReportImage ImageSize) = ReportImage
          type A (Path_ReportImage ImageSize) = ImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Units)
    where type S (Path_ReportImage Units) = ReportImage
          type A (Path_ReportImage Units) = Units
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageFile)
    where type S (Path_ReportImage ImageFile) = ReportImage
          type A (Path_ReportImage ImageFile) = ImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage JSONText)
    where type S (Path_ReportImage JSONText) = ReportImage
          type A (Path_ReportImage JSONText) = JSONText
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Markup)
    where type S (Path_ReportImage Markup) = ReportImage
          type A (Path_ReportImage Markup) = Markup
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage EUI)
    where type S (Path_ReportImage EUI) = ReportImage
          type A (Path_ReportImage EUI) = EUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MEUI)
    where type S (Path_ReportImage MEUI) = ReportImage
          type A (Path_ReportImage MEUI) = MEUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MaybeImageFile)
    where type S (Path_ReportImage MaybeImageFile) = ReportImage
          type A (Path_ReportImage MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ReportImage)
    where type S (Path_ReportImage ReportImage) = ReportImage
          type A (Path_ReportImage ReportImage) = ReportImage
          toLens _ = id
instance ToLens (Path_ReportImage ReportImageView)
    where type S (Path_ReportImage ReportImageView) = ReportImage
          type A (Path_ReportImage ReportImageView) = ReportImageView
          toLens (Path_ReportImage_View _) = viewLens :: Lens' ReportImage ReportImageView
instance ToLens (Path_ReportImage SaneSizeImageSize)
    where type S (Path_ReportImage SaneSizeImageSize) = ReportImage
          type A (Path_ReportImage SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage URI)
    where type S (Path_ReportImage URI) = ReportImage
          type A (Path_ReportImage URI) = URI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Text)
    where type S (Path_ReportImage Text) = ReportImage
          type A (Path_ReportImage Text) = Text
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImageView String)
    where type S (Path_ReportImageView String) = ReportImageView
          type A (Path_ReportImageView String) = String
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Bool)
    where type S (Path_ReportImageView Bool) = ReportImageView
          type A (Path_ReportImageView Bool) = Bool
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge
instance ToLens (Path_ReportImageView Double)
    where type S (Path_ReportImageView Double) = ReportImageView
          type A (Path_ReportImageView Double) = Double
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Dimension)
    where type S (Path_ReportImageView Dimension) = ReportImageView
          type A (Path_ReportImageView Dimension) = Dimension
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageCrop)
    where type S (Path_ReportImageView ImageCrop) = ReportImageView
          type A (Path_ReportImageView ImageCrop) = ImageCrop
          toLens (Path_ReportImageView__picCrop _x) = lens_ReportImageView__picCrop
instance ToLens (Path_ReportImageView ImageSize)
    where type S (Path_ReportImageView ImageSize) = ReportImageView
          type A (Path_ReportImageView ImageSize) = ImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Units)
    where type S (Path_ReportImageView Units) = ReportImageView
          type A (Path_ReportImageView Units) = Units
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageFile)
    where type S (Path_ReportImageView ImageFile) = ReportImageView
          type A (Path_ReportImageView ImageFile) = ImageFile
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView JSONText)
    where type S (Path_ReportImageView JSONText) = ReportImageView
          type A (Path_ReportImageView JSONText) = JSONText
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Markup)
    where type S (Path_ReportImageView Markup) = ReportImageView
          type A (Path_ReportImageView Markup) = Markup
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption
instance ToLens (Path_ReportImageView EUI)
    where type S (Path_ReportImageView EUI) = ReportImageView
          type A (Path_ReportImageView EUI) = EUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView MEUI)
    where type S (Path_ReportImageView MEUI) = ReportImageView
          type A (Path_ReportImageView MEUI) = MEUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal
instance ToLens (Path_ReportImageView MaybeImageFile)
    where type S (Path_ReportImageView MaybeImageFile) = ReportImageView
          type A (Path_ReportImageView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated
instance ToLens (Path_ReportImageView ReportImageView)
    where type S (Path_ReportImageView ReportImageView) = ReportImageView
          type A (Path_ReportImageView ReportImageView) = ReportImageView
          toLens _ = id
instance ToLens (Path_ReportImageView SaneSizeImageSize)
    where type S (Path_ReportImageView SaneSizeImageSize) = ReportImageView
          type A (Path_ReportImageView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize
instance ToLens (Path_ReportImageView URI)
    where type S (Path_ReportImageView URI) = ReportImageView
          type A (Path_ReportImageView URI) = URI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView Text)
    where type S (Path_ReportImageView Text) = ReportImageView
          type A (Path_ReportImageView Text) = Text
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
instance ToLens (Path_ReportIntendedUse String)
    where type S (Path_ReportIntendedUse String) = ReportIntendedUse
          type A (Path_ReportIntendedUse String) = String
          toLens (Path_ReportIntendedUse_View _) = viewLens :: Lens' ReportIntendedUse String
instance ToLens (Path_ReportIntendedUse JSONText)
    where type S (Path_ReportIntendedUse JSONText) = ReportIntendedUse
          type A (Path_ReportIntendedUse JSONText) = JSONText
          toLens (Path_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse String) . toLens v
instance ToLens (Path_ReportIntendedUse ReportIntendedUse)
    where type S (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          type A (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          toLens _ = id
instance ToLens (Path_ReportMap String)
    where type S (Path_ReportMap String) = ReportMap
          type A (Path_ReportMap String) = String
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int64)
    where type S (Path_ReportMap Int64) = ReportMap
          type A (Path_ReportMap Int64) = Int64
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Bool)
    where type S (Path_ReportMap Bool) = ReportMap
          type A (Path_ReportMap Bool) = Bool
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Double)
    where type S (Path_ReportMap Double) = ReportMap
          type A (Path_ReportMap Double) = Double
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int)
    where type S (Path_ReportMap Int) = ReportMap
          type A (Path_ReportMap Int) = Int
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Dimension)
    where type S (Path_ReportMap Dimension) = ReportMap
          type A (Path_ReportMap Dimension) = Dimension
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageCrop)
    where type S (Path_ReportMap ImageCrop) = ReportMap
          type A (Path_ReportMap ImageCrop) = ImageCrop
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageSize)
    where type S (Path_ReportMap ImageSize) = ReportMap
          type A (Path_ReportMap ImageSize) = ImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Units)
    where type S (Path_ReportMap Units) = ReportMap
          type A (Path_ReportMap Units) = Units
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageFile)
    where type S (Path_ReportMap ImageFile) = ReportMap
          type A (Path_ReportMap ImageFile) = ImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Integer)
    where type S (Path_ReportMap Integer) = ReportMap
          type A (Path_ReportMap Integer) = Integer
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap JSONText)
    where type S (Path_ReportMap JSONText) = ReportMap
          type A (Path_ReportMap JSONText) = JSONText
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markup)
    where type S (Path_ReportMap Markup) = ReportMap
          type A (Path_ReportMap Markup) = Markup
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Permissions)
    where type S (Path_ReportMap Permissions) = ReportMap
          type A (Path_ReportMap Permissions) = Permissions
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserIds)
    where type S (Path_ReportMap UserIds) = ReportMap
          type A (Path_ReportMap UserIds) = UserIds
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPair)
    where type S (Path_ReportMap AbbrevPair) = ReportMap
          type A (Path_ReportMap AbbrevPair) = AbbrevPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPairs)
    where type S (Path_ReportMap AbbrevPairs) = ReportMap
          type A (Path_ReportMap AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Author)
    where type S (Path_ReportMap Author) = ReportMap
          type A (Path_ReportMap Author) = Author
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Authors)
    where type S (Path_ReportMap Authors) = ReportMap
          type A (Path_ReportMap Authors) = Authors
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Branding)
    where type S (Path_ReportMap Branding) = ReportMap
          type A (Path_ReportMap Branding) = Branding
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPair)
    where type S (Path_ReportMap MarkupPair) = ReportMap
          type A (Path_ReportMap MarkupPair) = MarkupPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPairs)
    where type S (Path_ReportMap MarkupPairs) = ReportMap
          type A (Path_ReportMap MarkupPairs) = MarkupPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markups)
    where type S (Path_ReportMap Markups) = ReportMap
          type A (Path_ReportMap Markups) = Markups
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeReportIntendedUse)
    where type S (Path_ReportMap MaybeReportIntendedUse) = ReportMap
          type A (Path_ReportMap MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Report)
    where type S (Path_ReportMap Report) = ReportMap
          type A (Path_ReportMap Report) = Report
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElem)
    where type S (Path_ReportMap ReportElem) = ReportMap
          type A (Path_ReportMap ReportElem) = ReportElem
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElems)
    where type S (Path_ReportMap ReportElems) = ReportMap
          type A (Path_ReportMap ReportElems) = ReportElems
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportFlags)
    where type S (Path_ReportMap ReportFlags) = ReportMap
          type A (Path_ReportMap ReportFlags) = ReportFlags
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStandard)
    where type S (Path_ReportMap ReportStandard) = ReportMap
          type A (Path_ReportMap ReportStandard) = ReportStandard
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStatus)
    where type S (Path_ReportMap ReportStatus) = ReportMap
          type A (Path_ReportMap ReportStatus) = ReportStatus
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueApproachInfo)
    where type S (Path_ReportMap ReportValueApproachInfo) = ReportMap
          type A (Path_ReportMap ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueTypeInfo)
    where type S (Path_ReportMap ReportValueTypeInfo) = ReportMap
          type A (Path_ReportMap ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap EUI)
    where type S (Path_ReportMap EUI) = ReportMap
          type A (Path_ReportMap EUI) = EUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MEUI)
    where type S (Path_ReportMap MEUI) = ReportMap
          type A (Path_ReportMap MEUI) = MEUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeImageFile)
    where type S (Path_ReportMap MaybeImageFile) = ReportMap
          type A (Path_ReportMap MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImage)
    where type S (Path_ReportMap ReportImage) = ReportMap
          type A (Path_ReportMap ReportImage) = ReportImage
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImages)
    where type S (Path_ReportMap ReportImages) = ReportMap
          type A (Path_ReportMap ReportImages) = ReportImages
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReadOnlyFilePath)
    where type S (Path_ReportMap ReadOnlyFilePath) = ReportMap
          type A (Path_ReportMap ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImageView)
    where type S (Path_ReportMap ReportImageView) = ReportMap
          type A (Path_ReportMap ReportImageView) = ReportImageView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportView)
    where type S (Path_ReportMap ReportView) = ReportMap
          type A (Path_ReportMap ReportView) = ReportView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap SaneSizeImageSize)
    where type S (Path_ReportMap SaneSizeImageSize) = ReportMap
          type A (Path_ReportMap SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Item)
    where type S (Path_ReportMap Item) = ReportMap
          type A (Path_ReportMap Item) = Item
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MIM)
    where type S (Path_ReportMap MIM) = ReportMap
          type A (Path_ReportMap MIM) = MIM
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MRR)
    where type S (Path_ReportMap MRR) = ReportMap
          type A (Path_ReportMap MRR) = MRR
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap
instance ToLens (Path_ReportMap ReportMap)
    where type S (Path_ReportMap ReportMap) = ReportMap
          type A (Path_ReportMap ReportMap) = ReportMap
          toLens _ = id
instance ToLens (Path_ReportMap CIString)
    where type S (Path_ReportMap CIString) = ReportMap
          type A (Path_ReportMap CIString) = CIString
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap URI)
    where type S (Path_ReportMap URI) = ReportMap
          type A (Path_ReportMap URI) = URI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Text)
    where type S (Path_ReportMap Text) = ReportMap
          type A (Path_ReportMap Text) = Text
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserId)
    where type S (Path_ReportMap UserId) = ReportMap
          type A (Path_ReportMap UserId) = UserId
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UUID)
    where type S (Path_ReportMap UUID) = ReportMap
          type A (Path_ReportMap UUID) = UUID
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportStandard Int)
    where type S (Path_ReportStandard Int) = ReportStandard
          type A (Path_ReportStandard Int) = Int
          toLens (Path_ReportStandard_unReportStandard _x) = lens_ReportStandard_unReportStandard
instance ToLens (Path_ReportStandard ReportStandard)
    where type S (Path_ReportStandard ReportStandard) = ReportStandard
          type A (Path_ReportStandard ReportStandard) = ReportStandard
          toLens _ = id
instance ToLens (Path_ReportStatus String)
    where type S (Path_ReportStatus String) = ReportStatus
          type A (Path_ReportStatus String) = String
          toLens (Path_ReportStatus_View _) = viewLens :: Lens' ReportStatus String
instance ToLens (Path_ReportStatus JSONText)
    where type S (Path_ReportStatus JSONText) = ReportStatus
          type A (Path_ReportStatus JSONText) = JSONText
          toLens (Path_ReportStatus_View v) = (viewLens :: Lens' ReportStatus String) . toLens v
instance ToLens (Path_ReportStatus ReportStatus)
    where type S (Path_ReportStatus ReportStatus) = ReportStatus
          type A (Path_ReportStatus ReportStatus) = ReportStatus
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo JSONText)
    where type S (Path_ReportValueApproachInfo JSONText) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo JSONText) = JSONText
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueApproachInfo Markup)
    where type S (Path_ReportValueApproachInfo Markup) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Markup) = Markup
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription
instance ToLens (Path_ReportValueApproachInfo ReportValueApproachInfo)
    where type S (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo Text)
    where type S (Path_ReportValueApproachInfo Text) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Text) = Text
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueTypeInfo JSONText)
    where type S (Path_ReportValueTypeInfo JSONText) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo JSONText) = JSONText
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportValueTypeInfo Markup)
    where type S (Path_ReportValueTypeInfo Markup) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Markup) = Markup
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition
instance ToLens (Path_ReportValueTypeInfo ReportValueTypeInfo)
    where type S (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          toLens _ = id
instance ToLens (Path_ReportValueTypeInfo Text)
    where type S (Path_ReportValueTypeInfo Text) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Text) = Text
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportView String)
    where type S (Path_ReportView String) = ReportView
          type A (Path_ReportView String) = String
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Int64)
    where type S (Path_ReportView Int64) = ReportView
          type A (Path_ReportView Int64) = Int64
          toLens (Path_ReportView__reportCreated _x) = lens_ReportView__reportCreated
instance ToLens (Path_ReportView Bool)
    where type S (Path_ReportView Bool) = ReportView
          type A (Path_ReportView Bool) = Bool
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName
instance ToLens (Path_ReportView Double)
    where type S (Path_ReportView Double) = ReportView
          type A (Path_ReportView Double) = Double
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Int)
    where type S (Path_ReportView Int) = ReportView
          type A (Path_ReportView Int) = Int
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion . toLens _x
instance ToLens (Path_ReportView Dimension)
    where type S (Path_ReportView Dimension) = ReportView
          type A (Path_ReportView Dimension) = Dimension
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageCrop)
    where type S (Path_ReportView ImageCrop) = ReportView
          type A (Path_ReportView ImageCrop) = ImageCrop
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageSize)
    where type S (Path_ReportView ImageSize) = ReportView
          type A (Path_ReportView ImageSize) = ImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Units)
    where type S (Path_ReportView Units) = ReportView
          type A (Path_ReportView Units) = Units
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageFile)
    where type S (Path_ReportView ImageFile) = ReportView
          type A (Path_ReportView ImageFile) = ImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Integer)
    where type S (Path_ReportView Integer) = ReportView
          type A (Path_ReportView Integer) = Integer
          toLens (Path_ReportView__reportRevision _x) = lens_ReportView__reportRevision
instance ToLens (Path_ReportView JSONText)
    where type S (Path_ReportView JSONText) = ReportView
          type A (Path_ReportView JSONText) = JSONText
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Markup)
    where type S (Path_ReportView Markup) = ReportView
          type A (Path_ReportView Markup) = Markup
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy
instance ToLens (Path_ReportView Permissions)
    where type S (Path_ReportView Permissions) = ReportView
          type A (Path_ReportView Permissions) = Permissions
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms
instance ToLens (Path_ReportView UserIds)
    where type S (Path_ReportView UserIds) = ReportView
          type A (Path_ReportView UserIds) = UserIds
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView AbbrevPair)
    where type S (Path_ReportView AbbrevPair) = ReportView
          type A (Path_ReportView AbbrevPair) = AbbrevPair
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView AbbrevPairs)
    where type S (Path_ReportView AbbrevPairs) = ReportView
          type A (Path_ReportView AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs
instance ToLens (Path_ReportView Author)
    where type S (Path_ReportView Author) = ReportView
          type A (Path_ReportView Author) = Author
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
instance ToLens (Path_ReportView Authors)
    where type S (Path_ReportView Authors) = ReportView
          type A (Path_ReportView Authors) = Authors
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors
instance ToLens (Path_ReportView Branding)
    where type S (Path_ReportView Branding) = ReportView
          type A (Path_ReportView Branding) = Branding
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding
instance ToLens (Path_ReportView MarkupPair)
    where type S (Path_ReportView MarkupPair) = ReportView
          type A (Path_ReportView MarkupPair) = MarkupPair
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
instance ToLens (Path_ReportView MarkupPairs)
    where type S (Path_ReportView MarkupPairs) = ReportView
          type A (Path_ReportView MarkupPairs) = MarkupPairs
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources
instance ToLens (Path_ReportView Markups)
    where type S (Path_ReportView Markups) = ReportView
          type A (Path_ReportView Markups) = Markups
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions
instance ToLens (Path_ReportView MaybeReportIntendedUse)
    where type S (Path_ReportView MaybeReportIntendedUse) = ReportView
          type A (Path_ReportView MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse
instance ToLens (Path_ReportView ReportElem)
    where type S (Path_ReportView ReportElem) = ReportView
          type A (Path_ReportView ReportElem) = ReportElem
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportElems)
    where type S (Path_ReportView ReportElems) = ReportView
          type A (Path_ReportView ReportElems) = ReportElems
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody
instance ToLens (Path_ReportView ReportFlags)
    where type S (Path_ReportView ReportFlags) = ReportView
          type A (Path_ReportView ReportFlags) = ReportFlags
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags
instance ToLens (Path_ReportView ReportStandard)
    where type S (Path_ReportView ReportStandard) = ReportView
          type A (Path_ReportView ReportStandard) = ReportStandard
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion
instance ToLens (Path_ReportView ReportStatus)
    where type S (Path_ReportView ReportStatus) = ReportView
          type A (Path_ReportView ReportStatus) = ReportStatus
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus
instance ToLens (Path_ReportView ReportValueApproachInfo)
    where type S (Path_ReportView ReportValueApproachInfo) = ReportView
          type A (Path_ReportView ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo
instance ToLens (Path_ReportView ReportValueTypeInfo)
    where type S (Path_ReportView ReportValueTypeInfo) = ReportView
          type A (Path_ReportView ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo
instance ToLens (Path_ReportView EUI)
    where type S (Path_ReportView EUI) = ReportView
          type A (Path_ReportView EUI) = EUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MEUI)
    where type S (Path_ReportView MEUI) = ReportView
          type A (Path_ReportView MEUI) = MEUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MaybeImageFile)
    where type S (Path_ReportView MaybeImageFile) = ReportView
          type A (Path_ReportView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImage)
    where type S (Path_ReportView ReportImage) = ReportView
          type A (Path_ReportView ReportImage) = ReportImage
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImages)
    where type S (Path_ReportView ReportImages) = ReportView
          type A (Path_ReportView ReportImages) = ReportImages
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReadOnlyFilePath)
    where type S (Path_ReportView ReadOnlyFilePath) = ReportView
          type A (Path_ReportView ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder
instance ToLens (Path_ReportView ReportImageView)
    where type S (Path_ReportView ReportImageView) = ReportView
          type A (Path_ReportView ReportImageView) = ReportImageView
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportView)
    where type S (Path_ReportView ReportView) = ReportView
          type A (Path_ReportView ReportView) = ReportView
          toLens _ = id
instance ToLens (Path_ReportView SaneSizeImageSize)
    where type S (Path_ReportView SaneSizeImageSize) = ReportView
          type A (Path_ReportView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Item)
    where type S (Path_ReportView Item) = ReportView
          type A (Path_ReportView Item) = Item
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MIM)
    where type S (Path_ReportView MIM) = ReportView
          type A (Path_ReportView MIM) = MIM
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView CIString)
    where type S (Path_ReportView CIString) = ReportView
          type A (Path_ReportView CIString) = CIString
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView URI)
    where type S (Path_ReportView URI) = ReportView
          type A (Path_ReportView URI) = URI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Text)
    where type S (Path_ReportView Text) = ReportView
          type A (Path_ReportView Text) = Text
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
instance ToLens (Path_ReportView UserId)
    where type S (Path_ReportView UserId) = ReportView
          type A (Path_ReportView UserId) = UserId
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView UUID)
    where type S (Path_ReportView UUID) = ReportView
          type A (Path_ReportView UUID) = UUID
          toLens (Path_ReportView__reportUUID _x) = lens_ReportView__reportUUID
instance ToLens (Path_SaneSizeImageSize String)
    where type S (Path_SaneSizeImageSize String) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize String) = String
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Double)
    where type S (Path_SaneSizeImageSize Double) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Double) = Double
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Dimension)
    where type S (Path_SaneSizeImageSize Dimension) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Dimension) = Dimension
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize ImageSize)
    where type S (Path_SaneSizeImageSize ImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize ImageSize) = ImageSize
          toLens (Path_SaneSizeImageSize_View _) = viewLens :: Lens' SaneSizeImageSize ImageSize
instance ToLens (Path_SaneSizeImageSize Units)
    where type S (Path_SaneSizeImageSize Units) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Units) = Units
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize JSONText)
    where type S (Path_SaneSizeImageSize JSONText) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize JSONText) = JSONText
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize SaneSizeImageSize)
    where type S (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          toLens _ = id
instance ToLens (Path_String String)
    where type S (Path_String String) = String
          type A (Path_String String) = String
          toLens _ = id
instance ToLens (Path_String JSONText)
    where type S (Path_String JSONText) = String
          type A (Path_String JSONText) = JSONText
          toLens (Path_String_View _) = viewLens :: Lens' String JSONText
instance ToLens (Path_Text JSONText)
    where type S (Path_Text JSONText) = Text
          type A (Path_Text JSONText) = JSONText
          toLens (Path_Text_View _) = viewLens :: Lens' Text JSONText
instance ToLens (Path_Text Text)
    where type S (Path_Text Text) = Text
          type A (Path_Text Text) = Text
          toLens _ = id
instance ToLens (Path_URI URI)
    where type S (Path_URI URI) = URI
          type A (Path_URI URI) = URI
          toLens _ = id
instance ToLens (Path_UUID UUID)
    where type S (Path_UUID UUID) = UUID
          type A (Path_UUID UUID) = UUID
          toLens _ = id
instance ToLens (Path_Units Units)
    where type S (Path_Units Units) = Units
          type A (Path_Units Units) = Units
          toLens _ = id
instance ToLens (Path_Units JSONText)
    where type S (Path_Units JSONText) = Units
          type A (Path_Units JSONText) = JSONText
          toLens (Path_Units_View _) = viewLens :: Lens' Units JSONText
instance ToLens (Path_UserId UserId)
    where type S (Path_UserId UserId) = UserId
          type A (Path_UserId UserId) = UserId
          toLens _ = id
instance ToLens (Path_UserIds JSONText)
    where type S (Path_UserIds JSONText) = UserIds
          type A (Path_UserIds JSONText) = JSONText
          toLens (Path_UserIds_View v) = (viewLens :: Lens' UserIds Text) . toLens v
instance ToLens (Path_UserIds UserIds)
    where type S (Path_UserIds UserIds) = UserIds
          type A (Path_UserIds UserIds) = UserIds
          toLens _ = id
instance ToLens (Path_UserIds Text)
    where type S (Path_UserIds Text) = UserIds
          type A (Path_UserIds Text) = Text
          toLens (Path_UserIds_View _) = viewLens :: Lens' UserIds Text
instance ToLens (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)))
    where type S (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = ImageFile
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI)))
    where type S (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = EUI
          toLens (Path_Just _) = _Just
instance ToLens (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI)))
    where type S (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          toLens _ = id
instance ToLens (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI)))
    where type S (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = URI
          toLens (Path_Just v) = _Just . toLens v
