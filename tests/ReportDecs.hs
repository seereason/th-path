-- | Use template haskell functions to generate the path types for appraisalscribe.
{-# LANGUAGE CPP #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wall -fno-warn-orphans -fno-warn-incomplete-patterns #-}
module ReportDecs where

import Appraisal.File (File)
import Appraisal.Image
import Appraisal.ImageFile
import Appraisal.IntJS
import Appraisal.Markup (Markup(..))
import Appraisal.Permissions
import Appraisal.Report
import Appraisal.ReportImage
import Appraisal.ReportInstances
import Appraisal.ReportItem
import Appraisal.ReportMap (ReportID(..), ReportMap(..), MRR)
import Appraisal.Utils.CIString (CIString(..))
import Control.Lens (iso, _Just, _1, _2, _Left, _Right, Lens', toListOf, Traversal')
import Data.Generics (Data, Typeable)
import Data.Int (Int64)
import Data.Map (toList)
import Data.Proxy
import Data.Text (Text)
import Data.Tree (Tree(Node), Forest)
import Data.UserId (UserId(UserId))
import Data.UUID (UUID)
import Data.UUID.Orphans ()
import Language.Haskell.TH.Path.Core
import Language.Haskell.TH.Path.Order (lens_omat, Path_OMap(Path_At), toPairs)
import Language.Haskell.TH.Path.View (View(viewLens))
import Network.URI (URI(URI), URIAuth)

data Path_Author _a
    = Path_Author_authorName (Path_Markup _a) | Path_Author_authorCredentials (Path_Markup _a) | Path_Author
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Bool _a = Path_Bool_View (Path_String _a) | Path_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Branding _a = Path_Branding_View (Path_Text _a) | Path_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_CIString _a = Path_CIString_View (Path_Text _a) | Path_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Dimension _a = Path_Dimension_View (Path_JSONText _a) | Path_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Double _a = Path_Double_View (Path_String _a) | Path_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageCrop _a = Path_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageFile _a = Path_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ImageSize _a
    = Path_ImageSize_dim (Path_Dimension _a) | Path_ImageSize_size (Path_Double _a) | Path_ImageSize_units (Path_Units _a) | Path_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int _a = Path_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Int64 _a = Path_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Integer _a = Path_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Item _a
    = Path_Item_itemName (Path_Text _a) | Path_Item_fields (Path_MIM _a) | Path_Item_images (Path_ReportImages _a) | Path_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_JSONText _a = Path_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Markup _a = Path_Markup_markdownText (Path_Text _a) | Path_Markup_htmlText (Path_Text _a) | Path_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeImageFile _a = Path_MaybeImageFile_View (Path_String _a) | Path_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_MaybeReportIntendedUse _a = Path_MaybeReportIntendedUse_View (Path_String _a) | Path_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Permissions _a
    = Path_Permissions_owner (Path_UserId _a) | Path_Permissions_writers (Path_UserIds _a) | Path_Permissions_readers (Path_UserIds _a) | Path_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReadOnlyFilePath _a = Path_ReadOnlyFilePath_View (Path_String _a) | Path_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Report _a = Path_Report_View (Path_ReportView _a) | Path_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportElem _a
    = Path_ReportElem_elemItem (Path_Item _a) | Path_ReportElem_elemText (Path_Markup _a) | Path_ReportElem
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportFlags _a = Path_ReportFlags_hideEmptyItemFields (Path_Bool _a) | Path_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImage _a = Path_ReportImage_View (Path_ReportImageView _a) | Path_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportImageView _a
    = Path_ReportImageView__picSize (Path_SaneSizeImageSize _a)
    | Path_ReportImageView__picCrop (Path_ImageCrop _a)
    | Path_ReportImageView__picCaption (Path_Markup _a)
    | Path_ReportImageView__picOriginal (Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a)))
    | Path_ReportImageView__picEditedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picThumbDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picPrinterDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView__picMustEnlarge (Path_Bool _a)
    | Path_ReportImageView__picEnlargedDeprecated (Path_MaybeImageFile _a)
    | Path_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportIntendedUse _a = Path_ReportIntendedUse_View (Path_String _a) | Path_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportMap _a = Path_ReportMap_unReportMap (Path_MRR _a) | Path_ReportMap deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStandard _a = Path_ReportStandard_unReportStandard (Path_Int _a) | Path_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportStatus _a = Path_ReportStatus_View (Path_String _a) | Path_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueApproachInfo _a
    = Path_ReportValueApproachInfo_reportValueApproachName (Path_Markup _a)
    | Path_ReportValueApproachInfo_reportValueApproachDescription (Path_Markup _a)
    | Path_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportValueTypeInfo _a
    = Path_ReportValueTypeInfo_reportValueTypeName (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDescription (Path_Markup _a)
    | Path_ReportValueTypeInfo_reportValueTypeDefinition (Path_Markup _a)
    | Path_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_ReportView _a
    = Path_ReportView__reportFolder (Path_ReadOnlyFilePath _a)
    | Path_ReportView__reportName (Path_Markup _a)
    | Path_ReportView__reportDate (Path_Markup _a)
    | Path_ReportView__reportContractDate (Path_Markup _a)
    | Path_ReportView__reportInspectionDate (Path_Markup _a)
    | Path_ReportView__reportEffectiveDate (Path_Markup _a)
    | Path_ReportView__reportAuthors (Path_Authors _a)
    | Path_ReportView__reportPreparer (Path_Markup _a)
    | Path_ReportView__reportPreparerEIN (Path_Markup _a)
    | Path_ReportView__reportPreparerAddress (Path_Markup _a)
    | Path_ReportView__reportPreparerEMail (Path_Markup _a)
    | Path_ReportView__reportPreparerWebsite (Path_Markup _a)
    | Path_ReportView__reportAbbrevs (Path_AbbrevPairs _a)
    | Path_ReportView__reportTitle (Path_Markup _a)
    | Path_ReportView__reportHeader (Path_Markup _a)
    | Path_ReportView__reportFooter (Path_Markup _a)
    | Path_ReportView__reportIntendedUse (Path_MaybeReportIntendedUse _a)
    | Path_ReportView__reportValueTypeInfo (Path_ReportValueTypeInfo _a)
    | Path_ReportView__reportValueApproachInfo (Path_ReportValueApproachInfo _a)
    | Path_ReportView__reportClientName (Path_Markup _a)
    | Path_ReportView__reportClientAddress (Path_Markup _a)
    | Path_ReportView__reportClientGreeting (Path_Markup _a)
    | Path_ReportView__reportItemsOwnerFull (Path_Markup _a)
    | Path_ReportView__reportItemsOwner (Path_Markup _a)
    | Path_ReportView__reportBriefItems (Path_Markup _a)
    | Path_ReportView__reportInspectionLocation (Path_Markup _a)
    | Path_ReportView__reportBody (Path_ReportElems _a)
    | Path_ReportView__reportGlossary (Path_MarkupPairs _a)
    | Path_ReportView__reportSources (Path_MarkupPairs _a)
    | Path_ReportView__reportLetterOfTransmittal (Path_Markup _a)
    | Path_ReportView__reportScopeOfWork (Path_Markup _a)
    | Path_ReportView__reportCertification (Path_Markups _a)
    | Path_ReportView__reportLimitingConditions (Path_Markups _a)
    | Path_ReportView__reportPrivacyPolicy (Path_Markup _a)
    | Path_ReportView__reportPerms (Path_Permissions _a)
    | Path_ReportView__reportRevision (Path_Integer _a)
    | Path_ReportView__reportCreated (Path_EpochMilli _a)
    | Path_ReportView__reportBranding (Path_Branding _a)
    | Path_ReportView__reportStatus (Path_ReportStatus _a)
    | Path_ReportView__reportRedacted (Path_Bool _a)
    | Path_ReportView__reportFlags (Path_ReportFlags _a)
    | Path_ReportView__reportUUID (Path_UUID _a)
    | Path_ReportView__reportOrderByItemName (Path_Bool _a)
    | Path_ReportView__reportDisplayItemName (Path_Bool _a)
    | Path_ReportView__reportStandardsVersion (Path_ReportStandard _a)
    | Path_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_SaneSizeImageSize _a = Path_SaneSizeImageSize_View (Path_ImageSize _a) | Path_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_String _a = Path_String_View (Path_JSONText _a) | Path_String deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Text _a = Path_Text_View (Path_JSONText _a) | Path_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_URI _a = Path_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UUID _a = Path_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_Units _a = Path_Units_View (Path_JSONText _a) | Path_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserId _a = Path_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
data Path_UserIds _a = Path_UserIds_View (Path_Text _a) | Path_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
data Univ
    = U1 String
    | U2 Int64
    | U3 Int
    | U4 Bool
    | U5 Double
    | U6 Dimension
    | U7 ImageCrop
    | U8 ImageSize
    | U9 Units
    | U10 ImageFile
    | U11 Integer
    | U12 JSONText
    | U13 Markup
    | U14 Permissions
    | U15 UserIds
    | U16 AbbrevPair
    | U17 AbbrevPairs
    | U18 Author
    | U19 Authors
    | U20 Branding
    | U21 MarkupPair
    | U22 MarkupPairs
    | U23 Markups
    | U24 MaybeReportIntendedUse
    | U25 Report
    | U26 ReportElem
    | U27 ReportElems
    | U28 ReportFlags
    | U29 ReportIntendedUse
    | U30 ReportStandard
    | U31 ReportStatus
    | U32 ReportValueApproachInfo
    | U33 ReportValueTypeInfo
    | U34 EUI
    | U35 MEUI
    | U36 MaybeImageFile
    | U37 ReportImage
    | U38 ReportImages
    | U39 ReadOnlyFilePath
    | U40 ReportImageView
    | U41 ReportView
    | U42 SaneSizeImageSize
    | U43 Item
    | U44 MIM
    | U45 MRR
    | U46 ReportMap
    | U47 CIString
    | U48 URI
    | U49 Text
    | U50 UserId
    | U51 UUID
type Path_AbbrevPair _a = Path_Pair (Path_CIString _a) (Path_Markup _a)
type Path_AbbrevPairs _a = Path_OMap AbbrevPairID (Path_Pair (Path_CIString _a) (Path_Markup _a))
type Path_Authors _a = Path_OMap AuthorID (Path_Author _a)
type Path_Checksum _a = Path_String _a
type Path_EUI _a = Path_Either (Path_URI _a) (Path_ImageFile _a)
type Path_EpochMilli _a = Path_Int64 _a
type Path_FilePath _a = Path_String _a
type Path_MEUI _a = Path_Maybe (Path_Either (Path_URI _a) (Path_ImageFile _a))
type Path_MIM _a = Path_Map ItemFieldName (Path_Markup _a)
type Path_MRR _a = Path_Map ReportID (Path_Report _a)
type Path_MarkupPair _a = Path_Pair (Path_Markup _a) (Path_Markup _a)
type Path_MarkupPairs _a = Path_OMap MarkupPairID (Path_Pair (Path_Markup _a) (Path_Markup _a))
type Path_Markups _a = Path_OMap MarkupID (Path_Markup _a)
type Path_ReportElems _a = Path_OMap ReportElemID (Path_ReportElem _a)
type Path_ReportImages _a = Path_OMap ReportImageID (Path_ReportImage _a)
type Path_Size _a = Path_Int _a
class HasAuthor c
    where lens_author :: Lens' c Author
          lens_Author_authorCredentials :: forall . Lens' c Markup
          lens_Author_authorCredentials = (.) lens_author lens_Author_authorCredentials
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName :: forall . Lens' c Markup
          lens_Author_authorName = (.) lens_author lens_Author_authorName
          {-# INLINE lens_Author_authorName #-}
class HasBool c
    where lens_bool :: Lens' c Bool
class HasBranding c
    where lens_branding :: Lens' c Branding
class HasCIString c
    where lens_cIString :: Lens' c CIString
          lens_CIString_unCIString :: forall . Lens' c String
          lens_CIString_unCIString = (.) lens_cIString lens_CIString_unCIString
          {-# INLINE lens_CIString_unCIString #-}
class HasDimension c
    where lens_dimension :: Lens' c Dimension
class HasDouble c
    where lens_double :: Lens' c Double
class HasImageCrop c
    where lens_imageCrop :: Lens' c ImageCrop
          lens_ImageCrop_bottomCrop :: forall . Lens' c Int
          lens_ImageCrop_bottomCrop = (.) lens_imageCrop lens_ImageCrop_bottomCrop
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop :: forall . Lens' c Int
          lens_ImageCrop_leftCrop = (.) lens_imageCrop lens_ImageCrop_leftCrop
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop :: forall . Lens' c Int
          lens_ImageCrop_rightCrop = (.) lens_imageCrop lens_ImageCrop_rightCrop
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation :: forall . Lens' c Int
          lens_ImageCrop_rotation = (.) lens_imageCrop lens_ImageCrop_rotation
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop :: forall . Lens' c Int
          lens_ImageCrop_topCrop = (.) lens_imageCrop lens_ImageCrop_topCrop
          {-# INLINE lens_ImageCrop_topCrop #-}
class HasImageFile c
    where lens_imageFile :: Lens' c ImageFile
          lens_ImageFile_imageFile :: forall . Lens' c File
          lens_ImageFile_imageFile = (.) lens_imageFile lens_ImageFile_imageFile
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight :: forall . Lens' c Int
          lens_ImageFile_imageFileHeight = (.) lens_imageFile lens_ImageFile_imageFileHeight
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal :: forall . Lens' c Int
          lens_ImageFile_imageFileMaxVal = (.) lens_imageFile lens_ImageFile_imageFileMaxVal
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType :: forall . Lens' c ImageType
          lens_ImageFile_imageFileType = (.) lens_imageFile lens_ImageFile_imageFileType
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth :: forall . Lens' c Int
          lens_ImageFile_imageFileWidth = (.) lens_imageFile lens_ImageFile_imageFileWidth
          {-# INLINE lens_ImageFile_imageFileWidth #-}
class HasImageSize c
    where lens_imageSize :: Lens' c ImageSize
          lens_ImageSize_dim :: forall . Lens' c Dimension
          lens_ImageSize_dim = (.) lens_imageSize lens_ImageSize_dim
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size :: forall . Lens' c Double
          lens_ImageSize_size = (.) lens_imageSize lens_ImageSize_size
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units :: forall . Lens' c Units
          lens_ImageSize_units = (.) lens_imageSize lens_ImageSize_units
          {-# INLINE lens_ImageSize_units #-}
class HasInt c
    where lens_int :: Lens' c Int
class HasInt64 c
    where lens_int64 :: Lens' c Int64
class HasInteger c
    where lens_integer :: Lens' c Integer
class HasItem c
    where lens_item :: Lens' c Item
          lens_Item_fields :: forall . Lens' c MIM
          lens_Item_fields = (.) lens_item lens_Item_fields
          {-# INLINE lens_Item_fields #-}
          lens_Item_images :: forall . Lens' c ReportImages
          lens_Item_images = (.) lens_item lens_Item_images
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName :: forall . Lens' c Text
          lens_Item_itemName = (.) lens_item lens_Item_itemName
          {-# INLINE lens_Item_itemName #-}
class HasJSONText c
    where lens_jSONText :: Lens' c JSONText
          lens_JSONText_unJSONText :: forall . Lens' c String
          lens_JSONText_unJSONText = (.) lens_jSONText lens_JSONText_unJSONText
          {-# INLINE lens_JSONText_unJSONText #-}
class HasMarkup c
    where lens_markup :: Lens' c Markup
          lens_Markup_htmlText :: forall . Traversal' c Text
          lens_Markup_htmlText = (.) lens_markup lens_Markup_htmlText
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText :: forall . Traversal' c Text
          lens_Markup_markdownText = (.) lens_markup lens_Markup_markdownText
          {-# INLINE lens_Markup_markdownText #-}
class HasPermissions c
    where lens_permissions :: Lens' c Permissions
          lens_Permissions_owner :: forall . Lens' c UserId
          lens_Permissions_owner = (.) lens_permissions lens_Permissions_owner
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers :: forall . Lens' c UserIds
          lens_Permissions_readers = (.) lens_permissions lens_Permissions_readers
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers :: forall . Lens' c UserIds
          lens_Permissions_writers = (.) lens_permissions lens_Permissions_writers
          {-# INLINE lens_Permissions_writers #-}
class HasReport c
    where lens_report :: Lens' c Report
          lens_Report_reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_Report_reportAbbrevs = (.) lens_report lens_Report_reportAbbrevs
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors :: forall . Lens' c Authors
          lens_Report_reportAuthors = (.) lens_report lens_Report_reportAuthors
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody :: forall . Lens' c ReportElems
          lens_Report_reportBody = (.) lens_report lens_Report_reportBody
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding :: forall . Lens' c Branding
          lens_Report_reportBranding = (.) lens_report lens_Report_reportBranding
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems :: forall . Lens' c Markup
          lens_Report_reportBriefItems = (.) lens_report lens_Report_reportBriefItems
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification :: forall . Lens' c Markups
          lens_Report_reportCertification = (.) lens_report lens_Report_reportCertification
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress :: forall . Lens' c Markup
          lens_Report_reportClientAddress = (.) lens_report lens_Report_reportClientAddress
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting :: forall . Lens' c Markup
          lens_Report_reportClientGreeting = (.) lens_report lens_Report_reportClientGreeting
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName :: forall . Lens' c Markup
          lens_Report_reportClientName = (.) lens_report lens_Report_reportClientName
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate :: forall . Lens' c Markup
          lens_Report_reportContractDate = (.) lens_report lens_Report_reportContractDate
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated :: forall . Lens' c EpochMilli
          lens_Report_reportCreated = (.) lens_report lens_Report_reportCreated
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate :: forall . Lens' c Markup
          lens_Report_reportDate = (.) lens_report lens_Report_reportDate
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName :: forall . Lens' c Bool
          lens_Report_reportDisplayItemName = (.) lens_report lens_Report_reportDisplayItemName
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate :: forall . Lens' c Markup
          lens_Report_reportEffectiveDate = (.) lens_report lens_Report_reportEffectiveDate
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags :: forall . Lens' c ReportFlags
          lens_Report_reportFlags = (.) lens_report lens_Report_reportFlags
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder :: forall . Lens' c FilePath
          lens_Report_reportFolder = (.) lens_report lens_Report_reportFolder
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter :: forall . Lens' c Markup
          lens_Report_reportFooter = (.) lens_report lens_Report_reportFooter
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary :: forall . Lens' c MarkupPairs
          lens_Report_reportGlossary = (.) lens_report lens_Report_reportGlossary
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader :: forall . Lens' c Markup
          lens_Report_reportHeader = (.) lens_report lens_Report_reportHeader
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate :: forall . Lens' c Markup
          lens_Report_reportInspectionDate = (.) lens_report lens_Report_reportInspectionDate
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation :: forall . Lens' c Markup
          lens_Report_reportInspectionLocation = (.) lens_report lens_Report_reportInspectionLocation
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_Report_reportIntendedUse = (.) lens_report lens_Report_reportIntendedUse
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner :: forall . Lens' c Markup
          lens_Report_reportItemsOwner = (.) lens_report lens_Report_reportItemsOwner
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull :: forall . Lens' c Markup
          lens_Report_reportItemsOwnerFull = (.) lens_report lens_Report_reportItemsOwnerFull
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_Report_reportLetterOfTransmittal = (.) lens_report lens_Report_reportLetterOfTransmittal
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions :: forall . Lens' c Markups
          lens_Report_reportLimitingConditions = (.) lens_report lens_Report_reportLimitingConditions
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName :: forall . Lens' c Markup
          lens_Report_reportName = (.) lens_report lens_Report_reportName
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName :: forall . Lens' c Bool
          lens_Report_reportOrderByItemName = (.) lens_report lens_Report_reportOrderByItemName
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms :: forall . Lens' c Permissions
          lens_Report_reportPerms = (.) lens_report lens_Report_reportPerms
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer :: forall . Lens' c Markup
          lens_Report_reportPreparer = (.) lens_report lens_Report_reportPreparer
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress :: forall . Lens' c Markup
          lens_Report_reportPreparerAddress = (.) lens_report lens_Report_reportPreparerAddress
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN :: forall . Lens' c Markup
          lens_Report_reportPreparerEIN = (.) lens_report lens_Report_reportPreparerEIN
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail :: forall . Lens' c Markup
          lens_Report_reportPreparerEMail = (.) lens_report lens_Report_reportPreparerEMail
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite :: forall . Lens' c Markup
          lens_Report_reportPreparerWebsite = (.) lens_report lens_Report_reportPreparerWebsite
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy :: forall . Lens' c Markup
          lens_Report_reportPrivacyPolicy = (.) lens_report lens_Report_reportPrivacyPolicy
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted :: forall . Lens' c Bool
          lens_Report_reportRedacted = (.) lens_report lens_Report_reportRedacted
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision :: forall . Lens' c Integer
          lens_Report_reportRevision = (.) lens_report lens_Report_reportRevision
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork :: forall . Lens' c Markup
          lens_Report_reportScopeOfWork = (.) lens_report lens_Report_reportScopeOfWork
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources :: forall . Lens' c MarkupPairs
          lens_Report_reportSources = (.) lens_report lens_Report_reportSources
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_Report_reportStandardsVersion = (.) lens_report lens_Report_reportStandardsVersion
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus :: forall . Lens' c ReportStatus
          lens_Report_reportStatus = (.) lens_report lens_Report_reportStatus
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle :: forall . Lens' c Markup
          lens_Report_reportTitle = (.) lens_report lens_Report_reportTitle
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID :: forall . Lens' c UUID
          lens_Report_reportUUID = (.) lens_report lens_Report_reportUUID
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_Report_reportValueApproachInfo = (.) lens_report lens_Report_reportValueApproachInfo
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_Report_reportValueTypeInfo = (.) lens_report lens_Report_reportValueTypeInfo
          {-# INLINE lens_Report_reportValueTypeInfo #-}
class HasReportElem c
    where lens_reportElem :: Lens' c ReportElem
          lens_ReportElem_elemItem :: forall . Traversal' c Item
          lens_ReportElem_elemItem = (.) lens_reportElem lens_ReportElem_elemItem
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText :: forall . Traversal' c Markup
          lens_ReportElem_elemText = (.) lens_reportElem lens_ReportElem_elemText
          {-# INLINE lens_ReportElem_elemText #-}
class HasReportFlags c
    where lens_reportFlags :: Lens' c ReportFlags
          lens_ReportFlags_hideEmptyItemFields :: forall . Lens' c Bool
          lens_ReportFlags_hideEmptyItemFields = (.) lens_reportFlags lens_ReportFlags_hideEmptyItemFields
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
class HasReportImage c
    where lens_reportImage :: Lens' c ReportImage
          lens_ReportImage_picCaption :: forall . Lens' c Markup
          lens_ReportImage_picCaption = (.) lens_reportImage lens_ReportImage_picCaption
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop :: forall . Lens' c ImageCrop
          lens_ReportImage_picCrop = (.) lens_reportImage lens_ReportImage_picCrop
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEditedDeprecated = (.) lens_reportImage lens_ReportImage_picEditedDeprecated
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEnlargedDeprecated = (.) lens_reportImage lens_ReportImage_picEnlargedDeprecated
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImage_picMustEnlarge = (.) lens_reportImage lens_ReportImage_picMustEnlarge
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal :: forall . Lens' c MEUI
          lens_ReportImage_picOriginal = (.) lens_reportImage lens_ReportImage_picOriginal
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picPrinterDeprecated = (.) lens_reportImage lens_ReportImage_picPrinterDeprecated
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize :: forall . Lens' c ImageSize
          lens_ReportImage_picSize = (.) lens_reportImage lens_ReportImage_picSize
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picThumbDeprecated = (.) lens_reportImage lens_ReportImage_picThumbDeprecated
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
class HasReportImageView c
    where lens_reportImageView :: Lens' c ReportImageView
          lens_ReportImageView__picCaption :: forall . Lens' c Markup
          lens_ReportImageView__picCaption = (.) lens_reportImageView lens_ReportImageView__picCaption
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop :: forall . Lens' c ImageCrop
          lens_ReportImageView__picCrop = (.) lens_reportImageView lens_ReportImageView__picCrop
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEditedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEditedDeprecated
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEnlargedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEnlargedDeprecated
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImageView__picMustEnlarge = (.) lens_reportImageView lens_ReportImageView__picMustEnlarge
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal :: forall . Lens' c (Maybe (Either URI ImageFile))
          lens_ReportImageView__picOriginal = (.) lens_reportImageView lens_ReportImageView__picOriginal
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picPrinterDeprecated = (.) lens_reportImageView lens_ReportImageView__picPrinterDeprecated
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize :: forall . Lens' c SaneSizeImageSize
          lens_ReportImageView__picSize = (.) lens_reportImageView lens_ReportImageView__picSize
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picThumbDeprecated = (.) lens_reportImageView lens_ReportImageView__picThumbDeprecated
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
class HasReportIntendedUse c
    where lens_reportIntendedUse :: Lens' c ReportIntendedUse
class HasReportMap c
    where lens_reportMap :: Lens' c ReportMap
          lens_ReportMap_unReportMap :: forall . Lens' c MRR
          lens_ReportMap_unReportMap = (.) lens_reportMap lens_ReportMap_unReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
class HasReportStandard c
    where lens_reportStandard :: Lens' c ReportStandard
          lens_ReportStandard_unReportStandard :: forall . Lens' c Int
          lens_ReportStandard_unReportStandard = (.) lens_reportStandard lens_ReportStandard_unReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
class HasReportStatus c
    where lens_reportStatus :: Lens' c ReportStatus
class HasReportValueApproachInfo c
    where lens_reportValueApproachInfo :: Lens' c ReportValueApproachInfo
          lens_ReportValueApproachInfo_reportValueApproachDescription :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachDescription = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachDescription
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachName = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachName
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
class HasReportValueTypeInfo c
    where lens_reportValueTypeInfo :: Lens' c ReportValueTypeInfo
          lens_ReportValueTypeInfo_reportValueTypeDefinition :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDefinition = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDefinition
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDescription = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDescription
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeName = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeName
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
class HasReportView c
    where lens_reportView :: Lens' c ReportView
          lens_ReportView__reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_ReportView__reportAbbrevs = (.) lens_reportView lens_ReportView__reportAbbrevs
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors :: forall . Lens' c Authors
          lens_ReportView__reportAuthors = (.) lens_reportView lens_ReportView__reportAuthors
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody :: forall . Lens' c ReportElems
          lens_ReportView__reportBody = (.) lens_reportView lens_ReportView__reportBody
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding :: forall . Lens' c Branding
          lens_ReportView__reportBranding = (.) lens_reportView lens_ReportView__reportBranding
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems :: forall . Lens' c Markup
          lens_ReportView__reportBriefItems = (.) lens_reportView lens_ReportView__reportBriefItems
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification :: forall . Lens' c Markups
          lens_ReportView__reportCertification = (.) lens_reportView lens_ReportView__reportCertification
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress :: forall . Lens' c Markup
          lens_ReportView__reportClientAddress = (.) lens_reportView lens_ReportView__reportClientAddress
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting :: forall . Lens' c Markup
          lens_ReportView__reportClientGreeting = (.) lens_reportView lens_ReportView__reportClientGreeting
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName :: forall . Lens' c Markup
          lens_ReportView__reportClientName = (.) lens_reportView lens_ReportView__reportClientName
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate :: forall . Lens' c Markup
          lens_ReportView__reportContractDate = (.) lens_reportView lens_ReportView__reportContractDate
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated :: forall . Lens' c EpochMilli
          lens_ReportView__reportCreated = (.) lens_reportView lens_ReportView__reportCreated
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate :: forall . Lens' c Markup
          lens_ReportView__reportDate = (.) lens_reportView lens_ReportView__reportDate
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName :: forall . Lens' c Bool
          lens_ReportView__reportDisplayItemName = (.) lens_reportView lens_ReportView__reportDisplayItemName
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate :: forall . Lens' c Markup
          lens_ReportView__reportEffectiveDate = (.) lens_reportView lens_ReportView__reportEffectiveDate
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags :: forall . Lens' c ReportFlags
          lens_ReportView__reportFlags = (.) lens_reportView lens_ReportView__reportFlags
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder :: forall . Lens' c ReadOnlyFilePath
          lens_ReportView__reportFolder = (.) lens_reportView lens_ReportView__reportFolder
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter :: forall . Lens' c Markup
          lens_ReportView__reportFooter = (.) lens_reportView lens_ReportView__reportFooter
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary :: forall . Lens' c MarkupPairs
          lens_ReportView__reportGlossary = (.) lens_reportView lens_ReportView__reportGlossary
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader :: forall . Lens' c Markup
          lens_ReportView__reportHeader = (.) lens_reportView lens_ReportView__reportHeader
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate :: forall . Lens' c Markup
          lens_ReportView__reportInspectionDate = (.) lens_reportView lens_ReportView__reportInspectionDate
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation :: forall . Lens' c Markup
          lens_ReportView__reportInspectionLocation = (.) lens_reportView lens_ReportView__reportInspectionLocation
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_ReportView__reportIntendedUse = (.) lens_reportView lens_ReportView__reportIntendedUse
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwner = (.) lens_reportView lens_ReportView__reportItemsOwner
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwnerFull = (.) lens_reportView lens_ReportView__reportItemsOwnerFull
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_ReportView__reportLetterOfTransmittal = (.) lens_reportView lens_ReportView__reportLetterOfTransmittal
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions :: forall . Lens' c Markups
          lens_ReportView__reportLimitingConditions = (.) lens_reportView lens_ReportView__reportLimitingConditions
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName :: forall . Lens' c Markup
          lens_ReportView__reportName = (.) lens_reportView lens_ReportView__reportName
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName :: forall . Lens' c Bool
          lens_ReportView__reportOrderByItemName = (.) lens_reportView lens_ReportView__reportOrderByItemName
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms :: forall . Lens' c Permissions
          lens_ReportView__reportPerms = (.) lens_reportView lens_ReportView__reportPerms
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer :: forall . Lens' c Markup
          lens_ReportView__reportPreparer = (.) lens_reportView lens_ReportView__reportPreparer
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress :: forall . Lens' c Markup
          lens_ReportView__reportPreparerAddress = (.) lens_reportView lens_ReportView__reportPreparerAddress
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEIN = (.) lens_reportView lens_ReportView__reportPreparerEIN
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEMail = (.) lens_reportView lens_ReportView__reportPreparerEMail
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite :: forall . Lens' c Markup
          lens_ReportView__reportPreparerWebsite = (.) lens_reportView lens_ReportView__reportPreparerWebsite
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy :: forall . Lens' c Markup
          lens_ReportView__reportPrivacyPolicy = (.) lens_reportView lens_ReportView__reportPrivacyPolicy
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted :: forall . Lens' c Bool
          lens_ReportView__reportRedacted = (.) lens_reportView lens_ReportView__reportRedacted
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision :: forall . Lens' c Integer
          lens_ReportView__reportRevision = (.) lens_reportView lens_ReportView__reportRevision
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork :: forall . Lens' c Markup
          lens_ReportView__reportScopeOfWork = (.) lens_reportView lens_ReportView__reportScopeOfWork
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources :: forall . Lens' c MarkupPairs
          lens_ReportView__reportSources = (.) lens_reportView lens_ReportView__reportSources
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_ReportView__reportStandardsVersion = (.) lens_reportView lens_ReportView__reportStandardsVersion
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus :: forall . Lens' c ReportStatus
          lens_ReportView__reportStatus = (.) lens_reportView lens_ReportView__reportStatus
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle :: forall . Lens' c Markup
          lens_ReportView__reportTitle = (.) lens_reportView lens_ReportView__reportTitle
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID :: forall . Lens' c UUID
          lens_ReportView__reportUUID = (.) lens_reportView lens_ReportView__reportUUID
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_ReportView__reportValueApproachInfo = (.) lens_reportView lens_ReportView__reportValueApproachInfo
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_ReportView__reportValueTypeInfo = (.) lens_reportView lens_ReportView__reportValueTypeInfo
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
class HasText c
    where lens_text :: Lens' c Text
class HasURI c
    where lens_uRI :: Lens' c URI
          lens_URI_uriAuthority :: forall . Lens' c (Maybe URIAuth)
          lens_URI_uriAuthority = (.) lens_uRI lens_URI_uriAuthority
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment :: forall . Lens' c String
          lens_URI_uriFragment = (.) lens_uRI lens_URI_uriFragment
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath :: forall . Lens' c String
          lens_URI_uriPath = (.) lens_uRI lens_URI_uriPath
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery :: forall . Lens' c String
          lens_URI_uriQuery = (.) lens_uRI lens_URI_uriQuery
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme :: forall . Lens' c String
          lens_URI_uriScheme = (.) lens_uRI lens_URI_uriScheme
          {-# INLINE lens_URI_uriScheme #-}
class HasUUID c
    where lens_uUID :: Lens' c UUID
class HasUnits c
    where lens_units :: Lens' c Units
class HasUserId c
    where lens_userId :: Lens' c UserId
          lens_UserId__unUserId :: forall . Lens' c Integer
          lens_UserId__unUserId = (.) lens_userId lens_UserId__unUserId
          {-# INLINE lens_UserId__unUserId #-}
instance Paths Univ String String
    where type Path Univ String String = Path_String String
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ String
          peekPath (Proxy) (Peek_String_String _p _) = _p :: Path Univ String String
          peekValue (Proxy) (Peek_String_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_String_String _p _x :: Peek Univ String
instance Paths Univ String JSONText
    where type Path Univ String JSONText = Path_String JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_String_View :: Path Univ JSONText JSONText ->
                                                                                                                                                                                 Path Univ String JSONText,
                                                                                                                                                             a')) (toListOf (toLens (Path_String_View (idPath :: Path Univ
                                                                                                                                                                                                                      JSONText
                                                                                                                                                                                                                      JSONText))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                JSONText
                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                                String
                                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                                           JSONText)]) :: [Path Univ
                                                                                                                                                                                                                                                                String
                                                                                                                                                                                                                                                                JSONText])
          peek (p@(Path_String_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ String
          peekPath (Proxy) (Peek_String_JSONText _p _) = _p :: Path Univ String JSONText
          peekValue (Proxy) (Peek_String_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_String_JSONText _p _x :: Peek Univ String
instance Paths Univ Int64 Int64
    where type Path Univ Int64 Int64 = Path_Int64 Int64
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Int64
          peekPath (Proxy) (Peek_Int64_Int64 _p _) = _p :: Path Univ Int64 Int64
          peekValue (Proxy) (Peek_Int64_Int64 _ _x) = _x :: Maybe Int64
          peekCons _p _x = Peek_Int64_Int64 _p _x :: Peek Univ Int64
instance Paths Univ Bool String
    where type Path Univ Bool String = Path_Bool String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Bool_View :: Path Univ String String -> Path Univ Bool String,
                                                                                                                                                           a')) (toListOf (toLens (Path_Bool_View (idPath :: Path Univ String String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      String ->
                                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                                      Bool
                                                                                                                                                                                                                                                      String,
                                                                                                                                                                                                                                                 String)]) :: [Path Univ
                                                                                                                                                                                                                                                                    Bool
                                                                                                                                                                                                                                                                    String])
          peek (p@(Path_Bool_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Bool
          peekPath (Proxy) (Peek_Bool_String _p _) = _p :: Path Univ Bool String
          peekValue (Proxy) (Peek_Bool_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_Bool_String _p _x :: Peek Univ Bool
instance Paths Univ Bool Bool
    where type Path Univ Bool Bool = Path_Bool Bool
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Bool
          peekPath (Proxy) (Peek_Bool_Bool _p _) = _p :: Path Univ Bool Bool
          peekValue (Proxy) (Peek_Bool_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_Bool_Bool _p _x :: Peek Univ Bool
instance Paths Univ Bool JSONText
    where type Path Univ Bool JSONText = Path_Bool JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Bool_View :: Path Univ String JSONText -> Path Univ Bool JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_Bool_View (idPath :: Path Univ String String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                                      Bool
                                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                                 String)]) :: [Path Univ
                                                                                                                                                                                                                                                                    Bool
                                                                                                                                                                                                                                                                    JSONText])
          peek (p@(Path_Bool_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Bool
          peekPath (Proxy) (Peek_Bool_JSONText _p _) = _p :: Path Univ Bool JSONText
          peekValue (Proxy) (Peek_Bool_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Bool_JSONText _p _x :: Peek Univ Bool
instance Paths Univ Double String
    where type Path Univ Double String = Path_Double String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Double_View :: Path Univ String String -> Path Univ Double String,
                                                                                                                                                           a')) (toListOf (toLens (Path_Double_View (idPath :: Path Univ
                                                                                                                                                                                                                    String
                                                                                                                                                                                                                    String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                            String ->
                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                            Double
                                                                                                                                                                                                                                            String,
                                                                                                                                                                                                                                       String)]) :: [Path Univ
                                                                                                                                                                                                                                                          Double
                                                                                                                                                                                                                                                          String])
          peek (p@(Path_Double_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Double
          peekPath (Proxy) (Peek_Double_String _p _) = _p :: Path Univ Double String
          peekValue (Proxy) (Peek_Double_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_Double_String _p _x :: Peek Univ Double
instance Paths Univ Double Double
    where type Path Univ Double Double = Path_Double Double
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Double
          peekPath (Proxy) (Peek_Double_Double _p _) = _p :: Path Univ Double Double
          peekValue (Proxy) (Peek_Double_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_Double_Double _p _x :: Peek Univ Double
instance Paths Univ Double JSONText
    where type Path Univ Double JSONText = Path_Double JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Double_View :: Path Univ String JSONText ->
                                                                                                                                                                               Path Univ Double JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_Double_View (idPath :: Path Univ
                                                                                                                                                                                                                    String
                                                                                                                                                                                                                    String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                            JSONText ->
                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                            Double
                                                                                                                                                                                                                                            JSONText,
                                                                                                                                                                                                                                       String)]) :: [Path Univ
                                                                                                                                                                                                                                                          Double
                                                                                                                                                                                                                                                          JSONText])
          peek (p@(Path_Double_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Double
          peekPath (Proxy) (Peek_Double_JSONText _p _) = _p :: Path Univ Double JSONText
          peekValue (Proxy) (Peek_Double_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Double_JSONText _p _x :: Peek Univ Double
instance Paths Univ Int Int
    where type Path Univ Int Int = Path_Int Int
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Int
          peekPath (Proxy) (Peek_Int_Int _p _) = _p :: Path Univ Int Int
          peekValue (Proxy) (Peek_Int_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_Int_Int _p _x :: Peek Univ Int
instance Paths Univ Dimension Dimension
    where type Path Univ Dimension Dimension = Path_Dimension Dimension
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Dimension
          peekPath (Proxy) (Peek_Dimension_Dimension _p _) = _p :: Path Univ Dimension Dimension
          peekValue (Proxy) (Peek_Dimension_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_Dimension_Dimension _p _x :: Peek Univ Dimension
instance Paths Univ Dimension JSONText
    where type Path Univ Dimension JSONText = Path_Dimension JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Dimension_View :: Path Univ JSONText JSONText ->
                                                                                                                                                                                    Path Univ Dimension JSONText,
                                                                                                                                                             a')) (toListOf (toLens (Path_Dimension_View (idPath :: Path Univ
                                                                                                                                                                                                                         JSONText
                                                                                                                                                                                                                         JSONText))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                   JSONText
                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                   Dimension
                                                                                                                                                                                                                                                   JSONText,
                                                                                                                                                                                                                                              JSONText)]) :: [Path Univ
                                                                                                                                                                                                                                                                   Dimension
                                                                                                                                                                                                                                                                   JSONText])
          peek (p@(Path_Dimension_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Dimension
          peekPath (Proxy) (Peek_Dimension_JSONText _p _) = _p :: Path Univ Dimension JSONText
          peekValue (Proxy) (Peek_Dimension_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Dimension_JSONText _p _x :: Peek Univ Dimension
instance Paths Univ ImageCrop ImageCrop
    where type Path Univ ImageCrop ImageCrop = Path_ImageCrop ImageCrop
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ImageCrop
          peekPath (Proxy) (Peek_ImageCrop_ImageCrop _p _) = _p :: Path Univ ImageCrop ImageCrop
          peekValue (Proxy) (Peek_ImageCrop_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ImageCrop_ImageCrop _p _x :: Peek Univ ImageCrop
instance Paths Univ ImageSize String
    where type Path Univ ImageSize String = Path_ImageSize String
          paths (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(Path Univ Double String ->
                                                                                                                                                                                                     Path Univ ImageSize String,
                                                                                                                                                                                                     Double)]) :: [Path Univ ImageSize String])
          peek (p@(Path_ImageSize_size _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_String _p _) = _p :: Path Univ ImageSize String
          peekValue (Proxy) (Peek_ImageSize_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ImageSize_String _p _x :: Peek Univ ImageSize
instance Paths Univ ImageSize Double
    where type Path Univ ImageSize Double = Path_ImageSize Double
          paths (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(Path Univ Double Double ->
                                                                                                                                                                                                     Path Univ ImageSize Double,
                                                                                                                                                                                                     Double)]) :: [Path Univ ImageSize Double])
          peek (p@(Path_ImageSize_size _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_Double _p _) = _p :: Path Univ ImageSize Double
          peekValue (Proxy) (Peek_ImageSize_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ImageSize_Double _p _x :: Peek Univ ImageSize
instance Paths Univ ImageSize Dimension
    where type Path Univ ImageSize Dimension = Path_ImageSize Dimension
          paths (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: Dimension) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_dim, dim _s)] :: [(Path Univ Dimension Dimension ->
                                                                                                                                                                                                      Path Univ ImageSize Dimension,
                                                                                                                                                                                                      Dimension)]) :: [Path Univ ImageSize Dimension])
          peek (p@(Path_ImageSize_dim _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_Dimension _p _) = _p :: Path Univ ImageSize Dimension
          peekValue (Proxy) (Peek_ImageSize_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ImageSize_Dimension _p _x :: Peek Univ ImageSize
instance Paths Univ ImageSize ImageSize
    where type Path Univ ImageSize ImageSize = Path_ImageSize ImageSize
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_ImageSize _p _) = _p :: Path Univ ImageSize ImageSize
          peekValue (Proxy) (Peek_ImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ImageSize_ImageSize _p _x :: Peek Univ ImageSize
instance Paths Univ ImageSize Units
    where type Path Univ ImageSize Units = Path_ImageSize Units
          paths (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: Units) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_units, units _s)] :: [(Path Univ Units Units ->
                                                                                                                                                                                                      Path Univ ImageSize Units,
                                                                                                                                                                                                      Units)]) :: [Path Univ ImageSize Units])
          peek (p@(Path_ImageSize_units _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_Units _p _) = _p :: Path Univ ImageSize Units
          peekValue (Proxy) (Peek_ImageSize_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ImageSize_Units _p _x :: Peek Univ ImageSize
instance Paths Univ ImageSize JSONText
    where type Path Univ ImageSize JSONText = Path_ImageSize JSONText
          paths (Proxy) (_s@(ImageSize {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                        a') -> paths (Proxy :: Proxy Univ) (a' :: Dimension) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_dim, dim _s)] :: [(Path Univ Dimension JSONText ->
                                                                                                                                                                                                               Path Univ ImageSize JSONText,
                                                                                                                                                                                                               Dimension)]),
                                                                           concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Double) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_size, size _s)] :: [(Path Univ Double JSONText ->
                                                                                                                                                                                                                 Path Univ ImageSize JSONText,
                                                                                                                                                                                                                 Double)]),
                                                                           concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Units) _g (\npt r -> p npt : r) []) ([(Path_ImageSize_units, units _s)] :: [(Path Univ Units JSONText ->
                                                                                                                                                                                                                  Path Univ ImageSize JSONText,
                                                                                                                                                                                                                  Units)])] :: [Path Univ
                                                                                                                                                                                                                                     ImageSize
                                                                                                                                                                                                                                     JSONText])
          peek (p@(Path_ImageSize_dim _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peek (p@(Path_ImageSize_size _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peek (p@(Path_ImageSize_units _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ImageSize
          peekPath (Proxy) (Peek_ImageSize_JSONText _p _) = _p :: Path Univ ImageSize JSONText
          peekValue (Proxy) (Peek_ImageSize_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ImageSize_JSONText _p _x :: Peek Univ ImageSize
instance Paths Univ Units Units
    where type Path Univ Units Units = Path_Units Units
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Units
          peekPath (Proxy) (Peek_Units_Units _p _) = _p :: Path Univ Units Units
          peekValue (Proxy) (Peek_Units_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_Units_Units _p _x :: Peek Univ Units
instance Paths Univ Units JSONText
    where type Path Univ Units JSONText = Path_Units JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Units_View :: Path Univ JSONText JSONText ->
                                                                                                                                                                                Path Univ Units JSONText,
                                                                                                                                                             a')) (toListOf (toLens (Path_Units_View (idPath :: Path Univ
                                                                                                                                                                                                                     JSONText
                                                                                                                                                                                                                     JSONText))) _s) :: [(Path Univ
                                                                                                                                                                                                                                               JSONText
                                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                                               Units
                                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                                          JSONText)]) :: [Path Univ
                                                                                                                                                                                                                                                               Units
                                                                                                                                                                                                                                                               JSONText])
          peek (p@(Path_Units_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Units
          peekPath (Proxy) (Peek_Units_JSONText _p _) = _p :: Path Univ Units JSONText
          peekValue (Proxy) (Peek_Units_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Units_JSONText _p _x :: Peek Univ Units
instance Paths Univ ImageFile ImageFile
    where type Path Univ ImageFile ImageFile = Path_ImageFile ImageFile
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ImageFile
          peekPath (Proxy) (Peek_ImageFile_ImageFile _p _) = _p :: Path Univ ImageFile ImageFile
          peekValue (Proxy) (Peek_ImageFile_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ImageFile_ImageFile _p _x :: Peek Univ ImageFile
instance Paths Univ Integer Integer
    where type Path Univ Integer Integer = Path_Integer Integer
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Integer
          peekPath (Proxy) (Peek_Integer_Integer _p _) = _p :: Path Univ Integer Integer
          peekValue (Proxy) (Peek_Integer_Integer _ _x) = _x :: Maybe Integer
          peekCons _p _x = Peek_Integer_Integer _p _x :: Peek Univ Integer
instance Paths Univ JSONText JSONText
    where type Path Univ JSONText JSONText = Path_JSONText JSONText
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ JSONText
          peekPath (Proxy) (Peek_JSONText_JSONText _p _) = _p :: Path Univ JSONText JSONText
          peekValue (Proxy) (Peek_JSONText_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_JSONText_JSONText _p _x :: Peek Univ JSONText
instance Paths Univ Markup JSONText
    where type Path Univ Markup JSONText = Path_Markup JSONText
          paths (Proxy) (_s@(Markdown {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_markdownText, markdownText _s)] :: [(Path Univ Text JSONText ->
                                                                                                                                                                                                               Path Univ Markup JSONText,
                                                                                                                                                                                                               Text)]) :: [Path Univ Markup JSONText])
          paths (Proxy) (_s@(Html {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_htmlText, htmlText _s)] :: [(Path Univ Text JSONText ->
                                                                                                                                                                                                   Path Univ Markup JSONText,
                                                                                                                                                                                                   Text)]) :: [Path Univ Markup JSONText])
          paths (Proxy) (_s@(LaTeX {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup JSONText])
          paths (Proxy) (_s@(Pandoc {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup JSONText])
          paths (Proxy) (_s@(Markup {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup JSONText])
          peek (p@(Path_Markup_markdownText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markup
          peek (p@(Path_Markup_htmlText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markup
          peekPath (Proxy) (Peek_Markup_JSONText _p _) = _p :: Path Univ Markup JSONText
          peekValue (Proxy) (Peek_Markup_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Markup_JSONText _p _x :: Peek Univ Markup
instance Paths Univ Markup Markup
    where type Path Univ Markup Markup = Path_Markup Markup
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Markup
          peekPath (Proxy) (Peek_Markup_Markup _p _) = _p :: Path Univ Markup Markup
          peekValue (Proxy) (Peek_Markup_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Markup_Markup _p _x :: Peek Univ Markup
instance Paths Univ Markup Text
    where type Path Univ Markup Text = Path_Markup Text
          paths (Proxy) (_s@(Markdown {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_markdownText, markdownText _s)] :: [(Path Univ Text Text ->
                                                                                                                                                                                                               Path Univ Markup Text,
                                                                                                                                                                                                               Text)]) :: [Path Univ Markup Text])
          paths (Proxy) (_s@(Html {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Markup_htmlText, htmlText _s)] :: [(Path Univ Text Text -> Path Univ Markup Text,
                                                                                                                                                                                                   Text)]) :: [Path Univ Markup Text])
          paths (Proxy) (_s@(LaTeX {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup Text])
          paths (Proxy) (_s@(Pandoc {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup Text])
          paths (Proxy) (_s@(Markup {})) _g f r0 = foldr f r0 (mempty :: [Path Univ Markup Text])
          peek (p@(Path_Markup_markdownText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markup
          peek (p@(Path_Markup_htmlText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markup
          peekPath (Proxy) (Peek_Markup_Text _p _) = _p :: Path Univ Markup Text
          peekValue (Proxy) (Peek_Markup_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Markup_Text _p _x :: Peek Univ Markup
instance Paths Univ Permissions JSONText
    where type Path Univ Permissions JSONText = Path_Permissions JSONText
          paths (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(Path Univ UserIds JSONText ->
                                                                                                                                                                                                                         Path Univ Permissions JSONText,
                                                                                                                                                                                                                         UserIds)]),
                                                                             concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(Path Univ
                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                 JSONText,
                                                                                                                                                                                                                            UserIds)])] :: [Path Univ
                                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                                 JSONText])
          peek (p@(Path_Permissions_writers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peek (p@(Path_Permissions_readers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peekPath (Proxy) (Peek_Permissions_JSONText _p _) = _p :: Path Univ Permissions JSONText
          peekValue (Proxy) (Peek_Permissions_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Permissions_JSONText _p _x :: Peek Univ Permissions
instance Paths Univ Permissions Permissions
    where type Path Univ Permissions Permissions = Path_Permissions Permissions
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Permissions
          peekPath (Proxy) (Peek_Permissions_Permissions _p _) = _p :: Path Univ Permissions Permissions
          peekValue (Proxy) (Peek_Permissions_Permissions _ _x) = _x :: Maybe Permissions
          peekCons _p _x = Peek_Permissions_Permissions _p _x :: Peek Univ Permissions
instance Paths Univ Permissions UserIds
    where type Path Univ Permissions UserIds = Path_Permissions UserIds
          paths (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(Path Univ UserIds UserIds ->
                                                                                                                                                                                                                         Path Univ Permissions UserIds,
                                                                                                                                                                                                                         UserIds)]),
                                                                             concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(Path Univ
                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                 UserIds ->
                                                                                                                                                                                                                            Path Univ Permissions UserIds,
                                                                                                                                                                                                                            UserIds)])] :: [Path Univ
                                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                                 UserIds])
          peek (p@(Path_Permissions_writers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peek (p@(Path_Permissions_readers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peekPath (Proxy) (Peek_Permissions_UserIds _p _) = _p :: Path Univ Permissions UserIds
          peekValue (Proxy) (Peek_Permissions_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_Permissions_UserIds _p _x :: Peek Univ Permissions
instance Paths Univ Permissions Text
    where type Path Univ Permissions Text = Path_Permissions Text
          paths (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_writers, writers _s)] :: [(Path Univ UserIds Text ->
                                                                                                                                                                                                                         Path Univ Permissions Text,
                                                                                                                                                                                                                         UserIds)]),
                                                                             concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: UserIds) _g (\npt r -> p npt : r) []) ([(Path_Permissions_readers, readers _s)] :: [(Path Univ
                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                 Text ->
                                                                                                                                                                                                                            Path Univ Permissions Text,
                                                                                                                                                                                                                            UserIds)])] :: [Path Univ
                                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                                 Text])
          peek (p@(Path_Permissions_writers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peek (p@(Path_Permissions_readers _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peekPath (Proxy) (Peek_Permissions_Text _p _) = _p :: Path Univ Permissions Text
          peekValue (Proxy) (Peek_Permissions_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Permissions_Text _p _x :: Peek Univ Permissions
instance Paths Univ Permissions UserId
    where type Path Univ Permissions UserId = Path_Permissions UserId
          paths (Proxy) (_s@(Permissions {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> paths (Proxy :: Proxy Univ) (a' :: UserId) _g (\npt r -> p npt : r) []) ([(Path_Permissions_owner, owner _s)] :: [(Path Univ UserId UserId ->
                                                                                                                                                                                                           Path Univ Permissions UserId,
                                                                                                                                                                                                           UserId)]) :: [Path Univ Permissions UserId])
          peek (p@(Path_Permissions_owner _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Permissions
          peekPath (Proxy) (Peek_Permissions_UserId _p _) = _p :: Path Univ Permissions UserId
          peekValue (Proxy) (Peek_Permissions_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_Permissions_UserId _p _x :: Peek Univ Permissions
instance Paths Univ UserIds JSONText
    where type Path Univ UserIds JSONText = Path_UserIds JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_UserIds_View :: Path Univ Text JSONText -> Path Univ UserIds JSONText,
                                                                                                                                                         a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                   Text
                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                   UserIds
                                                                                                                                                                                                                                                   JSONText,
                                                                                                                                                                                                                                              Text)]) :: [Path Univ
                                                                                                                                                                                                                                                               UserIds
                                                                                                                                                                                                                                                               JSONText])
          peek (p@(Path_UserIds_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ UserIds
          peekPath (Proxy) (Peek_UserIds_JSONText _p _) = _p :: Path Univ UserIds JSONText
          peekValue (Proxy) (Peek_UserIds_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_UserIds_JSONText _p _x :: Peek Univ UserIds
instance Paths Univ UserIds UserIds
    where type Path Univ UserIds UserIds = Path_UserIds UserIds
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ UserIds
          peekPath (Proxy) (Peek_UserIds_UserIds _p _) = _p :: Path Univ UserIds UserIds
          peekValue (Proxy) (Peek_UserIds_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_UserIds_UserIds _p _x :: Peek Univ UserIds
instance Paths Univ UserIds Text
    where type Path Univ UserIds Text = Path_UserIds Text
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_UserIds_View :: Path Univ Text Text -> Path Univ UserIds Text,
                                                                                                                                                         a')) (toListOf (toLens (Path_UserIds_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                   Text
                                                                                                                                                                                                                                                   Text ->
                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                   UserIds
                                                                                                                                                                                                                                                   Text,
                                                                                                                                                                                                                                              Text)]) :: [Path Univ
                                                                                                                                                                                                                                                               UserIds
                                                                                                                                                                                                                                                               Text])
          peek (p@(Path_UserIds_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ UserIds
          peekPath (Proxy) (Peek_UserIds_Text _p _) = _p :: Path Univ UserIds Text
          peekValue (Proxy) (Peek_UserIds_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_UserIds_Text _p _x :: Peek Univ UserIds
instance Paths Univ AbbrevPair JSONText
    where type Path Univ AbbrevPair JSONText = Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                              fst _s)] :: [(Path Univ CIString JSONText -> Path Univ AbbrevPair JSONText, CIString)]),
                                                          concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                       Path Univ AbbrevPair JSONText,
                                                                                                                                                                                       Markup)])] :: [Path Univ AbbrevPair JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPair
          peekPath (Proxy) (Peek_AbbrevPair_JSONText _p _) = _p :: Path Univ AbbrevPair JSONText
          peekValue (Proxy) (Peek_AbbrevPair_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_AbbrevPair_JSONText _p _x :: Peek Univ AbbrevPair
instance Paths Univ AbbrevPair Markup
    where type Path Univ AbbrevPair Markup = Path_Pair (Path_CIString Markup) (Path_Markup Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second,
                                                                                                                                                   snd _s)] :: [(Path Univ Markup Markup -> Path Univ AbbrevPair Markup, Markup)]) :: [Path Univ
                                                                                                                                                                                                                                            AbbrevPair
                                                                                                                                                                                                                                            Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPair
          peekPath (Proxy) (Peek_AbbrevPair_Markup _p _) = _p :: Path Univ AbbrevPair Markup
          peekValue (Proxy) (Peek_AbbrevPair_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_AbbrevPair_Markup _p _x :: Peek Univ AbbrevPair
instance Paths Univ AbbrevPair AbbrevPair
    where type Path Univ AbbrevPair AbbrevPair = Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ AbbrevPair
          peekPath (Proxy) (Peek_AbbrevPair_AbbrevPair _p _) = _p :: Path Univ AbbrevPair AbbrevPair
          peekValue (Proxy) (Peek_AbbrevPair_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_AbbrevPair_AbbrevPair _p _x :: Peek Univ AbbrevPair
instance Paths Univ AbbrevPair CIString
    where type Path Univ AbbrevPair CIString = Path_Pair (Path_CIString CIString) (Path_Markup CIString)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                     fst _s)] :: [(Path Univ CIString CIString -> Path Univ AbbrevPair CIString, CIString)]) :: [Path Univ
                                                                                                                                                                                                                                                      AbbrevPair
                                                                                                                                                                                                                                                      CIString])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPair
          peekPath (Proxy) (Peek_AbbrevPair_CIString _p _) = _p :: Path Univ AbbrevPair CIString
          peekValue (Proxy) (Peek_AbbrevPair_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_AbbrevPair_CIString _p _x :: Peek Univ AbbrevPair
instance Paths Univ AbbrevPair Text
    where type Path Univ AbbrevPair Text = Path_Pair (Path_CIString Text) (Path_Markup Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: CIString) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                              fst _s)] :: [(Path Univ CIString Text -> Path Univ AbbrevPair Text, CIString)]),
                                                          concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                       Path Univ AbbrevPair Text,
                                                                                                                                                                                       Markup)])] :: [Path Univ AbbrevPair Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPair
          peekPath (Proxy) (Peek_AbbrevPair_Text _p _) = _p :: Path Univ AbbrevPair Text
          peekValue (Proxy) (Peek_AbbrevPair_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_AbbrevPair_Text _p _x :: Peek Univ AbbrevPair
instance Paths Univ AbbrevPairs JSONText
    where type Path Univ AbbrevPairs JSONText = Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ AbbrevPair JSONText ->
                                                                                                                                                                                                          Path Univ AbbrevPairs JSONText,
                                                                                                                                                                                                          AbbrevPair)]) :: [Path Univ
                                                                                                                                                                                                                                 AbbrevPairs
                                                                                                                                                                                                                                 JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_JSONText _p _) = _p :: Path Univ AbbrevPairs JSONText
          peekValue (Proxy) (Peek_AbbrevPairs_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_AbbrevPairs_JSONText _p _x :: Peek Univ AbbrevPairs
instance Paths Univ AbbrevPairs Markup
    where type Path Univ AbbrevPairs Markup = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ AbbrevPair Markup ->
                                                                                                                                                                                                          Path Univ AbbrevPairs Markup,
                                                                                                                                                                                                          AbbrevPair)]) :: [Path Univ AbbrevPairs Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_Markup _p _) = _p :: Path Univ AbbrevPairs Markup
          peekValue (Proxy) (Peek_AbbrevPairs_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_AbbrevPairs_Markup _p _x :: Peek Univ AbbrevPairs
instance Paths Univ AbbrevPairs AbbrevPair
    where type Path Univ AbbrevPairs AbbrevPair = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ AbbrevPair AbbrevPair ->
                                                                                                                                                                                                          Path Univ AbbrevPairs AbbrevPair,
                                                                                                                                                                                                          AbbrevPair)]) :: [Path Univ
                                                                                                                                                                                                                                 AbbrevPairs
                                                                                                                                                                                                                                 AbbrevPair])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_AbbrevPair _p _) = _p :: Path Univ AbbrevPairs AbbrevPair
          peekValue (Proxy) (Peek_AbbrevPairs_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_AbbrevPairs_AbbrevPair _p _x :: Peek Univ AbbrevPairs
instance Paths Univ AbbrevPairs AbbrevPairs
    where type Path Univ AbbrevPairs AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_AbbrevPairs _p _) = _p :: Path Univ AbbrevPairs AbbrevPairs
          peekValue (Proxy) (Peek_AbbrevPairs_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekCons _p _x = Peek_AbbrevPairs_AbbrevPairs _p _x :: Peek Univ AbbrevPairs
instance Paths Univ AbbrevPairs CIString
    where type Path Univ AbbrevPairs CIString = Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ AbbrevPair CIString ->
                                                                                                                                                                                                          Path Univ AbbrevPairs CIString,
                                                                                                                                                                                                          AbbrevPair)]) :: [Path Univ
                                                                                                                                                                                                                                 AbbrevPairs
                                                                                                                                                                                                                                 CIString])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_CIString _p _) = _p :: Path Univ AbbrevPairs CIString
          peekValue (Proxy) (Peek_AbbrevPairs_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_AbbrevPairs_CIString _p _x :: Peek Univ AbbrevPairs
instance Paths Univ AbbrevPairs Text
    where type Path Univ AbbrevPairs Text = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ AbbrevPair Text ->
                                                                                                                                                                                                          Path Univ AbbrevPairs Text,
                                                                                                                                                                                                          AbbrevPair)]) :: [Path Univ AbbrevPairs Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ AbbrevPairs
          peekPath (Proxy) (Peek_AbbrevPairs_Text _p _) = _p :: Path Univ AbbrevPairs Text
          peekValue (Proxy) (Peek_AbbrevPairs_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_AbbrevPairs_Text _p _x :: Peek Univ AbbrevPairs
instance Paths Univ Author JSONText
    where type Path Univ Author JSONText = Path_Author JSONText
          paths (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                    Path Univ Author JSONText,
                                                                                                                                                                                                                    Markup)]),
                                                                        concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials, authorCredentials _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          Author
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                     Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                         Author
                                                                                                                                                                                                                                                         JSONText])
          peek (p@(Path_Author_authorName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peek (p@(Path_Author_authorCredentials _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peekPath (Proxy) (Peek_Author_JSONText _p _) = _p :: Path Univ Author JSONText
          peekValue (Proxy) (Peek_Author_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Author_JSONText _p _x :: Peek Univ Author
instance Paths Univ Author Markup
    where type Path Univ Author Markup = Path_Author Markup
          paths (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                    Path Univ Author Markup,
                                                                                                                                                                                                                    Markup)]),
                                                                        concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials, authorCredentials _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Markup ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          Author
                                                                                                                                                                                                                                          Markup,
                                                                                                                                                                                                                                     Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                         Author
                                                                                                                                                                                                                                                         Markup])
          peek (p@(Path_Author_authorName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peek (p@(Path_Author_authorCredentials _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peekPath (Proxy) (Peek_Author_Markup _p _) = _p :: Path Univ Author Markup
          peekValue (Proxy) (Peek_Author_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Author_Markup _p _x :: Peek Univ Author
instance Paths Univ Author Author
    where type Path Univ Author Author = Path_Author Author
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Author
          peekPath (Proxy) (Peek_Author_Author _p _) = _p :: Path Univ Author Author
          peekValue (Proxy) (Peek_Author_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_Author_Author _p _x :: Peek Univ Author
instance Paths Univ Author Text
    where type Path Univ Author Text = Path_Author Text
          paths (Proxy) (_s@(Author {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorName, authorName _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                    Path Univ Author Text,
                                                                                                                                                                                                                    Markup)]),
                                                                        concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Author_authorCredentials, authorCredentials _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Text ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          Author
                                                                                                                                                                                                                                          Text,
                                                                                                                                                                                                                                     Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                         Author
                                                                                                                                                                                                                                                         Text])
          peek (p@(Path_Author_authorName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peek (p@(Path_Author_authorCredentials _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Author
          peekPath (Proxy) (Peek_Author_Text _p _) = _p :: Path Univ Author Text
          peekValue (Proxy) (Peek_Author_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Author_Text _p _x :: Peek Univ Author
instance Paths Univ Authors JSONText
    where type Path Univ Authors JSONText = Path_OMap AuthorID (Path_Author JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Author JSONText ->
                                                                                                                                                                                                      Path Univ Authors JSONText,
                                                                                                                                                                                                      Author)]) :: [Path Univ Authors JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Authors
          peekPath (Proxy) (Peek_Authors_JSONText _p _) = _p :: Path Univ Authors JSONText
          peekValue (Proxy) (Peek_Authors_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Authors_JSONText _p _x :: Peek Univ Authors
instance Paths Univ Authors Markup
    where type Path Univ Authors Markup = Path_OMap AuthorID (Path_Author Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Author Markup -> Path Univ Authors Markup,
                                                                                                                                                                                                      Author)]) :: [Path Univ Authors Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Authors
          peekPath (Proxy) (Peek_Authors_Markup _p _) = _p :: Path Univ Authors Markup
          peekValue (Proxy) (Peek_Authors_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Authors_Markup _p _x :: Peek Univ Authors
instance Paths Univ Authors Author
    where type Path Univ Authors Author = Path_OMap AuthorID (Path_Author Author)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Author Author -> Path Univ Authors Author,
                                                                                                                                                                                                      Author)]) :: [Path Univ Authors Author])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Authors
          peekPath (Proxy) (Peek_Authors_Author _p _) = _p :: Path Univ Authors Author
          peekValue (Proxy) (Peek_Authors_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_Authors_Author _p _x :: Peek Univ Authors
instance Paths Univ Authors Authors
    where type Path Univ Authors Authors = Path_OMap AuthorID (Path_Author Authors)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Authors
          peekPath (Proxy) (Peek_Authors_Authors _p _) = _p :: Path Univ Authors Authors
          peekValue (Proxy) (Peek_Authors_Authors _ _x) = _x :: Maybe Authors
          peekCons _p _x = Peek_Authors_Authors _p _x :: Peek Univ Authors
instance Paths Univ Authors Text
    where type Path Univ Authors Text = Path_OMap AuthorID (Path_Author Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Author) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Author Text -> Path Univ Authors Text,
                                                                                                                                                                                                      Author)]) :: [Path Univ Authors Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Authors
          peekPath (Proxy) (Peek_Authors_Text _p _) = _p :: Path Univ Authors Text
          peekValue (Proxy) (Peek_Authors_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Authors_Text _p _x :: Peek Univ Authors
instance Paths Univ Branding JSONText
    where type Path Univ Branding JSONText = Path_Branding JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Branding_View :: Path Univ Text JSONText ->
                                                                                                                                                                               Path Univ Branding JSONText,
                                                                                                                                                         a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    Text
                                                                                                                                                                                                                                                    JSONText ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Branding
                                                                                                                                                                                                                                                    JSONText,
                                                                                                                                                                                                                                               Text)]) :: [Path Univ
                                                                                                                                                                                                                                                                Branding
                                                                                                                                                                                                                                                                JSONText])
          peek (p@(Path_Branding_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Branding
          peekPath (Proxy) (Peek_Branding_JSONText _p _) = _p :: Path Univ Branding JSONText
          peekValue (Proxy) (Peek_Branding_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Branding_JSONText _p _x :: Peek Univ Branding
instance Paths Univ Branding Branding
    where type Path Univ Branding Branding = Path_Branding Branding
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Branding
          peekPath (Proxy) (Peek_Branding_Branding _p _) = _p :: Path Univ Branding Branding
          peekValue (Proxy) (Peek_Branding_Branding _ _x) = _x :: Maybe Branding
          peekCons _p _x = Peek_Branding_Branding _p _x :: Peek Univ Branding
instance Paths Univ Branding Text
    where type Path Univ Branding Text = Path_Branding Text
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Branding_View :: Path Univ Text Text -> Path Univ Branding Text,
                                                                                                                                                         a')) (toListOf (toLens (Path_Branding_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    Text
                                                                                                                                                                                                                                                    Text ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Branding
                                                                                                                                                                                                                                                    Text,
                                                                                                                                                                                                                                               Text)]) :: [Path Univ
                                                                                                                                                                                                                                                                Branding
                                                                                                                                                                                                                                                                Text])
          peek (p@(Path_Branding_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Branding
          peekPath (Proxy) (Peek_Branding_Text _p _) = _p :: Path Univ Branding Text
          peekValue (Proxy) (Peek_Branding_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Branding_Text _p _x :: Peek Univ Branding
instance Paths Univ MarkupPair JSONText
    where type Path Univ MarkupPair JSONText = Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                            fst _s)] :: [(Path Univ Markup JSONText -> Path Univ MarkupPair JSONText, Markup)]),
                                                          concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                       Path Univ MarkupPair JSONText,
                                                                                                                                                                                       Markup)])] :: [Path Univ MarkupPair JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPair
          peekPath (Proxy) (Peek_MarkupPair_JSONText _p _) = _p :: Path Univ MarkupPair JSONText
          peekValue (Proxy) (Peek_MarkupPair_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MarkupPair_JSONText _p _x :: Peek Univ MarkupPair
instance Paths Univ MarkupPair Markup
    where type Path Univ MarkupPair Markup = Path_Pair (Path_Markup Markup) (Path_Markup Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                            fst _s)] :: [(Path Univ Markup Markup -> Path Univ MarkupPair Markup, Markup)]),
                                                          concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                       Path Univ MarkupPair Markup,
                                                                                                                                                                                       Markup)])] :: [Path Univ MarkupPair Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPair
          peekPath (Proxy) (Peek_MarkupPair_Markup _p _) = _p :: Path Univ MarkupPair Markup
          peekValue (Proxy) (Peek_MarkupPair_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_MarkupPair_Markup _p _x :: Peek Univ MarkupPair
instance Paths Univ MarkupPair MarkupPair
    where type Path Univ MarkupPair MarkupPair = Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MarkupPair
          peekPath (Proxy) (Peek_MarkupPair_MarkupPair _p _) = _p :: Path Univ MarkupPair MarkupPair
          peekValue (Proxy) (Peek_MarkupPair_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_MarkupPair_MarkupPair _p _x :: Peek Univ MarkupPair
instance Paths Univ MarkupPair Text
    where type Path Univ MarkupPair Text = Path_Pair (Path_Markup Text) (Path_Markup Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (mconcat [concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_First,
                                                                                                                                                            fst _s)] :: [(Path Univ Markup Text -> Path Univ MarkupPair Text, Markup)]),
                                                          concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_Second, snd _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                       Path Univ MarkupPair Text,
                                                                                                                                                                                       Markup)])] :: [Path Univ MarkupPair Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPair
          peekPath (Proxy) (Peek_MarkupPair_Text _p _) = _p :: Path Univ MarkupPair Text
          peekValue (Proxy) (Peek_MarkupPair_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_MarkupPair_Text _p _x :: Peek Univ MarkupPair
instance Paths Univ MarkupPairs JSONText
    where type Path Univ MarkupPairs JSONText = Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ MarkupPair JSONText ->
                                                                                                                                                                                                          Path Univ MarkupPairs JSONText,
                                                                                                                                                                                                          MarkupPair)]) :: [Path Univ
                                                                                                                                                                                                                                 MarkupPairs
                                                                                                                                                                                                                                 JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPairs
          peekPath (Proxy) (Peek_MarkupPairs_JSONText _p _) = _p :: Path Univ MarkupPairs JSONText
          peekValue (Proxy) (Peek_MarkupPairs_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MarkupPairs_JSONText _p _x :: Peek Univ MarkupPairs
instance Paths Univ MarkupPairs Markup
    where type Path Univ MarkupPairs Markup = Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ MarkupPair Markup ->
                                                                                                                                                                                                          Path Univ MarkupPairs Markup,
                                                                                                                                                                                                          MarkupPair)]) :: [Path Univ MarkupPairs Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPairs
          peekPath (Proxy) (Peek_MarkupPairs_Markup _p _) = _p :: Path Univ MarkupPairs Markup
          peekValue (Proxy) (Peek_MarkupPairs_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_MarkupPairs_Markup _p _x :: Peek Univ MarkupPairs
instance Paths Univ MarkupPairs MarkupPair
    where type Path Univ MarkupPairs MarkupPair = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ MarkupPair MarkupPair ->
                                                                                                                                                                                                          Path Univ MarkupPairs MarkupPair,
                                                                                                                                                                                                          MarkupPair)]) :: [Path Univ
                                                                                                                                                                                                                                 MarkupPairs
                                                                                                                                                                                                                                 MarkupPair])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPairs
          peekPath (Proxy) (Peek_MarkupPairs_MarkupPair _p _) = _p :: Path Univ MarkupPairs MarkupPair
          peekValue (Proxy) (Peek_MarkupPairs_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_MarkupPairs_MarkupPair _p _x :: Peek Univ MarkupPairs
instance Paths Univ MarkupPairs MarkupPairs
    where type Path Univ MarkupPairs MarkupPairs = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MarkupPairs
          peekPath (Proxy) (Peek_MarkupPairs_MarkupPairs _p _) = _p :: Path Univ MarkupPairs MarkupPairs
          peekValue (Proxy) (Peek_MarkupPairs_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekCons _p _x = Peek_MarkupPairs_MarkupPairs _p _x :: Peek Univ MarkupPairs
instance Paths Univ MarkupPairs Text
    where type Path Univ MarkupPairs Text = Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPair) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ MarkupPair Text ->
                                                                                                                                                                                                          Path Univ MarkupPairs Text,
                                                                                                                                                                                                          MarkupPair)]) :: [Path Univ MarkupPairs Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MarkupPairs
          peekPath (Proxy) (Peek_MarkupPairs_Text _p _) = _p :: Path Univ MarkupPairs Text
          peekValue (Proxy) (Peek_MarkupPairs_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_MarkupPairs_Text _p _x :: Peek Univ MarkupPairs
instance Paths Univ Markups JSONText
    where type Path Univ Markups JSONText = Path_OMap MarkupID (Path_Markup JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                      Path Univ Markups JSONText,
                                                                                                                                                                                                      Markup)]) :: [Path Univ Markups JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markups
          peekPath (Proxy) (Peek_Markups_JSONText _p _) = _p :: Path Univ Markups JSONText
          peekValue (Proxy) (Peek_Markups_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Markups_JSONText _p _x :: Peek Univ Markups
instance Paths Univ Markups Markup
    where type Path Univ Markups Markup = Path_OMap MarkupID (Path_Markup Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Markup Markup -> Path Univ Markups Markup,
                                                                                                                                                                                                      Markup)]) :: [Path Univ Markups Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markups
          peekPath (Proxy) (Peek_Markups_Markup _p _) = _p :: Path Univ Markups Markup
          peekValue (Proxy) (Peek_Markups_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Markups_Markup _p _x :: Peek Univ Markups
instance Paths Univ Markups Markups
    where type Path Univ Markups Markups = Path_OMap MarkupID (Path_Markup Markups)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Markups
          peekPath (Proxy) (Peek_Markups_Markups _p _) = _p :: Path Univ Markups Markups
          peekValue (Proxy) (Peek_Markups_Markups _ _x) = _x :: Maybe Markups
          peekCons _p _x = Peek_Markups_Markups _p _x :: Peek Univ Markups
instance Paths Univ Markups Text
    where type Path Univ Markups Text = Path_OMap MarkupID (Path_Markup Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ Markup Text -> Path Univ Markups Text,
                                                                                                                                                                                                      Markup)]) :: [Path Univ Markups Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Markups
          peekPath (Proxy) (Peek_Markups_Text _p _) = _p :: Path Univ Markups Text
          peekValue (Proxy) (Peek_Markups_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Markups_Text _p _x :: Peek Univ Markups
instance Paths Univ MaybeReportIntendedUse String
    where type Path Univ MaybeReportIntendedUse String = Path_MaybeReportIntendedUse String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeReportIntendedUse_View :: Path Univ String String ->
                                                                                                                                                                                               Path Univ MaybeReportIntendedUse String,
                                                                                                                                                           a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path Univ
                                                                                                                                                                                                                                    String
                                                                                                                                                                                                                                    String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                                            String ->
                                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                                            MaybeReportIntendedUse
                                                                                                                                                                                                                                                            String,
                                                                                                                                                                                                                                                       String)]) :: [Path Univ
                                                                                                                                                                                                                                                                          MaybeReportIntendedUse
                                                                                                                                                                                                                                                                          String])
          peek (p@(Path_MaybeReportIntendedUse_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MaybeReportIntendedUse
          peekPath (Proxy) (Peek_MaybeReportIntendedUse_String _p _) = _p :: Path Univ MaybeReportIntendedUse String
          peekValue (Proxy) (Peek_MaybeReportIntendedUse_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_MaybeReportIntendedUse_String _p _x :: Peek Univ MaybeReportIntendedUse
instance Paths Univ MaybeReportIntendedUse JSONText
    where type Path Univ MaybeReportIntendedUse JSONText = Path_MaybeReportIntendedUse JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeReportIntendedUse_View :: Path Univ String JSONText ->
                                                                                                                                                                                               Path Univ MaybeReportIntendedUse JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: Path Univ
                                                                                                                                                                                                                                    String
                                                                                                                                                                                                                                    String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                                            JSONText ->
                                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                                            MaybeReportIntendedUse
                                                                                                                                                                                                                                                            JSONText,
                                                                                                                                                                                                                                                       String)]) :: [Path Univ
                                                                                                                                                                                                                                                                          MaybeReportIntendedUse
                                                                                                                                                                                                                                                                          JSONText])
          peek (p@(Path_MaybeReportIntendedUse_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MaybeReportIntendedUse
          peekPath (Proxy) (Peek_MaybeReportIntendedUse_JSONText _p _) = _p :: Path Univ MaybeReportIntendedUse JSONText
          peekValue (Proxy) (Peek_MaybeReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MaybeReportIntendedUse_JSONText _p _x :: Peek Univ MaybeReportIntendedUse
instance Paths Univ MaybeReportIntendedUse MaybeReportIntendedUse
    where type Path Univ MaybeReportIntendedUse MaybeReportIntendedUse = Path_MaybeReportIntendedUse MaybeReportIntendedUse
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MaybeReportIntendedUse
          peekPath (Proxy) (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _p _) = _p :: Path Univ MaybeReportIntendedUse MaybeReportIntendedUse
          peekValue (Proxy) (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekCons _p _x = Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _p _x :: Peek Univ MaybeReportIntendedUse
instance Paths Univ Report String
    where type Path Univ Report String = Path_Report String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView String ->
                                                                                                                                                                                   Path Univ Report String,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    String ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    String,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      String])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_String _p _) = _p :: Path Univ Report String
          peekValue (Proxy) (Peek_Report_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_Report_String _p _x :: Peek Univ Report
instance Paths Univ Report Int64
    where type Path Univ Report Int64 = Path_Report Int64
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Int64 ->
                                                                                                                                                                                   Path Univ Report Int64,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Int64 ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Int64,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Int64])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Int64 _p _) = _p :: Path Univ Report Int64
          peekValue (Proxy) (Peek_Report_Int64 _ _x) = _x :: Maybe Int64
          peekCons _p _x = Peek_Report_Int64 _p _x :: Peek Univ Report
instance Paths Univ Report Bool
    where type Path Univ Report Bool = Path_Report Bool
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Bool ->
                                                                                                                                                                                   Path Univ Report Bool,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Bool ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Bool,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Bool])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Bool _p _) = _p :: Path Univ Report Bool
          peekValue (Proxy) (Peek_Report_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_Report_Bool _p _x :: Peek Univ Report
instance Paths Univ Report Double
    where type Path Univ Report Double = Path_Report Double
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Double ->
                                                                                                                                                                                   Path Univ Report Double,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Double ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Double,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Double])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Double _p _) = _p :: Path Univ Report Double
          peekValue (Proxy) (Peek_Report_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_Report_Double _p _x :: Peek Univ Report
instance Paths Univ Report Int
    where type Path Univ Report Int = Path_Report Int
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Int -> Path Univ Report Int,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Int ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Int,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Int])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Int _p _) = _p :: Path Univ Report Int
          peekValue (Proxy) (Peek_Report_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_Report_Int _p _x :: Peek Univ Report
instance Paths Univ Report Dimension
    where type Path Univ Report Dimension = Path_Report Dimension
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Dimension ->
                                                                                                                                                                                   Path Univ Report Dimension,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Dimension ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Dimension,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Dimension])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Dimension _p _) = _p :: Path Univ Report Dimension
          peekValue (Proxy) (Peek_Report_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_Report_Dimension _p _x :: Peek Univ Report
instance Paths Univ Report ImageCrop
    where type Path Univ Report ImageCrop = Path_Report ImageCrop
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ImageCrop ->
                                                                                                                                                                                   Path Univ Report ImageCrop,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ImageCrop ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ImageCrop,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ImageCrop])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ImageCrop _p _) = _p :: Path Univ Report ImageCrop
          peekValue (Proxy) (Peek_Report_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_Report_ImageCrop _p _x :: Peek Univ Report
instance Paths Univ Report ImageSize
    where type Path Univ Report ImageSize = Path_Report ImageSize
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ImageSize ->
                                                                                                                                                                                   Path Univ Report ImageSize,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ImageSize ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ImageSize,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ImageSize])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ImageSize _p _) = _p :: Path Univ Report ImageSize
          peekValue (Proxy) (Peek_Report_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_Report_ImageSize _p _x :: Peek Univ Report
instance Paths Univ Report Units
    where type Path Univ Report Units = Path_Report Units
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Units ->
                                                                                                                                                                                   Path Univ Report Units,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Units ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Units,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Units])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Units _p _) = _p :: Path Univ Report Units
          peekValue (Proxy) (Peek_Report_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_Report_Units _p _x :: Peek Univ Report
instance Paths Univ Report ImageFile
    where type Path Univ Report ImageFile = Path_Report ImageFile
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ImageFile ->
                                                                                                                                                                                   Path Univ Report ImageFile,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ImageFile ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ImageFile,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ImageFile])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ImageFile _p _) = _p :: Path Univ Report ImageFile
          peekValue (Proxy) (Peek_Report_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_Report_ImageFile _p _x :: Peek Univ Report
instance Paths Univ Report Integer
    where type Path Univ Report Integer = Path_Report Integer
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Integer ->
                                                                                                                                                                                   Path Univ Report Integer,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Integer ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Integer,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Integer])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Integer _p _) = _p :: Path Univ Report Integer
          peekValue (Proxy) (Peek_Report_Integer _ _x) = _x :: Maybe Integer
          peekCons _p _x = Peek_Report_Integer _p _x :: Peek Univ Report
instance Paths Univ Report JSONText
    where type Path Univ Report JSONText = Path_Report JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView JSONText ->
                                                                                                                                                                                   Path Univ Report JSONText,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    JSONText ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    JSONText,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      JSONText])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_JSONText _p _) = _p :: Path Univ Report JSONText
          peekValue (Proxy) (Peek_Report_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Report_JSONText _p _x :: Peek Univ Report
instance Paths Univ Report Markup
    where type Path Univ Report Markup = Path_Report Markup
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Markup ->
                                                                                                                                                                                   Path Univ Report Markup,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Markup ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Markup,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Markup])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Markup _p _) = _p :: Path Univ Report Markup
          peekValue (Proxy) (Peek_Report_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Report_Markup _p _x :: Peek Univ Report
instance Paths Univ Report Permissions
    where type Path Univ Report Permissions = Path_Report Permissions
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Permissions ->
                                                                                                                                                                                   Path Univ Report Permissions,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Permissions ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Permissions,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Permissions])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Permissions _p _) = _p :: Path Univ Report Permissions
          peekValue (Proxy) (Peek_Report_Permissions _ _x) = _x :: Maybe Permissions
          peekCons _p _x = Peek_Report_Permissions _p _x :: Peek Univ Report
instance Paths Univ Report UserIds
    where type Path Univ Report UserIds = Path_Report UserIds
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView UserIds ->
                                                                                                                                                                                   Path Univ Report UserIds,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    UserIds ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    UserIds,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      UserIds])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_UserIds _p _) = _p :: Path Univ Report UserIds
          peekValue (Proxy) (Peek_Report_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_Report_UserIds _p _x :: Peek Univ Report
instance Paths Univ Report AbbrevPair
    where type Path Univ Report AbbrevPair = Path_Report AbbrevPair
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView AbbrevPair ->
                                                                                                                                                                                   Path Univ Report AbbrevPair,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    AbbrevPair ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    AbbrevPair,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      AbbrevPair])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_AbbrevPair _p _) = _p :: Path Univ Report AbbrevPair
          peekValue (Proxy) (Peek_Report_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_Report_AbbrevPair _p _x :: Peek Univ Report
instance Paths Univ Report AbbrevPairs
    where type Path Univ Report AbbrevPairs = Path_Report AbbrevPairs
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView AbbrevPairs ->
                                                                                                                                                                                   Path Univ Report AbbrevPairs,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    AbbrevPairs ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    AbbrevPairs,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      AbbrevPairs])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_AbbrevPairs _p _) = _p :: Path Univ Report AbbrevPairs
          peekValue (Proxy) (Peek_Report_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekCons _p _x = Peek_Report_AbbrevPairs _p _x :: Peek Univ Report
instance Paths Univ Report Author
    where type Path Univ Report Author = Path_Report Author
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Author ->
                                                                                                                                                                                   Path Univ Report Author,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Author ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Author,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Author])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Author _p _) = _p :: Path Univ Report Author
          peekValue (Proxy) (Peek_Report_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_Report_Author _p _x :: Peek Univ Report
instance Paths Univ Report Authors
    where type Path Univ Report Authors = Path_Report Authors
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Authors ->
                                                                                                                                                                                   Path Univ Report Authors,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Authors ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Authors,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Authors])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Authors _p _) = _p :: Path Univ Report Authors
          peekValue (Proxy) (Peek_Report_Authors _ _x) = _x :: Maybe Authors
          peekCons _p _x = Peek_Report_Authors _p _x :: Peek Univ Report
instance Paths Univ Report Branding
    where type Path Univ Report Branding = Path_Report Branding
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Branding ->
                                                                                                                                                                                   Path Univ Report Branding,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Branding ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Branding,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Branding])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Branding _p _) = _p :: Path Univ Report Branding
          peekValue (Proxy) (Peek_Report_Branding _ _x) = _x :: Maybe Branding
          peekCons _p _x = Peek_Report_Branding _p _x :: Peek Univ Report
instance Paths Univ Report MarkupPair
    where type Path Univ Report MarkupPair = Path_Report MarkupPair
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MarkupPair ->
                                                                                                                                                                                   Path Univ Report MarkupPair,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MarkupPair ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MarkupPair,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MarkupPair])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MarkupPair _p _) = _p :: Path Univ Report MarkupPair
          peekValue (Proxy) (Peek_Report_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_Report_MarkupPair _p _x :: Peek Univ Report
instance Paths Univ Report MarkupPairs
    where type Path Univ Report MarkupPairs = Path_Report MarkupPairs
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MarkupPairs ->
                                                                                                                                                                                   Path Univ Report MarkupPairs,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MarkupPairs ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MarkupPairs,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MarkupPairs])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MarkupPairs _p _) = _p :: Path Univ Report MarkupPairs
          peekValue (Proxy) (Peek_Report_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekCons _p _x = Peek_Report_MarkupPairs _p _x :: Peek Univ Report
instance Paths Univ Report Markups
    where type Path Univ Report Markups = Path_Report Markups
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Markups ->
                                                                                                                                                                                   Path Univ Report Markups,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Markups ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Markups,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Markups])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Markups _p _) = _p :: Path Univ Report Markups
          peekValue (Proxy) (Peek_Report_Markups _ _x) = _x :: Maybe Markups
          peekCons _p _x = Peek_Report_Markups _p _x :: Peek Univ Report
instance Paths Univ Report MaybeReportIntendedUse
    where type Path Univ Report MaybeReportIntendedUse = Path_Report MaybeReportIntendedUse
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MaybeReportIntendedUse ->
                                                                                                                                                                                   Path Univ Report MaybeReportIntendedUse,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MaybeReportIntendedUse ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MaybeReportIntendedUse,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MaybeReportIntendedUse])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MaybeReportIntendedUse _p _) = _p :: Path Univ Report MaybeReportIntendedUse
          peekValue (Proxy) (Peek_Report_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekCons _p _x = Peek_Report_MaybeReportIntendedUse _p _x :: Peek Univ Report
instance Paths Univ Report Report
    where type Path Univ Report Report = Path_Report Report
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Report _p _) = _p :: Path Univ Report Report
          peekValue (Proxy) (Peek_Report_Report _ _x) = _x :: Maybe Report
          peekCons _p _x = Peek_Report_Report _p _x :: Peek Univ Report
instance Paths Univ Report ReportElem
    where type Path Univ Report ReportElem = Path_Report ReportElem
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportElem ->
                                                                                                                                                                                   Path Univ Report ReportElem,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportElem ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportElem,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportElem])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportElem _p _) = _p :: Path Univ Report ReportElem
          peekValue (Proxy) (Peek_Report_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_Report_ReportElem _p _x :: Peek Univ Report
instance Paths Univ Report ReportElems
    where type Path Univ Report ReportElems = Path_Report ReportElems
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportElems ->
                                                                                                                                                                                   Path Univ Report ReportElems,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportElems ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportElems,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportElems])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportElems _p _) = _p :: Path Univ Report ReportElems
          peekValue (Proxy) (Peek_Report_ReportElems _ _x) = _x :: Maybe ReportElems
          peekCons _p _x = Peek_Report_ReportElems _p _x :: Peek Univ Report
instance Paths Univ Report ReportFlags
    where type Path Univ Report ReportFlags = Path_Report ReportFlags
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportFlags ->
                                                                                                                                                                                   Path Univ Report ReportFlags,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportFlags ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportFlags,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportFlags])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportFlags _p _) = _p :: Path Univ Report ReportFlags
          peekValue (Proxy) (Peek_Report_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekCons _p _x = Peek_Report_ReportFlags _p _x :: Peek Univ Report
instance Paths Univ Report ReportStandard
    where type Path Univ Report ReportStandard = Path_Report ReportStandard
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportStandard ->
                                                                                                                                                                                   Path Univ Report ReportStandard,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportStandard ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportStandard,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportStandard])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportStandard _p _) = _p :: Path Univ Report ReportStandard
          peekValue (Proxy) (Peek_Report_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekCons _p _x = Peek_Report_ReportStandard _p _x :: Peek Univ Report
instance Paths Univ Report ReportStatus
    where type Path Univ Report ReportStatus = Path_Report ReportStatus
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportStatus ->
                                                                                                                                                                                   Path Univ Report ReportStatus,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportStatus ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportStatus,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportStatus])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportStatus _p _) = _p :: Path Univ Report ReportStatus
          peekValue (Proxy) (Peek_Report_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekCons _p _x = Peek_Report_ReportStatus _p _x :: Peek Univ Report
instance Paths Univ Report ReportValueApproachInfo
    where type Path Univ Report ReportValueApproachInfo = Path_Report ReportValueApproachInfo
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportValueApproachInfo ->
                                                                                                                                                                                   Path Univ Report ReportValueApproachInfo,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportValueApproachInfo ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportValueApproachInfo,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportValueApproachInfo])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportValueApproachInfo _p _) = _p :: Path Univ Report ReportValueApproachInfo
          peekValue (Proxy) (Peek_Report_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekCons _p _x = Peek_Report_ReportValueApproachInfo _p _x :: Peek Univ Report
instance Paths Univ Report ReportValueTypeInfo
    where type Path Univ Report ReportValueTypeInfo = Path_Report ReportValueTypeInfo
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportValueTypeInfo ->
                                                                                                                                                                                   Path Univ Report ReportValueTypeInfo,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportValueTypeInfo ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportValueTypeInfo,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportValueTypeInfo])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportValueTypeInfo _p _) = _p :: Path Univ Report ReportValueTypeInfo
          peekValue (Proxy) (Peek_Report_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekCons _p _x = Peek_Report_ReportValueTypeInfo _p _x :: Peek Univ Report
instance Paths Univ Report EUI
    where type Path Univ Report EUI = Path_Report EUI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView EUI -> Path Univ Report EUI,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    EUI ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    EUI,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      EUI])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_EUI _p _) = _p :: Path Univ Report EUI
          peekValue (Proxy) (Peek_Report_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_Report_EUI _p _x :: Peek Univ Report
instance Paths Univ Report MEUI
    where type Path Univ Report MEUI = Path_Report MEUI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MEUI ->
                                                                                                                                                                                   Path Univ Report MEUI,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MEUI ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MEUI,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MEUI])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MEUI _p _) = _p :: Path Univ Report MEUI
          peekValue (Proxy) (Peek_Report_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_Report_MEUI _p _x :: Peek Univ Report
instance Paths Univ Report MaybeImageFile
    where type Path Univ Report MaybeImageFile = Path_Report MaybeImageFile
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MaybeImageFile ->
                                                                                                                                                                                   Path Univ Report MaybeImageFile,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MaybeImageFile ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MaybeImageFile,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MaybeImageFile])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MaybeImageFile _p _) = _p :: Path Univ Report MaybeImageFile
          peekValue (Proxy) (Peek_Report_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_Report_MaybeImageFile _p _x :: Peek Univ Report
instance Paths Univ Report ReportImage
    where type Path Univ Report ReportImage = Path_Report ReportImage
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportImage ->
                                                                                                                                                                                   Path Univ Report ReportImage,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportImage ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportImage,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportImage])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportImage _p _) = _p :: Path Univ Report ReportImage
          peekValue (Proxy) (Peek_Report_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_Report_ReportImage _p _x :: Peek Univ Report
instance Paths Univ Report ReportImages
    where type Path Univ Report ReportImages = Path_Report ReportImages
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportImages ->
                                                                                                                                                                                   Path Univ Report ReportImages,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportImages ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportImages,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportImages])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportImages _p _) = _p :: Path Univ Report ReportImages
          peekValue (Proxy) (Peek_Report_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_Report_ReportImages _p _x :: Peek Univ Report
instance Paths Univ Report ReadOnlyFilePath
    where type Path Univ Report ReadOnlyFilePath = Path_Report ReadOnlyFilePath
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReadOnlyFilePath ->
                                                                                                                                                                                   Path Univ Report ReadOnlyFilePath,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReadOnlyFilePath ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReadOnlyFilePath,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReadOnlyFilePath])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReadOnlyFilePath _p _) = _p :: Path Univ Report ReadOnlyFilePath
          peekValue (Proxy) (Peek_Report_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekCons _p _x = Peek_Report_ReadOnlyFilePath _p _x :: Peek Univ Report
instance Paths Univ Report ReportImageView
    where type Path Univ Report ReportImageView = Path_Report ReportImageView
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportImageView ->
                                                                                                                                                                                   Path Univ Report ReportImageView,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportImageView ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportImageView,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportImageView])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportImageView _p _) = _p :: Path Univ Report ReportImageView
          peekValue (Proxy) (Peek_Report_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_Report_ReportImageView _p _x :: Peek Univ Report
instance Paths Univ Report ReportView
    where type Path Univ Report ReportView = Path_Report ReportView
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView ReportView ->
                                                                                                                                                                                   Path Univ Report ReportView,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportView ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    ReportView,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      ReportView])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_ReportView _p _) = _p :: Path Univ Report ReportView
          peekValue (Proxy) (Peek_Report_ReportView _ _x) = _x :: Maybe ReportView
          peekCons _p _x = Peek_Report_ReportView _p _x :: Peek Univ Report
instance Paths Univ Report SaneSizeImageSize
    where type Path Univ Report SaneSizeImageSize = Path_Report SaneSizeImageSize
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView SaneSizeImageSize ->
                                                                                                                                                                                   Path Univ Report SaneSizeImageSize,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    SaneSizeImageSize ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    SaneSizeImageSize,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      SaneSizeImageSize])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_SaneSizeImageSize _p _) = _p :: Path Univ Report SaneSizeImageSize
          peekValue (Proxy) (Peek_Report_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_Report_SaneSizeImageSize _p _x :: Peek Univ Report
instance Paths Univ Report Item
    where type Path Univ Report Item = Path_Report Item
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Item ->
                                                                                                                                                                                   Path Univ Report Item,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Item ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Item,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Item])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Item _p _) = _p :: Path Univ Report Item
          peekValue (Proxy) (Peek_Report_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_Report_Item _p _x :: Peek Univ Report
instance Paths Univ Report MIM
    where type Path Univ Report MIM = Path_Report MIM
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView MIM -> Path Univ Report MIM,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    MIM ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    MIM,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MIM])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_MIM _p _) = _p :: Path Univ Report MIM
          peekValue (Proxy) (Peek_Report_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_Report_MIM _p _x :: Peek Univ Report
instance Paths Univ Report CIString
    where type Path Univ Report CIString = Path_Report CIString
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView CIString ->
                                                                                                                                                                                   Path Univ Report CIString,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    CIString ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    CIString,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      CIString])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_CIString _p _) = _p :: Path Univ Report CIString
          peekValue (Proxy) (Peek_Report_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_Report_CIString _p _x :: Peek Univ Report
instance Paths Univ Report URI
    where type Path Univ Report URI = Path_Report URI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView URI -> Path Univ Report URI,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    URI ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    URI,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      URI])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_URI _p _) = _p :: Path Univ Report URI
          peekValue (Proxy) (Peek_Report_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_Report_URI _p _x :: Peek Univ Report
instance Paths Univ Report Text
    where type Path Univ Report Text = Path_Report Text
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView Text ->
                                                                                                                                                                                   Path Univ Report Text,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Text ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    Text,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Text])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_Text _p _) = _p :: Path Univ Report Text
          peekValue (Proxy) (Peek_Report_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Report_Text _p _x :: Peek Univ Report
instance Paths Univ Report UserId
    where type Path Univ Report UserId = Path_Report UserId
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView UserId ->
                                                                                                                                                                                   Path Univ Report UserId,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    UserId ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    UserId,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      UserId])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_UserId _p _) = _p :: Path Univ Report UserId
          peekValue (Proxy) (Peek_Report_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_Report_UserId _p _x :: Peek Univ Report
instance Paths Univ Report UUID
    where type Path Univ Report UUID = Path_Report UUID
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Report_View :: Path Univ ReportView UUID ->
                                                                                                                                                                                   Path Univ Report UUID,
                                                                                                                                                               a')) (toListOf (toLens (Path_Report_View (idPath :: Path Univ
                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                        ReportView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    UUID ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                    UUID,
                                                                                                                                                                                                                                               ReportView)]) :: [Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      UUID])
          peek (p@(Path_Report_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Report
          peekPath (Proxy) (Peek_Report_UUID _p _) = _p :: Path Univ Report UUID
          peekValue (Proxy) (Peek_Report_UUID _ _x) = _x :: Maybe UUID
          peekCons _p _x = Peek_Report_UUID _p _x :: Peek Univ Report
instance Paths Univ ReportElem String
    where type Path Univ ReportElem String = Path_ReportElem String
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item String ->
                                                                                                                                                                                                             Path Univ ReportElem String,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem String])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem String])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem String])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_String _p _) = _p :: Path Univ ReportElem String
          peekValue (Proxy) (Peek_ReportElem_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportElem_String _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Bool
    where type Path Univ ReportElem Bool = Path_ReportElem Bool
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Bool ->
                                                                                                                                                                                                             Path Univ ReportElem Bool,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Bool])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Bool])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Bool])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Bool _p _) = _p :: Path Univ ReportElem Bool
          peekValue (Proxy) (Peek_ReportElem_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportElem_Bool _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Double
    where type Path Univ ReportElem Double = Path_ReportElem Double
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Double ->
                                                                                                                                                                                                             Path Univ ReportElem Double,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Double])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Double])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Double])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Double _p _) = _p :: Path Univ ReportElem Double
          peekValue (Proxy) (Peek_ReportElem_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportElem_Double _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Dimension
    where type Path Univ ReportElem Dimension = Path_ReportElem Dimension
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Dimension ->
                                                                                                                                                                                                             Path Univ ReportElem Dimension,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Dimension])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Dimension])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Dimension])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Dimension _p _) = _p :: Path Univ ReportElem Dimension
          peekValue (Proxy) (Peek_ReportElem_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportElem_Dimension _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ImageCrop
    where type Path Univ ReportElem ImageCrop = Path_ReportElem ImageCrop
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ImageCrop ->
                                                                                                                                                                                                             Path Univ ReportElem ImageCrop,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem ImageCrop])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageCrop])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageCrop])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ImageCrop _p _) = _p :: Path Univ ReportElem ImageCrop
          peekValue (Proxy) (Peek_ReportElem_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportElem_ImageCrop _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ImageSize
    where type Path Univ ReportElem ImageSize = Path_ReportElem ImageSize
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ImageSize ->
                                                                                                                                                                                                             Path Univ ReportElem ImageSize,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem ImageSize])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageSize])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageSize])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ImageSize _p _) = _p :: Path Univ ReportElem ImageSize
          peekValue (Proxy) (Peek_ReportElem_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportElem_ImageSize _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Units
    where type Path Univ ReportElem Units = Path_ReportElem Units
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Units ->
                                                                                                                                                                                                             Path Univ ReportElem Units,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Units])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Units])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Units])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Units _p _) = _p :: Path Univ ReportElem Units
          peekValue (Proxy) (Peek_ReportElem_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportElem_Units _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ImageFile
    where type Path Univ ReportElem ImageFile = Path_ReportElem ImageFile
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ImageFile ->
                                                                                                                                                                                                             Path Univ ReportElem ImageFile,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem ImageFile])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageFile])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ImageFile])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ImageFile _p _) = _p :: Path Univ ReportElem ImageFile
          peekValue (Proxy) (Peek_ReportElem_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportElem_ImageFile _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem JSONText
    where type Path Univ ReportElem JSONText = Path_ReportElem JSONText
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item JSONText ->
                                                                                                                                                                                                             Path Univ ReportElem JSONText,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem JSONText])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                    Path Univ ReportElem JSONText,
                                                                                                                                                                                                                    Markup)]) :: [Path Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       JSONText])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem JSONText])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peek (p@(Path_ReportElem_elemText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_JSONText _p _) = _p :: Path Univ ReportElem JSONText
          peekValue (Proxy) (Peek_ReportElem_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportElem_JSONText _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Markup
    where type Path Univ ReportElem Markup = Path_ReportElem Markup
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Markup ->
                                                                                                                                                                                                             Path Univ ReportElem Markup,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Markup])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                    Path Univ ReportElem Markup,
                                                                                                                                                                                                                    Markup)]) :: [Path Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Markup])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Markup])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peek (p@(Path_ReportElem_elemText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Markup _p _) = _p :: Path Univ ReportElem Markup
          peekValue (Proxy) (Peek_ReportElem_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportElem_Markup _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ReportElem
    where type Path Univ ReportElem ReportElem = Path_ReportElem ReportElem
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ReportElem _p _) = _p :: Path Univ ReportElem ReportElem
          peekValue (Proxy) (Peek_ReportElem_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_ReportElem_ReportElem _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem EUI
    where type Path Univ ReportElem EUI = Path_ReportElem EUI
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item EUI ->
                                                                                                                                                                                                             Path Univ ReportElem EUI,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem EUI])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem EUI])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem EUI])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_EUI _p _) = _p :: Path Univ ReportElem EUI
          peekValue (Proxy) (Peek_ReportElem_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportElem_EUI _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem MEUI
    where type Path Univ ReportElem MEUI = Path_ReportElem MEUI
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item MEUI ->
                                                                                                                                                                                                             Path Univ ReportElem MEUI,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem MEUI])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MEUI])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MEUI])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_MEUI _p _) = _p :: Path Univ ReportElem MEUI
          peekValue (Proxy) (Peek_ReportElem_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportElem_MEUI _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem MaybeImageFile
    where type Path Univ ReportElem MaybeImageFile = Path_ReportElem MaybeImageFile
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item MaybeImageFile ->
                                                                                                                                                                                                             Path Univ ReportElem MaybeImageFile,
                                                                                                                                                                                                             Item)]) :: [Path Univ
                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                              MaybeImageFile])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MaybeImageFile])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MaybeImageFile])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_MaybeImageFile _p _) = _p :: Path Univ ReportElem MaybeImageFile
          peekValue (Proxy) (Peek_ReportElem_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportElem_MaybeImageFile _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ReportImage
    where type Path Univ ReportElem ReportImage = Path_ReportElem ReportImage
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ReportImage ->
                                                                                                                                                                                                             Path Univ ReportElem ReportImage,
                                                                                                                                                                                                             Item)]) :: [Path Univ
                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                              ReportImage])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImage])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImage])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ReportImage _p _) = _p :: Path Univ ReportElem ReportImage
          peekValue (Proxy) (Peek_ReportElem_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportElem_ReportImage _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ReportImages
    where type Path Univ ReportElem ReportImages = Path_ReportElem ReportImages
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ReportImages ->
                                                                                                                                                                                                             Path Univ ReportElem ReportImages,
                                                                                                                                                                                                             Item)]) :: [Path Univ
                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                              ReportImages])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImages])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImages])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ReportImages _p _) = _p :: Path Univ ReportElem ReportImages
          peekValue (Proxy) (Peek_ReportElem_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_ReportElem_ReportImages _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem ReportImageView
    where type Path Univ ReportElem ReportImageView = Path_ReportElem ReportImageView
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item ReportImageView ->
                                                                                                                                                                                                             Path Univ ReportElem ReportImageView,
                                                                                                                                                                                                             Item)]) :: [Path Univ
                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                              ReportImageView])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImageView])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem ReportImageView])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_ReportImageView _p _) = _p :: Path Univ ReportElem ReportImageView
          peekValue (Proxy) (Peek_ReportElem_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportElem_ReportImageView _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem SaneSizeImageSize
    where type Path Univ ReportElem SaneSizeImageSize = Path_ReportElem SaneSizeImageSize
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item SaneSizeImageSize ->
                                                                                                                                                                                                             Path Univ ReportElem SaneSizeImageSize,
                                                                                                                                                                                                             Item)]) :: [Path Univ
                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                              SaneSizeImageSize])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem SaneSizeImageSize])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem SaneSizeImageSize])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_SaneSizeImageSize _p _) = _p :: Path Univ ReportElem SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportElem_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportElem_SaneSizeImageSize _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Item
    where type Path Univ ReportElem Item = Path_ReportElem Item
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Item ->
                                                                                                                                                                                                             Path Univ ReportElem Item,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Item])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Item])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Item])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Item _p _) = _p :: Path Univ ReportElem Item
          peekValue (Proxy) (Peek_ReportElem_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_ReportElem_Item _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem MIM
    where type Path Univ ReportElem MIM = Path_ReportElem MIM
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item MIM ->
                                                                                                                                                                                                             Path Univ ReportElem MIM,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem MIM])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MIM])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem MIM])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_MIM _p _) = _p :: Path Univ ReportElem MIM
          peekValue (Proxy) (Peek_ReportElem_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_ReportElem_MIM _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem URI
    where type Path Univ ReportElem URI = Path_ReportElem URI
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item URI ->
                                                                                                                                                                                                             Path Univ ReportElem URI,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem URI])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem URI])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem URI])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_URI _p _) = _p :: Path Univ ReportElem URI
          peekValue (Proxy) (Peek_ReportElem_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportElem_URI _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElem Text
    where type Path Univ ReportElem Text = Path_ReportElem Text
          paths (Proxy) (_s@(ReportItem {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Item) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemItem, elemItem _s)] :: [(Path Univ Item Text ->
                                                                                                                                                                                                             Path Univ ReportElem Text,
                                                                                                                                                                                                             Item)]) :: [Path Univ ReportElem Text])
          paths (Proxy) (_s@(ReportParagraph {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportElem_elemText, elemText _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                    Path Univ ReportElem Text,
                                                                                                                                                                                                                    Markup)]) :: [Path Univ
                                                                                                                                                                                                                                       ReportElem
                                                                                                                                                                                                                                       Text])
          paths (Proxy) (_s@(ReportUndecided {})) _g f r0 = foldr f r0 (mempty :: [Path Univ ReportElem Text])
          peek (p@(Path_ReportElem_elemItem _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peek (p@(Path_ReportElem_elemText _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElem
          peekPath (Proxy) (Peek_ReportElem_Text _p _) = _p :: Path Univ ReportElem Text
          peekValue (Proxy) (Peek_ReportElem_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportElem_Text _p _x :: Peek Univ ReportElem
instance Paths Univ ReportElems String
    where type Path Univ ReportElems String = Path_OMap ReportElemID (Path_ReportElem String)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem String ->
                                                                                                                                                                                                          Path Univ ReportElems String,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems String])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_String _p _) = _p :: Path Univ ReportElems String
          peekValue (Proxy) (Peek_ReportElems_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportElems_String _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Bool
    where type Path Univ ReportElems Bool = Path_OMap ReportElemID (Path_ReportElem Bool)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Bool ->
                                                                                                                                                                                                          Path Univ ReportElems Bool,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Bool])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Bool _p _) = _p :: Path Univ ReportElems Bool
          peekValue (Proxy) (Peek_ReportElems_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportElems_Bool _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Double
    where type Path Univ ReportElems Double = Path_OMap ReportElemID (Path_ReportElem Double)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Double ->
                                                                                                                                                                                                          Path Univ ReportElems Double,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Double])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Double _p _) = _p :: Path Univ ReportElems Double
          peekValue (Proxy) (Peek_ReportElems_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportElems_Double _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Dimension
    where type Path Univ ReportElems Dimension = Path_OMap ReportElemID (Path_ReportElem Dimension)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Dimension ->
                                                                                                                                                                                                          Path Univ ReportElems Dimension,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 Dimension])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Dimension _p _) = _p :: Path Univ ReportElems Dimension
          peekValue (Proxy) (Peek_ReportElems_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportElems_Dimension _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ImageCrop
    where type Path Univ ReportElems ImageCrop = Path_OMap ReportElemID (Path_ReportElem ImageCrop)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ImageCrop ->
                                                                                                                                                                                                          Path Univ ReportElems ImageCrop,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ImageCrop])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ImageCrop _p _) = _p :: Path Univ ReportElems ImageCrop
          peekValue (Proxy) (Peek_ReportElems_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportElems_ImageCrop _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ImageSize
    where type Path Univ ReportElems ImageSize = Path_OMap ReportElemID (Path_ReportElem ImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ImageSize ->
                                                                                                                                                                                                          Path Univ ReportElems ImageSize,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ImageSize _p _) = _p :: Path Univ ReportElems ImageSize
          peekValue (Proxy) (Peek_ReportElems_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportElems_ImageSize _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Units
    where type Path Univ ReportElems Units = Path_OMap ReportElemID (Path_ReportElem Units)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Units ->
                                                                                                                                                                                                          Path Univ ReportElems Units,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Units])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Units _p _) = _p :: Path Univ ReportElems Units
          peekValue (Proxy) (Peek_ReportElems_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportElems_Units _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ImageFile
    where type Path Univ ReportElems ImageFile = Path_OMap ReportElemID (Path_ReportElem ImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ImageFile ->
                                                                                                                                                                                                          Path Univ ReportElems ImageFile,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ImageFile _p _) = _p :: Path Univ ReportElems ImageFile
          peekValue (Proxy) (Peek_ReportElems_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportElems_ImageFile _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems JSONText
    where type Path Univ ReportElems JSONText = Path_OMap ReportElemID (Path_ReportElem JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem JSONText ->
                                                                                                                                                                                                          Path Univ ReportElems JSONText,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_JSONText _p _) = _p :: Path Univ ReportElems JSONText
          peekValue (Proxy) (Peek_ReportElems_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportElems_JSONText _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Markup
    where type Path Univ ReportElems Markup = Path_OMap ReportElemID (Path_ReportElem Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Markup ->
                                                                                                                                                                                                          Path Univ ReportElems Markup,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Markup _p _) = _p :: Path Univ ReportElems Markup
          peekValue (Proxy) (Peek_ReportElems_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportElems_Markup _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ReportElem
    where type Path Univ ReportElems ReportElem = Path_OMap ReportElemID (Path_ReportElem ReportElem)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ReportElem ->
                                                                                                                                                                                                          Path Univ ReportElems ReportElem,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ReportElem])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ReportElem _p _) = _p :: Path Univ ReportElems ReportElem
          peekValue (Proxy) (Peek_ReportElems_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_ReportElems_ReportElem _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ReportElems
    where type Path Univ ReportElems ReportElems = Path_OMap ReportElemID (Path_ReportElem ReportElems)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ReportElems _p _) = _p :: Path Univ ReportElems ReportElems
          peekValue (Proxy) (Peek_ReportElems_ReportElems _ _x) = _x :: Maybe ReportElems
          peekCons _p _x = Peek_ReportElems_ReportElems _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems EUI
    where type Path Univ ReportElems EUI = Path_OMap ReportElemID (Path_ReportElem EUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem EUI ->
                                                                                                                                                                                                          Path Univ ReportElems EUI,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems EUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_EUI _p _) = _p :: Path Univ ReportElems EUI
          peekValue (Proxy) (Peek_ReportElems_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportElems_EUI _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems MEUI
    where type Path Univ ReportElems MEUI = Path_OMap ReportElemID (Path_ReportElem MEUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem MEUI ->
                                                                                                                                                                                                          Path Univ ReportElems MEUI,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems MEUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_MEUI _p _) = _p :: Path Univ ReportElems MEUI
          peekValue (Proxy) (Peek_ReportElems_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportElems_MEUI _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems MaybeImageFile
    where type Path Univ ReportElems MaybeImageFile = Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem MaybeImageFile ->
                                                                                                                                                                                                          Path Univ ReportElems MaybeImageFile,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 MaybeImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_MaybeImageFile _p _) = _p :: Path Univ ReportElems MaybeImageFile
          peekValue (Proxy) (Peek_ReportElems_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportElems_MaybeImageFile _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ReportImage
    where type Path Univ ReportElems ReportImage = Path_OMap ReportElemID (Path_ReportElem ReportImage)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ReportImage ->
                                                                                                                                                                                                          Path Univ ReportElems ReportImage,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ReportImage])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ReportImage _p _) = _p :: Path Univ ReportElems ReportImage
          peekValue (Proxy) (Peek_ReportElems_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportElems_ReportImage _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ReportImages
    where type Path Univ ReportElems ReportImages = Path_OMap ReportElemID (Path_ReportElem ReportImages)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ReportImages ->
                                                                                                                                                                                                          Path Univ ReportElems ReportImages,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ReportImages])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ReportImages _p _) = _p :: Path Univ ReportElems ReportImages
          peekValue (Proxy) (Peek_ReportElems_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_ReportElems_ReportImages _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems ReportImageView
    where type Path Univ ReportElems ReportImageView = Path_OMap ReportElemID (Path_ReportElem ReportImageView)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem ReportImageView ->
                                                                                                                                                                                                          Path Univ ReportElems ReportImageView,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 ReportImageView])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_ReportImageView _p _) = _p :: Path Univ ReportElems ReportImageView
          peekValue (Proxy) (Peek_ReportElems_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportElems_ReportImageView _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems SaneSizeImageSize
    where type Path Univ ReportElems SaneSizeImageSize = Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem SaneSizeImageSize ->
                                                                                                                                                                                                          Path Univ ReportElems SaneSizeImageSize,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ
                                                                                                                                                                                                                                 ReportElems
                                                                                                                                                                                                                                 SaneSizeImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_SaneSizeImageSize _p _) = _p :: Path Univ ReportElems SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportElems_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportElems_SaneSizeImageSize _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Item
    where type Path Univ ReportElems Item = Path_OMap ReportElemID (Path_ReportElem Item)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Item ->
                                                                                                                                                                                                          Path Univ ReportElems Item,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Item])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Item _p _) = _p :: Path Univ ReportElems Item
          peekValue (Proxy) (Peek_ReportElems_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_ReportElems_Item _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems MIM
    where type Path Univ ReportElems MIM = Path_OMap ReportElemID (Path_ReportElem MIM)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem MIM ->
                                                                                                                                                                                                          Path Univ ReportElems MIM,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems MIM])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_MIM _p _) = _p :: Path Univ ReportElems MIM
          peekValue (Proxy) (Peek_ReportElems_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_ReportElems_MIM _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems URI
    where type Path Univ ReportElems URI = Path_OMap ReportElemID (Path_ReportElem URI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem URI ->
                                                                                                                                                                                                          Path Univ ReportElems URI,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems URI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_URI _p _) = _p :: Path Univ ReportElems URI
          peekValue (Proxy) (Peek_ReportElems_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportElems_URI _p _x :: Peek Univ ReportElems
instance Paths Univ ReportElems Text
    where type Path Univ ReportElems Text = Path_OMap ReportElemID (Path_ReportElem Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElem) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                            val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportElem Text ->
                                                                                                                                                                                                          Path Univ ReportElems Text,
                                                                                                                                                                                                          ReportElem)]) :: [Path Univ ReportElems Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportElems
          peekPath (Proxy) (Peek_ReportElems_Text _p _) = _p :: Path Univ ReportElems Text
          peekValue (Proxy) (Peek_ReportElems_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportElems_Text _p _x :: Peek Univ ReportElems
instance Paths Univ ReportFlags String
    where type Path Univ ReportFlags String = Path_ReportFlags String
          paths (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Bool
                                                                                                                                                                                                                                          String ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportFlags
                                                                                                                                                                                                                                          String,
                                                                                                                                                                                                                                     Bool)]) :: [Path Univ
                                                                                                                                                                                                                                                      ReportFlags
                                                                                                                                                                                                                                                      String])
          peek (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportFlags
          peekPath (Proxy) (Peek_ReportFlags_String _p _) = _p :: Path Univ ReportFlags String
          peekValue (Proxy) (Peek_ReportFlags_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportFlags_String _p _x :: Peek Univ ReportFlags
instance Paths Univ ReportFlags Bool
    where type Path Univ ReportFlags Bool = Path_ReportFlags Bool
          paths (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Bool
                                                                                                                                                                                                                                          Bool ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportFlags
                                                                                                                                                                                                                                          Bool,
                                                                                                                                                                                                                                     Bool)]) :: [Path Univ
                                                                                                                                                                                                                                                      ReportFlags
                                                                                                                                                                                                                                                      Bool])
          peek (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportFlags
          peekPath (Proxy) (Peek_ReportFlags_Bool _p _) = _p :: Path Univ ReportFlags Bool
          peekValue (Proxy) (Peek_ReportFlags_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportFlags_Bool _p _x :: Peek Univ ReportFlags
instance Paths Univ ReportFlags JSONText
    where type Path Univ ReportFlags JSONText = Path_ReportFlags JSONText
          paths (Proxy) (_s@(ReportFlags {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                 a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Bool
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportFlags
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                     Bool)]) :: [Path Univ
                                                                                                                                                                                                                                                      ReportFlags
                                                                                                                                                                                                                                                      JSONText])
          peek (p@(Path_ReportFlags_hideEmptyItemFields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportFlags
          peekPath (Proxy) (Peek_ReportFlags_JSONText _p _) = _p :: Path Univ ReportFlags JSONText
          peekValue (Proxy) (Peek_ReportFlags_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportFlags_JSONText _p _x :: Peek Univ ReportFlags
instance Paths Univ ReportFlags ReportFlags
    where type Path Univ ReportFlags ReportFlags = Path_ReportFlags ReportFlags
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportFlags
          peekPath (Proxy) (Peek_ReportFlags_ReportFlags _p _) = _p :: Path Univ ReportFlags ReportFlags
          peekValue (Proxy) (Peek_ReportFlags_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekCons _p _x = Peek_ReportFlags_ReportFlags _p _x :: Peek Univ ReportFlags
instance Paths Univ ReportIntendedUse String
    where type Path Univ ReportIntendedUse String = Path_ReportIntendedUse String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportIntendedUse_View :: Path Univ String String ->
                                                                                                                                                                                          Path Univ ReportIntendedUse String,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path Univ
                                                                                                                                                                                                                               String
                                                                                                                                                                                                                               String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                       String
                                                                                                                                                                                                                                                       String ->
                                                                                                                                                                                                                                                  Path Univ
                                                                                                                                                                                                                                                       ReportIntendedUse
                                                                                                                                                                                                                                                       String,
                                                                                                                                                                                                                                                  String)]) :: [Path Univ
                                                                                                                                                                                                                                                                     ReportIntendedUse
                                                                                                                                                                                                                                                                     String])
          peek (p@(Path_ReportIntendedUse_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportIntendedUse
          peekPath (Proxy) (Peek_ReportIntendedUse_String _p _) = _p :: Path Univ ReportIntendedUse String
          peekValue (Proxy) (Peek_ReportIntendedUse_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportIntendedUse_String _p _x :: Peek Univ ReportIntendedUse
instance Paths Univ ReportIntendedUse JSONText
    where type Path Univ ReportIntendedUse JSONText = Path_ReportIntendedUse JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportIntendedUse_View :: Path Univ String JSONText ->
                                                                                                                                                                                          Path Univ ReportIntendedUse JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: Path Univ
                                                                                                                                                                                                                               String
                                                                                                                                                                                                                               String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                       String
                                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                                  Path Univ
                                                                                                                                                                                                                                                       ReportIntendedUse
                                                                                                                                                                                                                                                       JSONText,
                                                                                                                                                                                                                                                  String)]) :: [Path Univ
                                                                                                                                                                                                                                                                     ReportIntendedUse
                                                                                                                                                                                                                                                                     JSONText])
          peek (p@(Path_ReportIntendedUse_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportIntendedUse
          peekPath (Proxy) (Peek_ReportIntendedUse_JSONText _p _) = _p :: Path Univ ReportIntendedUse JSONText
          peekValue (Proxy) (Peek_ReportIntendedUse_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportIntendedUse_JSONText _p _x :: Peek Univ ReportIntendedUse
instance Paths Univ ReportIntendedUse ReportIntendedUse
    where type Path Univ ReportIntendedUse ReportIntendedUse = Path_ReportIntendedUse ReportIntendedUse
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportIntendedUse
          peekPath (Proxy) (Peek_ReportIntendedUse_ReportIntendedUse _p _) = _p :: Path Univ ReportIntendedUse ReportIntendedUse
          peekValue (Proxy) (Peek_ReportIntendedUse_ReportIntendedUse _ _x) = _x :: Maybe ReportIntendedUse
          peekCons _p _x = Peek_ReportIntendedUse_ReportIntendedUse _p _x :: Peek Univ ReportIntendedUse
instance Paths Univ ReportStandard Int
    where type Path Univ ReportStandard Int = Path_ReportStandard Int
          paths (Proxy) (_s@(ReportStandard {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                    a') -> paths (Proxy :: Proxy Univ) (a' :: Int) _g (\npt r -> p npt : r) []) ([(Path_ReportStandard_unReportStandard, unReportStandard _s)] :: [(Path Univ Int Int ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportStandard
                                                                                                                                                                                                                                         Int,
                                                                                                                                                                                                                                    Int)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportStandard
                                                                                                                                                                                                                                                    Int])
          peek (p@(Path_ReportStandard_unReportStandard _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportStandard
          peekPath (Proxy) (Peek_ReportStandard_Int _p _) = _p :: Path Univ ReportStandard Int
          peekValue (Proxy) (Peek_ReportStandard_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_ReportStandard_Int _p _x :: Peek Univ ReportStandard
instance Paths Univ ReportStandard ReportStandard
    where type Path Univ ReportStandard ReportStandard = Path_ReportStandard ReportStandard
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportStandard
          peekPath (Proxy) (Peek_ReportStandard_ReportStandard _p _) = _p :: Path Univ ReportStandard ReportStandard
          peekValue (Proxy) (Peek_ReportStandard_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekCons _p _x = Peek_ReportStandard_ReportStandard _p _x :: Peek Univ ReportStandard
instance Paths Univ ReportStatus String
    where type Path Univ ReportStatus String = Path_ReportStatus String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportStatus_View :: Path Univ String String ->
                                                                                                                                                                                     Path Univ ReportStatus String,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path Univ
                                                                                                                                                                                                                          String
                                                                                                                                                                                                                          String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                  String ->
                                                                                                                                                                                                                                             Path Univ
                                                                                                                                                                                                                                                  ReportStatus
                                                                                                                                                                                                                                                  String,
                                                                                                                                                                                                                                             String)]) :: [Path Univ
                                                                                                                                                                                                                                                                ReportStatus
                                                                                                                                                                                                                                                                String])
          peek (p@(Path_ReportStatus_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportStatus
          peekPath (Proxy) (Peek_ReportStatus_String _p _) = _p :: Path Univ ReportStatus String
          peekValue (Proxy) (Peek_ReportStatus_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportStatus_String _p _x :: Peek Univ ReportStatus
instance Paths Univ ReportStatus JSONText
    where type Path Univ ReportStatus JSONText = Path_ReportStatus JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportStatus_View :: Path Univ String JSONText ->
                                                                                                                                                                                     Path Univ ReportStatus JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: Path Univ
                                                                                                                                                                                                                          String
                                                                                                                                                                                                                          String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                  JSONText ->
                                                                                                                                                                                                                                             Path Univ
                                                                                                                                                                                                                                                  ReportStatus
                                                                                                                                                                                                                                                  JSONText,
                                                                                                                                                                                                                                             String)]) :: [Path Univ
                                                                                                                                                                                                                                                                ReportStatus
                                                                                                                                                                                                                                                                JSONText])
          peek (p@(Path_ReportStatus_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportStatus
          peekPath (Proxy) (Peek_ReportStatus_JSONText _p _) = _p :: Path Univ ReportStatus JSONText
          peekValue (Proxy) (Peek_ReportStatus_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportStatus_JSONText _p _x :: Peek Univ ReportStatus
instance Paths Univ ReportStatus ReportStatus
    where type Path Univ ReportStatus ReportStatus = Path_ReportStatus ReportStatus
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportStatus
          peekPath (Proxy) (Peek_ReportStatus_ReportStatus _p _) = _p :: Path Univ ReportStatus ReportStatus
          peekValue (Proxy) (Peek_ReportStatus_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekCons _p _x = Peek_ReportStatus_ReportStatus _p _x :: Peek Univ ReportStatus
instance Paths Univ ReportValueApproachInfo JSONText
    where type Path Univ ReportValueApproachInfo JSONText = Path_ReportValueApproachInfo JSONText
          paths (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                      a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                        reportValueApproachName _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                          Markup)]),
                                                                                         concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                           reportValueApproachDescription _s)] :: [(Path Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         JSONText ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportValueApproachInfo
                                                                                                                                                                                                                                         JSONText,
                                                                                                                                                                                                                                    Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                                        JSONText])
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peekPath (Proxy) (Peek_ReportValueApproachInfo_JSONText _p _) = _p :: Path Univ ReportValueApproachInfo JSONText
          peekValue (Proxy) (Peek_ReportValueApproachInfo_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportValueApproachInfo_JSONText _p _x :: Peek Univ ReportValueApproachInfo
instance Paths Univ ReportValueApproachInfo Markup
    where type Path Univ ReportValueApproachInfo Markup = Path_ReportValueApproachInfo Markup
          paths (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                      a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                        reportValueApproachName _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                               Markup,
                                                                                                                                                                                                                          Markup)]),
                                                                                         concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                           reportValueApproachDescription _s)] :: [(Path Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         Markup ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportValueApproachInfo
                                                                                                                                                                                                                                         Markup,
                                                                                                                                                                                                                                    Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                                        Markup])
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peekPath (Proxy) (Peek_ReportValueApproachInfo_Markup _p _) = _p :: Path Univ ReportValueApproachInfo Markup
          peekValue (Proxy) (Peek_ReportValueApproachInfo_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportValueApproachInfo_Markup _p _x :: Peek Univ ReportValueApproachInfo
instance Paths Univ ReportValueApproachInfo ReportValueApproachInfo
    where type Path Univ ReportValueApproachInfo ReportValueApproachInfo = Path_ReportValueApproachInfo ReportValueApproachInfo
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportValueApproachInfo
          peekPath (Proxy) (Peek_ReportValueApproachInfo_ReportValueApproachInfo _p _) = _p :: Path Univ ReportValueApproachInfo ReportValueApproachInfo
          peekValue (Proxy) (Peek_ReportValueApproachInfo_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekCons _p _x = Peek_ReportValueApproachInfo_ReportValueApproachInfo _p _x :: Peek Univ ReportValueApproachInfo
instance Paths Univ ReportValueApproachInfo Text
    where type Path Univ ReportValueApproachInfo Text = Path_ReportValueApproachInfo Text
          paths (Proxy) (_s@(ReportValueApproachInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                      a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                                                                                        reportValueApproachName _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportValueApproachInfo
                                                                                                                                                                                                                               Text,
                                                                                                                                                                                                                          Markup)]),
                                                                                         concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueApproachInfo_reportValueApproachDescription,
                                                                                                                                                                                           reportValueApproachDescription _s)] :: [(Path Univ
                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                         Text ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportValueApproachInfo
                                                                                                                                                                                                                                         Text,
                                                                                                                                                                                                                                    Markup)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportValueApproachInfo
                                                                                                                                                                                                                                                        Text])
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peek (p@(Path_ReportValueApproachInfo_reportValueApproachDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueApproachInfo
          peekPath (Proxy) (Peek_ReportValueApproachInfo_Text _p _) = _p :: Path Univ ReportValueApproachInfo Text
          peekValue (Proxy) (Peek_ReportValueApproachInfo_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportValueApproachInfo_Text _p _x :: Peek Univ ReportValueApproachInfo
instance Paths Univ ReportValueTypeInfo JSONText
    where type Path Univ ReportValueTypeInfo JSONText = Path_ReportValueTypeInfo JSONText
          paths (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                  a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                    reportValueTypeName _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                  Path Univ ReportValueTypeInfo JSONText,
                                                                                                                                                                                                                  Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                       reportValueTypeDescription _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportValueTypeInfo
                                                                                                                                                                                                                                 JSONText,
                                                                                                                                                                                                                            Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                       reportValueTypeDefinition _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                           Markup)])] :: [Path Univ
                                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                                               JSONText])
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peekPath (Proxy) (Peek_ReportValueTypeInfo_JSONText _p _) = _p :: Path Univ ReportValueTypeInfo JSONText
          peekValue (Proxy) (Peek_ReportValueTypeInfo_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportValueTypeInfo_JSONText _p _x :: Peek Univ ReportValueTypeInfo
instance Paths Univ ReportValueTypeInfo Markup
    where type Path Univ ReportValueTypeInfo Markup = Path_ReportValueTypeInfo Markup
          paths (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                  a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                    reportValueTypeName _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                  Path Univ ReportValueTypeInfo Markup,
                                                                                                                                                                                                                  Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                       reportValueTypeDescription _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportValueTypeInfo
                                                                                                                                                                                                                                 Markup,
                                                                                                                                                                                                                            Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                       reportValueTypeDefinition _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                Markup,
                                                                                                                                                                                                                           Markup)])] :: [Path Univ
                                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                                               Markup])
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peekPath (Proxy) (Peek_ReportValueTypeInfo_Markup _p _) = _p :: Path Univ ReportValueTypeInfo Markup
          peekValue (Proxy) (Peek_ReportValueTypeInfo_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportValueTypeInfo_Markup _p _x :: Peek Univ ReportValueTypeInfo
instance Paths Univ ReportValueTypeInfo ReportValueTypeInfo
    where type Path Univ ReportValueTypeInfo ReportValueTypeInfo = Path_ReportValueTypeInfo ReportValueTypeInfo
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportValueTypeInfo
          peekPath (Proxy) (Peek_ReportValueTypeInfo_ReportValueTypeInfo _p _) = _p :: Path Univ ReportValueTypeInfo ReportValueTypeInfo
          peekValue (Proxy) (Peek_ReportValueTypeInfo_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekCons _p _x = Peek_ReportValueTypeInfo_ReportValueTypeInfo _p _x :: Peek Univ ReportValueTypeInfo
instance Paths Univ ReportValueTypeInfo Text
    where type Path Univ ReportValueTypeInfo Text = Path_ReportValueTypeInfo Text
          paths (Proxy) (_s@(ReportValueTypeInfo {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                                  a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                                                                                    reportValueTypeName _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                  Path Univ ReportValueTypeInfo Text,
                                                                                                                                                                                                                  Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDescription,
                                                                                                                                                                                       reportValueTypeDescription _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportValueTypeInfo
                                                                                                                                                                                                                                 Text,
                                                                                                                                                                                                                            Markup)]),
                                                                                     concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportValueTypeInfo_reportValueTypeDefinition,
                                                                                                                                                                                       reportValueTypeDefinition _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportValueTypeInfo
                                                                                                                                                                                                                                Text,
                                                                                                                                                                                                                           Markup)])] :: [Path Univ
                                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                                               Text])
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDescription _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peek (p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportValueTypeInfo
          peekPath (Proxy) (Peek_ReportValueTypeInfo_Text _p _) = _p :: Path Univ ReportValueTypeInfo Text
          peekValue (Proxy) (Peek_ReportValueTypeInfo_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportValueTypeInfo_Text _p _x :: Peek Univ ReportValueTypeInfo
instance Paths Univ EUI ImageFile
    where type Path Univ EUI ImageFile = Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)
          paths (Proxy) (_s@(Left _)) _g f r0 = foldr f r0 (mempty :: [Path Univ EUI ImageFile])
          paths (Proxy) (_s@(Right _)) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ImageFile) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                                    Left _ -> []
                                                                                                                                                                    Right a' -> [(Path_Right, a')] :: [(Path Univ ImageFile ImageFile ->
                                                                                                                                                                                                        Path Univ EUI ImageFile,
                                                                                                                                                                                                        ImageFile)]) :: [Path Univ EUI ImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ EUI
          peekPath (Proxy) (Peek_EUI_ImageFile _p _) = _p :: Path Univ EUI ImageFile
          peekValue (Proxy) (Peek_EUI_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_EUI_ImageFile _p _x :: Peek Univ EUI
instance Paths Univ EUI EUI
    where type Path Univ EUI EUI = Path_Either (Path_URI EUI) (Path_ImageFile EUI)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ EUI
          peekPath (Proxy) (Peek_EUI_EUI _p _) = _p :: Path Univ EUI EUI
          peekValue (Proxy) (Peek_EUI_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_EUI_EUI _p _x :: Peek Univ EUI
instance Paths Univ EUI URI
    where type Path Univ EUI URI = Path_Either (Path_URI URI) (Path_ImageFile URI)
          paths (Proxy) (_s@(Left _)) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: URI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                             Left a' -> [(Path_Left, a')]
                                                                                                                                                             Right _ -> [] :: [(Path Univ URI URI -> Path Univ EUI URI, URI)]) :: [Path Univ EUI URI])
          paths (Proxy) (_s@(Right _)) _g f r0 = foldr f r0 (mempty :: [Path Univ EUI URI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ EUI
          peekPath (Proxy) (Peek_EUI_URI _p _) = _p :: Path Univ EUI URI
          peekValue (Proxy) (Peek_EUI_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_EUI_URI _p _x :: Peek Univ EUI
instance Paths Univ MEUI ImageFile
    where type Path Univ MEUI ImageFile = Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                  Nothing -> []
                                                                                                                                                  Just a' -> [(Path_Just, a')] :: [(Path Univ EUI ImageFile -> Path Univ MEUI ImageFile,
                                                                                                                                                                                    EUI)]) :: [Path Univ MEUI ImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MEUI
          peekPath (Proxy) (Peek_MEUI_ImageFile _p _) = _p :: Path Univ MEUI ImageFile
          peekValue (Proxy) (Peek_MEUI_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_MEUI_ImageFile _p _x :: Peek Univ MEUI
instance Paths Univ MEUI EUI
    where type Path Univ MEUI EUI = Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                  Nothing -> []
                                                                                                                                                  Just a' -> [(Path_Just, a')] :: [(Path Univ EUI EUI -> Path Univ MEUI EUI, EUI)]) :: [Path Univ
                                                                                                                                                                                                                                             MEUI
                                                                                                                                                                                                                                             EUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MEUI
          peekPath (Proxy) (Peek_MEUI_EUI _p _) = _p :: Path Univ MEUI EUI
          peekValue (Proxy) (Peek_MEUI_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_MEUI_EUI _p _x :: Peek Univ MEUI
instance Paths Univ MEUI MEUI
    where type Path Univ MEUI MEUI = Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MEUI
          peekPath (Proxy) (Peek_MEUI_MEUI _p _) = _p :: Path Univ MEUI MEUI
          peekValue (Proxy) (Peek_MEUI_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_MEUI_MEUI _p _x :: Peek Univ MEUI
instance Paths Univ MEUI URI
    where type Path Univ MEUI URI = Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: EUI) _g (\npt r -> p npt : r) []) (case _s of
                                                                                                                                                  Nothing -> []
                                                                                                                                                  Just a' -> [(Path_Just, a')] :: [(Path Univ EUI URI -> Path Univ MEUI URI, EUI)]) :: [Path Univ
                                                                                                                                                                                                                                             MEUI
                                                                                                                                                                                                                                             URI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MEUI
          peekPath (Proxy) (Peek_MEUI_URI _p _) = _p :: Path Univ MEUI URI
          peekValue (Proxy) (Peek_MEUI_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_MEUI_URI _p _x :: Peek Univ MEUI
instance Paths Univ MaybeImageFile String
    where type Path Univ MaybeImageFile String = Path_MaybeImageFile String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeImageFile_View :: Path Univ String String ->
                                                                                                                                                                                       Path Univ MaybeImageFile String,
                                                                                                                                                           a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path Univ
                                                                                                                                                                                                                            String
                                                                                                                                                                                                                            String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    String
                                                                                                                                                                                                                                                    String ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    MaybeImageFile
                                                                                                                                                                                                                                                    String,
                                                                                                                                                                                                                                               String)]) :: [Path Univ
                                                                                                                                                                                                                                                                  MaybeImageFile
                                                                                                                                                                                                                                                                  String])
          peek (p@(Path_MaybeImageFile_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MaybeImageFile
          peekPath (Proxy) (Peek_MaybeImageFile_String _p _) = _p :: Path Univ MaybeImageFile String
          peekValue (Proxy) (Peek_MaybeImageFile_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_MaybeImageFile_String _p _x :: Peek Univ MaybeImageFile
instance Paths Univ MaybeImageFile JSONText
    where type Path Univ MaybeImageFile JSONText = Path_MaybeImageFile JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_MaybeImageFile_View :: Path Univ String JSONText ->
                                                                                                                                                                                       Path Univ MaybeImageFile JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: Path Univ
                                                                                                                                                                                                                            String
                                                                                                                                                                                                                            String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    String
                                                                                                                                                                                                                                                    JSONText ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    MaybeImageFile
                                                                                                                                                                                                                                                    JSONText,
                                                                                                                                                                                                                                               String)]) :: [Path Univ
                                                                                                                                                                                                                                                                  MaybeImageFile
                                                                                                                                                                                                                                                                  JSONText])
          peek (p@(Path_MaybeImageFile_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MaybeImageFile
          peekPath (Proxy) (Peek_MaybeImageFile_JSONText _p _) = _p :: Path Univ MaybeImageFile JSONText
          peekValue (Proxy) (Peek_MaybeImageFile_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MaybeImageFile_JSONText _p _x :: Peek Univ MaybeImageFile
instance Paths Univ MaybeImageFile MaybeImageFile
    where type Path Univ MaybeImageFile MaybeImageFile = Path_MaybeImageFile MaybeImageFile
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MaybeImageFile
          peekPath (Proxy) (Peek_MaybeImageFile_MaybeImageFile _p _) = _p :: Path Univ MaybeImageFile MaybeImageFile
          peekValue (Proxy) (Peek_MaybeImageFile_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_MaybeImageFile_MaybeImageFile _p _x :: Peek Univ MaybeImageFile
instance Paths Univ ReportImage String
    where type Path Univ ReportImage String = Path_ReportImage String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView String ->
                                                                                                                                                                                             Path Univ ReportImage String,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   String ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   String,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          String])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_String _p _) = _p :: Path Univ ReportImage String
          peekValue (Proxy) (Peek_ReportImage_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportImage_String _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Bool
    where type Path Univ ReportImage Bool = Path_ReportImage Bool
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Bool ->
                                                                                                                                                                                             Path Univ ReportImage Bool,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Bool ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Bool,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Bool])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Bool _p _) = _p :: Path Univ ReportImage Bool
          peekValue (Proxy) (Peek_ReportImage_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportImage_Bool _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Double
    where type Path Univ ReportImage Double = Path_ReportImage Double
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Double ->
                                                                                                                                                                                             Path Univ ReportImage Double,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Double ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Double,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Double])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Double _p _) = _p :: Path Univ ReportImage Double
          peekValue (Proxy) (Peek_ReportImage_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportImage_Double _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Dimension
    where type Path Univ ReportImage Dimension = Path_ReportImage Dimension
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Dimension ->
                                                                                                                                                                                             Path Univ ReportImage Dimension,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Dimension ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Dimension,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Dimension])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Dimension _p _) = _p :: Path Univ ReportImage Dimension
          peekValue (Proxy) (Peek_ReportImage_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportImage_Dimension _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage ImageCrop
    where type Path Univ ReportImage ImageCrop = Path_ReportImage ImageCrop
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView ImageCrop ->
                                                                                                                                                                                             Path Univ ReportImage ImageCrop,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   ImageCrop ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   ImageCrop,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          ImageCrop])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_ImageCrop _p _) = _p :: Path Univ ReportImage ImageCrop
          peekValue (Proxy) (Peek_ReportImage_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportImage_ImageCrop _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage ImageSize
    where type Path Univ ReportImage ImageSize = Path_ReportImage ImageSize
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView ImageSize ->
                                                                                                                                                                                             Path Univ ReportImage ImageSize,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   ImageSize ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   ImageSize,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          ImageSize])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_ImageSize _p _) = _p :: Path Univ ReportImage ImageSize
          peekValue (Proxy) (Peek_ReportImage_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportImage_ImageSize _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Units
    where type Path Univ ReportImage Units = Path_ReportImage Units
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Units ->
                                                                                                                                                                                             Path Univ ReportImage Units,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Units ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Units,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Units])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Units _p _) = _p :: Path Univ ReportImage Units
          peekValue (Proxy) (Peek_ReportImage_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportImage_Units _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage ImageFile
    where type Path Univ ReportImage ImageFile = Path_ReportImage ImageFile
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView ImageFile ->
                                                                                                                                                                                             Path Univ ReportImage ImageFile,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   ImageFile ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   ImageFile,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          ImageFile])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_ImageFile _p _) = _p :: Path Univ ReportImage ImageFile
          peekValue (Proxy) (Peek_ReportImage_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportImage_ImageFile _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage JSONText
    where type Path Univ ReportImage JSONText = Path_ReportImage JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView JSONText ->
                                                                                                                                                                                             Path Univ ReportImage JSONText,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   JSONText ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   JSONText,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          JSONText])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_JSONText _p _) = _p :: Path Univ ReportImage JSONText
          peekValue (Proxy) (Peek_ReportImage_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportImage_JSONText _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Markup
    where type Path Univ ReportImage Markup = Path_ReportImage Markup
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Markup ->
                                                                                                                                                                                             Path Univ ReportImage Markup,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Markup ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Markup,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Markup])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Markup _p _) = _p :: Path Univ ReportImage Markup
          peekValue (Proxy) (Peek_ReportImage_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportImage_Markup _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage EUI
    where type Path Univ ReportImage EUI = Path_ReportImage EUI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView EUI ->
                                                                                                                                                                                             Path Univ ReportImage EUI,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   EUI ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   EUI,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          EUI])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_EUI _p _) = _p :: Path Univ ReportImage EUI
          peekValue (Proxy) (Peek_ReportImage_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportImage_EUI _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage MEUI
    where type Path Univ ReportImage MEUI = Path_ReportImage MEUI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView MEUI ->
                                                                                                                                                                                             Path Univ ReportImage MEUI,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   MEUI ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   MEUI,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          MEUI])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_MEUI _p _) = _p :: Path Univ ReportImage MEUI
          peekValue (Proxy) (Peek_ReportImage_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportImage_MEUI _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage MaybeImageFile
    where type Path Univ ReportImage MaybeImageFile = Path_ReportImage MaybeImageFile
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ
                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                  MaybeImageFile ->
                                                                                                                                                                                             Path Univ ReportImage MaybeImageFile,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   MaybeImageFile ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   MaybeImageFile,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          MaybeImageFile])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_MaybeImageFile _p _) = _p :: Path Univ ReportImage MaybeImageFile
          peekValue (Proxy) (Peek_ReportImage_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportImage_MaybeImageFile _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage ReportImage
    where type Path Univ ReportImage ReportImage = Path_ReportImage ReportImage
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_ReportImage _p _) = _p :: Path Univ ReportImage ReportImage
          peekValue (Proxy) (Peek_ReportImage_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportImage_ReportImage _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage ReportImageView
    where type Path Univ ReportImage ReportImageView = Path_ReportImage ReportImageView
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ
                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                  ReportImageView ->
                                                                                                                                                                                             Path Univ ReportImage ReportImageView,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   ReportImageView ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   ReportImageView,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          ReportImageView])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_ReportImageView _p _) = _p :: Path Univ ReportImage ReportImageView
          peekValue (Proxy) (Peek_ReportImage_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportImage_ReportImageView _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage SaneSizeImageSize
    where type Path Univ ReportImage SaneSizeImageSize = Path_ReportImage SaneSizeImageSize
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ
                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                  SaneSizeImageSize ->
                                                                                                                                                                                             Path Univ ReportImage SaneSizeImageSize,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   SaneSizeImageSize ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   SaneSizeImageSize,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          SaneSizeImageSize])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_SaneSizeImageSize _p _) = _p :: Path Univ ReportImage SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportImage_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportImage_SaneSizeImageSize _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage URI
    where type Path Univ ReportImage URI = Path_ReportImage URI
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView URI ->
                                                                                                                                                                                             Path Univ ReportImage URI,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   URI ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   URI,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          URI])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_URI _p _) = _p :: Path Univ ReportImage URI
          peekValue (Proxy) (Peek_ReportImage_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportImage_URI _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImage Text
    where type Path Univ ReportImage Text = Path_ReportImage Text
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImageView) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReportImage_View :: Path Univ ReportImageView Text ->
                                                                                                                                                                                             Path Univ ReportImage Text,
                                                                                                                                                                    a')) (toListOf (toLens (Path_ReportImage_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                  ReportImageView))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                   Text ->
                                                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                                                   ReportImage
                                                                                                                                                                                                                                                                   Text,
                                                                                                                                                                                                                                                              ReportImageView)]) :: [Path Univ
                                                                                                                                                                                                                                                                                          ReportImage
                                                                                                                                                                                                                                                                                          Text])
          peek (p@(Path_ReportImage_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImage
          peekPath (Proxy) (Peek_ReportImage_Text _p _) = _p :: Path Univ ReportImage Text
          peekValue (Proxy) (Peek_ReportImage_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportImage_Text _p _x :: Peek Univ ReportImage
instance Paths Univ ReportImages String
    where type Path Univ ReportImages String = Path_OMap ReportImageID (Path_ReportImage String)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage String ->
                                                                                                                                                                                                           Path Univ ReportImages String,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   String])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_String _p _) = _p :: Path Univ ReportImages String
          peekValue (Proxy) (Peek_ReportImages_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportImages_String _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Bool
    where type Path Univ ReportImages Bool = Path_OMap ReportImageID (Path_ReportImage Bool)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Bool ->
                                                                                                                                                                                                           Path Univ ReportImages Bool,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Bool])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Bool _p _) = _p :: Path Univ ReportImages Bool
          peekValue (Proxy) (Peek_ReportImages_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportImages_Bool _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Double
    where type Path Univ ReportImages Double = Path_OMap ReportImageID (Path_ReportImage Double)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Double ->
                                                                                                                                                                                                           Path Univ ReportImages Double,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Double])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Double _p _) = _p :: Path Univ ReportImages Double
          peekValue (Proxy) (Peek_ReportImages_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportImages_Double _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Dimension
    where type Path Univ ReportImages Dimension = Path_OMap ReportImageID (Path_ReportImage Dimension)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Dimension ->
                                                                                                                                                                                                           Path Univ ReportImages Dimension,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Dimension])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Dimension _p _) = _p :: Path Univ ReportImages Dimension
          peekValue (Proxy) (Peek_ReportImages_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportImages_Dimension _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ImageCrop
    where type Path Univ ReportImages ImageCrop = Path_OMap ReportImageID (Path_ReportImage ImageCrop)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage ImageCrop ->
                                                                                                                                                                                                           Path Univ ReportImages ImageCrop,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   ImageCrop])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ImageCrop _p _) = _p :: Path Univ ReportImages ImageCrop
          peekValue (Proxy) (Peek_ReportImages_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportImages_ImageCrop _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ImageSize
    where type Path Univ ReportImages ImageSize = Path_OMap ReportImageID (Path_ReportImage ImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage ImageSize ->
                                                                                                                                                                                                           Path Univ ReportImages ImageSize,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   ImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ImageSize _p _) = _p :: Path Univ ReportImages ImageSize
          peekValue (Proxy) (Peek_ReportImages_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportImages_ImageSize _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Units
    where type Path Univ ReportImages Units = Path_OMap ReportImageID (Path_ReportImage Units)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Units ->
                                                                                                                                                                                                           Path Univ ReportImages Units,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Units])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Units _p _) = _p :: Path Univ ReportImages Units
          peekValue (Proxy) (Peek_ReportImages_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportImages_Units _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ImageFile
    where type Path Univ ReportImages ImageFile = Path_OMap ReportImageID (Path_ReportImage ImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage ImageFile ->
                                                                                                                                                                                                           Path Univ ReportImages ImageFile,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   ImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ImageFile _p _) = _p :: Path Univ ReportImages ImageFile
          peekValue (Proxy) (Peek_ReportImages_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportImages_ImageFile _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages JSONText
    where type Path Univ ReportImages JSONText = Path_OMap ReportImageID (Path_ReportImage JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage JSONText ->
                                                                                                                                                                                                           Path Univ ReportImages JSONText,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_JSONText _p _) = _p :: Path Univ ReportImages JSONText
          peekValue (Proxy) (Peek_ReportImages_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportImages_JSONText _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Markup
    where type Path Univ ReportImages Markup = Path_OMap ReportImageID (Path_ReportImage Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Markup ->
                                                                                                                                                                                                           Path Univ ReportImages Markup,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Markup _p _) = _p :: Path Univ ReportImages Markup
          peekValue (Proxy) (Peek_ReportImages_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportImages_Markup _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages EUI
    where type Path Univ ReportImages EUI = Path_OMap ReportImageID (Path_ReportImage EUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage EUI ->
                                                                                                                                                                                                           Path Univ ReportImages EUI,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ ReportImages EUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_EUI _p _) = _p :: Path Univ ReportImages EUI
          peekValue (Proxy) (Peek_ReportImages_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportImages_EUI _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages MEUI
    where type Path Univ ReportImages MEUI = Path_OMap ReportImageID (Path_ReportImage MEUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage MEUI ->
                                                                                                                                                                                                           Path Univ ReportImages MEUI,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   MEUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_MEUI _p _) = _p :: Path Univ ReportImages MEUI
          peekValue (Proxy) (Peek_ReportImages_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportImages_MEUI _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages MaybeImageFile
    where type Path Univ ReportImages MaybeImageFile = Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage MaybeImageFile ->
                                                                                                                                                                                                           Path Univ ReportImages MaybeImageFile,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   MaybeImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_MaybeImageFile _p _) = _p :: Path Univ ReportImages MaybeImageFile
          peekValue (Proxy) (Peek_ReportImages_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportImages_MaybeImageFile _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ReportImage
    where type Path Univ ReportImages ReportImage = Path_OMap ReportImageID (Path_ReportImage ReportImage)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage ReportImage ->
                                                                                                                                                                                                           Path Univ ReportImages ReportImage,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   ReportImage])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ReportImage _p _) = _p :: Path Univ ReportImages ReportImage
          peekValue (Proxy) (Peek_ReportImages_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportImages_ReportImage _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ReportImages
    where type Path Univ ReportImages ReportImages = Path_OMap ReportImageID (Path_ReportImage ReportImages)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ReportImages _p _) = _p :: Path Univ ReportImages ReportImages
          peekValue (Proxy) (Peek_ReportImages_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_ReportImages_ReportImages _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages ReportImageView
    where type Path Univ ReportImages ReportImageView = Path_OMap ReportImageID (Path_ReportImage ReportImageView)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage ReportImageView ->
                                                                                                                                                                                                           Path Univ ReportImages ReportImageView,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   ReportImageView])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_ReportImageView _p _) = _p :: Path Univ ReportImages ReportImageView
          peekValue (Proxy) (Peek_ReportImages_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportImages_ReportImageView _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages SaneSizeImageSize
    where type Path Univ ReportImages SaneSizeImageSize = Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage SaneSizeImageSize ->
                                                                                                                                                                                                           Path Univ ReportImages SaneSizeImageSize,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   SaneSizeImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_SaneSizeImageSize _p _) = _p :: Path Univ ReportImages SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportImages_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportImages_SaneSizeImageSize _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages URI
    where type Path Univ ReportImages URI = Path_OMap ReportImageID (Path_ReportImage URI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage URI ->
                                                                                                                                                                                                           Path Univ ReportImages URI,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ ReportImages URI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_URI _p _) = _p :: Path Univ ReportImages URI
          peekValue (Proxy) (Peek_ReportImages_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportImages_URI _p _x :: Peek Univ ReportImages
instance Paths Univ ReportImages Text
    where type Path Univ ReportImages Text = Path_OMap ReportImageID (Path_ReportImage Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImage) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                             val) -> (Path_At idx, val)) (toPairs _s) :: [(Path Univ ReportImage Text ->
                                                                                                                                                                                                           Path Univ ReportImages Text,
                                                                                                                                                                                                           ReportImage)]) :: [Path Univ
                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                   Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImages
          peekPath (Proxy) (Peek_ReportImages_Text _p _) = _p :: Path Univ ReportImages Text
          peekValue (Proxy) (Peek_ReportImages_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportImages_Text _p _x :: Peek Univ ReportImages
instance Paths Univ ReadOnlyFilePath String
    where type Path Univ ReadOnlyFilePath String = Path_ReadOnlyFilePath String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReadOnlyFilePath_View :: Path Univ String String ->
                                                                                                                                                                                         Path Univ ReadOnlyFilePath String,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path Univ
                                                                                                                                                                                                                              String
                                                                                                                                                                                                                              String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      String ->
                                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                                      ReadOnlyFilePath
                                                                                                                                                                                                                                                      String,
                                                                                                                                                                                                                                                 String)]) :: [Path Univ
                                                                                                                                                                                                                                                                    ReadOnlyFilePath
                                                                                                                                                                                                                                                                    String])
          peek (p@(Path_ReadOnlyFilePath_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReadOnlyFilePath
          peekPath (Proxy) (Peek_ReadOnlyFilePath_String _p _) = _p :: Path Univ ReadOnlyFilePath String
          peekValue (Proxy) (Peek_ReadOnlyFilePath_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReadOnlyFilePath_String _p _x :: Peek Univ ReadOnlyFilePath
instance Paths Univ ReadOnlyFilePath JSONText
    where type Path Univ ReadOnlyFilePath JSONText = Path_ReadOnlyFilePath JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: String) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_ReadOnlyFilePath_View :: Path Univ String JSONText ->
                                                                                                                                                                                         Path Univ ReadOnlyFilePath JSONText,
                                                                                                                                                           a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: Path Univ
                                                                                                                                                                                                                              String
                                                                                                                                                                                                                              String))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                                      ReadOnlyFilePath
                                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                                 String)]) :: [Path Univ
                                                                                                                                                                                                                                                                    ReadOnlyFilePath
                                                                                                                                                                                                                                                                    JSONText])
          peek (p@(Path_ReadOnlyFilePath_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReadOnlyFilePath
          peekPath (Proxy) (Peek_ReadOnlyFilePath_JSONText _p _) = _p :: Path Univ ReadOnlyFilePath JSONText
          peekValue (Proxy) (Peek_ReadOnlyFilePath_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReadOnlyFilePath_JSONText _p _x :: Peek Univ ReadOnlyFilePath
instance Paths Univ ReadOnlyFilePath ReadOnlyFilePath
    where type Path Univ ReadOnlyFilePath ReadOnlyFilePath = Path_ReadOnlyFilePath ReadOnlyFilePath
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReadOnlyFilePath
          peekPath (Proxy) (Peek_ReadOnlyFilePath_ReadOnlyFilePath _p _) = _p :: Path Univ ReadOnlyFilePath ReadOnlyFilePath
          peekValue (Proxy) (Peek_ReadOnlyFilePath_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekCons _p _x = Peek_ReadOnlyFilePath_ReadOnlyFilePath _p _x :: Peek Univ ReadOnlyFilePath
instance Paths Univ ReportImageView String
    where type Path Univ ReportImageView String = Path_ReportImageView String
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  String ->
                                                                                                                                                                                                                                             Path Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  String,
                                                                                                                                                                                                                                             SaneSizeImageSize)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                           _picEditedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                               MaybeImageFile
                                                                                                                                                                                                                               String ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                               String,
                                                                                                                                                                                                                          MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                           _picThumbDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                              String ->
                                                                                                                                                                                                                         Path Univ ReportImageView String,
                                                                                                                                                                                                                         MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                           _picPrinterDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                MaybeImageFile
                                                                                                                                                                                                                                String ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportImageView
                                                                                                                                                                                                                                String,
                                                                                                                                                                                                                           MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge,
                                                                                                                                                                                 _picMustEnlarge _s)] :: [(Path Univ Bool String ->
                                                                                                                                                                                                           Path Univ ReportImageView String,
                                                                                                                                                                                                           Bool)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                           _picEnlargedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                 MaybeImageFile
                                                                                                                                                                                                                                 String ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 String,
                                                                                                                                                                                                                            MaybeImageFile)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        String])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picMustEnlarge _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_String _p _) = _p :: Path Univ ReportImageView String
          peekValue (Proxy) (Peek_ReportImageView_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportImageView_String _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Bool
    where type Path Univ ReportImageView Bool = Path_ReportImageView Bool
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Bool
                                                                                                                                                                                                                                          Bool ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportImageView
                                                                                                                                                                                                                                          Bool,
                                                                                                                                                                                                                                     Bool)]) :: [Path Univ
                                                                                                                                                                                                                                                      ReportImageView
                                                                                                                                                                                                                                                      Bool])
          peek (p@(Path_ReportImageView__picMustEnlarge _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Bool _p _) = _p :: Path Univ ReportImageView Bool
          peekValue (Proxy) (Peek_ReportImageView_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportImageView_Bool _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Double
    where type Path Univ ReportImageView Double = Path_ReportImageView Double
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                         Double ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         Double,
                                                                                                                                                                                                                                    SaneSizeImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                                  Double])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Double _p _) = _p :: Path Univ ReportImageView Double
          peekValue (Proxy) (Peek_ReportImageView_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportImageView_Double _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Dimension
    where type Path Univ ReportImageView Dimension = Path_ReportImageView Dimension
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                         Dimension ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         Dimension,
                                                                                                                                                                                                                                    SaneSizeImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                                  Dimension])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Dimension _p _) = _p :: Path Univ ReportImageView Dimension
          peekValue (Proxy) (Peek_ReportImageView_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportImageView_Dimension _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView ImageCrop
    where type Path Univ ReportImageView ImageCrop = Path_ReportImageView ImageCrop
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: ImageCrop) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCrop, _picCrop _s)] :: [(Path Univ
                                                                                                                                                                                                                                 ImageCrop
                                                                                                                                                                                                                                 ImageCrop ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 ImageCrop,
                                                                                                                                                                                                                            ImageCrop)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  ImageCrop])
          peek (p@(Path_ReportImageView__picCrop _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_ImageCrop _p _) = _p :: Path Univ ReportImageView ImageCrop
          peekValue (Proxy) (Peek_ReportImageView_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportImageView_ImageCrop _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView ImageSize
    where type Path Univ ReportImageView ImageSize = Path_ReportImageView ImageSize
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                         ImageSize ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         ImageSize,
                                                                                                                                                                                                                                    SaneSizeImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                                  ImageSize])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_ImageSize _p _) = _p :: Path Univ ReportImageView ImageSize
          peekValue (Proxy) (Peek_ReportImageView_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportImageView_ImageSize _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Units
    where type Path Univ ReportImageView Units = Path_ReportImageView Units
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                         Units ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         Units,
                                                                                                                                                                                                                                    SaneSizeImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                                  Units])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Units _p _) = _p :: Path Univ ReportImageView Units
          peekValue (Proxy) (Peek_ReportImageView_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportImageView_Units _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView ImageFile
    where type Path Univ ReportImageView ImageFile = Path_ReportImageView ImageFile
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                            _picOriginal _s)] :: [(Path Univ
                                                                                                                                                                                                                        (Maybe (Either URI ImageFile))
                                                                                                                                                                                                                        ImageFile ->
                                                                                                                                                                                                                   Path Univ ReportImageView ImageFile,
                                                                                                                                                                                                                   Maybe (Either URI
                                                                                                                                                                                                                                 ImageFile))]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        ImageFile])
          peek (p@(Path_ReportImageView__picOriginal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_ImageFile _p _) = _p :: Path Univ ReportImageView ImageFile
          peekValue (Proxy) (Peek_ReportImageView_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportImageView_ImageFile _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView JSONText
    where type Path Univ ReportImageView JSONText = Path_ReportImageView JSONText
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                                  SaneSizeImageSize
                                                                                                                                                                                                                                                  JSONText ->
                                                                                                                                                                                                                                             Path Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  JSONText,
                                                                                                                                                                                                                                             SaneSizeImageSize)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption, _picCaption _s)] :: [(Path Univ
                                                                                                                                                                                                                                                Markup
                                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                                ReportImageView
                                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                                           Markup)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                           _picEditedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                               MaybeImageFile
                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                               JSONText,
                                                                                                                                                                                                                          MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                           _picThumbDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                              ReportImageView
                                                                                                                                                                                                                              JSONText,
                                                                                                                                                                                                                         MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                           _picPrinterDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                MaybeImageFile
                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportImageView
                                                                                                                                                                                                                                JSONText,
                                                                                                                                                                                                                           MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picMustEnlarge,
                                                                                                                                                                                 _picMustEnlarge _s)] :: [(Path Univ Bool JSONText ->
                                                                                                                                                                                                           Path Univ ReportImageView JSONText,
                                                                                                                                                                                                           Bool)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                           _picEnlargedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                 MaybeImageFile
                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 JSONText,
                                                                                                                                                                                                                            MaybeImageFile)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        JSONText])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picCaption _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picMustEnlarge _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_JSONText _p _) = _p :: Path Univ ReportImageView JSONText
          peekValue (Proxy) (Peek_ReportImageView_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportImageView_JSONText _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Markup
    where type Path Univ ReportImageView Markup = Path_ReportImageView Markup
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption, _picCaption _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                    ReportImageView
                                                                                                                                                                                                                                    Markup,
                                                                                                                                                                                                                               Markup)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  Markup])
          peek (p@(Path_ReportImageView__picCaption _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Markup _p _) = _p :: Path Univ ReportImageView Markup
          peekValue (Proxy) (Peek_ReportImageView_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportImageView_Markup _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView EUI
    where type Path Univ ReportImageView EUI = Path_ReportImageView EUI
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                            _picOriginal _s)] :: [(Path Univ
                                                                                                                                                                                                                        (Maybe (Either URI ImageFile))
                                                                                                                                                                                                                        EUI ->
                                                                                                                                                                                                                   Path Univ ReportImageView EUI,
                                                                                                                                                                                                                   Maybe (Either URI
                                                                                                                                                                                                                                 ImageFile))]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        EUI])
          peek (p@(Path_ReportImageView__picOriginal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_EUI _p _) = _p :: Path Univ ReportImageView EUI
          peekValue (Proxy) (Peek_ReportImageView_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportImageView_EUI _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView MEUI
    where type Path Univ ReportImageView MEUI = Path_ReportImageView MEUI
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                            _picOriginal _s)] :: [(Path Univ
                                                                                                                                                                                                                        (Maybe (Either URI ImageFile))
                                                                                                                                                                                                                        MEUI ->
                                                                                                                                                                                                                   Path Univ ReportImageView MEUI,
                                                                                                                                                                                                                   Maybe (Either URI
                                                                                                                                                                                                                                 ImageFile))]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        MEUI])
          peek (p@(Path_ReportImageView__picOriginal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_MEUI _p _) = _p :: Path Univ ReportImageView MEUI
          peekValue (Proxy) (Peek_ReportImageView_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportImageView_MEUI _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView MaybeImageFile
    where type Path Univ ReportImageView MaybeImageFile = Path_ReportImageView MaybeImageFile
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEditedDeprecated,
                                                                                                                                                                                        _picEditedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                            MaybeImageFile
                                                                                                                                                                                                                            MaybeImageFile ->
                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                            ReportImageView
                                                                                                                                                                                                                            MaybeImageFile,
                                                                                                                                                                                                                       MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picThumbDeprecated,
                                                                                                                                                                                           _picThumbDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                              MaybeImageFile ->
                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                              ReportImageView
                                                                                                                                                                                                                              MaybeImageFile,
                                                                                                                                                                                                                         MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picPrinterDeprecated,
                                                                                                                                                                                           _picPrinterDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                MaybeImageFile
                                                                                                                                                                                                                                MaybeImageFile ->
                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                ReportImageView
                                                                                                                                                                                                                                MaybeImageFile,
                                                                                                                                                                                                                           MaybeImageFile)]),
                                                                                 concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeImageFile) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picEnlargedDeprecated,
                                                                                                                                                                                           _picEnlargedDeprecated _s)] :: [(Path Univ
                                                                                                                                                                                                                                 MaybeImageFile
                                                                                                                                                                                                                                 MaybeImageFile ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                 MaybeImageFile,
                                                                                                                                                                                                                            MaybeImageFile)])] :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        MaybeImageFile])
          peek (p@(Path_ReportImageView__picEditedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picThumbDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picPrinterDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peek (p@(Path_ReportImageView__picEnlargedDeprecated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_MaybeImageFile _p _) = _p :: Path Univ ReportImageView MaybeImageFile
          peekValue (Proxy) (Peek_ReportImageView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportImageView_MaybeImageFile _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView ReportImageView
    where type Path Univ ReportImageView ReportImageView = Path_ReportImageView ReportImageView
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_ReportImageView _p _) = _p :: Path Univ ReportImageView ReportImageView
          peekValue (Proxy) (Peek_ReportImageView_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportImageView_ReportImageView _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView SaneSizeImageSize
    where type Path Univ ReportImageView SaneSizeImageSize = Path_ReportImageView SaneSizeImageSize
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: SaneSizeImageSize) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picSize, _picSize _s)] :: [(Path Univ
                                                                                                                                                                                                                                         SaneSizeImageSize
                                                                                                                                                                                                                                         SaneSizeImageSize ->
                                                                                                                                                                                                                                    Path Univ
                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                         SaneSizeImageSize,
                                                                                                                                                                                                                                    SaneSizeImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                                  SaneSizeImageSize])
          peek (p@(Path_ReportImageView__picSize _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_SaneSizeImageSize _p _) = _p :: Path Univ ReportImageView SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportImageView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportImageView_SaneSizeImageSize _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView URI
    where type Path Univ ReportImageView URI = Path_ReportImageView URI
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Maybe (Either URI
                                                                                                                                                ImageFile)) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picOriginal,
                                                                                                                                                                                            _picOriginal _s)] :: [(Path Univ
                                                                                                                                                                                                                        (Maybe (Either URI ImageFile))
                                                                                                                                                                                                                        URI ->
                                                                                                                                                                                                                   Path Univ ReportImageView URI,
                                                                                                                                                                                                                   Maybe (Either URI
                                                                                                                                                                                                                                 ImageFile))]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportImageView
                                                                                                                                                                                                                                                        URI])
          peek (p@(Path_ReportImageView__picOriginal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_URI _p _) = _p :: Path Univ ReportImageView URI
          peekValue (Proxy) (Peek_ReportImageView_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportImageView_URI _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportImageView Text
    where type Path Univ ReportImageView Text = Path_ReportImageView Text
          paths (Proxy) (_s@(ReportImageView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                     a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportImageView__picCaption, _picCaption _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                    ReportImageView
                                                                                                                                                                                                                                    Text,
                                                                                                                                                                                                                               Markup)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportImageView
                                                                                                                                                                                                                                                  Text])
          peek (p@(Path_ReportImageView__picCaption _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportImageView
          peekPath (Proxy) (Peek_ReportImageView_Text _p _) = _p :: Path Univ ReportImageView Text
          peekValue (Proxy) (Peek_ReportImageView_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportImageView_Text _p _x :: Peek Univ ReportImageView
instance Paths Univ ReportView String
    where type Path Univ ReportView String = Path_ReportView String
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder, _reportFolder _s)] :: [(Path Univ
                                                                                                                                                                                                                                                 ReadOnlyFilePath
                                                                                                                                                                                                                                                 String ->
                                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 String,
                                                                                                                                                                                                                                            ReadOnlyFilePath)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                              _reportIntendedUse _s)] :: [(Path Univ
                                                                                                                                                                                                                                MaybeReportIntendedUse
                                                                                                                                                                                                                                String ->
                                                                                                                                                                                                                           Path Univ ReportView String,
                                                                                                                                                                                                                           MaybeReportIntendedUse)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                                           ReportElems
                                                                                                                                                                                                                                           String ->
                                                                                                                                                                                                                                      Path Univ
                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                           String,
                                                                                                                                                                                                                                      ReportElems)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus,
                                                                                                                                                                                    _reportStatus _s)] :: [(Path Univ ReportStatus String ->
                                                                                                                                                                                                            Path Univ ReportView String,
                                                                                                                                                                                                            ReportStatus)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted, _reportRedacted _s)] :: [(Path Univ
                                                                                                                                                                                                                                            Bool
                                                                                                                                                                                                                                            String ->
                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            String,
                                                                                                                                                                                                                                       Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags, _reportFlags _s)] :: [(Path Univ
                                                                                                                                                                                                                                             ReportFlags
                                                                                                                                                                                                                                             String ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             String,
                                                                                                                                                                                                                                        ReportFlags)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                            _reportOrderByItemName _s)] :: [(Path Univ Bool String ->
                                                                                                                                                                                                             Path Univ ReportView String,
                                                                                                                                                                                                             Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                            _reportDisplayItemName _s)] :: [(Path Univ Bool String ->
                                                                                                                                                                                                             Path Univ ReportView String,
                                                                                                                                                                                                             Bool)])] :: [Path Univ ReportView String])
          peek (p@(Path_ReportView__reportFolder _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportIntendedUse _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportStatus _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportRedacted _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFlags _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportOrderByItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDisplayItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_String _p _) = _p :: Path Univ ReportView String
          peekValue (Proxy) (Peek_ReportView_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportView_String _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Int64
    where type Path Univ ReportView Int64 = Path_ReportView Int64
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: EpochMilli) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCreated, _reportCreated _s)] :: [(Path Univ
                                                                                                                                                                                                                                    EpochMilli
                                                                                                                                                                                                                                    Int64 ->
                                                                                                                                                                                                                               Path Univ ReportView Int64,
                                                                                                                                                                                                                               EpochMilli)]) :: [Path Univ
                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                      Int64])
          peek (p@(Path_ReportView__reportCreated _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Int64 _p _) = _p :: Path Univ ReportView Int64
          peekValue (Proxy) (Peek_ReportView_Int64 _ _x) = _x :: Maybe Int64
          peekCons _p _x = Peek_ReportView_Int64 _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Bool
    where type Path Univ ReportView Bool = Path_ReportView Bool
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                        Bool ->
                                                                                                                                                                                                                                   Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Bool,
                                                                                                                                                                                                                                   ReportElems)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted, _reportRedacted _s)] :: [(Path Univ
                                                                                                                                                                                                                                            Bool
                                                                                                                                                                                                                                            Bool ->
                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            Bool,
                                                                                                                                                                                                                                       Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags, _reportFlags _s)] :: [(Path Univ
                                                                                                                                                                                                                                             ReportFlags
                                                                                                                                                                                                                                             Bool ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Bool,
                                                                                                                                                                                                                                        ReportFlags)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                            _reportOrderByItemName _s)] :: [(Path Univ Bool Bool ->
                                                                                                                                                                                                             Path Univ ReportView Bool,
                                                                                                                                                                                                             Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                            _reportDisplayItemName _s)] :: [(Path Univ Bool Bool ->
                                                                                                                                                                                                             Path Univ ReportView Bool,
                                                                                                                                                                                                             Bool)])] :: [Path Univ ReportView Bool])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportRedacted _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFlags _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportOrderByItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDisplayItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Bool _p _) = _p :: Path Univ ReportView Bool
          peekValue (Proxy) (Peek_ReportView_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportView_Bool _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Double
    where type Path Univ ReportView Double = Path_ReportView Double
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               Double ->
                                                                                                                                                                                                                          Path Univ ReportView Double,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  Double])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Double _p _) = _p :: Path Univ ReportView Double
          peekValue (Proxy) (Peek_ReportView_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportView_Double _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Int
    where type Path Univ ReportView Int = Path_ReportView Int
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportStandard) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStandardsVersion,
                                                                                                                                                                          _reportStandardsVersion _s)] :: [(Path Univ ReportStandard Int ->
                                                                                                                                                                                                            Path Univ ReportView Int,
                                                                                                                                                                                                            ReportStandard)]) :: [Path Univ
                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                       Int])
          peek (p@(Path_ReportView__reportStandardsVersion _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Int _p _) = _p :: Path Univ ReportView Int
          peekValue (Proxy) (Peek_ReportView_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_ReportView_Int _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Dimension
    where type Path Univ ReportView Dimension = Path_ReportView Dimension
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               Dimension ->
                                                                                                                                                                                                                          Path Univ ReportView Dimension,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  Dimension])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Dimension _p _) = _p :: Path Univ ReportView Dimension
          peekValue (Proxy) (Peek_ReportView_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportView_Dimension _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ImageCrop
    where type Path Univ ReportView ImageCrop = Path_ReportView ImageCrop
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ImageCrop ->
                                                                                                                                                                                                                          Path Univ ReportView ImageCrop,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ImageCrop])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ImageCrop _p _) = _p :: Path Univ ReportView ImageCrop
          peekValue (Proxy) (Peek_ReportView_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportView_ImageCrop _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ImageSize
    where type Path Univ ReportView ImageSize = Path_ReportView ImageSize
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ImageSize ->
                                                                                                                                                                                                                          Path Univ ReportView ImageSize,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ImageSize])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ImageSize _p _) = _p :: Path Univ ReportView ImageSize
          peekValue (Proxy) (Peek_ReportView_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportView_ImageSize _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Units
    where type Path Univ ReportView Units = Path_ReportView Units
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               Units ->
                                                                                                                                                                                                                          Path Univ ReportView Units,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  Units])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Units _p _) = _p :: Path Univ ReportView Units
          peekValue (Proxy) (Peek_ReportView_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportView_Units _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ImageFile
    where type Path Univ ReportView ImageFile = Path_ReportView ImageFile
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ImageFile ->
                                                                                                                                                                                                                          Path Univ ReportView ImageFile,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ImageFile])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ImageFile _p _) = _p :: Path Univ ReportView ImageFile
          peekValue (Proxy) (Peek_ReportView_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportView_ImageFile _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Integer
    where type Path Univ ReportView Integer = Path_ReportView Integer
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Integer) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRevision, _reportRevision _s)] :: [(Path Univ
                                                                                                                                                                                                                                   Integer
                                                                                                                                                                                                                                   Integer ->
                                                                                                                                                                                                                              Path Univ
                                                                                                                                                                                                                                   ReportView
                                                                                                                                                                                                                                   Integer,
                                                                                                                                                                                                                              Integer)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  Integer])
          peek (p@(Path_ReportView__reportRevision _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Integer _p _) = _p :: Path Univ ReportView Integer
          peekValue (Proxy) (Peek_ReportView_Integer _ _x) = _x :: Maybe Integer
          peekCons _p _x = Peek_ReportView_Integer _p _x :: Peek Univ ReportView
instance Paths Univ ReportView JSONText
    where type Path Univ ReportView JSONText = Path_ReportView JSONText
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder, _reportFolder _s)] :: [(Path Univ
                                                                                                                                                                                                                                                 ReadOnlyFilePath
                                                                                                                                                                                                                                                 JSONText ->
                                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                                 JSONText,
                                                                                                                                                                                                                                            ReadOnlyFilePath)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(Path Univ
                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                 Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(Path Univ
                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                      JSONText,
                                                                                                                                                                                                                                 Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                              _reportContractDate _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                            Path Univ ReportView JSONText,
                                                                                                                                                                                                            Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                              _reportInspectionDate _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                              Path Univ ReportView JSONText,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                              _reportEffectiveDate _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(Path Univ
                                                                                                                                                                                                                                             Authors
                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             JSONText,
                                                                                                                                                                                                                                        Authors)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer, _reportPreparer _s)] :: [(Path Univ
                                                                                                                                                                                                                                              Markup
                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              JSONText,
                                                                                                                                                                                                                                         Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                              _reportPreparerEIN _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                           Path Univ ReportView JSONText,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                              _reportPreparerAddress _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                               Path Univ ReportView JSONText,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                              _reportPreparerEMail _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                              _reportPreparerWebsite _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                               Path Univ ReportView JSONText,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                   _reportAbbrevs _s)] :: [(Path Univ AbbrevPairs JSONText ->
                                                                                                                                                                                                            Path Univ ReportView JSONText,
                                                                                                                                                                                                            AbbrevPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(Path Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        JSONText ->
                                                                                                                                                                                                                                   Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        JSONText,
                                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader, _reportHeader _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter, _reportFooter _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          JSONText ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          JSONText,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                              _reportIntendedUse _s)] :: [(Path Univ
                                                                                                                                                                                                                                MaybeReportIntendedUse
                                                                                                                                                                                                                                JSONText ->
                                                                                                                                                                                                                           Path Univ ReportView JSONText,
                                                                                                                                                                                                                           MaybeReportIntendedUse)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                           _reportValueTypeInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                               JSONText ->
                                                                                                                                                                                                                          Path Univ ReportView JSONText,
                                                                                                                                                                                                                          ReportValueTypeInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                               _reportValueApproachInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                                       ReportValueApproachInfo
                                                                                                                                                                                                                                       JSONText ->
                                                                                                                                                                                                                                  Path Univ
                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                       JSONText,
                                                                                                                                                                                                                                  ReportValueApproachInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                              _reportClientName _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                          Path Univ ReportView JSONText,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                              _reportClientAddress _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                              _reportClientGreeting _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                              Path Univ ReportView JSONText,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                              _reportItemsOwnerFull _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                              Path Univ ReportView JSONText,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                              _reportItemsOwner _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                          Path Univ ReportView JSONText,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                              _reportBriefItems _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                          Path Univ ReportView JSONText,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                              _reportInspectionLocation _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                  Path Univ ReportView JSONText,
                                                                                                                                                                                                                  Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                                           ReportElems
                                                                                                                                                                                                                                           JSONText ->
                                                                                                                                                                                                                                      Path Univ
                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                           JSONText,
                                                                                                                                                                                                                                      ReportElems)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                   _reportGlossary _s)] :: [(Path Univ MarkupPairs JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                   _reportSources _s)] :: [(Path Univ MarkupPairs JSONText ->
                                                                                                                                                                                                            Path Univ ReportView JSONText,
                                                                                                                                                                                                            MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                              _reportLetterOfTransmittal _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                                   Path Univ ReportView JSONText,
                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                              _reportScopeOfWork _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                           Path Univ ReportView JSONText,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                               _reportCertification _s)] :: [(Path Univ Markups JSONText ->
                                                                                                                                                                                                              Path Univ ReportView JSONText,
                                                                                                                                                                                                              Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                               _reportLimitingConditions _s)] :: [(Path Univ Markups JSONText ->
                                                                                                                                                                                                                   Path Univ ReportView JSONText,
                                                                                                                                                                                                                   Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                              _reportPrivacyPolicy _s)] :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(Path Univ
                                                                                                                                                                                                                                             Permissions
                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             JSONText,
                                                                                                                                                                                                                                        Permissions)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding,
                                                                                                                                                                                _reportBranding _s)] :: [(Path Univ Branding JSONText ->
                                                                                                                                                                                                          Path Univ ReportView JSONText,
                                                                                                                                                                                                          Branding)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus,
                                                                                                                                                                                    _reportStatus _s)] :: [(Path Univ ReportStatus JSONText ->
                                                                                                                                                                                                            Path Univ ReportView JSONText,
                                                                                                                                                                                                            ReportStatus)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportRedacted, _reportRedacted _s)] :: [(Path Univ
                                                                                                                                                                                                                                            Bool
                                                                                                                                                                                                                                            JSONText ->
                                                                                                                                                                                                                                       Path Univ
                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                            JSONText,
                                                                                                                                                                                                                                       Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags, _reportFlags _s)] :: [(Path Univ
                                                                                                                                                                                                                                             ReportFlags
                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             JSONText,
                                                                                                                                                                                                                                        ReportFlags)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportOrderByItemName,
                                                                                                                                                                            _reportOrderByItemName _s)] :: [(Path Univ Bool JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Bool)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Bool) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDisplayItemName,
                                                                                                                                                                            _reportDisplayItemName _s)] :: [(Path Univ Bool JSONText ->
                                                                                                                                                                                                             Path Univ ReportView JSONText,
                                                                                                                                                                                                             Bool)])] :: [Path Univ ReportView JSONText])
          peek (p@(Path_ReportView__reportFolder _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportContractDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportEffectiveDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAuthors _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparer _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEIN _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEMail _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerWebsite _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportTitle _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportHeader _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFooter _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportIntendedUse _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueTypeInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueApproachInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientGreeting _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwner _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBriefItems _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionLocation _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportGlossary _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportSources _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportScopeOfWork _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportCertification _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLimitingConditions _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPerms _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBranding _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportStatus _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportRedacted _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFlags _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportOrderByItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDisplayItemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_JSONText _p _) = _p :: Path Univ ReportView JSONText
          peekValue (Proxy) (Peek_ReportView_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportView_JSONText _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Markup
    where type Path Univ ReportView Markup = Path_ReportView Markup
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                              Path Univ ReportView Markup,
                                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(Path Univ
                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                      Markup ->
                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                      Markup,
                                                                                                                                                                                                                                 Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                              _reportContractDate _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                            Path Univ ReportView Markup,
                                                                                                                                                                                                            Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                              _reportInspectionDate _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                              Path Univ ReportView Markup,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                              _reportEffectiveDate _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                             Path Univ ReportView Markup,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(Path Univ
                                                                                                                                                                                                                                             Authors
                                                                                                                                                                                                                                             Markup ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Markup,
                                                                                                                                                                                                                                        Authors)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer, _reportPreparer _s)] :: [(Path Univ
                                                                                                                                                                                                                                              Markup
                                                                                                                                                                                                                                              Markup ->
                                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              Markup,
                                                                                                                                                                                                                                         Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                              _reportPreparerEIN _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                           Path Univ ReportView Markup,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                              _reportPreparerAddress _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                               Path Univ ReportView Markup,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                              _reportPreparerEMail _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                             Path Univ ReportView Markup,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                              _reportPreparerWebsite _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                               Path Univ ReportView Markup,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                   _reportAbbrevs _s)] :: [(Path Univ AbbrevPairs Markup ->
                                                                                                                                                                                                            Path Univ ReportView Markup,
                                                                                                                                                                                                            AbbrevPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(Path Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        Markup ->
                                                                                                                                                                                                                                   Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Markup,
                                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader, _reportHeader _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Markup ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Markup,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter, _reportFooter _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Markup ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Markup,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                           _reportValueTypeInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                               Markup ->
                                                                                                                                                                                                                          Path Univ ReportView Markup,
                                                                                                                                                                                                                          ReportValueTypeInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                               _reportValueApproachInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                                       ReportValueApproachInfo
                                                                                                                                                                                                                                       Markup ->
                                                                                                                                                                                                                                  Path Univ
                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                       Markup,
                                                                                                                                                                                                                                  ReportValueApproachInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                              _reportClientName _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                          Path Univ ReportView Markup,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                              _reportClientAddress _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                             Path Univ ReportView Markup,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                              _reportClientGreeting _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                              Path Univ ReportView Markup,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                              _reportItemsOwnerFull _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                              Path Univ ReportView Markup,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                              _reportItemsOwner _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                          Path Univ ReportView Markup,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                              _reportBriefItems _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                          Path Univ ReportView Markup,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                              _reportInspectionLocation _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                  Path Univ ReportView Markup,
                                                                                                                                                                                                                  Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                                           ReportElems
                                                                                                                                                                                                                                           Markup ->
                                                                                                                                                                                                                                      Path Univ
                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                           Markup,
                                                                                                                                                                                                                                      ReportElems)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                   _reportGlossary _s)] :: [(Path Univ MarkupPairs Markup ->
                                                                                                                                                                                                             Path Univ ReportView Markup,
                                                                                                                                                                                                             MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                   _reportSources _s)] :: [(Path Univ MarkupPairs Markup ->
                                                                                                                                                                                                            Path Univ ReportView Markup,
                                                                                                                                                                                                            MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                              _reportLetterOfTransmittal _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                                   Path Univ ReportView Markup,
                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                              _reportScopeOfWork _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                           Path Univ ReportView Markup,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                               _reportCertification _s)] :: [(Path Univ Markups Markup ->
                                                                                                                                                                                                              Path Univ ReportView Markup,
                                                                                                                                                                                                              Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                               _reportLimitingConditions _s)] :: [(Path Univ Markups Markup ->
                                                                                                                                                                                                                   Path Univ ReportView Markup,
                                                                                                                                                                                                                   Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                              _reportPrivacyPolicy _s)] :: [(Path Univ Markup Markup ->
                                                                                                                                                                                                             Path Univ ReportView Markup,
                                                                                                                                                                                                             Markup)])] :: [Path Univ ReportView Markup])
          peek (p@(Path_ReportView__reportName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportContractDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportEffectiveDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAuthors _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparer _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEIN _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEMail _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerWebsite _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportTitle _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportHeader _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFooter _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueTypeInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueApproachInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientGreeting _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwner _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBriefItems _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionLocation _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportGlossary _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportSources _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportScopeOfWork _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportCertification _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLimitingConditions _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Markup _p _) = _p :: Path Univ ReportView Markup
          peekValue (Proxy) (Peek_ReportView_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportView_Markup _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Permissions
    where type Path Univ ReportView Permissions = Path_ReportView Permissions
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(Path Univ
                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                 Permissions ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 Permissions,
                                                                                                                                                                                                                            Permissions)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Permissions])
          peek (p@(Path_ReportView__reportPerms _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Permissions _p _) = _p :: Path Univ ReportView Permissions
          peekValue (Proxy) (Peek_ReportView_Permissions _ _x) = _x :: Maybe Permissions
          peekCons _p _x = Peek_ReportView_Permissions _p _x :: Peek Univ ReportView
instance Paths Univ ReportView UserIds
    where type Path Univ ReportView UserIds = Path_ReportView UserIds
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(Path Univ
                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                 UserIds ->
                                                                                                                                                                                                                            Path Univ ReportView UserIds,
                                                                                                                                                                                                                            Permissions)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    UserIds])
          peek (p@(Path_ReportView__reportPerms _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_UserIds _p _) = _p :: Path Univ ReportView UserIds
          peekValue (Proxy) (Peek_ReportView_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_ReportView_UserIds _p _x :: Peek Univ ReportView
instance Paths Univ ReportView AbbrevPair
    where type Path Univ ReportView AbbrevPair = Path_ReportView AbbrevPair
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(Path Univ
                                                                                                                                                                                                                                     AbbrevPairs
                                                                                                                                                                                                                                     AbbrevPair ->
                                                                                                                                                                                                                                Path Univ
                                                                                                                                                                                                                                     ReportView
                                                                                                                                                                                                                                     AbbrevPair,
                                                                                                                                                                                                                                AbbrevPairs)]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                        AbbrevPair])
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_AbbrevPair _p _) = _p :: Path Univ ReportView AbbrevPair
          peekValue (Proxy) (Peek_ReportView_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_ReportView_AbbrevPair _p _x :: Peek Univ ReportView
instance Paths Univ ReportView AbbrevPairs
    where type Path Univ ReportView AbbrevPairs = Path_ReportView AbbrevPairs
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(Path Univ
                                                                                                                                                                                                                                     AbbrevPairs
                                                                                                                                                                                                                                     AbbrevPairs ->
                                                                                                                                                                                                                                Path Univ
                                                                                                                                                                                                                                     ReportView
                                                                                                                                                                                                                                     AbbrevPairs,
                                                                                                                                                                                                                                AbbrevPairs)]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                        AbbrevPairs])
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_AbbrevPairs _p _) = _p :: Path Univ ReportView AbbrevPairs
          peekValue (Proxy) (Peek_ReportView_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekCons _p _x = Peek_ReportView_AbbrevPairs _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Author
    where type Path Univ ReportView Author = Path_ReportView Author
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(Path Univ Authors Author ->
                                                                                                                                                                                                                            Path Univ ReportView Author,
                                                                                                                                                                                                                            Authors)]) :: [Path Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                Author])
          peek (p@(Path_ReportView__reportAuthors _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Author _p _) = _p :: Path Univ ReportView Author
          peekValue (Proxy) (Peek_ReportView_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_ReportView_Author _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Authors
    where type Path Univ ReportView Authors = Path_ReportView Authors
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(Path Univ
                                                                                                                                                                                                                                 Authors
                                                                                                                                                                                                                                 Authors ->
                                                                                                                                                                                                                            Path Univ ReportView Authors,
                                                                                                                                                                                                                            Authors)]) :: [Path Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                Authors])
          peek (p@(Path_ReportView__reportAuthors _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Authors _p _) = _p :: Path Univ ReportView Authors
          peekValue (Proxy) (Peek_ReportView_Authors _ _x) = _x :: Maybe Authors
          peekCons _p _x = Peek_ReportView_Authors _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Branding
    where type Path Univ ReportView Branding = Path_ReportView Branding
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding, _reportBranding _s)] :: [(Path Univ
                                                                                                                                                                                                                                    Branding
                                                                                                                                                                                                                                    Branding ->
                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                    Branding,
                                                                                                                                                                                                                               Branding)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    Branding])
          peek (p@(Path_ReportView__reportBranding _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Branding _p _) = _p :: Path Univ ReportView Branding
          peekValue (Proxy) (Peek_ReportView_Branding _ _x) = _x :: Maybe Branding
          peekCons _p _x = Peek_ReportView_Branding _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MarkupPair
    where type Path Univ ReportView MarkupPair = Path_ReportView MarkupPair
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary, _reportGlossary _s)] :: [(Path Univ
                                                                                                                                                                                                                                                MarkupPairs
                                                                                                                                                                                                                                                MarkupPair ->
                                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                MarkupPair,
                                                                                                                                                                                                                                           MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                   _reportSources _s)] :: [(Path Univ MarkupPairs MarkupPair ->
                                                                                                                                                                                                            Path Univ ReportView MarkupPair,
                                                                                                                                                                                                            MarkupPairs)])] :: [Path Univ
                                                                                                                                                                                                                                     ReportView
                                                                                                                                                                                                                                     MarkupPair])
          peek (p@(Path_ReportView__reportGlossary _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportSources _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MarkupPair _p _) = _p :: Path Univ ReportView MarkupPair
          peekValue (Proxy) (Peek_ReportView_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_ReportView_MarkupPair _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MarkupPairs
    where type Path Univ ReportView MarkupPairs = Path_ReportView MarkupPairs
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary, _reportGlossary _s)] :: [(Path Univ
                                                                                                                                                                                                                                                MarkupPairs
                                                                                                                                                                                                                                                MarkupPairs ->
                                                                                                                                                                                                                                           Path Univ
                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                MarkupPairs,
                                                                                                                                                                                                                                           MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                   _reportSources _s)] :: [(Path Univ MarkupPairs MarkupPairs ->
                                                                                                                                                                                                            Path Univ ReportView MarkupPairs,
                                                                                                                                                                                                            MarkupPairs)])] :: [Path Univ
                                                                                                                                                                                                                                     ReportView
                                                                                                                                                                                                                                     MarkupPairs])
          peek (p@(Path_ReportView__reportGlossary _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportSources _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MarkupPairs _p _) = _p :: Path Univ ReportView MarkupPairs
          peekValue (Proxy) (Peek_ReportView_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekCons _p _x = Peek_ReportView_MarkupPairs _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Markups
    where type Path Univ ReportView Markups = Path_ReportView Markups
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification, _reportCertification _s)] :: [(Path Univ
                                                                                                                                                                                                                                                      Markups
                                                                                                                                                                                                                                                      Markups ->
                                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                      Markups,
                                                                                                                                                                                                                                                 Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                               _reportLimitingConditions _s)] :: [(Path Univ Markups Markups ->
                                                                                                                                                                                                                   Path Univ ReportView Markups,
                                                                                                                                                                                                                   Markups)])] :: [Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Markups])
          peek (p@(Path_ReportView__reportCertification _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLimitingConditions _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Markups _p _) = _p :: Path Univ ReportView Markups
          peekValue (Proxy) (Peek_ReportView_Markups _ _x) = _x :: Maybe Markups
          peekCons _p _x = Peek_ReportView_Markups _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MaybeReportIntendedUse
    where type Path Univ ReportView MaybeReportIntendedUse = Path_ReportView MaybeReportIntendedUse
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: MaybeReportIntendedUse) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportIntendedUse,
                                                                                                                                                                                  _reportIntendedUse _s)] :: [(Path Univ
                                                                                                                                                                                                                    MaybeReportIntendedUse
                                                                                                                                                                                                                    MaybeReportIntendedUse ->
                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                    MaybeReportIntendedUse,
                                                                                                                                                                                                               MaybeReportIntendedUse)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  MaybeReportIntendedUse])
          peek (p@(Path_ReportView__reportIntendedUse _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MaybeReportIntendedUse _p _) = _p :: Path Univ ReportView MaybeReportIntendedUse
          peekValue (Proxy) (Peek_ReportView_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekCons _p _x = Peek_ReportView_MaybeReportIntendedUse _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportElem
    where type Path Univ ReportView ReportElem = Path_ReportView ReportElem
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ReportElem ->
                                                                                                                                                                                                                          Path Univ ReportView ReportElem,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ReportElem])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportElem _p _) = _p :: Path Univ ReportView ReportElem
          peekValue (Proxy) (Peek_ReportView_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_ReportView_ReportElem _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportElems
    where type Path Univ ReportView ReportElems = Path_ReportView ReportElems
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ReportElems ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               ReportElems,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ReportElems])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportElems _p _) = _p :: Path Univ ReportView ReportElems
          peekValue (Proxy) (Peek_ReportView_ReportElems _ _x) = _x :: Maybe ReportElems
          peekCons _p _x = Peek_ReportView_ReportElems _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportFlags
    where type Path Univ ReportView ReportFlags = Path_ReportView ReportFlags
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportFlags) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFlags, _reportFlags _s)] :: [(Path Univ
                                                                                                                                                                                                                                 ReportFlags
                                                                                                                                                                                                                                 ReportFlags ->
                                                                                                                                                                                                                            Path Univ
                                                                                                                                                                                                                                 ReportView
                                                                                                                                                                                                                                 ReportFlags,
                                                                                                                                                                                                                            ReportFlags)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    ReportFlags])
          peek (p@(Path_ReportView__reportFlags _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportFlags _p _) = _p :: Path Univ ReportView ReportFlags
          peekValue (Proxy) (Peek_ReportView_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekCons _p _x = Peek_ReportView_ReportFlags _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportStandard
    where type Path Univ ReportView ReportStandard = Path_ReportView ReportStandard
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportStandard) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStandardsVersion,
                                                                                                                                                                          _reportStandardsVersion _s)] :: [(Path Univ ReportStandard ReportStandard ->
                                                                                                                                                                                                            Path Univ ReportView ReportStandard,
                                                                                                                                                                                                            ReportStandard)]) :: [Path Univ
                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                       ReportStandard])
          peek (p@(Path_ReportView__reportStandardsVersion _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportStandard _p _) = _p :: Path Univ ReportView ReportStandard
          peekValue (Proxy) (Peek_ReportView_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekCons _p _x = Peek_ReportView_ReportStandard _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportStatus
    where type Path Univ ReportView ReportStatus = Path_ReportView ReportStatus
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportStatus) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportStatus, _reportStatus _s)] :: [(Path Univ
                                                                                                                                                                                                                                    ReportStatus
                                                                                                                                                                                                                                    ReportStatus ->
                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                    ReportStatus,
                                                                                                                                                                                                                               ReportStatus)]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                        ReportStatus])
          peek (p@(Path_ReportView__reportStatus _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportStatus _p _) = _p :: Path Univ ReportView ReportStatus
          peekValue (Proxy) (Peek_ReportView_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekCons _p _x = Peek_ReportView_ReportStatus _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportValueApproachInfo
    where type Path Univ ReportView ReportValueApproachInfo = Path_ReportView ReportValueApproachInfo
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                   _reportValueApproachInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                           ReportValueApproachInfo
                                                                                                                                                                                                                           ReportValueApproachInfo ->
                                                                                                                                                                                                                      Path Univ
                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                           ReportValueApproachInfo,
                                                                                                                                                                                                                      ReportValueApproachInfo)]) :: [Path Univ
                                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                                          ReportValueApproachInfo])
          peek (p@(Path_ReportView__reportValueApproachInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportValueApproachInfo _p _) = _p :: Path Univ ReportView ReportValueApproachInfo
          peekValue (Proxy) (Peek_ReportView_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekCons _p _x = Peek_ReportView_ReportValueApproachInfo _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportValueTypeInfo
    where type Path Univ ReportView ReportValueTypeInfo = Path_ReportView ReportValueTypeInfo
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                               _reportValueTypeInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                   ReportValueTypeInfo
                                                                                                                                                                                                                   ReportValueTypeInfo ->
                                                                                                                                                                                                              Path Univ ReportView ReportValueTypeInfo,
                                                                                                                                                                                                              ReportValueTypeInfo)]) :: [Path Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              ReportValueTypeInfo])
          peek (p@(Path_ReportView__reportValueTypeInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportValueTypeInfo _p _) = _p :: Path Univ ReportView ReportValueTypeInfo
          peekValue (Proxy) (Peek_ReportView_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekCons _p _x = Peek_ReportView_ReportValueTypeInfo _p _x :: Peek Univ ReportView
instance Paths Univ ReportView EUI
    where type Path Univ ReportView EUI = Path_ReportView EUI
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ ReportElems EUI ->
                                                                                                                                                                                                                          Path Univ ReportView EUI,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  EUI])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_EUI _p _) = _p :: Path Univ ReportView EUI
          peekValue (Proxy) (Peek_ReportView_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportView_EUI _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MEUI
    where type Path Univ ReportView MEUI = Path_ReportView MEUI
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ ReportElems MEUI ->
                                                                                                                                                                                                                          Path Univ ReportView MEUI,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  MEUI])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MEUI _p _) = _p :: Path Univ ReportView MEUI
          peekValue (Proxy) (Peek_ReportView_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportView_MEUI _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MaybeImageFile
    where type Path Univ ReportView MaybeImageFile = Path_ReportView MaybeImageFile
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               MaybeImageFile ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               MaybeImageFile,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  MaybeImageFile])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MaybeImageFile _p _) = _p :: Path Univ ReportView MaybeImageFile
          peekValue (Proxy) (Peek_ReportView_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportView_MaybeImageFile _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportImage
    where type Path Univ ReportView ReportImage = Path_ReportView ReportImage
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ReportImage ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               ReportImage,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ReportImage])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportImage _p _) = _p :: Path Univ ReportView ReportImage
          peekValue (Proxy) (Peek_ReportView_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportView_ReportImage _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportImages
    where type Path Univ ReportView ReportImages = Path_ReportView ReportImages
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ReportImages ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               ReportImages,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ReportImages])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportImages _p _) = _p :: Path Univ ReportView ReportImages
          peekValue (Proxy) (Peek_ReportView_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_ReportView_ReportImages _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReadOnlyFilePath
    where type Path Univ ReportView ReadOnlyFilePath = Path_ReportView ReadOnlyFilePath
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReadOnlyFilePath) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFolder, _reportFolder _s)] :: [(Path Univ
                                                                                                                                                                                                                                        ReadOnlyFilePath
                                                                                                                                                                                                                                        ReadOnlyFilePath ->
                                                                                                                                                                                                                                   Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        ReadOnlyFilePath,
                                                                                                                                                                                                                                   ReadOnlyFilePath)]) :: [Path Univ
                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                ReadOnlyFilePath])
          peek (p@(Path_ReportView__reportFolder _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReadOnlyFilePath _p _) = _p :: Path Univ ReportView ReadOnlyFilePath
          peekValue (Proxy) (Peek_ReportView_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekCons _p _x = Peek_ReportView_ReadOnlyFilePath _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportImageView
    where type Path Univ ReportView ReportImageView = Path_ReportView ReportImageView
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               ReportImageView ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               ReportImageView,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  ReportImageView])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportImageView _p _) = _p :: Path Univ ReportView ReportImageView
          peekValue (Proxy) (Peek_ReportView_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportView_ReportImageView _p _x :: Peek Univ ReportView
instance Paths Univ ReportView ReportView
    where type Path Univ ReportView ReportView = Path_ReportView ReportView
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_ReportView _p _) = _p :: Path Univ ReportView ReportView
          peekValue (Proxy) (Peek_ReportView_ReportView _ _x) = _x :: Maybe ReportView
          peekCons _p _x = Peek_ReportView_ReportView _p _x :: Peek Univ ReportView
instance Paths Univ ReportView SaneSizeImageSize
    where type Path Univ ReportView SaneSizeImageSize = Path_ReportView SaneSizeImageSize
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportElems
                                                                                                                                                                                                                               SaneSizeImageSize ->
                                                                                                                                                                                                                          Path Univ
                                                                                                                                                                                                                               ReportView
                                                                                                                                                                                                                               SaneSizeImageSize,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  SaneSizeImageSize])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_SaneSizeImageSize _p _) = _p :: Path Univ ReportView SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportView_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportView_SaneSizeImageSize _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Item
    where type Path Univ ReportView Item = Path_ReportView Item
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ ReportElems Item ->
                                                                                                                                                                                                                          Path Univ ReportView Item,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  Item])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Item _p _) = _p :: Path Univ ReportView Item
          peekValue (Proxy) (Peek_ReportView_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_ReportView_Item _p _x :: Peek Univ ReportView
instance Paths Univ ReportView MIM
    where type Path Univ ReportView MIM = Path_ReportView MIM
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ ReportElems MIM ->
                                                                                                                                                                                                                          Path Univ ReportView MIM,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  MIM])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_MIM _p _) = _p :: Path Univ ReportView MIM
          peekValue (Proxy) (Peek_ReportView_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_ReportView_MIM _p _x :: Peek Univ ReportView
instance Paths Univ ReportView CIString
    where type Path Univ ReportView CIString = Path_ReportView CIString
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)] :: [(Path Univ
                                                                                                                                                                                                                                     AbbrevPairs
                                                                                                                                                                                                                                     CIString ->
                                                                                                                                                                                                                                Path Univ
                                                                                                                                                                                                                                     ReportView
                                                                                                                                                                                                                                     CIString,
                                                                                                                                                                                                                                AbbrevPairs)]) :: [Path Univ
                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                        CIString])
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_CIString _p _) = _p :: Path Univ ReportView CIString
          peekValue (Proxy) (Peek_ReportView_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_ReportView_CIString _p _x :: Peek Univ ReportView
instance Paths Univ ReportView URI
    where type Path Univ ReportView URI = Path_ReportView URI
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ ReportElems URI ->
                                                                                                                                                                                                                          Path Univ ReportView URI,
                                                                                                                                                                                                                          ReportElems)]) :: [Path Univ
                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                  URI])
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_URI _p _) = _p :: Path Univ ReportView URI
          peekValue (Proxy) (Peek_ReportView_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportView_URI _p _x :: Peek Univ ReportView
instance Paths Univ ReportView Text
    where type Path Univ ReportView Text = Path_ReportView Text
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                         a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportName, _reportName _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                              Path Univ ReportView Text,
                                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportDate, _reportDate _s)] :: [(Path Univ
                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                      Text ->
                                                                                                                                                                                                                                 Path Univ
                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                      Text,
                                                                                                                                                                                                                                 Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportContractDate,
                                                                                                                                                                              _reportContractDate _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                            Path Univ ReportView Text,
                                                                                                                                                                                                            Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionDate,
                                                                                                                                                                              _reportInspectionDate _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                              Path Univ ReportView Text,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportEffectiveDate,
                                                                                                                                                                              _reportEffectiveDate _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                             Path Univ ReportView Text,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Authors) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAuthors, _reportAuthors _s)] :: [(Path Univ
                                                                                                                                                                                                                                             Authors
                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Text,
                                                                                                                                                                                                                                        Authors)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparer, _reportPreparer _s)] :: [(Path Univ
                                                                                                                                                                                                                                              Markup
                                                                                                                                                                                                                                              Text ->
                                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                              Text,
                                                                                                                                                                                                                                         Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEIN,
                                                                                                                                                                              _reportPreparerEIN _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                           Path Univ ReportView Text,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerAddress,
                                                                                                                                                                              _reportPreparerAddress _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                               Path Univ ReportView Text,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerEMail,
                                                                                                                                                                              _reportPreparerEMail _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                             Path Univ ReportView Text,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPreparerWebsite,
                                                                                                                                                                              _reportPreparerWebsite _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                               Path Univ ReportView Text,
                                                                                                                                                                                                               Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: AbbrevPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportAbbrevs,
                                                                                                                                                                                   _reportAbbrevs _s)] :: [(Path Univ AbbrevPairs Text ->
                                                                                                                                                                                                            Path Univ ReportView Text,
                                                                                                                                                                                                            AbbrevPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportTitle, _reportTitle _s)] :: [(Path Univ
                                                                                                                                                                                                                                        Markup
                                                                                                                                                                                                                                        Text ->
                                                                                                                                                                                                                                   Path Univ
                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                        Text,
                                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportHeader, _reportHeader _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Text ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Text,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportFooter, _reportFooter _s)] :: [(Path Univ
                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                          Text ->
                                                                                                                                                                                                                                     Path Univ
                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                          Text,
                                                                                                                                                                                                                                     Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueTypeInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueTypeInfo,
                                                                                                                                                                                           _reportValueTypeInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                               ReportValueTypeInfo
                                                                                                                                                                                                                               Text ->
                                                                                                                                                                                                                          Path Univ ReportView Text,
                                                                                                                                                                                                                          ReportValueTypeInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportValueApproachInfo) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportValueApproachInfo,
                                                                                                                                                                                               _reportValueApproachInfo _s)] :: [(Path Univ
                                                                                                                                                                                                                                       ReportValueApproachInfo
                                                                                                                                                                                                                                       Text ->
                                                                                                                                                                                                                                  Path Univ
                                                                                                                                                                                                                                       ReportView
                                                                                                                                                                                                                                       Text,
                                                                                                                                                                                                                                  ReportValueApproachInfo)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientName,
                                                                                                                                                                              _reportClientName _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                          Path Univ ReportView Text,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientAddress,
                                                                                                                                                                              _reportClientAddress _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                             Path Univ ReportView Text,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportClientGreeting,
                                                                                                                                                                              _reportClientGreeting _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                              Path Univ ReportView Text,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwnerFull,
                                                                                                                                                                              _reportItemsOwnerFull _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                              Path Univ ReportView Text,
                                                                                                                                                                                                              Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportItemsOwner,
                                                                                                                                                                              _reportItemsOwner _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                          Path Univ ReportView Text,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBriefItems,
                                                                                                                                                                              _reportBriefItems _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                          Path Univ ReportView Text,
                                                                                                                                                                                                          Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportInspectionLocation,
                                                                                                                                                                              _reportInspectionLocation _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                  Path Univ ReportView Text,
                                                                                                                                                                                                                  Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportElems) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBody, _reportBody _s)] :: [(Path Univ
                                                                                                                                                                                                                                           ReportElems
                                                                                                                                                                                                                                           Text ->
                                                                                                                                                                                                                                      Path Univ
                                                                                                                                                                                                                                           ReportView
                                                                                                                                                                                                                                           Text,
                                                                                                                                                                                                                                      ReportElems)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportGlossary,
                                                                                                                                                                                   _reportGlossary _s)] :: [(Path Univ MarkupPairs Text ->
                                                                                                                                                                                                             Path Univ ReportView Text,
                                                                                                                                                                                                             MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MarkupPairs) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportSources,
                                                                                                                                                                                   _reportSources _s)] :: [(Path Univ MarkupPairs Text ->
                                                                                                                                                                                                            Path Univ ReportView Text,
                                                                                                                                                                                                            MarkupPairs)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLetterOfTransmittal,
                                                                                                                                                                              _reportLetterOfTransmittal _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                                   Path Univ ReportView Text,
                                                                                                                                                                                                                   Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportScopeOfWork,
                                                                                                                                                                              _reportScopeOfWork _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                           Path Univ ReportView Text,
                                                                                                                                                                                                           Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportCertification,
                                                                                                                                                                               _reportCertification _s)] :: [(Path Univ Markups Text ->
                                                                                                                                                                                                              Path Univ ReportView Text,
                                                                                                                                                                                                              Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markups) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportLimitingConditions,
                                                                                                                                                                               _reportLimitingConditions _s)] :: [(Path Univ Markups Text ->
                                                                                                                                                                                                                   Path Univ ReportView Text,
                                                                                                                                                                                                                   Markups)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPrivacyPolicy,
                                                                                                                                                                              _reportPrivacyPolicy _s)] :: [(Path Univ Markup Text ->
                                                                                                                                                                                                             Path Univ ReportView Text,
                                                                                                                                                                                                             Markup)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(Path Univ
                                                                                                                                                                                                                                             Permissions
                                                                                                                                                                                                                                             Text ->
                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                             ReportView
                                                                                                                                                                                                                                             Text,
                                                                                                                                                                                                                                        Permissions)]),
                                                                            concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Branding) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportBranding,
                                                                                                                                                                                _reportBranding _s)] :: [(Path Univ Branding Text ->
                                                                                                                                                                                                          Path Univ ReportView Text,
                                                                                                                                                                                                          Branding)])] :: [Path Univ ReportView Text])
          peek (p@(Path_ReportView__reportName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportContractDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportEffectiveDate _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAuthors _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparer _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEIN _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerEMail _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPreparerWebsite _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportAbbrevs _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportTitle _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportHeader _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportFooter _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueTypeInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportValueApproachInfo _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientAddress _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportClientGreeting _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwnerFull _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportItemsOwner _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBriefItems _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportInspectionLocation _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBody _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportGlossary _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportSources _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLetterOfTransmittal _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportScopeOfWork _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportCertification _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportLimitingConditions _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPrivacyPolicy _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportPerms _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peek (p@(Path_ReportView__reportBranding _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_Text _p _) = _p :: Path Univ ReportView Text
          peekValue (Proxy) (Peek_ReportView_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportView_Text _p _x :: Peek Univ ReportView
instance Paths Univ ReportView UserId
    where type Path Univ ReportView UserId = Path_ReportView UserId
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: Permissions) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportPerms, _reportPerms _s)] :: [(Path Univ
                                                                                                                                                                                                                                 Permissions
                                                                                                                                                                                                                                 UserId ->
                                                                                                                                                                                                                            Path Univ ReportView UserId,
                                                                                                                                                                                                                            Permissions)]) :: [Path Univ
                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                    UserId])
          peek (p@(Path_ReportView__reportPerms _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_UserId _p _) = _p :: Path Univ ReportView UserId
          peekValue (Proxy) (Peek_ReportView_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_ReportView_UserId _p _x :: Peek Univ ReportView
instance Paths Univ ReportView UUID
    where type Path Univ ReportView UUID = Path_ReportView UUID
          paths (Proxy) (_s@(ReportView {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                                a') -> paths (Proxy :: Proxy Univ) (a' :: UUID) _g (\npt r -> p npt : r) []) ([(Path_ReportView__reportUUID, _reportUUID _s)] :: [(Path Univ UUID UUID ->
                                                                                                                                                                                                                   Path Univ ReportView UUID,
                                                                                                                                                                                                                   UUID)]) :: [Path Univ ReportView UUID])
          peek (p@(Path_ReportView__reportUUID _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportView
          peekPath (Proxy) (Peek_ReportView_UUID _p _) = _p :: Path Univ ReportView UUID
          peekValue (Proxy) (Peek_ReportView_UUID _ _x) = _x :: Maybe UUID
          peekCons _p _x = Peek_ReportView_UUID _p _x :: Peek Univ ReportView
instance Paths Univ SaneSizeImageSize String
    where type Path Univ SaneSizeImageSize String = Path_SaneSizeImageSize String
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize String ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize String,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             String ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             String,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              String])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_String _p _) = _p :: Path Univ SaneSizeImageSize String
          peekValue (Proxy) (Peek_SaneSizeImageSize_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_SaneSizeImageSize_String _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize Double
    where type Path Univ SaneSizeImageSize Double = Path_SaneSizeImageSize Double
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize Double ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize Double,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             Double ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             Double,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              Double])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_Double _p _) = _p :: Path Univ SaneSizeImageSize Double
          peekValue (Proxy) (Peek_SaneSizeImageSize_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_SaneSizeImageSize_Double _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize Dimension
    where type Path Univ SaneSizeImageSize Dimension = Path_SaneSizeImageSize Dimension
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize Dimension ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize Dimension,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             Dimension ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             Dimension,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              Dimension])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_Dimension _p _) = _p :: Path Univ SaneSizeImageSize Dimension
          peekValue (Proxy) (Peek_SaneSizeImageSize_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_SaneSizeImageSize_Dimension _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize ImageSize
    where type Path Univ SaneSizeImageSize ImageSize = Path_SaneSizeImageSize ImageSize
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize ImageSize ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize ImageSize,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             ImageSize ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             ImageSize,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              ImageSize])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_ImageSize _p _) = _p :: Path Univ SaneSizeImageSize ImageSize
          peekValue (Proxy) (Peek_SaneSizeImageSize_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_SaneSizeImageSize_ImageSize _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize Units
    where type Path Univ SaneSizeImageSize Units = Path_SaneSizeImageSize Units
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize Units ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize Units,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             Units ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             Units,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              Units])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_Units _p _) = _p :: Path Univ SaneSizeImageSize Units
          peekValue (Proxy) (Peek_SaneSizeImageSize_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_SaneSizeImageSize_Units _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize JSONText
    where type Path Univ SaneSizeImageSize JSONText = Path_SaneSizeImageSize JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: ImageSize) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_SaneSizeImageSize_View :: Path Univ ImageSize JSONText ->
                                                                                                                                                                                             Path Univ SaneSizeImageSize JSONText,
                                                                                                                                                              a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: Path Univ
                                                                                                                                                                                                                                  ImageSize
                                                                                                                                                                                                                                  ImageSize))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                             ImageSize
                                                                                                                                                                                                                                                             JSONText ->
                                                                                                                                                                                                                                                        Path Univ
                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                             JSONText,
                                                                                                                                                                                                                                                        ImageSize)]) :: [Path Univ
                                                                                                                                                                                                                                                                              SaneSizeImageSize
                                                                                                                                                                                                                                                                              JSONText])
          peek (p@(Path_SaneSizeImageSize_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_JSONText _p _) = _p :: Path Univ SaneSizeImageSize JSONText
          peekValue (Proxy) (Peek_SaneSizeImageSize_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_SaneSizeImageSize_JSONText _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ SaneSizeImageSize SaneSizeImageSize
    where type Path Univ SaneSizeImageSize SaneSizeImageSize = Path_SaneSizeImageSize SaneSizeImageSize
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ SaneSizeImageSize
          peekPath (Proxy) (Peek_SaneSizeImageSize_SaneSizeImageSize _p _) = _p :: Path Univ SaneSizeImageSize SaneSizeImageSize
          peekValue (Proxy) (Peek_SaneSizeImageSize_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_SaneSizeImageSize_SaneSizeImageSize _p _x :: Peek Univ SaneSizeImageSize
instance Paths Univ Item String
    where type Path Univ Item String = Path_Item String
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages String ->
                                                                                                                                                                                                     Path Univ Item String,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item String])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_String _p _) = _p :: Path Univ Item String
          peekValue (Proxy) (Peek_Item_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_Item_String _p _x :: Peek Univ Item
instance Paths Univ Item Bool
    where type Path Univ Item Bool = Path_Item Bool
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages Bool ->
                                                                                                                                                                                                     Path Univ Item Bool,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item Bool])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Bool _p _) = _p :: Path Univ Item Bool
          peekValue (Proxy) (Peek_Item_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_Item_Bool _p _x :: Peek Univ Item
instance Paths Univ Item Double
    where type Path Univ Item Double = Path_Item Double
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages Double ->
                                                                                                                                                                                                     Path Univ Item Double,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item Double])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Double _p _) = _p :: Path Univ Item Double
          peekValue (Proxy) (Peek_Item_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_Item_Double _p _x :: Peek Univ Item
instance Paths Univ Item Dimension
    where type Path Univ Item Dimension = Path_Item Dimension
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages Dimension ->
                                                                                                                                                                                                     Path Univ Item Dimension,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item Dimension])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Dimension _p _) = _p :: Path Univ Item Dimension
          peekValue (Proxy) (Peek_Item_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_Item_Dimension _p _x :: Peek Univ Item
instance Paths Univ Item ImageCrop
    where type Path Univ Item ImageCrop = Path_Item ImageCrop
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ImageCrop ->
                                                                                                                                                                                                     Path Univ Item ImageCrop,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ImageCrop])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ImageCrop _p _) = _p :: Path Univ Item ImageCrop
          peekValue (Proxy) (Peek_Item_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_Item_ImageCrop _p _x :: Peek Univ Item
instance Paths Univ Item ImageSize
    where type Path Univ Item ImageSize = Path_Item ImageSize
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ImageSize ->
                                                                                                                                                                                                     Path Univ Item ImageSize,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ImageSize])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ImageSize _p _) = _p :: Path Univ Item ImageSize
          peekValue (Proxy) (Peek_Item_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_Item_ImageSize _p _x :: Peek Univ Item
instance Paths Univ Item Units
    where type Path Univ Item Units = Path_Item Units
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages Units ->
                                                                                                                                                                                                     Path Univ Item Units,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item Units])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Units _p _) = _p :: Path Univ Item Units
          peekValue (Proxy) (Peek_Item_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_Item_Units _p _x :: Peek Univ Item
instance Paths Univ Item ImageFile
    where type Path Univ Item ImageFile = Path_Item ImageFile
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ImageFile ->
                                                                                                                                                                                                     Path Univ Item ImageFile,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ImageFile])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ImageFile _p _) = _p :: Path Univ Item ImageFile
          peekValue (Proxy) (Peek_Item_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_Item_ImageFile _p _x :: Peek Univ Item
instance Paths Univ Item JSONText
    where type Path Univ Item JSONText = Path_Item JSONText
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                   a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Item_itemName, itemName _s)] :: [(Path Univ Text JSONText ->
                                                                                                                                                                                                          Path Univ Item JSONText,
                                                                                                                                                                                                          Text)]),
                                                                      concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(Path Univ MIM JSONText ->
                                                                                                                                                                                                        Path Univ Item JSONText,
                                                                                                                                                                                                        MIM)]),
                                                                      concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ
                                                                                                                                                                                                                      ReportImages
                                                                                                                                                                                                                      JSONText ->
                                                                                                                                                                                                                 Path Univ Item JSONText,
                                                                                                                                                                                                                 ReportImages)])] :: [Path Univ
                                                                                                                                                                                                                                           Item
                                                                                                                                                                                                                                           JSONText])
          peek (p@(Path_Item_itemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peek (p@(Path_Item_fields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_JSONText _p _) = _p :: Path Univ Item JSONText
          peekValue (Proxy) (Peek_Item_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Item_JSONText _p _x :: Peek Univ Item
instance Paths Univ Item Markup
    where type Path Univ Item Markup = Path_Item Markup
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                   a') -> paths (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(Path Univ MIM Markup -> Path Univ Item Markup,
                                                                                                                                                                                                     MIM)]),
                                                                      concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ
                                                                                                                                                                                                                      ReportImages
                                                                                                                                                                                                                      Markup ->
                                                                                                                                                                                                                 Path Univ Item Markup,
                                                                                                                                                                                                                 ReportImages)])] :: [Path Univ
                                                                                                                                                                                                                                           Item
                                                                                                                                                                                                                                           Markup])
          peek (p@(Path_Item_fields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Markup _p _) = _p :: Path Univ Item Markup
          peekValue (Proxy) (Peek_Item_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_Item_Markup _p _x :: Peek Univ Item
instance Paths Univ Item EUI
    where type Path Univ Item EUI = Path_Item EUI
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages EUI ->
                                                                                                                                                                                                     Path Univ Item EUI,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item EUI])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_EUI _p _) = _p :: Path Univ Item EUI
          peekValue (Proxy) (Peek_Item_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_Item_EUI _p _x :: Peek Univ Item
instance Paths Univ Item MEUI
    where type Path Univ Item MEUI = Path_Item MEUI
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages MEUI ->
                                                                                                                                                                                                     Path Univ Item MEUI,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item MEUI])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_MEUI _p _) = _p :: Path Univ Item MEUI
          peekValue (Proxy) (Peek_Item_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_Item_MEUI _p _x :: Peek Univ Item
instance Paths Univ Item MaybeImageFile
    where type Path Univ Item MaybeImageFile = Path_Item MaybeImageFile
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages MaybeImageFile ->
                                                                                                                                                                                                     Path Univ Item MaybeImageFile,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item MaybeImageFile])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_MaybeImageFile _p _) = _p :: Path Univ Item MaybeImageFile
          peekValue (Proxy) (Peek_Item_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_Item_MaybeImageFile _p _x :: Peek Univ Item
instance Paths Univ Item ReportImage
    where type Path Univ Item ReportImage = Path_Item ReportImage
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ReportImage ->
                                                                                                                                                                                                     Path Univ Item ReportImage,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ReportImage])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ReportImage _p _) = _p :: Path Univ Item ReportImage
          peekValue (Proxy) (Peek_Item_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_Item_ReportImage _p _x :: Peek Univ Item
instance Paths Univ Item ReportImages
    where type Path Univ Item ReportImages = Path_Item ReportImages
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ReportImages ->
                                                                                                                                                                                                     Path Univ Item ReportImages,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ReportImages])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ReportImages _p _) = _p :: Path Univ Item ReportImages
          peekValue (Proxy) (Peek_Item_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_Item_ReportImages _p _x :: Peek Univ Item
instance Paths Univ Item ReportImageView
    where type Path Univ Item ReportImageView = Path_Item ReportImageView
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages ReportImageView ->
                                                                                                                                                                                                     Path Univ Item ReportImageView,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item ReportImageView])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_ReportImageView _p _) = _p :: Path Univ Item ReportImageView
          peekValue (Proxy) (Peek_Item_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_Item_ReportImageView _p _x :: Peek Univ Item
instance Paths Univ Item SaneSizeImageSize
    where type Path Univ Item SaneSizeImageSize = Path_Item SaneSizeImageSize
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages SaneSizeImageSize ->
                                                                                                                                                                                                     Path Univ Item SaneSizeImageSize,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ
                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                              SaneSizeImageSize])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_SaneSizeImageSize _p _) = _p :: Path Univ Item SaneSizeImageSize
          peekValue (Proxy) (Peek_Item_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_Item_SaneSizeImageSize _p _x :: Peek Univ Item
instance Paths Univ Item Item
    where type Path Univ Item Item = Path_Item Item
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Item _p _) = _p :: Path Univ Item Item
          peekValue (Proxy) (Peek_Item_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_Item_Item _p _x :: Peek Univ Item
instance Paths Univ Item MIM
    where type Path Univ Item MIM = Path_Item MIM
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields,
                                                                                                                                                            fields _s)] :: [(Path Univ MIM MIM -> Path Univ Item MIM, MIM)]) :: [Path Univ Item MIM])
          peek (p@(Path_Item_fields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_MIM _p _) = _p :: Path Univ Item MIM
          peekValue (Proxy) (Peek_Item_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_Item_MIM _p _x :: Peek Univ Item
instance Paths Univ Item URI
    where type Path Univ Item URI = Path_Item URI
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                          a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ ReportImages URI ->
                                                                                                                                                                                                     Path Univ Item URI,
                                                                                                                                                                                                     ReportImages)]) :: [Path Univ Item URI])
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_URI _p _) = _p :: Path Univ Item URI
          peekValue (Proxy) (Peek_Item_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_Item_URI _p _x :: Peek Univ Item
instance Paths Univ Item Text
    where type Path Univ Item Text = Path_Item Text
          paths (Proxy) (_s@(Item {})) _g f r0 = foldr f r0 (mconcat [concatMap (\(p,
                                                                                   a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) ([(Path_Item_itemName, itemName _s)] :: [(Path Univ Text Text -> Path Univ Item Text,
                                                                                                                                                                                                          Text)]),
                                                                      concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: MIM) _g (\npt r -> p npt : r) []) ([(Path_Item_fields, fields _s)] :: [(Path Univ MIM Text ->
                                                                                                                                                                                                        Path Univ Item Text,
                                                                                                                                                                                                        MIM)]),
                                                                      concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: ReportImages) _g (\npt r -> p npt : r) []) ([(Path_Item_images, images _s)] :: [(Path Univ
                                                                                                                                                                                                                      ReportImages
                                                                                                                                                                                                                      Text ->
                                                                                                                                                                                                                 Path Univ Item Text,
                                                                                                                                                                                                                 ReportImages)])] :: [Path Univ
                                                                                                                                                                                                                                           Item
                                                                                                                                                                                                                                           Text])
          peek (p@(Path_Item_itemName _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peek (p@(Path_Item_fields _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peek (p@(Path_Item_images _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Item
          peekPath (Proxy) (Peek_Item_Text _p _) = _p :: Path Univ Item Text
          peekValue (Proxy) (Peek_Item_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Item_Text _p _x :: Peek Univ Item
instance Paths Univ MIM JSONText
    where type Path Univ MIM JSONText = Path_Map ItemFieldName (Path_Markup JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Markup JSONText ->
                                                                                                                                                                                                       Path Univ MIM JSONText,
                                                                                                                                                                                                       Markup)]) :: [Path Univ MIM JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MIM
          peekPath (Proxy) (Peek_MIM_JSONText _p _) = _p :: Path Univ MIM JSONText
          peekValue (Proxy) (Peek_MIM_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MIM_JSONText _p _x :: Peek Univ MIM
instance Paths Univ MIM Markup
    where type Path Univ MIM Markup = Path_Map ItemFieldName (Path_Markup Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Markup Markup -> Path Univ MIM Markup,
                                                                                                                                                                                                       Markup)]) :: [Path Univ MIM Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MIM
          peekPath (Proxy) (Peek_MIM_Markup _p _) = _p :: Path Univ MIM Markup
          peekValue (Proxy) (Peek_MIM_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_MIM_Markup _p _x :: Peek Univ MIM
instance Paths Univ MIM MIM
    where type Path Univ MIM MIM = Path_Map ItemFieldName (Path_Markup MIM)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MIM
          peekPath (Proxy) (Peek_MIM_MIM _p _) = _p :: Path Univ MIM MIM
          peekValue (Proxy) (Peek_MIM_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_MIM_MIM _p _x :: Peek Univ MIM
instance Paths Univ MIM Text
    where type Path Univ MIM Text = Path_Map ItemFieldName (Path_Markup Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Markup) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Markup Text -> Path Univ MIM Text,
                                                                                                                                                                                                       Markup)]) :: [Path Univ MIM Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MIM
          peekPath (Proxy) (Peek_MIM_Text _p _) = _p :: Path Univ MIM Text
          peekValue (Proxy) (Peek_MIM_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_MIM_Text _p _x :: Peek Univ MIM
instance Paths Univ MRR String
    where type Path Univ MRR String = Path_Map ReportID (Path_Report String)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report String -> Path Univ MRR String,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR String])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_String _p _) = _p :: Path Univ MRR String
          peekValue (Proxy) (Peek_MRR_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_MRR_String _p _x :: Peek Univ MRR
instance Paths Univ MRR Int64
    where type Path Univ MRR Int64 = Path_Map ReportID (Path_Report Int64)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Int64 -> Path Univ MRR Int64,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Int64])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Int64 _p _) = _p :: Path Univ MRR Int64
          peekValue (Proxy) (Peek_MRR_Int64 _ _x) = _x :: Maybe Int64
          peekCons _p _x = Peek_MRR_Int64 _p _x :: Peek Univ MRR
instance Paths Univ MRR Bool
    where type Path Univ MRR Bool = Path_Map ReportID (Path_Report Bool)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Bool -> Path Univ MRR Bool,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Bool])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Bool _p _) = _p :: Path Univ MRR Bool
          peekValue (Proxy) (Peek_MRR_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_MRR_Bool _p _x :: Peek Univ MRR
instance Paths Univ MRR Double
    where type Path Univ MRR Double = Path_Map ReportID (Path_Report Double)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Double -> Path Univ MRR Double,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Double])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Double _p _) = _p :: Path Univ MRR Double
          peekValue (Proxy) (Peek_MRR_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_MRR_Double _p _x :: Peek Univ MRR
instance Paths Univ MRR Int
    where type Path Univ MRR Int = Path_Map ReportID (Path_Report Int)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Int -> Path Univ MRR Int,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Int])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Int _p _) = _p :: Path Univ MRR Int
          peekValue (Proxy) (Peek_MRR_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_MRR_Int _p _x :: Peek Univ MRR
instance Paths Univ MRR Dimension
    where type Path Univ MRR Dimension = Path_Map ReportID (Path_Report Dimension)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Dimension ->
                                                                                                                                                                                                       Path Univ MRR Dimension,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Dimension])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Dimension _p _) = _p :: Path Univ MRR Dimension
          peekValue (Proxy) (Peek_MRR_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_MRR_Dimension _p _x :: Peek Univ MRR
instance Paths Univ MRR ImageCrop
    where type Path Univ MRR ImageCrop = Path_Map ReportID (Path_Report ImageCrop)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ImageCrop ->
                                                                                                                                                                                                       Path Univ MRR ImageCrop,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ImageCrop])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ImageCrop _p _) = _p :: Path Univ MRR ImageCrop
          peekValue (Proxy) (Peek_MRR_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_MRR_ImageCrop _p _x :: Peek Univ MRR
instance Paths Univ MRR ImageSize
    where type Path Univ MRR ImageSize = Path_Map ReportID (Path_Report ImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ImageSize ->
                                                                                                                                                                                                       Path Univ MRR ImageSize,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ImageSize _p _) = _p :: Path Univ MRR ImageSize
          peekValue (Proxy) (Peek_MRR_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_MRR_ImageSize _p _x :: Peek Univ MRR
instance Paths Univ MRR Units
    where type Path Univ MRR Units = Path_Map ReportID (Path_Report Units)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Units -> Path Univ MRR Units,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Units])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Units _p _) = _p :: Path Univ MRR Units
          peekValue (Proxy) (Peek_MRR_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_MRR_Units _p _x :: Peek Univ MRR
instance Paths Univ MRR ImageFile
    where type Path Univ MRR ImageFile = Path_Map ReportID (Path_Report ImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ImageFile ->
                                                                                                                                                                                                       Path Univ MRR ImageFile,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ImageFile _p _) = _p :: Path Univ MRR ImageFile
          peekValue (Proxy) (Peek_MRR_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_MRR_ImageFile _p _x :: Peek Univ MRR
instance Paths Univ MRR Integer
    where type Path Univ MRR Integer = Path_Map ReportID (Path_Report Integer)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Integer -> Path Univ MRR Integer,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Integer])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Integer _p _) = _p :: Path Univ MRR Integer
          peekValue (Proxy) (Peek_MRR_Integer _ _x) = _x :: Maybe Integer
          peekCons _p _x = Peek_MRR_Integer _p _x :: Peek Univ MRR
instance Paths Univ MRR JSONText
    where type Path Univ MRR JSONText = Path_Map ReportID (Path_Report JSONText)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report JSONText ->
                                                                                                                                                                                                       Path Univ MRR JSONText,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR JSONText])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_JSONText _p _) = _p :: Path Univ MRR JSONText
          peekValue (Proxy) (Peek_MRR_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_MRR_JSONText _p _x :: Peek Univ MRR
instance Paths Univ MRR Markup
    where type Path Univ MRR Markup = Path_Map ReportID (Path_Report Markup)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Markup -> Path Univ MRR Markup,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Markup])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Markup _p _) = _p :: Path Univ MRR Markup
          peekValue (Proxy) (Peek_MRR_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_MRR_Markup _p _x :: Peek Univ MRR
instance Paths Univ MRR Permissions
    where type Path Univ MRR Permissions = Path_Map ReportID (Path_Report Permissions)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Permissions ->
                                                                                                                                                                                                       Path Univ MRR Permissions,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Permissions])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Permissions _p _) = _p :: Path Univ MRR Permissions
          peekValue (Proxy) (Peek_MRR_Permissions _ _x) = _x :: Maybe Permissions
          peekCons _p _x = Peek_MRR_Permissions _p _x :: Peek Univ MRR
instance Paths Univ MRR UserIds
    where type Path Univ MRR UserIds = Path_Map ReportID (Path_Report UserIds)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report UserIds -> Path Univ MRR UserIds,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR UserIds])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_UserIds _p _) = _p :: Path Univ MRR UserIds
          peekValue (Proxy) (Peek_MRR_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_MRR_UserIds _p _x :: Peek Univ MRR
instance Paths Univ MRR AbbrevPair
    where type Path Univ MRR AbbrevPair = Path_Map ReportID (Path_Report AbbrevPair)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report AbbrevPair ->
                                                                                                                                                                                                       Path Univ MRR AbbrevPair,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR AbbrevPair])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_AbbrevPair _p _) = _p :: Path Univ MRR AbbrevPair
          peekValue (Proxy) (Peek_MRR_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_MRR_AbbrevPair _p _x :: Peek Univ MRR
instance Paths Univ MRR AbbrevPairs
    where type Path Univ MRR AbbrevPairs = Path_Map ReportID (Path_Report AbbrevPairs)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report AbbrevPairs ->
                                                                                                                                                                                                       Path Univ MRR AbbrevPairs,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR AbbrevPairs])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_AbbrevPairs _p _) = _p :: Path Univ MRR AbbrevPairs
          peekValue (Proxy) (Peek_MRR_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekCons _p _x = Peek_MRR_AbbrevPairs _p _x :: Peek Univ MRR
instance Paths Univ MRR Author
    where type Path Univ MRR Author = Path_Map ReportID (Path_Report Author)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Author -> Path Univ MRR Author,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Author])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Author _p _) = _p :: Path Univ MRR Author
          peekValue (Proxy) (Peek_MRR_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_MRR_Author _p _x :: Peek Univ MRR
instance Paths Univ MRR Authors
    where type Path Univ MRR Authors = Path_Map ReportID (Path_Report Authors)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Authors -> Path Univ MRR Authors,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Authors])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Authors _p _) = _p :: Path Univ MRR Authors
          peekValue (Proxy) (Peek_MRR_Authors _ _x) = _x :: Maybe Authors
          peekCons _p _x = Peek_MRR_Authors _p _x :: Peek Univ MRR
instance Paths Univ MRR Branding
    where type Path Univ MRR Branding = Path_Map ReportID (Path_Report Branding)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Branding ->
                                                                                                                                                                                                       Path Univ MRR Branding,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Branding])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Branding _p _) = _p :: Path Univ MRR Branding
          peekValue (Proxy) (Peek_MRR_Branding _ _x) = _x :: Maybe Branding
          peekCons _p _x = Peek_MRR_Branding _p _x :: Peek Univ MRR
instance Paths Univ MRR MarkupPair
    where type Path Univ MRR MarkupPair = Path_Map ReportID (Path_Report MarkupPair)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MarkupPair ->
                                                                                                                                                                                                       Path Univ MRR MarkupPair,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR MarkupPair])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MarkupPair _p _) = _p :: Path Univ MRR MarkupPair
          peekValue (Proxy) (Peek_MRR_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_MRR_MarkupPair _p _x :: Peek Univ MRR
instance Paths Univ MRR MarkupPairs
    where type Path Univ MRR MarkupPairs = Path_Map ReportID (Path_Report MarkupPairs)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MarkupPairs ->
                                                                                                                                                                                                       Path Univ MRR MarkupPairs,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR MarkupPairs])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MarkupPairs _p _) = _p :: Path Univ MRR MarkupPairs
          peekValue (Proxy) (Peek_MRR_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekCons _p _x = Peek_MRR_MarkupPairs _p _x :: Peek Univ MRR
instance Paths Univ MRR Markups
    where type Path Univ MRR Markups = Path_Map ReportID (Path_Report Markups)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Markups -> Path Univ MRR Markups,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Markups])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Markups _p _) = _p :: Path Univ MRR Markups
          peekValue (Proxy) (Peek_MRR_Markups _ _x) = _x :: Maybe Markups
          peekCons _p _x = Peek_MRR_Markups _p _x :: Peek Univ MRR
instance Paths Univ MRR MaybeReportIntendedUse
    where type Path Univ MRR MaybeReportIntendedUse = Path_Map ReportID (Path_Report MaybeReportIntendedUse)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MaybeReportIntendedUse ->
                                                                                                                                                                                                       Path Univ MRR MaybeReportIntendedUse,
                                                                                                                                                                                                       Report)]) :: [Path Univ
                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                          MaybeReportIntendedUse])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MaybeReportIntendedUse _p _) = _p :: Path Univ MRR MaybeReportIntendedUse
          peekValue (Proxy) (Peek_MRR_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekCons _p _x = Peek_MRR_MaybeReportIntendedUse _p _x :: Peek Univ MRR
instance Paths Univ MRR Report
    where type Path Univ MRR Report = Path_Map ReportID (Path_Report Report)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Report -> Path Univ MRR Report,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Report])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Report _p _) = _p :: Path Univ MRR Report
          peekValue (Proxy) (Peek_MRR_Report _ _x) = _x :: Maybe Report
          peekCons _p _x = Peek_MRR_Report _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportElem
    where type Path Univ MRR ReportElem = Path_Map ReportID (Path_Report ReportElem)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportElem ->
                                                                                                                                                                                                       Path Univ MRR ReportElem,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportElem])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportElem _p _) = _p :: Path Univ MRR ReportElem
          peekValue (Proxy) (Peek_MRR_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_MRR_ReportElem _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportElems
    where type Path Univ MRR ReportElems = Path_Map ReportID (Path_Report ReportElems)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportElems ->
                                                                                                                                                                                                       Path Univ MRR ReportElems,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportElems])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportElems _p _) = _p :: Path Univ MRR ReportElems
          peekValue (Proxy) (Peek_MRR_ReportElems _ _x) = _x :: Maybe ReportElems
          peekCons _p _x = Peek_MRR_ReportElems _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportFlags
    where type Path Univ MRR ReportFlags = Path_Map ReportID (Path_Report ReportFlags)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportFlags ->
                                                                                                                                                                                                       Path Univ MRR ReportFlags,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportFlags])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportFlags _p _) = _p :: Path Univ MRR ReportFlags
          peekValue (Proxy) (Peek_MRR_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekCons _p _x = Peek_MRR_ReportFlags _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportStandard
    where type Path Univ MRR ReportStandard = Path_Map ReportID (Path_Report ReportStandard)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportStandard ->
                                                                                                                                                                                                       Path Univ MRR ReportStandard,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportStandard])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportStandard _p _) = _p :: Path Univ MRR ReportStandard
          peekValue (Proxy) (Peek_MRR_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekCons _p _x = Peek_MRR_ReportStandard _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportStatus
    where type Path Univ MRR ReportStatus = Path_Map ReportID (Path_Report ReportStatus)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportStatus ->
                                                                                                                                                                                                       Path Univ MRR ReportStatus,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportStatus])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportStatus _p _) = _p :: Path Univ MRR ReportStatus
          peekValue (Proxy) (Peek_MRR_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekCons _p _x = Peek_MRR_ReportStatus _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportValueApproachInfo
    where type Path Univ MRR ReportValueApproachInfo = Path_Map ReportID (Path_Report ReportValueApproachInfo)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportValueApproachInfo ->
                                                                                                                                                                                                       Path Univ MRR ReportValueApproachInfo,
                                                                                                                                                                                                       Report)]) :: [Path Univ
                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                          ReportValueApproachInfo])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportValueApproachInfo _p _) = _p :: Path Univ MRR ReportValueApproachInfo
          peekValue (Proxy) (Peek_MRR_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekCons _p _x = Peek_MRR_ReportValueApproachInfo _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportValueTypeInfo
    where type Path Univ MRR ReportValueTypeInfo = Path_Map ReportID (Path_Report ReportValueTypeInfo)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportValueTypeInfo ->
                                                                                                                                                                                                       Path Univ MRR ReportValueTypeInfo,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportValueTypeInfo])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportValueTypeInfo _p _) = _p :: Path Univ MRR ReportValueTypeInfo
          peekValue (Proxy) (Peek_MRR_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekCons _p _x = Peek_MRR_ReportValueTypeInfo _p _x :: Peek Univ MRR
instance Paths Univ MRR EUI
    where type Path Univ MRR EUI = Path_Map ReportID (Path_Report EUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report EUI -> Path Univ MRR EUI,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR EUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_EUI _p _) = _p :: Path Univ MRR EUI
          peekValue (Proxy) (Peek_MRR_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_MRR_EUI _p _x :: Peek Univ MRR
instance Paths Univ MRR MEUI
    where type Path Univ MRR MEUI = Path_Map ReportID (Path_Report MEUI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MEUI -> Path Univ MRR MEUI,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR MEUI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MEUI _p _) = _p :: Path Univ MRR MEUI
          peekValue (Proxy) (Peek_MRR_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_MRR_MEUI _p _x :: Peek Univ MRR
instance Paths Univ MRR MaybeImageFile
    where type Path Univ MRR MaybeImageFile = Path_Map ReportID (Path_Report MaybeImageFile)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MaybeImageFile ->
                                                                                                                                                                                                       Path Univ MRR MaybeImageFile,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR MaybeImageFile])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MaybeImageFile _p _) = _p :: Path Univ MRR MaybeImageFile
          peekValue (Proxy) (Peek_MRR_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_MRR_MaybeImageFile _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportImage
    where type Path Univ MRR ReportImage = Path_Map ReportID (Path_Report ReportImage)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportImage ->
                                                                                                                                                                                                       Path Univ MRR ReportImage,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportImage])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportImage _p _) = _p :: Path Univ MRR ReportImage
          peekValue (Proxy) (Peek_MRR_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_MRR_ReportImage _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportImages
    where type Path Univ MRR ReportImages = Path_Map ReportID (Path_Report ReportImages)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportImages ->
                                                                                                                                                                                                       Path Univ MRR ReportImages,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportImages])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportImages _p _) = _p :: Path Univ MRR ReportImages
          peekValue (Proxy) (Peek_MRR_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_MRR_ReportImages _p _x :: Peek Univ MRR
instance Paths Univ MRR ReadOnlyFilePath
    where type Path Univ MRR ReadOnlyFilePath = Path_Map ReportID (Path_Report ReadOnlyFilePath)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReadOnlyFilePath ->
                                                                                                                                                                                                       Path Univ MRR ReadOnlyFilePath,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReadOnlyFilePath])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReadOnlyFilePath _p _) = _p :: Path Univ MRR ReadOnlyFilePath
          peekValue (Proxy) (Peek_MRR_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekCons _p _x = Peek_MRR_ReadOnlyFilePath _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportImageView
    where type Path Univ MRR ReportImageView = Path_Map ReportID (Path_Report ReportImageView)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportImageView ->
                                                                                                                                                                                                       Path Univ MRR ReportImageView,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportImageView])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportImageView _p _) = _p :: Path Univ MRR ReportImageView
          peekValue (Proxy) (Peek_MRR_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_MRR_ReportImageView _p _x :: Peek Univ MRR
instance Paths Univ MRR ReportView
    where type Path Univ MRR ReportView = Path_Map ReportID (Path_Report ReportView)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report ReportView ->
                                                                                                                                                                                                       Path Univ MRR ReportView,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR ReportView])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_ReportView _p _) = _p :: Path Univ MRR ReportView
          peekValue (Proxy) (Peek_MRR_ReportView _ _x) = _x :: Maybe ReportView
          peekCons _p _x = Peek_MRR_ReportView _p _x :: Peek Univ MRR
instance Paths Univ MRR SaneSizeImageSize
    where type Path Univ MRR SaneSizeImageSize = Path_Map ReportID (Path_Report SaneSizeImageSize)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report SaneSizeImageSize ->
                                                                                                                                                                                                       Path Univ MRR SaneSizeImageSize,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR SaneSizeImageSize])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_SaneSizeImageSize _p _) = _p :: Path Univ MRR SaneSizeImageSize
          peekValue (Proxy) (Peek_MRR_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_MRR_SaneSizeImageSize _p _x :: Peek Univ MRR
instance Paths Univ MRR Item
    where type Path Univ MRR Item = Path_Map ReportID (Path_Report Item)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Item -> Path Univ MRR Item,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Item])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Item _p _) = _p :: Path Univ MRR Item
          peekValue (Proxy) (Peek_MRR_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_MRR_Item _p _x :: Peek Univ MRR
instance Paths Univ MRR MIM
    where type Path Univ MRR MIM = Path_Map ReportID (Path_Report MIM)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report MIM -> Path Univ MRR MIM,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR MIM])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MIM _p _) = _p :: Path Univ MRR MIM
          peekValue (Proxy) (Peek_MRR_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_MRR_MIM _p _x :: Peek Univ MRR
instance Paths Univ MRR MRR
    where type Path Univ MRR MRR = Path_Map ReportID (Path_Report MRR)
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_MRR _p _) = _p :: Path Univ MRR MRR
          peekValue (Proxy) (Peek_MRR_MRR _ _x) = _x :: Maybe MRR
          peekCons _p _x = Peek_MRR_MRR _p _x :: Peek Univ MRR
instance Paths Univ MRR CIString
    where type Path Univ MRR CIString = Path_Map ReportID (Path_Report CIString)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report CIString ->
                                                                                                                                                                                                       Path Univ MRR CIString,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR CIString])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_CIString _p _) = _p :: Path Univ MRR CIString
          peekValue (Proxy) (Peek_MRR_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_MRR_CIString _p _x :: Peek Univ MRR
instance Paths Univ MRR URI
    where type Path Univ MRR URI = Path_Map ReportID (Path_Report URI)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report URI -> Path Univ MRR URI,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR URI])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_URI _p _) = _p :: Path Univ MRR URI
          peekValue (Proxy) (Peek_MRR_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_MRR_URI _p _x :: Peek Univ MRR
instance Paths Univ MRR Text
    where type Path Univ MRR Text = Path_Map ReportID (Path_Report Text)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report Text -> Path Univ MRR Text,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR Text])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_Text _p _) = _p :: Path Univ MRR Text
          peekValue (Proxy) (Peek_MRR_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_MRR_Text _p _x :: Peek Univ MRR
instance Paths Univ MRR UserId
    where type Path Univ MRR UserId = Path_Map ReportID (Path_Report UserId)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report UserId -> Path Univ MRR UserId,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR UserId])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_UserId _p _) = _p :: Path Univ MRR UserId
          peekValue (Proxy) (Peek_MRR_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_MRR_UserId _p _x :: Peek Univ MRR
instance Paths Univ MRR UUID
    where type Path Univ MRR UUID = Path_Map ReportID (Path_Report UUID)
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p, a') -> paths (Proxy :: Proxy Univ) (a' :: Report) _g (\npt r -> p npt : r) []) (map (\(idx,
                                                                                                                                                        val) -> (Path_Look idx, val)) (toList _s) :: [(Path Univ Report UUID -> Path Univ MRR UUID,
                                                                                                                                                                                                       Report)]) :: [Path Univ MRR UUID])
          peek p x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ MRR
          peekPath (Proxy) (Peek_MRR_UUID _p _) = _p :: Path Univ MRR UUID
          peekValue (Proxy) (Peek_MRR_UUID _ _x) = _x :: Maybe UUID
          peekCons _p _x = Peek_MRR_UUID _p _x :: Peek Univ MRR
instance Paths Univ ReportMap String
    where type Path Univ ReportMap String = Path_ReportMap String
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR String ->
                                                                                                                                                                                                                Path Univ ReportMap String,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap String])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_String _p _) = _p :: Path Univ ReportMap String
          peekValue (Proxy) (Peek_ReportMap_String _ _x) = _x :: Maybe String
          peekCons _p _x = Peek_ReportMap_String _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Int64
    where type Path Univ ReportMap Int64 = Path_ReportMap Int64
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Int64 ->
                                                                                                                                                                                                                Path Univ ReportMap Int64,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Int64])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Int64 _p _) = _p :: Path Univ ReportMap Int64
          peekValue (Proxy) (Peek_ReportMap_Int64 _ _x) = _x :: Maybe Int64
          peekCons _p _x = Peek_ReportMap_Int64 _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Bool
    where type Path Univ ReportMap Bool = Path_ReportMap Bool
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Bool ->
                                                                                                                                                                                                                Path Univ ReportMap Bool,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Bool])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Bool _p _) = _p :: Path Univ ReportMap Bool
          peekValue (Proxy) (Peek_ReportMap_Bool _ _x) = _x :: Maybe Bool
          peekCons _p _x = Peek_ReportMap_Bool _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Double
    where type Path Univ ReportMap Double = Path_ReportMap Double
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Double ->
                                                                                                                                                                                                                Path Univ ReportMap Double,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Double])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Double _p _) = _p :: Path Univ ReportMap Double
          peekValue (Proxy) (Peek_ReportMap_Double _ _x) = _x :: Maybe Double
          peekCons _p _x = Peek_ReportMap_Double _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Int
    where type Path Univ ReportMap Int = Path_ReportMap Int
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Int ->
                                                                                                                                                                                                                Path Univ ReportMap Int,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Int])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Int _p _) = _p :: Path Univ ReportMap Int
          peekValue (Proxy) (Peek_ReportMap_Int _ _x) = _x :: Maybe Int
          peekCons _p _x = Peek_ReportMap_Int _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Dimension
    where type Path Univ ReportMap Dimension = Path_ReportMap Dimension
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Dimension ->
                                                                                                                                                                                                                Path Univ ReportMap Dimension,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Dimension])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Dimension _p _) = _p :: Path Univ ReportMap Dimension
          peekValue (Proxy) (Peek_ReportMap_Dimension _ _x) = _x :: Maybe Dimension
          peekCons _p _x = Peek_ReportMap_Dimension _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ImageCrop
    where type Path Univ ReportMap ImageCrop = Path_ReportMap ImageCrop
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ImageCrop ->
                                                                                                                                                                                                                Path Univ ReportMap ImageCrop,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap ImageCrop])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ImageCrop _p _) = _p :: Path Univ ReportMap ImageCrop
          peekValue (Proxy) (Peek_ReportMap_ImageCrop _ _x) = _x :: Maybe ImageCrop
          peekCons _p _x = Peek_ReportMap_ImageCrop _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ImageSize
    where type Path Univ ReportMap ImageSize = Path_ReportMap ImageSize
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ImageSize ->
                                                                                                                                                                                                                Path Univ ReportMap ImageSize,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap ImageSize])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ImageSize _p _) = _p :: Path Univ ReportMap ImageSize
          peekValue (Proxy) (Peek_ReportMap_ImageSize _ _x) = _x :: Maybe ImageSize
          peekCons _p _x = Peek_ReportMap_ImageSize _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Units
    where type Path Univ ReportMap Units = Path_ReportMap Units
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Units ->
                                                                                                                                                                                                                Path Univ ReportMap Units,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Units])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Units _p _) = _p :: Path Univ ReportMap Units
          peekValue (Proxy) (Peek_ReportMap_Units _ _x) = _x :: Maybe Units
          peekCons _p _x = Peek_ReportMap_Units _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ImageFile
    where type Path Univ ReportMap ImageFile = Path_ReportMap ImageFile
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ImageFile ->
                                                                                                                                                                                                                Path Univ ReportMap ImageFile,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap ImageFile])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ImageFile _p _) = _p :: Path Univ ReportMap ImageFile
          peekValue (Proxy) (Peek_ReportMap_ImageFile _ _x) = _x :: Maybe ImageFile
          peekCons _p _x = Peek_ReportMap_ImageFile _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Integer
    where type Path Univ ReportMap Integer = Path_ReportMap Integer
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Integer ->
                                                                                                                                                                                                                Path Univ ReportMap Integer,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Integer])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Integer _p _) = _p :: Path Univ ReportMap Integer
          peekValue (Proxy) (Peek_ReportMap_Integer _ _x) = _x :: Maybe Integer
          peekCons _p _x = Peek_ReportMap_Integer _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap JSONText
    where type Path Univ ReportMap JSONText = Path_ReportMap JSONText
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR JSONText ->
                                                                                                                                                                                                                Path Univ ReportMap JSONText,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap JSONText])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_JSONText _p _) = _p :: Path Univ ReportMap JSONText
          peekValue (Proxy) (Peek_ReportMap_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_ReportMap_JSONText _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Markup
    where type Path Univ ReportMap Markup = Path_ReportMap Markup
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Markup ->
                                                                                                                                                                                                                Path Univ ReportMap Markup,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Markup])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Markup _p _) = _p :: Path Univ ReportMap Markup
          peekValue (Proxy) (Peek_ReportMap_Markup _ _x) = _x :: Maybe Markup
          peekCons _p _x = Peek_ReportMap_Markup _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Permissions
    where type Path Univ ReportMap Permissions = Path_ReportMap Permissions
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Permissions ->
                                                                                                                                                                                                                Path Univ ReportMap Permissions,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                Permissions])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Permissions _p _) = _p :: Path Univ ReportMap Permissions
          peekValue (Proxy) (Peek_ReportMap_Permissions _ _x) = _x :: Maybe Permissions
          peekCons _p _x = Peek_ReportMap_Permissions _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap UserIds
    where type Path Univ ReportMap UserIds = Path_ReportMap UserIds
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR UserIds ->
                                                                                                                                                                                                                Path Univ ReportMap UserIds,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap UserIds])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_UserIds _p _) = _p :: Path Univ ReportMap UserIds
          peekValue (Proxy) (Peek_ReportMap_UserIds _ _x) = _x :: Maybe UserIds
          peekCons _p _x = Peek_ReportMap_UserIds _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap AbbrevPair
    where type Path Univ ReportMap AbbrevPair = Path_ReportMap AbbrevPair
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR AbbrevPair ->
                                                                                                                                                                                                                Path Univ ReportMap AbbrevPair,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                AbbrevPair])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_AbbrevPair _p _) = _p :: Path Univ ReportMap AbbrevPair
          peekValue (Proxy) (Peek_ReportMap_AbbrevPair _ _x) = _x :: Maybe AbbrevPair
          peekCons _p _x = Peek_ReportMap_AbbrevPair _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap AbbrevPairs
    where type Path Univ ReportMap AbbrevPairs = Path_ReportMap AbbrevPairs
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR AbbrevPairs ->
                                                                                                                                                                                                                Path Univ ReportMap AbbrevPairs,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                AbbrevPairs])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_AbbrevPairs _p _) = _p :: Path Univ ReportMap AbbrevPairs
          peekValue (Proxy) (Peek_ReportMap_AbbrevPairs _ _x) = _x :: Maybe AbbrevPairs
          peekCons _p _x = Peek_ReportMap_AbbrevPairs _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Author
    where type Path Univ ReportMap Author = Path_ReportMap Author
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Author ->
                                                                                                                                                                                                                Path Univ ReportMap Author,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Author])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Author _p _) = _p :: Path Univ ReportMap Author
          peekValue (Proxy) (Peek_ReportMap_Author _ _x) = _x :: Maybe Author
          peekCons _p _x = Peek_ReportMap_Author _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Authors
    where type Path Univ ReportMap Authors = Path_ReportMap Authors
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Authors ->
                                                                                                                                                                                                                Path Univ ReportMap Authors,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Authors])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Authors _p _) = _p :: Path Univ ReportMap Authors
          peekValue (Proxy) (Peek_ReportMap_Authors _ _x) = _x :: Maybe Authors
          peekCons _p _x = Peek_ReportMap_Authors _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Branding
    where type Path Univ ReportMap Branding = Path_ReportMap Branding
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Branding ->
                                                                                                                                                                                                                Path Univ ReportMap Branding,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Branding])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Branding _p _) = _p :: Path Univ ReportMap Branding
          peekValue (Proxy) (Peek_ReportMap_Branding _ _x) = _x :: Maybe Branding
          peekCons _p _x = Peek_ReportMap_Branding _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MarkupPair
    where type Path Univ ReportMap MarkupPair = Path_ReportMap MarkupPair
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MarkupPair ->
                                                                                                                                                                                                                Path Univ ReportMap MarkupPair,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                MarkupPair])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MarkupPair _p _) = _p :: Path Univ ReportMap MarkupPair
          peekValue (Proxy) (Peek_ReportMap_MarkupPair _ _x) = _x :: Maybe MarkupPair
          peekCons _p _x = Peek_ReportMap_MarkupPair _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MarkupPairs
    where type Path Univ ReportMap MarkupPairs = Path_ReportMap MarkupPairs
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MarkupPairs ->
                                                                                                                                                                                                                Path Univ ReportMap MarkupPairs,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                MarkupPairs])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MarkupPairs _p _) = _p :: Path Univ ReportMap MarkupPairs
          peekValue (Proxy) (Peek_ReportMap_MarkupPairs _ _x) = _x :: Maybe MarkupPairs
          peekCons _p _x = Peek_ReportMap_MarkupPairs _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Markups
    where type Path Univ ReportMap Markups = Path_ReportMap Markups
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Markups ->
                                                                                                                                                                                                                Path Univ ReportMap Markups,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Markups])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Markups _p _) = _p :: Path Univ ReportMap Markups
          peekValue (Proxy) (Peek_ReportMap_Markups _ _x) = _x :: Maybe Markups
          peekCons _p _x = Peek_ReportMap_Markups _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MaybeReportIntendedUse
    where type Path Univ ReportMap MaybeReportIntendedUse = Path_ReportMap MaybeReportIntendedUse
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ
                                                                                                                                                                                                                     MRR
                                                                                                                                                                                                                     MaybeReportIntendedUse ->
                                                                                                                                                                                                                Path Univ
                                                                                                                                                                                                                     ReportMap
                                                                                                                                                                                                                     MaybeReportIntendedUse,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                MaybeReportIntendedUse])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MaybeReportIntendedUse _p _) = _p :: Path Univ ReportMap MaybeReportIntendedUse
          peekValue (Proxy) (Peek_ReportMap_MaybeReportIntendedUse _ _x) = _x :: Maybe MaybeReportIntendedUse
          peekCons _p _x = Peek_ReportMap_MaybeReportIntendedUse _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Report
    where type Path Univ ReportMap Report = Path_ReportMap Report
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Report ->
                                                                                                                                                                                                                Path Univ ReportMap Report,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Report])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Report _p _) = _p :: Path Univ ReportMap Report
          peekValue (Proxy) (Peek_ReportMap_Report _ _x) = _x :: Maybe Report
          peekCons _p _x = Peek_ReportMap_Report _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportElem
    where type Path Univ ReportMap ReportElem = Path_ReportMap ReportElem
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportElem ->
                                                                                                                                                                                                                Path Univ ReportMap ReportElem,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportElem])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportElem _p _) = _p :: Path Univ ReportMap ReportElem
          peekValue (Proxy) (Peek_ReportMap_ReportElem _ _x) = _x :: Maybe ReportElem
          peekCons _p _x = Peek_ReportMap_ReportElem _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportElems
    where type Path Univ ReportMap ReportElems = Path_ReportMap ReportElems
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportElems ->
                                                                                                                                                                                                                Path Univ ReportMap ReportElems,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportElems])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportElems _p _) = _p :: Path Univ ReportMap ReportElems
          peekValue (Proxy) (Peek_ReportMap_ReportElems _ _x) = _x :: Maybe ReportElems
          peekCons _p _x = Peek_ReportMap_ReportElems _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportFlags
    where type Path Univ ReportMap ReportFlags = Path_ReportMap ReportFlags
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportFlags ->
                                                                                                                                                                                                                Path Univ ReportMap ReportFlags,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportFlags])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportFlags _p _) = _p :: Path Univ ReportMap ReportFlags
          peekValue (Proxy) (Peek_ReportMap_ReportFlags _ _x) = _x :: Maybe ReportFlags
          peekCons _p _x = Peek_ReportMap_ReportFlags _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportStandard
    where type Path Univ ReportMap ReportStandard = Path_ReportMap ReportStandard
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportStandard ->
                                                                                                                                                                                                                Path Univ ReportMap ReportStandard,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportStandard])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportStandard _p _) = _p :: Path Univ ReportMap ReportStandard
          peekValue (Proxy) (Peek_ReportMap_ReportStandard _ _x) = _x :: Maybe ReportStandard
          peekCons _p _x = Peek_ReportMap_ReportStandard _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportStatus
    where type Path Univ ReportMap ReportStatus = Path_ReportMap ReportStatus
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportStatus ->
                                                                                                                                                                                                                Path Univ ReportMap ReportStatus,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportStatus])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportStatus _p _) = _p :: Path Univ ReportMap ReportStatus
          peekValue (Proxy) (Peek_ReportMap_ReportStatus _ _x) = _x :: Maybe ReportStatus
          peekCons _p _x = Peek_ReportMap_ReportStatus _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportValueApproachInfo
    where type Path Univ ReportMap ReportValueApproachInfo = Path_ReportMap ReportValueApproachInfo
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ
                                                                                                                                                                                                                     MRR
                                                                                                                                                                                                                     ReportValueApproachInfo ->
                                                                                                                                                                                                                Path Univ
                                                                                                                                                                                                                     ReportMap
                                                                                                                                                                                                                     ReportValueApproachInfo,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportValueApproachInfo])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportValueApproachInfo _p _) = _p :: Path Univ ReportMap ReportValueApproachInfo
          peekValue (Proxy) (Peek_ReportMap_ReportValueApproachInfo _ _x) = _x :: Maybe ReportValueApproachInfo
          peekCons _p _x = Peek_ReportMap_ReportValueApproachInfo _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportValueTypeInfo
    where type Path Univ ReportMap ReportValueTypeInfo = Path_ReportMap ReportValueTypeInfo
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportValueTypeInfo ->
                                                                                                                                                                                                                Path Univ ReportMap ReportValueTypeInfo,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportValueTypeInfo])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportValueTypeInfo _p _) = _p :: Path Univ ReportMap ReportValueTypeInfo
          peekValue (Proxy) (Peek_ReportMap_ReportValueTypeInfo _ _x) = _x :: Maybe ReportValueTypeInfo
          peekCons _p _x = Peek_ReportMap_ReportValueTypeInfo _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap EUI
    where type Path Univ ReportMap EUI = Path_ReportMap EUI
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR EUI ->
                                                                                                                                                                                                                Path Univ ReportMap EUI,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap EUI])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_EUI _p _) = _p :: Path Univ ReportMap EUI
          peekValue (Proxy) (Peek_ReportMap_EUI _ _x) = _x :: Maybe EUI
          peekCons _p _x = Peek_ReportMap_EUI _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MEUI
    where type Path Univ ReportMap MEUI = Path_ReportMap MEUI
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MEUI ->
                                                                                                                                                                                                                Path Univ ReportMap MEUI,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap MEUI])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MEUI _p _) = _p :: Path Univ ReportMap MEUI
          peekValue (Proxy) (Peek_ReportMap_MEUI _ _x) = _x :: Maybe MEUI
          peekCons _p _x = Peek_ReportMap_MEUI _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MaybeImageFile
    where type Path Univ ReportMap MaybeImageFile = Path_ReportMap MaybeImageFile
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MaybeImageFile ->
                                                                                                                                                                                                                Path Univ ReportMap MaybeImageFile,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                MaybeImageFile])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MaybeImageFile _p _) = _p :: Path Univ ReportMap MaybeImageFile
          peekValue (Proxy) (Peek_ReportMap_MaybeImageFile _ _x) = _x :: Maybe MaybeImageFile
          peekCons _p _x = Peek_ReportMap_MaybeImageFile _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportImage
    where type Path Univ ReportMap ReportImage = Path_ReportMap ReportImage
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportImage ->
                                                                                                                                                                                                                Path Univ ReportMap ReportImage,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportImage])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportImage _p _) = _p :: Path Univ ReportMap ReportImage
          peekValue (Proxy) (Peek_ReportMap_ReportImage _ _x) = _x :: Maybe ReportImage
          peekCons _p _x = Peek_ReportMap_ReportImage _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportImages
    where type Path Univ ReportMap ReportImages = Path_ReportMap ReportImages
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportImages ->
                                                                                                                                                                                                                Path Univ ReportMap ReportImages,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportImages])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportImages _p _) = _p :: Path Univ ReportMap ReportImages
          peekValue (Proxy) (Peek_ReportMap_ReportImages _ _x) = _x :: Maybe ReportImages
          peekCons _p _x = Peek_ReportMap_ReportImages _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReadOnlyFilePath
    where type Path Univ ReportMap ReadOnlyFilePath = Path_ReportMap ReadOnlyFilePath
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReadOnlyFilePath ->
                                                                                                                                                                                                                Path Univ ReportMap ReadOnlyFilePath,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReadOnlyFilePath])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReadOnlyFilePath _p _) = _p :: Path Univ ReportMap ReadOnlyFilePath
          peekValue (Proxy) (Peek_ReportMap_ReadOnlyFilePath _ _x) = _x :: Maybe ReadOnlyFilePath
          peekCons _p _x = Peek_ReportMap_ReadOnlyFilePath _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportImageView
    where type Path Univ ReportMap ReportImageView = Path_ReportMap ReportImageView
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportImageView ->
                                                                                                                                                                                                                Path Univ ReportMap ReportImageView,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportImageView])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportImageView _p _) = _p :: Path Univ ReportMap ReportImageView
          peekValue (Proxy) (Peek_ReportMap_ReportImageView _ _x) = _x :: Maybe ReportImageView
          peekCons _p _x = Peek_ReportMap_ReportImageView _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportView
    where type Path Univ ReportMap ReportView = Path_ReportMap ReportView
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR ReportView ->
                                                                                                                                                                                                                Path Univ ReportMap ReportView,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                ReportView])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportView _p _) = _p :: Path Univ ReportMap ReportView
          peekValue (Proxy) (Peek_ReportMap_ReportView _ _x) = _x :: Maybe ReportView
          peekCons _p _x = Peek_ReportMap_ReportView _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap SaneSizeImageSize
    where type Path Univ ReportMap SaneSizeImageSize = Path_ReportMap SaneSizeImageSize
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR SaneSizeImageSize ->
                                                                                                                                                                                                                Path Univ ReportMap SaneSizeImageSize,
                                                                                                                                                                                                                MRR)]) :: [Path Univ
                                                                                                                                                                                                                                ReportMap
                                                                                                                                                                                                                                SaneSizeImageSize])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_SaneSizeImageSize _p _) = _p :: Path Univ ReportMap SaneSizeImageSize
          peekValue (Proxy) (Peek_ReportMap_SaneSizeImageSize _ _x) = _x :: Maybe SaneSizeImageSize
          peekCons _p _x = Peek_ReportMap_SaneSizeImageSize _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Item
    where type Path Univ ReportMap Item = Path_ReportMap Item
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Item ->
                                                                                                                                                                                                                Path Univ ReportMap Item,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Item])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Item _p _) = _p :: Path Univ ReportMap Item
          peekValue (Proxy) (Peek_ReportMap_Item _ _x) = _x :: Maybe Item
          peekCons _p _x = Peek_ReportMap_Item _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MIM
    where type Path Univ ReportMap MIM = Path_ReportMap MIM
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MIM ->
                                                                                                                                                                                                                Path Univ ReportMap MIM,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap MIM])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MIM _p _) = _p :: Path Univ ReportMap MIM
          peekValue (Proxy) (Peek_ReportMap_MIM _ _x) = _x :: Maybe MIM
          peekCons _p _x = Peek_ReportMap_MIM _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap MRR
    where type Path Univ ReportMap MRR = Path_ReportMap MRR
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR MRR ->
                                                                                                                                                                                                                Path Univ ReportMap MRR,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap MRR])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_MRR _p _) = _p :: Path Univ ReportMap MRR
          peekValue (Proxy) (Peek_ReportMap_MRR _ _x) = _x :: Maybe MRR
          peekCons _p _x = Peek_ReportMap_MRR _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap ReportMap
    where type Path Univ ReportMap ReportMap = Path_ReportMap ReportMap
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_ReportMap _p _) = _p :: Path Univ ReportMap ReportMap
          peekValue (Proxy) (Peek_ReportMap_ReportMap _ _x) = _x :: Maybe ReportMap
          peekCons _p _x = Peek_ReportMap_ReportMap _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap CIString
    where type Path Univ ReportMap CIString = Path_ReportMap CIString
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR CIString ->
                                                                                                                                                                                                                Path Univ ReportMap CIString,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap CIString])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_CIString _p _) = _p :: Path Univ ReportMap CIString
          peekValue (Proxy) (Peek_ReportMap_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_ReportMap_CIString _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap URI
    where type Path Univ ReportMap URI = Path_ReportMap URI
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR URI ->
                                                                                                                                                                                                                Path Univ ReportMap URI,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap URI])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_URI _p _) = _p :: Path Univ ReportMap URI
          peekValue (Proxy) (Peek_ReportMap_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_ReportMap_URI _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap Text
    where type Path Univ ReportMap Text = Path_ReportMap Text
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR Text ->
                                                                                                                                                                                                                Path Univ ReportMap Text,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap Text])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_Text _p _) = _p :: Path Univ ReportMap Text
          peekValue (Proxy) (Peek_ReportMap_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_ReportMap_Text _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap UserId
    where type Path Univ ReportMap UserId = Path_ReportMap UserId
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR UserId ->
                                                                                                                                                                                                                Path Univ ReportMap UserId,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap UserId])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_UserId _p _) = _p :: Path Univ ReportMap UserId
          peekValue (Proxy) (Peek_ReportMap_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_ReportMap_UserId _p _x :: Peek Univ ReportMap
instance Paths Univ ReportMap UUID
    where type Path Univ ReportMap UUID = Path_ReportMap UUID
          paths (Proxy) (_s@(ReportMap {})) _g f r0 = foldr f r0 (concatMap (\(p,
                                                                               a') -> paths (Proxy :: Proxy Univ) (a' :: MRR) _g (\npt r -> p npt : r) []) ([(Path_ReportMap_unReportMap, unReportMap _s)] :: [(Path Univ MRR UUID ->
                                                                                                                                                                                                                Path Univ ReportMap UUID,
                                                                                                                                                                                                                MRR)]) :: [Path Univ ReportMap UUID])
          peek (p@(Path_ReportMap_unReportMap _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ ReportMap
          peekPath (Proxy) (Peek_ReportMap_UUID _p _) = _p :: Path Univ ReportMap UUID
          peekValue (Proxy) (Peek_ReportMap_UUID _ _x) = _x :: Maybe UUID
          peekCons _p _x = Peek_ReportMap_UUID _p _x :: Peek Univ ReportMap
instance Paths Univ CIString JSONText
    where type Path Univ CIString JSONText = Path_CIString JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_CIString_View :: Path Univ Text JSONText ->
                                                                                                                                                                               Path Univ CIString JSONText,
                                                                                                                                                         a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    Text
                                                                                                                                                                                                                                                    JSONText ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    CIString
                                                                                                                                                                                                                                                    JSONText,
                                                                                                                                                                                                                                               Text)]) :: [Path Univ
                                                                                                                                                                                                                                                                CIString
                                                                                                                                                                                                                                                                JSONText])
          peek (p@(Path_CIString_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ CIString
          peekPath (Proxy) (Peek_CIString_JSONText _p _) = _p :: Path Univ CIString JSONText
          peekValue (Proxy) (Peek_CIString_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_CIString_JSONText _p _x :: Peek Univ CIString
instance Paths Univ CIString CIString
    where type Path Univ CIString CIString = Path_CIString CIString
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ CIString
          peekPath (Proxy) (Peek_CIString_CIString _p _) = _p :: Path Univ CIString CIString
          peekValue (Proxy) (Peek_CIString_CIString _ _x) = _x :: Maybe CIString
          peekCons _p _x = Peek_CIString_CIString _p _x :: Peek Univ CIString
instance Paths Univ CIString Text
    where type Path Univ CIString Text = Path_CIString Text
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: Text) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_CIString_View :: Path Univ Text Text -> Path Univ CIString Text,
                                                                                                                                                         a')) (toListOf (toLens (Path_CIString_View (idPath :: Path Univ Text Text))) _s) :: [(Path Univ
                                                                                                                                                                                                                                                    Text
                                                                                                                                                                                                                                                    Text ->
                                                                                                                                                                                                                                               Path Univ
                                                                                                                                                                                                                                                    CIString
                                                                                                                                                                                                                                                    Text,
                                                                                                                                                                                                                                               Text)]) :: [Path Univ
                                                                                                                                                                                                                                                                CIString
                                                                                                                                                                                                                                                                Text])
          peek (p@(Path_CIString_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ CIString
          peekPath (Proxy) (Peek_CIString_Text _p _) = _p :: Path Univ CIString Text
          peekValue (Proxy) (Peek_CIString_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_CIString_Text _p _x :: Peek Univ CIString
instance Paths Univ URI URI
    where type Path Univ URI URI = Path_URI URI
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ URI
          peekPath (Proxy) (Peek_URI_URI _p _) = _p :: Path Univ URI URI
          peekValue (Proxy) (Peek_URI_URI _ _x) = _x :: Maybe URI
          peekCons _p _x = Peek_URI_URI _p _x :: Peek Univ URI
instance Paths Univ Text JSONText
    where type Path Univ Text JSONText = Path_Text JSONText
          paths (Proxy) _s _g f r0 = foldr f r0 (concatMap (\(p,
                                                              a') -> paths (Proxy :: Proxy Univ) (a' :: JSONText) _g (\npt r -> p npt : r) []) (map (\a' -> (Path_Text_View :: Path Univ JSONText JSONText ->
                                                                                                                                                                               Path Univ Text JSONText,
                                                                                                                                                             a')) (toListOf (toLens (Path_Text_View (idPath :: Path Univ
                                                                                                                                                                                                                    JSONText
                                                                                                                                                                                                                    JSONText))) _s) :: [(Path Univ
                                                                                                                                                                                                                                              JSONText
                                                                                                                                                                                                                                              JSONText ->
                                                                                                                                                                                                                                         Path Univ
                                                                                                                                                                                                                                              Text
                                                                                                                                                                                                                                              JSONText,
                                                                                                                                                                                                                                         JSONText)]) :: [Path Univ
                                                                                                                                                                                                                                                              Text
                                                                                                                                                                                                                                                              JSONText])
          peek (p@(Path_Text_View _)) x = peekCons p (Just (view' (toLens p) x)) :: Peek Univ Text
          peekPath (Proxy) (Peek_Text_JSONText _p _) = _p :: Path Univ Text JSONText
          peekValue (Proxy) (Peek_Text_JSONText _ _x) = _x :: Maybe JSONText
          peekCons _p _x = Peek_Text_JSONText _p _x :: Peek Univ Text
instance Paths Univ Text Text
    where type Path Univ Text Text = Path_Text Text
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ Text
          peekPath (Proxy) (Peek_Text_Text _p _) = _p :: Path Univ Text Text
          peekValue (Proxy) (Peek_Text_Text _ _x) = _x :: Maybe Text
          peekCons _p _x = Peek_Text_Text _p _x :: Peek Univ Text
instance Paths Univ UserId UserId
    where type Path Univ UserId UserId = Path_UserId UserId
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ UserId
          peekPath (Proxy) (Peek_UserId_UserId _p _) = _p :: Path Univ UserId UserId
          peekValue (Proxy) (Peek_UserId_UserId _ _x) = _x :: Maybe UserId
          peekCons _p _x = Peek_UserId_UserId _p _x :: Peek Univ UserId
instance Paths Univ UUID UUID
    where type Path Univ UUID UUID = Path_UUID UUID
          paths (Proxy) _ _ f r0 = f idPath r0
          peek p x = peekCons p (Just x) :: Peek Univ UUID
          peekPath (Proxy) (Peek_UUID_UUID _p _) = _p :: Path Univ UUID UUID
          peekValue (Proxy) (Peek_UUID_UUID _ _x) = _x :: Maybe UUID
          peekCons _p _x = Peek_UUID_UUID _p _x :: Peek Univ UUID
instance PathStart Univ String
    where data Peek Univ String
              = Peek_String_String (Path Univ String String) (Maybe String) | Peek_String_JSONText (Path Univ String JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_String_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: JSONText) :: Forest (Peek Univ JSONText)
                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ JSONText of
                                                                                                                                                                                  Peek_JSONText_JSONText _
                                                                                                                                                                                                         _ -> peekCons (Path_String_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                        JSONText
                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [JSONText])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ String)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_String_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [JSONText])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: [Peek Univ String]
instance PathStart Univ Int64
    where data Peek Univ Int64 = Peek_Int64_Int64 (Path Univ Int64 Int64) (Maybe Int64) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ Bool
    where data Peek Univ Bool
              = Peek_Bool_String (Path Univ Bool String) (Maybe String)
              | Peek_Bool_Bool (Path Univ Bool Bool) (Maybe Bool)
              | Peek_Bool_JSONText (Path Univ Bool JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Bool_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                           in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                Peek_String_String _
                                                                                                                                                                                                   _ -> peekCons (Path_Bool_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                              String
                                                                                                                                                                                                                                                                              String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                Peek_String_JSONText _
                                                                                                                                                                                                     _ -> peekCons (Path_Bool_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                                  JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Bool)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Bool_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Bool]
instance PathStart Univ Double
    where data Peek Univ Double
              = Peek_Double_String (Path Univ Double String) (Maybe String)
              | Peek_Double_Double (Path Univ Double Double) (Maybe Double)
              | Peek_Double_JSONText (Path Univ Double JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Double_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                  Peek_String_String _
                                                                                                                                                                                                     _ -> peekCons (Path_Double_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                                  String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                  Peek_String_JSONText _
                                                                                                                                                                                                       _ -> peekCons (Path_Double_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Double)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Double_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Double]
instance PathStart Univ Int
    where data Peek Univ Int = Peek_Int_Int (Path Univ Int Int) (Maybe Int) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ Dimension
    where data Peek Univ Dimension
              = Peek_Dimension_Dimension (Path Univ Dimension Dimension) (Maybe Dimension) | Peek_Dimension_JSONText (Path Univ Dimension JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Dimension_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: JSONText) :: Forest (Peek Univ JSONText)
                                                                                                in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ JSONText of
                                                                                                                                                                                     Peek_JSONText_JSONText _
                                                                                                                                                                                                            _ -> peekCons (Path_Dimension_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                              JSONText
                                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [JSONText])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Dimension)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Dimension_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [JSONText])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Dimension]
instance PathStart Univ ImageCrop
    where data Peek Univ ImageCrop = Peek_ImageCrop_ImageCrop (Path Univ ImageCrop ImageCrop) (Maybe ImageCrop) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ ImageSize
    where data Peek Univ ImageSize
              = Peek_ImageSize_String (Path Univ ImageSize String) (Maybe String)
              | Peek_ImageSize_Double (Path Univ ImageSize Double) (Maybe Double)
              | Peek_ImageSize_Dimension (Path Univ ImageSize Dimension) (Maybe Dimension)
              | Peek_ImageSize_ImageSize (Path Univ ImageSize ImageSize) (Maybe ImageSize)
              | Peek_ImageSize_Units (Path Univ ImageSize Units) (Maybe Units)
              | Peek_ImageSize_JSONText (Path Univ ImageSize JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ImageSize {})) = mconcat [let dopath pth = case pth of
                                                                               p@(Path_ImageSize_dim _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Dimension) :: Forest (Peek Univ Dimension)
                                                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Dimension of
                                                                                                                                                                                                              Peek_Dimension_Dimension _
                                                                                                                                                                                                                                       _ -> peekCons (Path_ImageSize_dim (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                         Dimension
                                                                                                                                                                                                                                                                                                                         Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                              Peek_Dimension_JSONText _
                                                                                                                                                                                                                                      _ -> peekCons (Path_ImageSize_dim (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                       Dimension
                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Dimension])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Dimension) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ImageSize_size _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Double) :: Forest (Peek Univ Double)
                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Double of
                                                                                                                                                                                                               Peek_Double_String _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ImageSize_size (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  Double
                                                                                                                                                                                                                                                                                                                  String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                               Peek_Double_Double _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ImageSize_size (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  Double
                                                                                                                                                                                                                                                                                                                  Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                               Peek_Double_JSONText _
                                                                                                                                                                                                                                    _ -> peekCons (Path_ImageSize_size (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      Double
                                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Double])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Double) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ImageSize_units _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Units) :: Forest (Peek Univ Units)
                                                                                                                           in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Units of
                                                                                                                                                                                                                Peek_Units_Units _
                                                                                                                                                                                                                                 _ -> peekCons (Path_ImageSize_units (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                 Units
                                                                                                                                                                                                                                                                                                                 Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                                Peek_Units_JSONText _
                                                                                                                                                                                                                                    _ -> peekCons (Path_ImageSize_units (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                       Units
                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Units])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Units) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ ImageSize)
          peekRow (Proxy) (_s@(ImageSize {})) = mconcat [let dopath pth = case pth of
                                                                              p@(Path_ImageSize_dim _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Dimension])
                                                                              _ -> []
                                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Dimension) (\pth r -> dopath pth ++ r) [],
                                                         let dopath pth = case pth of
                                                                              p@(Path_ImageSize_size _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Double])
                                                                              _ -> []
                                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Double) (\pth r -> dopath pth ++ r) [],
                                                         let dopath pth = case pth of
                                                                              p@(Path_ImageSize_units _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Units])
                                                                              _ -> []
                                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Units) (\pth r -> dopath pth ++ r) []] :: [Peek Univ ImageSize]
instance PathStart Univ Units
    where data Peek Univ Units
              = Peek_Units_Units (Path Univ Units Units) (Maybe Units) | Peek_Units_JSONText (Path Univ Units JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Units_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: JSONText) :: Forest (Peek Univ JSONText)
                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ JSONText of
                                                                                                                                                                                 Peek_JSONText_JSONText _
                                                                                                                                                                                                        _ -> peekCons (Path_Units_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                      JSONText
                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [JSONText])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Units)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Units_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [JSONText])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Units]
instance PathStart Univ ImageFile
    where data Peek Univ ImageFile = Peek_ImageFile_ImageFile (Path Univ ImageFile ImageFile) (Maybe ImageFile) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ Integer
    where data Peek Univ Integer = Peek_Integer_Integer (Path Univ Integer Integer) (Maybe Integer) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ JSONText
    where data Peek Univ JSONText = Peek_JSONText_JSONText (Path Univ JSONText JSONText) (Maybe JSONText) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ Markup
    where data Peek Univ Markup
              = Peek_Markup_JSONText (Path Univ Markup JSONText) (Maybe JSONText)
              | Peek_Markup_Markup (Path Univ Markup Markup) (Maybe Markup)
              | Peek_Markup_Text (Path Univ Markup Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(Markdown {})) = let dopath pth = case pth of
                                                                     p@(Path_Markup_markdownText _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                                          Peek_Text_JSONText _
                                                                                                                                                                                                                             _ -> peekCons (Path_Markup_markdownText (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    Text
                                                                                                                                                                                                                                                                                                                    JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                          Peek_Text_Text _
                                                                                                                                                                                                                         _ -> peekCons (Path_Markup_markdownText (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            Text
                                                                                                                                                                                                                                                                                                            Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                                     _ -> []
                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Markup)
          peekTree (Proxy) (_s@(Html {})) = let dopath pth = case pth of
                                                                 p@(Path_Markup_htmlText _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                                  Peek_Text_JSONText _
                                                                                                                                                                                                                     _ -> peekCons (Path_Markup_htmlText (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                        Text
                                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                  Peek_Text_Text _
                                                                                                                                                                                                                 _ -> peekCons (Path_Markup_htmlText (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                Text
                                                                                                                                                                                                                                                                                                Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                                 _ -> []
                                             in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Markup)
          peekTree (Proxy) (_s@(LaTeX {})) = mempty :: Forest (Peek Univ Markup)
          peekTree (Proxy) (_s@(Pandoc {})) = mempty :: Forest (Peek Univ Markup)
          peekTree (Proxy) (_s@(Markup {})) = mempty :: Forest (Peek Univ Markup)
          peekRow (Proxy) (_s@(Markdown {})) = let dopath pth = case pth of
                                                                    p@(Path_Markup_markdownText _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                                    _ -> []
                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Markup]
          peekRow (Proxy) (_s@(Html {})) = let dopath pth = case pth of
                                                                p@(Path_Markup_htmlText _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                                _ -> []
                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Markup]
          peekRow (Proxy) (_s@(LaTeX {})) = mempty :: [Peek Univ Markup]
          peekRow (Proxy) (_s@(Pandoc {})) = mempty :: [Peek Univ Markup]
          peekRow (Proxy) (_s@(Markup {})) = mempty :: [Peek Univ Markup]
instance PathStart Univ Permissions
    where data Peek Univ Permissions
              = Peek_Permissions_JSONText (Path Univ Permissions JSONText) (Maybe JSONText)
              | Peek_Permissions_Permissions (Path Univ Permissions Permissions) (Maybe Permissions)
              | Peek_Permissions_UserIds (Path Univ Permissions UserIds) (Maybe UserIds)
              | Peek_Permissions_Text (Path Univ Permissions Text) (Maybe Text)
              | Peek_Permissions_UserId (Path Univ Permissions UserId) (Maybe UserId)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(Permissions {})) = mconcat [let dopath pth = case pth of
                                                                                 p@(Path_Permissions_owner _wp) -> map (\a -> let wtree = peekTree Proxy (a :: UserId) :: Forest (Peek Univ UserId)
                                                                                                                               in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ UserId of
                                                                                                                                                                                                                    Peek_UserId_UserId _
                                                                                                                                                                                                                                       _ -> peekCons (Path_Permissions_owner (peekPath (Proxy :: Proxy UserId) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                          UserId
                                                                                                                                                                                                                                                                                                                          UserId)) (peekValue (Proxy :: Proxy UserId) pk)) wtree)) (toListOf (toLens p) _s :: [UserId])
                                                                                 _ -> []
                                                             in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserId) (\pth r -> dopath pth ++ r) [],
                                                            let dopath pth = case pth of
                                                                                 p@(Path_Permissions_writers _wp) -> map (\a -> let wtree = peekTree Proxy (a :: UserIds) :: Forest (Peek Univ UserIds)
                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ UserIds of
                                                                                                                                                                                                                      Peek_UserIds_JSONText _
                                                                                                                                                                                                                                            _ -> peekCons (Path_Permissions_writers (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   UserIds
                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                      Peek_UserIds_UserIds _
                                                                                                                                                                                                                                           _ -> peekCons (Path_Permissions_writers (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                                                                                                                 UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                                                                      Peek_UserIds_Text _
                                                                                                                                                                                                                                        _ -> peekCons (Path_Permissions_writers (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                           UserIds
                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [UserIds])
                                                                                 _ -> []
                                                             in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserIds) (\pth r -> dopath pth ++ r) [],
                                                            let dopath pth = case pth of
                                                                                 p@(Path_Permissions_readers _wp) -> map (\a -> let wtree = peekTree Proxy (a :: UserIds) :: Forest (Peek Univ UserIds)
                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ UserIds of
                                                                                                                                                                                                                      Peek_UserIds_JSONText _
                                                                                                                                                                                                                                            _ -> peekCons (Path_Permissions_readers (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   UserIds
                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                      Peek_UserIds_UserIds _
                                                                                                                                                                                                                                           _ -> peekCons (Path_Permissions_readers (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                 UserIds
                                                                                                                                                                                                                                                                                                                                 UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                                                                      Peek_UserIds_Text _
                                                                                                                                                                                                                                        _ -> peekCons (Path_Permissions_readers (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                           UserIds
                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [UserIds])
                                                                                 _ -> []
                                                             in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserIds) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ Permissions)
          peekRow (Proxy) (_s@(Permissions {})) = mconcat [let dopath pth = case pth of
                                                                                p@(Path_Permissions_owner _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [UserId])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserId) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_Permissions_writers _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [UserIds])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserIds) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_Permissions_readers _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [UserIds])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UserIds) (\pth r -> dopath pth ++ r) []] :: [Peek Univ Permissions]
instance PathStart Univ UserIds
    where data Peek Univ UserIds
              = Peek_UserIds_JSONText (Path Univ UserIds JSONText) (Maybe JSONText)
              | Peek_UserIds_UserIds (Path Univ UserIds UserIds) (Maybe UserIds)
              | Peek_UserIds_Text (Path Univ UserIds Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_UserIds_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                   Peek_Text_JSONText _
                                                                                                                                                                                                      _ -> peekCons (Path_UserIds_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                      Text
                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                   Peek_Text_Text _
                                                                                                                                                                                                  _ -> peekCons (Path_UserIds_View (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                              Text
                                                                                                                                                                                                                                                                              Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ UserIds)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_UserIds_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: [Peek Univ UserIds]
instance PathStart Univ AbbrevPair
    where data Peek Univ AbbrevPair
              = Peek_AbbrevPair_JSONText (Path Univ AbbrevPair JSONText) (Maybe JSONText)
              | Peek_AbbrevPair_Markup (Path Univ AbbrevPair Markup) (Maybe Markup)
              | Peek_AbbrevPair_AbbrevPair (Path Univ AbbrevPair AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPair_CIString (Path Univ AbbrevPair CIString) (Maybe CIString)
              | Peek_AbbrevPair_Text (Path Univ AbbrevPair Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = mconcat [let dopath pth = case pth of
                                                              p@(Path_First _wp) -> map (\a -> let wtree = peekTree Proxy (a :: CIString) :: Forest (Peek Univ CIString)
                                                                                                in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ CIString of
                                                                                                                                                                                     Peek_CIString_JSONText _
                                                                                                                                                                                                            _ -> peekCons (Path_First (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                     CIString
                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                     Peek_CIString_CIString _
                                                                                                                                                                                                            _ -> peekCons (Path_First (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                                     CIString
                                                                                                                                                                                                                                                                                     CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                                     Peek_CIString_Text _
                                                                                                                                                                                                        _ -> peekCons (Path_First (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                             CIString
                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [CIString])
                                                              _ -> []
                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy CIString) (\pth r -> dopath pth ++ r) [],
                                         let dopath pth = case pth of
                                                              p@(Path_Second _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                      Peek_Markup_JSONText _
                                                                                                                                                                                                           _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                      Peek_Markup_Markup _
                                                                                                                                                                                                         _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                      Peek_Markup_Text _
                                                                                                                                                                                                       _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                              _ -> []
                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ AbbrevPair)
          peekRow (Proxy) _s = mconcat [let dopath pth = case pth of
                                                             p@(Path_First _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [CIString])
                                                             _ -> []
                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy CIString) (\pth r -> dopath pth ++ r) [],
                                        let dopath pth = case pth of
                                                             p@(Path_Second _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                             _ -> []
                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: [Peek Univ AbbrevPair]
instance PathStart Univ AbbrevPairs
    where data Peek Univ AbbrevPairs
              = Peek_AbbrevPairs_JSONText (Path Univ AbbrevPairs JSONText) (Maybe JSONText)
              | Peek_AbbrevPairs_Markup (Path Univ AbbrevPairs Markup) (Maybe Markup)
              | Peek_AbbrevPairs_AbbrevPair (Path Univ AbbrevPairs AbbrevPair) (Maybe AbbrevPair)
              | Peek_AbbrevPairs_AbbrevPairs (Path Univ AbbrevPairs AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_AbbrevPairs_CIString (Path Univ AbbrevPairs CIString) (Maybe CIString)
              | Peek_AbbrevPairs_Text (Path Univ AbbrevPairs Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: AbbrevPair) :: Forest (Peek Univ AbbrevPair)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ AbbrevPair of
                                                                                                                                                                            Peek_AbbrevPair_JSONText _
                                                                                                                                                                                                     _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                              AbbrevPair
                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_AbbrevPair_Markup _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                          AbbrevPair
                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_AbbrevPair_AbbrevPair _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy AbbrevPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                  AbbrevPair
                                                                                                                                                                                                                                                                                  AbbrevPair)) (peekValue (Proxy :: Proxy AbbrevPair) pk)
                                                                                                                                                                            Peek_AbbrevPair_CIString _
                                                                                                                                                                                                     _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                              AbbrevPair
                                                                                                                                                                                                                                                                              CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                            Peek_AbbrevPair_Text _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                      AbbrevPair
                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [AbbrevPair])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy AbbrevPair) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ AbbrevPairs)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [AbbrevPair])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy AbbrevPair) (\pth r -> dopath pth ++ r) [] :: [Peek Univ AbbrevPairs]
instance PathStart Univ Author
    where data Peek Univ Author
              = Peek_Author_JSONText (Path Univ Author JSONText) (Maybe JSONText)
              | Peek_Author_Markup (Path Univ Author Markup) (Maybe Markup)
              | Peek_Author_Author (Path Univ Author Author) (Maybe Author)
              | Peek_Author_Text (Path Univ Author Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(Author {})) = mconcat [let dopath pth = case pth of
                                                                            p@(Path_Author_authorName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                               Peek_Markup_JSONText _
                                                                                                                                                                                                                                    _ -> peekCons (Path_Author_authorName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                               Peek_Markup_Markup _
                                                                                                                                                                                                                                  _ -> peekCons (Path_Author_authorName (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                               Peek_Markup_Text _
                                                                                                                                                                                                                                _ -> peekCons (Path_Author_authorName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                            _ -> []
                                                        in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                       let dopath pth = case pth of
                                                                            p@(Path_Author_authorCredentials _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                      Peek_Markup_JSONText _
                                                                                                                                                                                                                                           _ -> peekCons (Path_Author_authorCredentials (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                      Peek_Markup_Markup _
                                                                                                                                                                                                                                         _ -> peekCons (Path_Author_authorCredentials (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                   Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                      Peek_Markup_Text _
                                                                                                                                                                                                                                       _ -> peekCons (Path_Author_authorCredentials (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                               Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                            _ -> []
                                                        in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ Author)
          peekRow (Proxy) (_s@(Author {})) = mconcat [let dopath pth = case pth of
                                                                           p@(Path_Author_authorName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                           _ -> []
                                                       in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                      let dopath pth = case pth of
                                                                           p@(Path_Author_authorCredentials _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                           _ -> []
                                                       in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: [Peek Univ Author]
instance PathStart Univ Authors
    where data Peek Univ Authors
              = Peek_Authors_JSONText (Path Univ Authors JSONText) (Maybe JSONText)
              | Peek_Authors_Markup (Path Univ Authors Markup) (Maybe Markup)
              | Peek_Authors_Author (Path Univ Authors Author) (Maybe Author)
              | Peek_Authors_Authors (Path Univ Authors Authors) (Maybe Authors)
              | Peek_Authors_Text (Path Univ Authors Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Author) :: Forest (Peek Univ Author)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Author of
                                                                                                                                                                            Peek_Author_JSONText _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                          Author
                                                                                                                                                                                                                                                                          JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_Author_Markup _
                                                                                                                                                                                               _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                      Author
                                                                                                                                                                                                                                                                      Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_Author_Author _
                                                                                                                                                                                               _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Author) pk :: Path Univ
                                                                                                                                                                                                                                                                      Author
                                                                                                                                                                                                                                                                      Author)) (peekValue (Proxy :: Proxy Author) pk)
                                                                                                                                                                            Peek_Author_Text _
                                                                                                                                                                                             _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                  Author
                                                                                                                                                                                                                                                                  Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Author])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Author) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Authors)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Author])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Author) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Authors]
instance PathStart Univ Branding
    where data Peek Univ Branding
              = Peek_Branding_JSONText (Path Univ Branding JSONText) (Maybe JSONText)
              | Peek_Branding_Branding (Path Univ Branding Branding) (Maybe Branding)
              | Peek_Branding_Text (Path Univ Branding Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Branding_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                               in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                    Peek_Text_JSONText _
                                                                                                                                                                                                       _ -> peekCons (Path_Branding_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                        Text
                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                    Peek_Text_Text _
                                                                                                                                                                                                   _ -> peekCons (Path_Branding_View (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                Text
                                                                                                                                                                                                                                                                                Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Branding)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Branding_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Branding]
instance PathStart Univ MarkupPair
    where data Peek Univ MarkupPair
              = Peek_MarkupPair_JSONText (Path Univ MarkupPair JSONText) (Maybe JSONText)
              | Peek_MarkupPair_Markup (Path Univ MarkupPair Markup) (Maybe Markup)
              | Peek_MarkupPair_MarkupPair (Path Univ MarkupPair MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPair_Text (Path Univ MarkupPair Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = mconcat [let dopath pth = case pth of
                                                              p@(Path_First _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                     Peek_Markup_JSONText _
                                                                                                                                                                                                          _ -> peekCons (Path_First (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                     Peek_Markup_Markup _
                                                                                                                                                                                                        _ -> peekCons (Path_First (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                               Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                     Peek_Markup_Text _
                                                                                                                                                                                                      _ -> peekCons (Path_First (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                              _ -> []
                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                         let dopath pth = case pth of
                                                              p@(Path_Second _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                      Peek_Markup_JSONText _
                                                                                                                                                                                                           _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                      Peek_Markup_Markup _
                                                                                                                                                                                                         _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                      Peek_Markup_Text _
                                                                                                                                                                                                       _ -> peekCons (Path_Second (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                              _ -> []
                                          in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ MarkupPair)
          peekRow (Proxy) _s = mconcat [let dopath pth = case pth of
                                                             p@(Path_First _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                             _ -> []
                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                        let dopath pth = case pth of
                                                             p@(Path_Second _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                             _ -> []
                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: [Peek Univ MarkupPair]
instance PathStart Univ MarkupPairs
    where data Peek Univ MarkupPairs
              = Peek_MarkupPairs_JSONText (Path Univ MarkupPairs JSONText) (Maybe JSONText)
              | Peek_MarkupPairs_Markup (Path Univ MarkupPairs Markup) (Maybe Markup)
              | Peek_MarkupPairs_MarkupPair (Path Univ MarkupPairs MarkupPair) (Maybe MarkupPair)
              | Peek_MarkupPairs_MarkupPairs (Path Univ MarkupPairs MarkupPairs) (Maybe MarkupPairs)
              | Peek_MarkupPairs_Text (Path Univ MarkupPairs Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MarkupPair) :: Forest (Peek Univ MarkupPair)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MarkupPair of
                                                                                                                                                                            Peek_MarkupPair_JSONText _
                                                                                                                                                                                                     _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                              MarkupPair
                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_MarkupPair_Markup _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                          MarkupPair
                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_MarkupPair_MarkupPair _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                  MarkupPair
                                                                                                                                                                                                                                                                                  MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                            Peek_MarkupPair_Text _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                      MarkupPair
                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [MarkupPair])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPair) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MarkupPairs)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MarkupPair])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPair) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MarkupPairs]
instance PathStart Univ Markups
    where data Peek Univ Markups
              = Peek_Markups_JSONText (Path Univ Markups JSONText) (Maybe JSONText)
              | Peek_Markups_Markup (Path Univ Markups Markup) (Maybe Markup)
              | Peek_Markups_Markups (Path Univ Markups Markups) (Maybe Markups)
              | Peek_Markups_Text (Path Univ Markups Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                            Peek_Markup_JSONText _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                                                          JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_Markup_Markup _
                                                                                                                                                                                               _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                                                      Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_Markup_Text _
                                                                                                                                                                                             _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                  Markup
                                                                                                                                                                                                                                                                  Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Markups)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Markups]
instance PathStart Univ MaybeReportIntendedUse
    where data Peek Univ MaybeReportIntendedUse
              = Peek_MaybeReportIntendedUse_String (Path Univ MaybeReportIntendedUse String) (Maybe String)
              | Peek_MaybeReportIntendedUse_JSONText (Path Univ MaybeReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_MaybeReportIntendedUse_MaybeReportIntendedUse (Path Univ MaybeReportIntendedUse MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                                  Peek_String_String _
                                                                                                                                                                                                                     _ -> peekCons (Path_MaybeReportIntendedUse_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                                                                  String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                  Peek_String_JSONText _
                                                                                                                                                                                                                       _ -> peekCons (Path_MaybeReportIntendedUse_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MaybeReportIntendedUse)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MaybeReportIntendedUse]
instance PathStart Univ Report
    where data Peek Univ Report
              = Peek_Report_String (Path Univ Report String) (Maybe String)
              | Peek_Report_Int64 (Path Univ Report Int64) (Maybe Int64)
              | Peek_Report_Int (Path Univ Report Int) (Maybe Int)
              | Peek_Report_Bool (Path Univ Report Bool) (Maybe Bool)
              | Peek_Report_Double (Path Univ Report Double) (Maybe Double)
              | Peek_Report_Dimension (Path Univ Report Dimension) (Maybe Dimension)
              | Peek_Report_ImageCrop (Path Univ Report ImageCrop) (Maybe ImageCrop)
              | Peek_Report_ImageSize (Path Univ Report ImageSize) (Maybe ImageSize)
              | Peek_Report_Units (Path Univ Report Units) (Maybe Units)
              | Peek_Report_ImageFile (Path Univ Report ImageFile) (Maybe ImageFile)
              | Peek_Report_Integer (Path Univ Report Integer) (Maybe Integer)
              | Peek_Report_JSONText (Path Univ Report JSONText) (Maybe JSONText)
              | Peek_Report_Markup (Path Univ Report Markup) (Maybe Markup)
              | Peek_Report_Permissions (Path Univ Report Permissions) (Maybe Permissions)
              | Peek_Report_UserIds (Path Univ Report UserIds) (Maybe UserIds)
              | Peek_Report_AbbrevPair (Path Univ Report AbbrevPair) (Maybe AbbrevPair)
              | Peek_Report_AbbrevPairs (Path Univ Report AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_Report_Author (Path Univ Report Author) (Maybe Author)
              | Peek_Report_Authors (Path Univ Report Authors) (Maybe Authors)
              | Peek_Report_Branding (Path Univ Report Branding) (Maybe Branding)
              | Peek_Report_MarkupPair (Path Univ Report MarkupPair) (Maybe MarkupPair)
              | Peek_Report_MarkupPairs (Path Univ Report MarkupPairs) (Maybe MarkupPairs)
              | Peek_Report_Markups (Path Univ Report Markups) (Maybe Markups)
              | Peek_Report_MaybeReportIntendedUse (Path Univ Report MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_Report_Report (Path Univ Report Report) (Maybe Report)
              | Peek_Report_ReportElem (Path Univ Report ReportElem) (Maybe ReportElem)
              | Peek_Report_ReportElems (Path Univ Report ReportElems) (Maybe ReportElems)
              | Peek_Report_ReportFlags (Path Univ Report ReportFlags) (Maybe ReportFlags)
              | Peek_Report_ReportStandard (Path Univ Report ReportStandard) (Maybe ReportStandard)
              | Peek_Report_ReportStatus (Path Univ Report ReportStatus) (Maybe ReportStatus)
              | Peek_Report_ReportValueApproachInfo (Path Univ Report ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_Report_ReportValueTypeInfo (Path Univ Report ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_Report_EUI (Path Univ Report EUI) (Maybe EUI)
              | Peek_Report_MEUI (Path Univ Report MEUI) (Maybe MEUI)
              | Peek_Report_MaybeImageFile (Path Univ Report MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Report_ReportImage (Path Univ Report ReportImage) (Maybe ReportImage)
              | Peek_Report_ReportImages (Path Univ Report ReportImages) (Maybe ReportImages)
              | Peek_Report_ReadOnlyFilePath (Path Univ Report ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_Report_ReportImageView (Path Univ Report ReportImageView) (Maybe ReportImageView)
              | Peek_Report_ReportView (Path Univ Report ReportView) (Maybe ReportView)
              | Peek_Report_SaneSizeImageSize (Path Univ Report SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Report_Item (Path Univ Report Item) (Maybe Item)
              | Peek_Report_MIM (Path Univ Report MIM) (Maybe MIM)
              | Peek_Report_CIString (Path Univ Report CIString) (Maybe CIString)
              | Peek_Report_URI (Path Univ Report URI) (Maybe URI)
              | Peek_Report_Text (Path Univ Report Text) (Maybe Text)
              | Peek_Report_UserId (Path Univ Report UserId) (Maybe UserId)
              | Peek_Report_UUID (Path Univ Report UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Report_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportView) :: Forest (Peek Univ ReportView)
                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportView of
                                                                                                                                                                                  Peek_ReportView_String _
                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                      String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                  Peek_ReportView_Int64 _
                                                                                                                                                                                                        _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Int64) pk :: Path Univ
                                                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                                                    Int64)) (peekValue (Proxy :: Proxy Int64) pk)
                                                                                                                                                                                  Peek_ReportView_Int _
                                                                                                                                                                                                      _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Int) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                Int)) (peekValue (Proxy :: Proxy Int) pk)
                                                                                                                                                                                  Peek_ReportView_Bool _
                                                                                                                                                                                                       _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                  Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                  Peek_ReportView_Double _
                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                      Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                  Peek_ReportView_Dimension _
                                                                                                                                                                                                            _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                                                                            Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                  Peek_ReportView_ImageCrop _
                                                                                                                                                                                                            _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                                                                            ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                  Peek_ReportView_ImageSize _
                                                                                                                                                                                                            _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                                                                            ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                  Peek_ReportView_Units _
                                                                                                                                                                                                        _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                    ReportView
                                                                                                                                                                                                                                                                                    Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                  Peek_ReportView_ImageFile _
                                                                                                                                                                                                            _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                                                                            ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                  Peek_ReportView_Integer _
                                                                                                                                                                                                          _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Integer) pk :: Path Univ
                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                        Integer)) (peekValue (Proxy :: Proxy Integer) pk)
                                                                                                                                                                                  Peek_ReportView_JSONText _
                                                                                                                                                                                                           _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                                                                          JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                  Peek_ReportView_Markup _
                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                      Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                  Peek_ReportView_Permissions _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Permissions) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                Permissions)) (peekValue (Proxy :: Proxy Permissions) pk)
                                                                                                                                                                                  Peek_ReportView_UserIds _
                                                                                                                                                                                                          _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                        UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                                  Peek_ReportView_AbbrevPair _
                                                                                                                                                                                                             _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy AbbrevPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                                                                              AbbrevPair)) (peekValue (Proxy :: Proxy AbbrevPair) pk)
                                                                                                                                                                                  Peek_ReportView_AbbrevPairs _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy AbbrevPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                AbbrevPairs)) (peekValue (Proxy :: Proxy AbbrevPairs) pk)
                                                                                                                                                                                  Peek_ReportView_Author _
                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Author) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                      Author)) (peekValue (Proxy :: Proxy Author) pk)
                                                                                                                                                                                  Peek_ReportView_Authors _
                                                                                                                                                                                                          _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Authors) pk :: Path Univ
                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                        Authors)) (peekValue (Proxy :: Proxy Authors) pk)
                                                                                                                                                                                  Peek_ReportView_Branding _
                                                                                                                                                                                                           _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Branding) pk :: Path Univ
                                                                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                                                                          Branding)) (peekValue (Proxy :: Proxy Branding) pk)
                                                                                                                                                                                  Peek_ReportView_MarkupPair _
                                                                                                                                                                                                             _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                                                                              MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                                  Peek_ReportView_MarkupPairs _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MarkupPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                MarkupPairs)) (peekValue (Proxy :: Proxy MarkupPairs) pk)
                                                                                                                                                                                  Peek_ReportView_Markups _
                                                                                                                                                                                                          _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Markups) pk :: Path Univ
                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                        Markups)) (peekValue (Proxy :: Proxy Markups) pk)
                                                                                                                                                                                  Peek_ReportView_MaybeReportIntendedUse _
                                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MaybeReportIntendedUse) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                                                      MaybeReportIntendedUse)) (peekValue (Proxy :: Proxy MaybeReportIntendedUse) pk)
                                                                                                                                                                                  Peek_ReportView_ReportElem _
                                                                                                                                                                                                             _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportElem) pk :: Path Univ
                                                                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                                                                              ReportElem)) (peekValue (Proxy :: Proxy ReportElem) pk)
                                                                                                                                                                                  Peek_ReportView_ReportElems _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportElems) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                ReportElems)) (peekValue (Proxy :: Proxy ReportElems) pk)
                                                                                                                                                                                  Peek_ReportView_ReportFlags _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportFlags) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                ReportFlags)) (peekValue (Proxy :: Proxy ReportFlags) pk)
                                                                                                                                                                                  Peek_ReportView_ReportStandard _
                                                                                                                                                                                                                 _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportStandard) pk :: Path Univ
                                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                                      ReportStandard)) (peekValue (Proxy :: Proxy ReportStandard) pk)
                                                                                                                                                                                  Peek_ReportView_ReportStatus _
                                                                                                                                                                                                               _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportStatus) pk :: Path Univ
                                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                                  ReportStatus)) (peekValue (Proxy :: Proxy ReportStatus) pk)
                                                                                                                                                                                  Peek_ReportView_ReportValueApproachInfo _
                                                                                                                                                                                                                          _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportValueApproachInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                                                        ReportValueApproachInfo)) (peekValue (Proxy :: Proxy ReportValueApproachInfo) pk)
                                                                                                                                                                                  Peek_ReportView_ReportValueTypeInfo _
                                                                                                                                                                                                                      _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportValueTypeInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                                ReportValueTypeInfo)) (peekValue (Proxy :: Proxy ReportValueTypeInfo) pk)
                                                                                                                                                                                  Peek_ReportView_EUI _
                                                                                                                                                                                                      _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                  Peek_ReportView_MEUI _
                                                                                                                                                                                                       _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                  MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                  Peek_ReportView_MaybeImageFile _
                                                                                                                                                                                                                 _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                                      MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                  Peek_ReportView_ReportImage _
                                                                                                                                                                                                              _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                                ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                                  Peek_ReportView_ReportImages _
                                                                                                                                                                                                               _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                                  ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                                  Peek_ReportView_ReadOnlyFilePath _
                                                                                                                                                                                                                   _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReadOnlyFilePath) pk :: Path Univ
                                                                                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                                                                                          ReadOnlyFilePath)) (peekValue (Proxy :: Proxy ReadOnlyFilePath) pk)
                                                                                                                                                                                  Peek_ReportView_ReportImageView _
                                                                                                                                                                                                                  _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                        ReportView
                                                                                                                                                                                                                                                                                                        ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                  Peek_ReportView_ReportView _
                                                                                                                                                                                                             _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy ReportView) pk :: Path Univ
                                                                                                                                                                                                                                                                                              ReportView
                                                                                                                                                                                                                                                                                              ReportView)) (peekValue (Proxy :: Proxy ReportView) pk)
                                                                                                                                                                                  Peek_ReportView_SaneSizeImageSize _
                                                                                                                                                                                                                    _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            ReportView
                                                                                                                                                                                                                                                                                                            SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                  Peek_ReportView_Item _
                                                                                                                                                                                                       _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                  Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                                  Peek_ReportView_MIM _
                                                                                                                                                                                                      _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                                  Peek_ReportView_CIString _
                                                                                                                                                                                                           _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                                          ReportView
                                                                                                                                                                                                                                                                                          CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                                  Peek_ReportView_URI _
                                                                                                                                                                                                      _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportView
                                                                                                                                                                                                                                                                                URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                  Peek_ReportView_Text _
                                                                                                                                                                                                       _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                  Text)) (peekValue (Proxy :: Proxy Text) pk)
                                                                                                                                                                                  Peek_ReportView_UserId _
                                                                                                                                                                                                         _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy UserId) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportView
                                                                                                                                                                                                                                                                                      UserId)) (peekValue (Proxy :: Proxy UserId) pk)
                                                                                                                                                                                  Peek_ReportView_UUID _
                                                                                                                                                                                                       _ -> peekCons (Path_Report_View (peekPath (Proxy :: Proxy UUID) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportView
                                                                                                                                                                                                                                                                                  UUID)) (peekValue (Proxy :: Proxy UUID) pk)) wtree)) (toListOf (toLens p) _s :: [ReportView])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportView) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Report)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Report_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportView])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportView) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Report]
instance PathStart Univ ReportElem
    where data Peek Univ ReportElem
              = Peek_ReportElem_String (Path Univ ReportElem String) (Maybe String)
              | Peek_ReportElem_Bool (Path Univ ReportElem Bool) (Maybe Bool)
              | Peek_ReportElem_Double (Path Univ ReportElem Double) (Maybe Double)
              | Peek_ReportElem_Dimension (Path Univ ReportElem Dimension) (Maybe Dimension)
              | Peek_ReportElem_ImageCrop (Path Univ ReportElem ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElem_ImageSize (Path Univ ReportElem ImageSize) (Maybe ImageSize)
              | Peek_ReportElem_Units (Path Univ ReportElem Units) (Maybe Units)
              | Peek_ReportElem_ImageFile (Path Univ ReportElem ImageFile) (Maybe ImageFile)
              | Peek_ReportElem_JSONText (Path Univ ReportElem JSONText) (Maybe JSONText)
              | Peek_ReportElem_Markup (Path Univ ReportElem Markup) (Maybe Markup)
              | Peek_ReportElem_ReportElem (Path Univ ReportElem ReportElem) (Maybe ReportElem)
              | Peek_ReportElem_EUI (Path Univ ReportElem EUI) (Maybe EUI)
              | Peek_ReportElem_MEUI (Path Univ ReportElem MEUI) (Maybe MEUI)
              | Peek_ReportElem_MaybeImageFile (Path Univ ReportElem MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElem_ReportImage (Path Univ ReportElem ReportImage) (Maybe ReportImage)
              | Peek_ReportElem_ReportImages (Path Univ ReportElem ReportImages) (Maybe ReportImages)
              | Peek_ReportElem_ReportImageView (Path Univ ReportElem ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElem_SaneSizeImageSize (Path Univ ReportElem SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElem_Item (Path Univ ReportElem Item) (Maybe Item)
              | Peek_ReportElem_MIM (Path Univ ReportElem MIM) (Maybe MIM)
              | Peek_ReportElem_URI (Path Univ ReportElem URI) (Maybe URI)
              | Peek_ReportElem_Text (Path Univ ReportElem Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportItem {})) = let dopath pth = case pth of
                                                                       p@(Path_ReportElem_elemItem _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Item) :: Forest (Peek Univ Item)
                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Item of
                                                                                                                                                                                                            Peek_Item_String _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  Item
                                                                                                                                                                                                                                                                                                                  String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                            Peek_Item_Bool _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                                                                                                              Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                            Peek_Item_Double _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  Item
                                                                                                                                                                                                                                                                                                                  Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                            Peek_Item_Dimension _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        Item
                                                                                                                                                                                                                                                                                                                        Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                            Peek_Item_ImageCrop _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        Item
                                                                                                                                                                                                                                                                                                                        ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                                            Peek_Item_ImageSize _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        Item
                                                                                                                                                                                                                                                                                                                        ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                                            Peek_Item_Units _
                                                                                                                                                                                                                            _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                Item
                                                                                                                                                                                                                                                                                                                Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                            Peek_Item_ImageFile _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        Item
                                                                                                                                                                                                                                                                                                                        ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                                            Peek_Item_JSONText _
                                                                                                                                                                                                                               _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      Item
                                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                            Peek_Item_Markup _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  Item
                                                                                                                                                                                                                                                                                                                  Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                            Peek_Item_EUI _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            Item
                                                                                                                                                                                                                                                                                                            EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                                            Peek_Item_MEUI _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                                                                                                              MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                                            Peek_Item_MaybeImageFile _
                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                  Item
                                                                                                                                                                                                                                                                                                                                  MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                                            Peek_Item_ReportImage _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                            Item
                                                                                                                                                                                                                                                                                                                            ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                                                            Peek_Item_ReportImages _
                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                                                                                                                              ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                                                            Peek_Item_ReportImageView _
                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    Item
                                                                                                                                                                                                                                                                                                                                    ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                                            Peek_Item_SaneSizeImageSize _
                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                        Item
                                                                                                                                                                                                                                                                                                                                        SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                                            Peek_Item_Item _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                                                                                                              Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                                                            Peek_Item_MIM _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            Item
                                                                                                                                                                                                                                                                                                            MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                                                            Peek_Item_URI _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            Item
                                                                                                                                                                                                                                                                                                            URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                                            Peek_Item_Text _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportElem_elemItem (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              Item
                                                                                                                                                                                                                                                                                                              Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Item])
                                                                       _ -> []
                                                   in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Item) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportElem)
          peekTree (Proxy) (_s@(ReportParagraph {})) = let dopath pth = case pth of
                                                                            p@(Path_ReportElem_elemText _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                 Peek_Markup_JSONText _
                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportElem_elemText (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                 Peek_Markup_Markup _
                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportElem_elemText (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                         Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                 Peek_Markup_Text _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportElem_elemText (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                     Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                            _ -> []
                                                        in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportElem)
          peekTree (Proxy) (_s@(ReportUndecided {})) = mempty :: Forest (Peek Univ ReportElem)
          peekRow (Proxy) (_s@(ReportItem {})) = let dopath pth = case pth of
                                                                      p@(Path_ReportElem_elemItem _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Item])
                                                                      _ -> []
                                                  in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Item) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportElem]
          peekRow (Proxy) (_s@(ReportParagraph {})) = let dopath pth = case pth of
                                                                           p@(Path_ReportElem_elemText _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                           _ -> []
                                                       in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportElem]
          peekRow (Proxy) (_s@(ReportUndecided {})) = mempty :: [Peek Univ ReportElem]
instance PathStart Univ ReportElems
    where data Peek Univ ReportElems
              = Peek_ReportElems_String (Path Univ ReportElems String) (Maybe String)
              | Peek_ReportElems_Bool (Path Univ ReportElems Bool) (Maybe Bool)
              | Peek_ReportElems_Double (Path Univ ReportElems Double) (Maybe Double)
              | Peek_ReportElems_Dimension (Path Univ ReportElems Dimension) (Maybe Dimension)
              | Peek_ReportElems_ImageCrop (Path Univ ReportElems ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElems_ImageSize (Path Univ ReportElems ImageSize) (Maybe ImageSize)
              | Peek_ReportElems_Units (Path Univ ReportElems Units) (Maybe Units)
              | Peek_ReportElems_ImageFile (Path Univ ReportElems ImageFile) (Maybe ImageFile)
              | Peek_ReportElems_JSONText (Path Univ ReportElems JSONText) (Maybe JSONText)
              | Peek_ReportElems_Markup (Path Univ ReportElems Markup) (Maybe Markup)
              | Peek_ReportElems_ReportElem (Path Univ ReportElems ReportElem) (Maybe ReportElem)
              | Peek_ReportElems_ReportElems (Path Univ ReportElems ReportElems) (Maybe ReportElems)
              | Peek_ReportElems_EUI (Path Univ ReportElems EUI) (Maybe EUI)
              | Peek_ReportElems_MEUI (Path Univ ReportElems MEUI) (Maybe MEUI)
              | Peek_ReportElems_MaybeImageFile (Path Univ ReportElems MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportElems_ReportImage (Path Univ ReportElems ReportImage) (Maybe ReportImage)
              | Peek_ReportElems_ReportImages (Path Univ ReportElems ReportImages) (Maybe ReportImages)
              | Peek_ReportElems_ReportImageView (Path Univ ReportElems ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElems_SaneSizeImageSize (Path Univ ReportElems SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportElems_Item (Path Univ ReportElems Item) (Maybe Item)
              | Peek_ReportElems_MIM (Path Univ ReportElems MIM) (Maybe MIM)
              | Peek_ReportElems_URI (Path Univ ReportElems URI) (Maybe URI)
              | Peek_ReportElems_Text (Path Univ ReportElems Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportElem) :: Forest (Peek Univ ReportElem)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportElem of
                                                                                                                                                                            Peek_ReportElem_String _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                          ReportElem
                                                                                                                                                                                                                                                                          String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                            Peek_ReportElem_Bool _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                      ReportElem
                                                                                                                                                                                                                                                                      Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                            Peek_ReportElem_Double _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                          ReportElem
                                                                                                                                                                                                                                                                          Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                            Peek_ReportElem_Dimension _
                                                                                                                                                                                                      _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                                                Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                            Peek_ReportElem_ImageCrop _
                                                                                                                                                                                                      _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                                                ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                            Peek_ReportElem_ImageSize _
                                                                                                                                                                                                      _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                                                ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                            Peek_ReportElem_Units _
                                                                                                                                                                                                  _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                        ReportElem
                                                                                                                                                                                                                                                                        Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                            Peek_ReportElem_ImageFile _
                                                                                                                                                                                                      _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                                                ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                            Peek_ReportElem_JSONText _
                                                                                                                                                                                                     _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                              ReportElem
                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_ReportElem_Markup _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                          ReportElem
                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_ReportElem_ReportElem _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportElem) pk :: Path Univ
                                                                                                                                                                                                                                                                                  ReportElem
                                                                                                                                                                                                                                                                                  ReportElem)) (peekValue (Proxy :: Proxy ReportElem) pk)
                                                                                                                                                                            Peek_ReportElem_EUI _
                                                                                                                                                                                                _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                    ReportElem
                                                                                                                                                                                                                                                                    EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                            Peek_ReportElem_MEUI _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                      ReportElem
                                                                                                                                                                                                                                                                      MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                            Peek_ReportElem_MaybeImageFile _
                                                                                                                                                                                                           _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                          ReportElem
                                                                                                                                                                                                                                                                                          MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                            Peek_ReportElem_ReportImage _
                                                                                                                                                                                                        _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                    ReportElem
                                                                                                                                                                                                                                                                                    ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                            Peek_ReportElem_ReportImages _
                                                                                                                                                                                                         _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                      ReportElem
                                                                                                                                                                                                                                                                                      ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                            Peek_ReportElem_ReportImageView _
                                                                                                                                                                                                            _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                            ReportElem
                                                                                                                                                                                                                                                                                            ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                            Peek_ReportElem_SaneSizeImageSize _
                                                                                                                                                                                                              _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                ReportElem
                                                                                                                                                                                                                                                                                                SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                            Peek_ReportElem_Item _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                      ReportElem
                                                                                                                                                                                                                                                                      Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                            Peek_ReportElem_MIM _
                                                                                                                                                                                                _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                    ReportElem
                                                                                                                                                                                                                                                                    MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                            Peek_ReportElem_URI _
                                                                                                                                                                                                _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                    ReportElem
                                                                                                                                                                                                                                                                    URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                            Peek_ReportElem_Text _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                      ReportElem
                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportElem])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportElem) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportElems)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportElem])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportElem) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportElems]
instance PathStart Univ ReportFlags
    where data Peek Univ ReportFlags
              = Peek_ReportFlags_String (Path Univ ReportFlags String) (Maybe String)
              | Peek_ReportFlags_Bool (Path Univ ReportFlags Bool) (Maybe Bool)
              | Peek_ReportFlags_JSONText (Path Univ ReportFlags JSONText) (Maybe JSONText)
              | Peek_ReportFlags_ReportFlags (Path Univ ReportFlags ReportFlags) (Maybe ReportFlags)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportFlags {})) = let dopath pth = case pth of
                                                                        p@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Bool) :: Forest (Peek Univ Bool)
                                                                                                                                    in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Bool of
                                                                                                                                                                                                                         Peek_Bool_String _
                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportFlags_hideEmptyItemFields (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Bool
                                                                                                                                                                                                                                                                                                                                           String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                         Peek_Bool_Bool _
                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportFlags_hideEmptyItemFields (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Bool
                                                                                                                                                                                                                                                                                                                                       Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                         Peek_Bool_JSONText _
                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportFlags_hideEmptyItemFields (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Bool
                                                                                                                                                                                                                                                                                                                                               JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Bool])
                                                                        _ -> []
                                                    in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportFlags)
          peekRow (Proxy) (_s@(ReportFlags {})) = let dopath pth = case pth of
                                                                       p@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Bool])
                                                                       _ -> []
                                                   in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportFlags]
instance PathStart Univ ReportIntendedUse
    where data Peek Univ ReportIntendedUse
              = Peek_ReportIntendedUse_String (Path Univ ReportIntendedUse String) (Maybe String)
              | Peek_ReportIntendedUse_JSONText (Path Univ ReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_ReportIntendedUse_ReportIntendedUse (Path Univ ReportIntendedUse ReportIntendedUse) (Maybe ReportIntendedUse)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_ReportIntendedUse_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                                        in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                             Peek_String_String _
                                                                                                                                                                                                                _ -> peekCons (Path_ReportIntendedUse_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                        String
                                                                                                                                                                                                                                                                                                        String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                             Peek_String_JSONText _
                                                                                                                                                                                                                  _ -> peekCons (Path_ReportIntendedUse_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            String
                                                                                                                                                                                                                                                                                                            JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportIntendedUse)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_ReportIntendedUse_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportIntendedUse]
instance PathStart Univ ReportStandard
    where data Peek Univ ReportStandard
              = Peek_ReportStandard_Int (Path Univ ReportStandard Int) (Maybe Int)
              | Peek_ReportStandard_ReportStandard (Path Univ ReportStandard ReportStandard) (Maybe ReportStandard)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportStandard {})) = let dopath pth = case pth of
                                                                           p@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Int) :: Forest (Peek Univ Int)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Int of
                                                                                                                                                                                                                            Peek_Int_Int _
                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportStandard_unReportStandard (peekPath (Proxy :: Proxy Int) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Int
                                                                                                                                                                                                                                                                                                                                       Int)) (peekValue (Proxy :: Proxy Int) pk)) wtree)) (toListOf (toLens p) _s :: [Int])
                                                                           _ -> []
                                                       in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Int) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportStandard)
          peekRow (Proxy) (_s@(ReportStandard {})) = let dopath pth = case pth of
                                                                          p@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Int])
                                                                          _ -> []
                                                      in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Int) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportStandard]
instance PathStart Univ ReportStatus
    where data Peek Univ ReportStatus
              = Peek_ReportStatus_String (Path Univ ReportStatus String) (Maybe String)
              | Peek_ReportStatus_JSONText (Path Univ ReportStatus JSONText) (Maybe JSONText)
              | Peek_ReportStatus_ReportStatus (Path Univ ReportStatus ReportStatus) (Maybe ReportStatus)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_ReportStatus_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                        Peek_String_String _
                                                                                                                                                                                                           _ -> peekCons (Path_ReportStatus_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                              String
                                                                                                                                                                                                                                                                                              String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                        Peek_String_JSONText _
                                                                                                                                                                                                             _ -> peekCons (Path_ReportStatus_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                                                  JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportStatus)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_ReportStatus_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportStatus]
instance PathStart Univ ReportValueApproachInfo
    where data Peek Univ ReportValueApproachInfo
              = Peek_ReportValueApproachInfo_JSONText (Path Univ ReportValueApproachInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueApproachInfo_Markup (Path Univ ReportValueApproachInfo Markup) (Maybe Markup)
              | Peek_ReportValueApproachInfo_ReportValueApproachInfo (Path Univ ReportValueApproachInfo ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportValueApproachInfo_Text (Path Univ ReportValueApproachInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportValueApproachInfo {})) = mconcat [let dopath pth = case pth of
                                                                                             p@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                                         in Node (peekCons p (if null wtree
                                                                                                                                                                                               then Just a
                                                                                                                                                                                               else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                 Markup of
                                                                                                                                                                                                                                     Peek_Markup_JSONText _
                                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                     Peek_Markup_Markup _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachName (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                                         Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                     Peek_Markup_Text _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                                     Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                             _ -> []
                                                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                        let dopath pth = case pth of
                                                                                             p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                                                in Node (peekCons p (if null wtree
                                                                                                                                                                                                      then Just a
                                                                                                                                                                                                      else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                        Markup of
                                                                                                                                                                                                                                            Peek_Markup_JSONText _
                                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachDescription (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                            Peek_Markup_Markup _
                                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachDescription (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                            Peek_Markup_Text _
                                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportValueApproachInfo_reportValueApproachDescription (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                             _ -> []
                                                                         in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ ReportValueApproachInfo)
          peekRow (Proxy) (_s@(ReportValueApproachInfo {})) = mconcat [let dopath pth = case pth of
                                                                                            p@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                            _ -> []
                                                                        in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                       let dopath pth = case pth of
                                                                                            p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                            _ -> []
                                                                        in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: [Peek Univ ReportValueApproachInfo]
instance PathStart Univ ReportValueTypeInfo
    where data Peek Univ ReportValueTypeInfo
              = Peek_ReportValueTypeInfo_JSONText (Path Univ ReportValueTypeInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueTypeInfo_Markup (Path Univ ReportValueTypeInfo Markup) (Maybe Markup)
              | Peek_ReportValueTypeInfo_ReportValueTypeInfo (Path Univ ReportValueTypeInfo ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportValueTypeInfo_Text (Path Univ ReportValueTypeInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportValueTypeInfo {})) = mconcat [let dopath pth = case pth of
                                                                                         p@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                             in Node (peekCons p (if null wtree
                                                                                                                                                                                   then Just a
                                                                                                                                                                                   else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                         Peek_Markup_JSONText _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                         Peek_Markup_Markup _
                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeName (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                         Peek_Markup_Text _
                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                         _ -> []
                                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                    let dopath pth = case pth of
                                                                                         p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                                    in Node (peekCons p (if null wtree
                                                                                                                                                                                          then Just a
                                                                                                                                                                                          else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                                Peek_Markup_JSONText _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDescription (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                Peek_Markup_Markup _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDescription (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                                   Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                Peek_Markup_Text _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDescription (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                                               Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                         _ -> []
                                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                    let dopath pth = case pth of
                                                                                         p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                                   in Node (peekCons p (if null wtree
                                                                                                                                                                                         then Just a
                                                                                                                                                                                         else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                               Peek_Markup_JSONText _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDefinition (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                               Peek_Markup_Markup _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDefinition (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                               Peek_Markup_Text _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportValueTypeInfo_reportValueTypeDefinition (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                         _ -> []
                                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ ReportValueTypeInfo)
          peekRow (Proxy) (_s@(ReportValueTypeInfo {})) = mconcat [let dopath pth = case pth of
                                                                                        p@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                        _ -> []
                                                                    in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                   let dopath pth = case pth of
                                                                                        p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                        _ -> []
                                                                    in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                   let dopath pth = case pth of
                                                                                        p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                        _ -> []
                                                                    in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) []] :: [Peek Univ ReportValueTypeInfo]
instance PathStart Univ EUI
    where data Peek Univ EUI
              = Peek_EUI_ImageFile (Path Univ EUI ImageFile) (Maybe ImageFile) | Peek_EUI_EUI (Path Univ EUI EUI) (Maybe EUI) | Peek_EUI_URI (Path Univ EUI URI) (Maybe URI)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(Left _)) = let dopath pth = case pth of
                                                                p@(Path_Left _wp) -> map (\a -> let wtree = peekTree Proxy (a :: URI) :: Forest (Peek Univ URI)
                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ URI of
                                                                                                                                                                                      Peek_URI_URI _
                                                                                                                                                                                                   _ -> peekCons (Path_Left (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                      URI
                                                                                                                                                                                                                                                                      URI)) (peekValue (Proxy :: Proxy URI) pk)) wtree)) (toListOf (toLens p) _s :: [URI])
                                                                _ -> []
                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy URI) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ EUI)
          peekTree (Proxy) (_s@(Right _)) = let dopath pth = case pth of
                                                                 p@(Path_Right _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ImageFile) :: Forest (Peek Univ ImageFile)
                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ImageFile of
                                                                                                                                                                                        Peek_ImageFile_ImageFile _
                                                                                                                                                                                                                 _ -> peekCons (Path_Right (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                           ImageFile
                                                                                                                                                                                                                                                                                           ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)) wtree)) (toListOf (toLens p) _s :: [ImageFile])
                                                                 _ -> []
                                             in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageFile) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ EUI)
          peekRow (Proxy) (_s@(Left _)) = let dopath pth = case pth of
                                                               p@(Path_Left _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [URI])
                                                               _ -> []
                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy URI) (\pth r -> dopath pth ++ r) [] :: [Peek Univ EUI]
          peekRow (Proxy) (_s@(Right _)) = let dopath pth = case pth of
                                                                p@(Path_Right _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ImageFile])
                                                                _ -> []
                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageFile) (\pth r -> dopath pth ++ r) [] :: [Peek Univ EUI]
instance PathStart Univ MEUI
    where data Peek Univ MEUI
              = Peek_MEUI_ImageFile (Path Univ MEUI ImageFile) (Maybe ImageFile)
              | Peek_MEUI_EUI (Path Univ MEUI EUI) (Maybe EUI)
              | Peek_MEUI_MEUI (Path Univ MEUI MEUI) (Maybe MEUI)
              | Peek_MEUI_URI (Path Univ MEUI URI) (Maybe URI)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Just _wp) -> map (\a -> let wtree = peekTree Proxy (a :: EUI) :: Forest (Peek Univ EUI)
                                                                                      in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ EUI of
                                                                                                                                                                           Peek_EUI_ImageFile _
                                                                                                                                                                                              _ -> peekCons (Path_Just (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                       EUI
                                                                                                                                                                                                                                                                       ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                           Peek_EUI_EUI _
                                                                                                                                                                                        _ -> peekCons (Path_Just (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                           EUI
                                                                                                                                                                                                                                                           EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                           Peek_EUI_URI _
                                                                                                                                                                                        _ -> peekCons (Path_Just (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                           EUI
                                                                                                                                                                                                                                                           URI)) (peekValue (Proxy :: Proxy URI) pk)) wtree)) (toListOf (toLens p) _s :: [EUI])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy EUI) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MEUI)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Just _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [EUI])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy EUI) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MEUI]
instance PathStart Univ MaybeImageFile
    where data Peek Univ MaybeImageFile
              = Peek_MaybeImageFile_String (Path Univ MaybeImageFile String) (Maybe String)
              | Peek_MaybeImageFile_JSONText (Path Univ MaybeImageFile JSONText) (Maybe JSONText)
              | Peek_MaybeImageFile_MaybeImageFile (Path Univ MaybeImageFile MaybeImageFile) (Maybe MaybeImageFile)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_MaybeImageFile_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                          Peek_String_String _
                                                                                                                                                                                                             _ -> peekCons (Path_MaybeImageFile_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                  String
                                                                                                                                                                                                                                                                                                  String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                          Peek_String_JSONText _
                                                                                                                                                                                                               _ -> peekCons (Path_MaybeImageFile_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MaybeImageFile)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_MaybeImageFile_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MaybeImageFile]
instance PathStart Univ ReportImage
    where data Peek Univ ReportImage
              = Peek_ReportImage_String (Path Univ ReportImage String) (Maybe String)
              | Peek_ReportImage_Bool (Path Univ ReportImage Bool) (Maybe Bool)
              | Peek_ReportImage_Double (Path Univ ReportImage Double) (Maybe Double)
              | Peek_ReportImage_Dimension (Path Univ ReportImage Dimension) (Maybe Dimension)
              | Peek_ReportImage_ImageCrop (Path Univ ReportImage ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImage_ImageSize (Path Univ ReportImage ImageSize) (Maybe ImageSize)
              | Peek_ReportImage_Units (Path Univ ReportImage Units) (Maybe Units)
              | Peek_ReportImage_ImageFile (Path Univ ReportImage ImageFile) (Maybe ImageFile)
              | Peek_ReportImage_JSONText (Path Univ ReportImage JSONText) (Maybe JSONText)
              | Peek_ReportImage_Markup (Path Univ ReportImage Markup) (Maybe Markup)
              | Peek_ReportImage_EUI (Path Univ ReportImage EUI) (Maybe EUI)
              | Peek_ReportImage_MEUI (Path Univ ReportImage MEUI) (Maybe MEUI)
              | Peek_ReportImage_MaybeImageFile (Path Univ ReportImage MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImage_ReportImage (Path Univ ReportImage ReportImage) (Maybe ReportImage)
              | Peek_ReportImage_ReportImageView (Path Univ ReportImage ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImage_SaneSizeImageSize (Path Univ ReportImage SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImage_URI (Path Univ ReportImage URI) (Maybe URI)
              | Peek_ReportImage_Text (Path Univ ReportImage Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_ReportImage_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportImageView) :: Forest (Peek Univ ReportImageView)
                                                                                                  in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportImageView of
                                                                                                                                                                                       Peek_ReportImageView_String _
                                                                                                                                                                                                                   _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                     ReportImageView
                                                                                                                                                                                                                                                                                                     String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                       Peek_ReportImageView_Bool _
                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                                                 Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                       Peek_ReportImageView_Double _
                                                                                                                                                                                                                   _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                     ReportImageView
                                                                                                                                                                                                                                                                                                     Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                       Peek_ReportImageView_Dimension _
                                                                                                                                                                                                                      _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                                                           Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                       Peek_ReportImageView_ImageCrop _
                                                                                                                                                                                                                      _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                                                           ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                       Peek_ReportImageView_ImageSize _
                                                                                                                                                                                                                      _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                                                           ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                       Peek_ReportImageView_Units _
                                                                                                                                                                                                                  _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                   ReportImageView
                                                                                                                                                                                                                                                                                                   Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                       Peek_ReportImageView_ImageFile _
                                                                                                                                                                                                                      _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                                                           ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                       Peek_ReportImageView_JSONText _
                                                                                                                                                                                                                     _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                         ReportImageView
                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                       Peek_ReportImageView_Markup _
                                                                                                                                                                                                                   _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                     ReportImageView
                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                       Peek_ReportImageView_EUI _
                                                                                                                                                                                                                _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                                               EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                       Peek_ReportImageView_MEUI _
                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                                                 MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                       Peek_ReportImageView_MaybeImageFile _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                     ReportImageView
                                                                                                                                                                                                                                                                                                                     MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                       Peek_ReportImageView_ReportImageView _
                                                                                                                                                                                                                            _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                       ReportImageView
                                                                                                                                                                                                                                                                                                                       ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                       Peek_ReportImageView_SaneSizeImageSize _
                                                                                                                                                                                                                              _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                           ReportImageView
                                                                                                                                                                                                                                                                                                                           SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                       Peek_ReportImageView_URI _
                                                                                                                                                                                                                _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                               ReportImageView
                                                                                                                                                                                                                                                                                               URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                       Peek_ReportImageView_Text _
                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImage_View (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                 ReportImageView
                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportImageView])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImageView) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportImage)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_ReportImage_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportImageView])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImageView) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportImage]
instance PathStart Univ ReportImages
    where data Peek Univ ReportImages
              = Peek_ReportImages_String (Path Univ ReportImages String) (Maybe String)
              | Peek_ReportImages_Bool (Path Univ ReportImages Bool) (Maybe Bool)
              | Peek_ReportImages_Double (Path Univ ReportImages Double) (Maybe Double)
              | Peek_ReportImages_Dimension (Path Univ ReportImages Dimension) (Maybe Dimension)
              | Peek_ReportImages_ImageCrop (Path Univ ReportImages ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImages_ImageSize (Path Univ ReportImages ImageSize) (Maybe ImageSize)
              | Peek_ReportImages_Units (Path Univ ReportImages Units) (Maybe Units)
              | Peek_ReportImages_ImageFile (Path Univ ReportImages ImageFile) (Maybe ImageFile)
              | Peek_ReportImages_JSONText (Path Univ ReportImages JSONText) (Maybe JSONText)
              | Peek_ReportImages_Markup (Path Univ ReportImages Markup) (Maybe Markup)
              | Peek_ReportImages_EUI (Path Univ ReportImages EUI) (Maybe EUI)
              | Peek_ReportImages_MEUI (Path Univ ReportImages MEUI) (Maybe MEUI)
              | Peek_ReportImages_MaybeImageFile (Path Univ ReportImages MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImages_ReportImage (Path Univ ReportImages ReportImage) (Maybe ReportImage)
              | Peek_ReportImages_ReportImages (Path Univ ReportImages ReportImages) (Maybe ReportImages)
              | Peek_ReportImages_ReportImageView (Path Univ ReportImages ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImages_SaneSizeImageSize (Path Univ ReportImages SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImages_URI (Path Univ ReportImages URI) (Maybe URI)
              | Peek_ReportImages_Text (Path Univ ReportImages Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_At _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportImage) :: Forest (Peek Univ ReportImage)
                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportImage of
                                                                                                                                                                            Peek_ReportImage_String _
                                                                                                                                                                                                    _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                           ReportImage
                                                                                                                                                                                                                                                                           String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                            Peek_ReportImage_Bool _
                                                                                                                                                                                                  _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                       ReportImage
                                                                                                                                                                                                                                                                       Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                            Peek_ReportImage_Double _
                                                                                                                                                                                                    _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                           ReportImage
                                                                                                                                                                                                                                                                           Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                            Peek_ReportImage_Dimension _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                 ReportImage
                                                                                                                                                                                                                                                                                 Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                            Peek_ReportImage_ImageCrop _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                 ReportImage
                                                                                                                                                                                                                                                                                 ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                            Peek_ReportImage_ImageSize _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                 ReportImage
                                                                                                                                                                                                                                                                                 ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                            Peek_ReportImage_Units _
                                                                                                                                                                                                   _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                         ReportImage
                                                                                                                                                                                                                                                                         Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                            Peek_ReportImage_ImageFile _
                                                                                                                                                                                                       _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                 ReportImage
                                                                                                                                                                                                                                                                                 ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                            Peek_ReportImage_JSONText _
                                                                                                                                                                                                      _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                               ReportImage
                                                                                                                                                                                                                                                                               JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                            Peek_ReportImage_Markup _
                                                                                                                                                                                                    _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                           ReportImage
                                                                                                                                                                                                                                                                           Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                            Peek_ReportImage_EUI _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                     ReportImage
                                                                                                                                                                                                                                                                     EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                            Peek_ReportImage_MEUI _
                                                                                                                                                                                                  _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                       ReportImage
                                                                                                                                                                                                                                                                       MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                            Peek_ReportImage_MaybeImageFile _
                                                                                                                                                                                                            _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                           ReportImage
                                                                                                                                                                                                                                                                                           MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                            Peek_ReportImage_ReportImage _
                                                                                                                                                                                                         _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                     ReportImage
                                                                                                                                                                                                                                                                                     ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                            Peek_ReportImage_ReportImageView _
                                                                                                                                                                                                             _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                             ReportImage
                                                                                                                                                                                                                                                                                             ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                            Peek_ReportImage_SaneSizeImageSize _
                                                                                                                                                                                                               _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                 ReportImage
                                                                                                                                                                                                                                                                                                 SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                            Peek_ReportImage_URI _
                                                                                                                                                                                                 _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                     ReportImage
                                                                                                                                                                                                                                                                     URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                            Peek_ReportImage_Text _
                                                                                                                                                                                                  _ -> peekCons (Path_At _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                       ReportImage
                                                                                                                                                                                                                                                                       Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportImage])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImage) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportImages)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_At _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportImage])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImage) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportImages]
instance PathStart Univ ReadOnlyFilePath
    where data Peek Univ ReadOnlyFilePath
              = Peek_ReadOnlyFilePath_String (Path Univ ReadOnlyFilePath String) (Maybe String)
              | Peek_ReadOnlyFilePath_JSONText (Path Univ ReadOnlyFilePath JSONText) (Maybe JSONText)
              | Peek_ReadOnlyFilePath_ReadOnlyFilePath (Path Univ ReadOnlyFilePath ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: String) :: Forest (Peek Univ String)
                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ String of
                                                                                                                                                                                            Peek_String_String _
                                                                                                                                                                                                               _ -> peekCons (Path_ReadOnlyFilePath_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                      String
                                                                                                                                                                                                                                                                                                      String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                            Peek_String_JSONText _
                                                                                                                                                                                                                 _ -> peekCons (Path_ReadOnlyFilePath_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                          String
                                                                                                                                                                                                                                                                                                          JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [String])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReadOnlyFilePath)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [String])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy String) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReadOnlyFilePath]
instance PathStart Univ ReportImageView
    where data Peek Univ ReportImageView
              = Peek_ReportImageView_String (Path Univ ReportImageView String) (Maybe String)
              | Peek_ReportImageView_Bool (Path Univ ReportImageView Bool) (Maybe Bool)
              | Peek_ReportImageView_Double (Path Univ ReportImageView Double) (Maybe Double)
              | Peek_ReportImageView_Dimension (Path Univ ReportImageView Dimension) (Maybe Dimension)
              | Peek_ReportImageView_ImageCrop (Path Univ ReportImageView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImageView_ImageSize (Path Univ ReportImageView ImageSize) (Maybe ImageSize)
              | Peek_ReportImageView_Units (Path Univ ReportImageView Units) (Maybe Units)
              | Peek_ReportImageView_ImageFile (Path Univ ReportImageView ImageFile) (Maybe ImageFile)
              | Peek_ReportImageView_JSONText (Path Univ ReportImageView JSONText) (Maybe JSONText)
              | Peek_ReportImageView_Markup (Path Univ ReportImageView Markup) (Maybe Markup)
              | Peek_ReportImageView_EUI (Path Univ ReportImageView EUI) (Maybe EUI)
              | Peek_ReportImageView_MEUI (Path Univ ReportImageView MEUI) (Maybe MEUI)
              | Peek_ReportImageView_MaybeImageFile (Path Univ ReportImageView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportImageView_ReportImageView (Path Univ ReportImageView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImageView_SaneSizeImageSize (Path Univ ReportImageView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportImageView_URI (Path Univ ReportImageView URI) (Maybe URI)
              | Peek_ReportImageView_Text (Path Univ ReportImageView Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportImageView {})) = mconcat [let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picSize _wp) -> map (\a -> let wtree = peekTree Proxy (a :: SaneSizeImageSize) :: Forest (Peek Univ SaneSizeImageSize)
                                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                           SaneSizeImageSize of
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_String _
                                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                       String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Double _
                                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                       Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Dimension _
                                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                             Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_ImageSize _
                                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                             ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_Units _
                                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                     Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_JSONText _
                                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                               Peek_SaneSizeImageSize_SaneSizeImageSize _
                                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportImageView__picSize (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                             SaneSizeImageSize
                                                                                                                                                                                                                                                                                                                                                                             SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)) wtree)) (toListOf (toLens p) _s :: [SaneSizeImageSize])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy SaneSizeImageSize) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picCrop _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ImageCrop) :: Forest (Peek Univ ImageCrop)
                                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                           ImageCrop of
                                                                                                                                                                                                                               Peek_ImageCrop_ImageCrop _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportImageView__picCrop (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     ImageCrop
                                                                                                                                                                                                                                                                                                                                                     ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)) wtree)) (toListOf (toLens p) _s :: [ImageCrop])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageCrop) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picCaption _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                  Peek_Markup_JSONText _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportImageView__picCaption (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                  Peek_Markup_Markup _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportImageView__picCaption (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  Markup
                                                                                                                                                                                                                                                                                                                                                  Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                  Peek_Markup_Text _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportImageView__picCaption (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              Markup
                                                                                                                                                                                                                                                                                                                                              Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picOriginal _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MEUI) :: Forest (Peek Univ MEUI)
                                                                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                               MEUI of
                                                                                                                                                                                                                                   Peek_MEUI_ImageFile _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportImageView__picOriginal (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        MEUI
                                                                                                                                                                                                                                                                                                                                                        ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                                                                   Peek_MEUI_EUI _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImageView__picOriginal (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            MEUI
                                                                                                                                                                                                                                                                                                                                            EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                                                                   Peek_MEUI_MEUI _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportImageView__picOriginal (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              MEUI
                                                                                                                                                                                                                                                                                                                                              MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                                                                   Peek_MEUI_URI _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImageView__picOriginal (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            MEUI
                                                                                                                                                                                                                                                                                                                                            URI)) (peekValue (Proxy :: Proxy URI) pk)) wtree)) (toListOf (toLens p) _s :: [MEUI])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MEUI) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MaybeImageFile) :: Forest (Peek Univ MaybeImageFile)
                                                                                                                                                      in Node (peekCons p (if null wtree
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MaybeImageFile of
                                                                                                                                                                                                                  Peek_MaybeImageFile_String _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportImageView__picEditedDeprecated (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                   String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                  Peek_MaybeImageFile_JSONText _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportImageView__picEditedDeprecated (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                  Peek_MaybeImageFile_MaybeImageFile _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportImageView__picEditedDeprecated (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                   MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                   MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)) wtree)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MaybeImageFile) :: Forest (Peek Univ MaybeImageFile)
                                                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                      MaybeImageFile of
                                                                                                                                                                                                                                          Peek_MaybeImageFile_String _
                                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportImageView__picThumbDeprecated (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                          MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                          String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                                          Peek_MaybeImageFile_JSONText _
                                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportImageView__picThumbDeprecated (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                              MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                          Peek_MaybeImageFile_MaybeImageFile _
                                                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportImageView__picThumbDeprecated (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                          MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                                          MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)) wtree)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MaybeImageFile) :: Forest (Peek Univ MaybeImageFile)
                                                                                                                                                       in Node (peekCons p (if null wtree
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MaybeImageFile of
                                                                                                                                                                                                                   Peek_MaybeImageFile_String _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportImageView__picPrinterDeprecated (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                     String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                   Peek_MaybeImageFile_JSONText _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportImageView__picPrinterDeprecated (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                   Peek_MaybeImageFile_MaybeImageFile _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportImageView__picPrinterDeprecated (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                     MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)) wtree)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Bool) :: Forest (Peek Univ Bool)
                                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                  Bool of
                                                                                                                                                                                                                                      Peek_Bool_String _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportImageView__picMustEnlarge (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        Bool
                                                                                                                                                                                                                                                                                                                                                        String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                                      Peek_Bool_Bool _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportImageView__picMustEnlarge (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    Bool
                                                                                                                                                                                                                                                                                                                                                    Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                                      Peek_Bool_JSONText _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportImageView__picMustEnlarge (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                            Bool
                                                                                                                                                                                                                                                                                                                                                            JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Bool])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                                let dopath pth = case pth of
                                                                                     p@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MaybeImageFile) :: Forest (Peek Univ MaybeImageFile)
                                                                                                                                                        in Node (peekCons p (if null wtree
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MaybeImageFile of
                                                                                                                                                                                                                    Peek_MaybeImageFile_String _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportImageView__picEnlargedDeprecated (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                       String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                    Peek_MaybeImageFile_JSONText _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportImageView__picEnlargedDeprecated (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                    Peek_MaybeImageFile_MaybeImageFile _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportImageView__picEnlargedDeprecated (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                       MaybeImageFile
                                                                                                                                                                                                                                                                                                                                                                       MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)) wtree)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                     _ -> []
                                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ ReportImageView)
          peekRow (Proxy) (_s@(ReportImageView {})) = mconcat [let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picSize _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [SaneSizeImageSize])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy SaneSizeImageSize) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picCrop _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ImageCrop])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageCrop) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picCaption _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picOriginal _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MEUI])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MEUI) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Bool])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                               let dopath pth = case pth of
                                                                                    p@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MaybeImageFile])
                                                                                    _ -> []
                                                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeImageFile) (\pth r -> dopath pth ++ r) []] :: [Peek Univ ReportImageView]
instance PathStart Univ ReportView
    where data Peek Univ ReportView
              = Peek_ReportView_String (Path Univ ReportView String) (Maybe String)
              | Peek_ReportView_Int64 (Path Univ ReportView Int64) (Maybe Int64)
              | Peek_ReportView_Int (Path Univ ReportView Int) (Maybe Int)
              | Peek_ReportView_Bool (Path Univ ReportView Bool) (Maybe Bool)
              | Peek_ReportView_Double (Path Univ ReportView Double) (Maybe Double)
              | Peek_ReportView_Dimension (Path Univ ReportView Dimension) (Maybe Dimension)
              | Peek_ReportView_ImageCrop (Path Univ ReportView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportView_ImageSize (Path Univ ReportView ImageSize) (Maybe ImageSize)
              | Peek_ReportView_Units (Path Univ ReportView Units) (Maybe Units)
              | Peek_ReportView_ImageFile (Path Univ ReportView ImageFile) (Maybe ImageFile)
              | Peek_ReportView_Integer (Path Univ ReportView Integer) (Maybe Integer)
              | Peek_ReportView_JSONText (Path Univ ReportView JSONText) (Maybe JSONText)
              | Peek_ReportView_Markup (Path Univ ReportView Markup) (Maybe Markup)
              | Peek_ReportView_Permissions (Path Univ ReportView Permissions) (Maybe Permissions)
              | Peek_ReportView_UserIds (Path Univ ReportView UserIds) (Maybe UserIds)
              | Peek_ReportView_AbbrevPair (Path Univ ReportView AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportView_AbbrevPairs (Path Univ ReportView AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportView_Author (Path Univ ReportView Author) (Maybe Author)
              | Peek_ReportView_Authors (Path Univ ReportView Authors) (Maybe Authors)
              | Peek_ReportView_Branding (Path Univ ReportView Branding) (Maybe Branding)
              | Peek_ReportView_MarkupPair (Path Univ ReportView MarkupPair) (Maybe MarkupPair)
              | Peek_ReportView_MarkupPairs (Path Univ ReportView MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportView_Markups (Path Univ ReportView Markups) (Maybe Markups)
              | Peek_ReportView_MaybeReportIntendedUse (Path Univ ReportView MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportView_ReportElem (Path Univ ReportView ReportElem) (Maybe ReportElem)
              | Peek_ReportView_ReportElems (Path Univ ReportView ReportElems) (Maybe ReportElems)
              | Peek_ReportView_ReportFlags (Path Univ ReportView ReportFlags) (Maybe ReportFlags)
              | Peek_ReportView_ReportStandard (Path Univ ReportView ReportStandard) (Maybe ReportStandard)
              | Peek_ReportView_ReportStatus (Path Univ ReportView ReportStatus) (Maybe ReportStatus)
              | Peek_ReportView_ReportValueApproachInfo (Path Univ ReportView ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportView_ReportValueTypeInfo (Path Univ ReportView ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportView_EUI (Path Univ ReportView EUI) (Maybe EUI)
              | Peek_ReportView_MEUI (Path Univ ReportView MEUI) (Maybe MEUI)
              | Peek_ReportView_MaybeImageFile (Path Univ ReportView MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportView_ReportImage (Path Univ ReportView ReportImage) (Maybe ReportImage)
              | Peek_ReportView_ReportImages (Path Univ ReportView ReportImages) (Maybe ReportImages)
              | Peek_ReportView_ReadOnlyFilePath (Path Univ ReportView ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportView_ReportImageView (Path Univ ReportView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportView_ReportView (Path Univ ReportView ReportView) (Maybe ReportView)
              | Peek_ReportView_SaneSizeImageSize (Path Univ ReportView SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportView_Item (Path Univ ReportView Item) (Maybe Item)
              | Peek_ReportView_MIM (Path Univ ReportView MIM) (Maybe MIM)
              | Peek_ReportView_CIString (Path Univ ReportView CIString) (Maybe CIString)
              | Peek_ReportView_URI (Path Univ ReportView URI) (Maybe URI)
              | Peek_ReportView_Text (Path Univ ReportView Text) (Maybe Text)
              | Peek_ReportView_UserId (Path Univ ReportView UserId) (Maybe UserId)
              | Peek_ReportView_UUID (Path Univ ReportView UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportView {})) = mconcat [let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportFolder _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReadOnlyFilePath) :: Forest (Peek Univ ReadOnlyFilePath)
                                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                      ReadOnlyFilePath of
                                                                                                                                                                                                                          Peek_ReadOnlyFilePath_String _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportFolder (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 ReadOnlyFilePath
                                                                                                                                                                                                                                                                                                                                                 String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                          Peek_ReadOnlyFilePath_JSONText _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportFolder (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     ReadOnlyFilePath
                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                          Peek_ReadOnlyFilePath_ReadOnlyFilePath _
                                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportFolder (peekPath (Proxy :: Proxy ReadOnlyFilePath) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     ReadOnlyFilePath
                                                                                                                                                                                                                                                                                                                                                                     ReadOnlyFilePath)) (peekValue (Proxy :: Proxy ReadOnlyFilePath) pk)) wtree)) (toListOf (toLens p) _s :: [ReadOnlyFilePath])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReadOnlyFilePath) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                        Peek_Markup_JSONText _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                        Peek_Markup_Markup _
                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportName (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                   Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                        Peek_Markup_Text _
                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                               Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportDate _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                        Peek_Markup_JSONText _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportDate (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                        Peek_Markup_Markup _
                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportDate (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                   Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                        Peek_Markup_Text _
                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportDate (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                               Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportContractDate _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                           in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                                Peek_Markup_JSONText _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportContractDate (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                       JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                Peek_Markup_Markup _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportContractDate (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                Peek_Markup_Text _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportContractDate (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                               Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                  Peek_Markup_JSONText _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportInspectionDate (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                  Peek_Markup_Markup _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportInspectionDate (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                  Peek_Markup_Text _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportInspectionDate (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             Markup of
                                                                                                                                                                                                                                 Peek_Markup_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportEffectiveDate (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_Markup_Markup _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportEffectiveDate (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_Markup_Text _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportEffectiveDate (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportAuthors _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Authors) :: Forest (Peek Univ Authors)
                                                                                                                                      in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Authors of
                                                                                                                                                                                                                           Peek_Authors_JSONText _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportAuthors (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              Authors
                                                                                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                           Peek_Authors_Markup _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportAuthors (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          Authors
                                                                                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                           Peek_Authors_Author _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportAuthors (peekPath (Proxy :: Proxy Author) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          Authors
                                                                                                                                                                                                                                                                                                                                          Author)) (peekValue (Proxy :: Proxy Author) pk)
                                                                                                                                                                                                                           Peek_Authors_Authors _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportAuthors (peekPath (Proxy :: Proxy Authors) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            Authors
                                                                                                                                                                                                                                                                                                                                            Authors)) (peekValue (Proxy :: Proxy Authors) pk)
                                                                                                                                                                                                                           Peek_Authors_Text _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportAuthors (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      Authors
                                                                                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Authors])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Authors) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPreparer _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                            Peek_Markup_JSONText _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportPreparer (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                               JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                            Peek_Markup_Markup _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportPreparer (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                            Peek_Markup_Text _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportPreparer (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                               Peek_Markup_JSONText _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportPreparerEIN (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                               Peek_Markup_Markup _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportPreparerEIN (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                               Peek_Markup_Text _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportPreparerEIN (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                               Markup of
                                                                                                                                                                                                                                   Peek_Markup_JSONText _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportPreparerAddress (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                   Peek_Markup_Markup _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportPreparerAddress (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                   Peek_Markup_Text _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportPreparerAddress (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             Markup of
                                                                                                                                                                                                                                 Peek_Markup_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportPreparerEMail (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_Markup_Markup _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportPreparerEMail (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_Markup_Text _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportPreparerEMail (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                               Markup of
                                                                                                                                                                                                                                   Peek_Markup_JSONText _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportPreparerWebsite (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                   Peek_Markup_Markup _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportPreparerWebsite (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                   Peek_Markup_Text _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportPreparerWebsite (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> let wtree = peekTree Proxy (a :: AbbrevPairs) :: Forest (Peek Univ AbbrevPairs)
                                                                                                                                      in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ AbbrevPairs of
                                                                                                                                                                                                                           Peek_AbbrevPairs_JSONText _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  AbbrevPairs
                                                                                                                                                                                                                                                                                                                                                  JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                           Peek_AbbrevPairs_Markup _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              AbbrevPairs
                                                                                                                                                                                                                                                                                                                                              Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                           Peek_AbbrevPairs_AbbrevPair _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy AbbrevPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                      AbbrevPairs
                                                                                                                                                                                                                                                                                                                                                      AbbrevPair)) (peekValue (Proxy :: Proxy AbbrevPair) pk)
                                                                                                                                                                                                                           Peek_AbbrevPairs_AbbrevPairs _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy AbbrevPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        AbbrevPairs
                                                                                                                                                                                                                                                                                                                                                        AbbrevPairs)) (peekValue (Proxy :: Proxy AbbrevPairs) pk)
                                                                                                                                                                                                                           Peek_AbbrevPairs_CIString _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  AbbrevPairs
                                                                                                                                                                                                                                                                                                                                                  CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                                                                           Peek_AbbrevPairs_Text _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportAbbrevs (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          AbbrevPairs
                                                                                                                                                                                                                                                                                                                                          Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [AbbrevPairs])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy AbbrevPairs) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportTitle _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                    in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                         Peek_Markup_JSONText _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportTitle (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                         Peek_Markup_Markup _
                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportView__reportTitle (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                         Peek_Markup_Text _
                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportView__reportTitle (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportHeader _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                          Peek_Markup_JSONText _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportHeader (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                          Peek_Markup_Markup _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportHeader (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                          Peek_Markup_Text _
                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportHeader (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportFooter _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                          Peek_Markup_JSONText _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportFooter (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                          Peek_Markup_Markup _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportFooter (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                          Peek_Markup_Text _
                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportFooter (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MaybeReportIntendedUse) :: Forest (Peek Univ MaybeReportIntendedUse)
                                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                           MaybeReportIntendedUse of
                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_String _
                                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportIntendedUse (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                 MaybeReportIntendedUse
                                                                                                                                                                                                                                                                                                                                                                 String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_JSONText _
                                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportIntendedUse (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     MaybeReportIntendedUse
                                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                               Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _
                                                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportIntendedUse (peekPath (Proxy :: Proxy MaybeReportIntendedUse) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                                 MaybeReportIntendedUse
                                                                                                                                                                                                                                                                                                                                                                                                 MaybeReportIntendedUse)) (peekValue (Proxy :: Proxy MaybeReportIntendedUse) pk)) wtree)) (toListOf (toLens p) _s :: [MaybeReportIntendedUse])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeReportIntendedUse) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportValueTypeInfo) :: Forest (Peek Univ ReportValueTypeInfo)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             ReportValueTypeInfo of
                                                                                                                                                                                                                                 Peek_ReportValueTypeInfo_JSONText _
                                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportValueTypeInfo (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                      ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                      JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_ReportValueTypeInfo_Markup _
                                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportValueTypeInfo (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                  ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                  Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_ReportValueTypeInfo_ReportValueTypeInfo _
                                                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportValueTypeInfo (peekPath (Proxy :: Proxy ReportValueTypeInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                            ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                                                            ReportValueTypeInfo)) (peekValue (Proxy :: Proxy ReportValueTypeInfo) pk)
                                                                                                                                                                                                                                 Peek_ReportValueTypeInfo_Text _
                                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportValueTypeInfo (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                              ReportValueTypeInfo
                                                                                                                                                                                                                                                                                                                                                              Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportValueTypeInfo])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportValueTypeInfo) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportValueApproachInfo) :: Forest (Peek Univ ReportValueApproachInfo)
                                                                                                                                                in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                 ReportValueApproachInfo of
                                                                                                                                                                                                                                     Peek_ReportValueApproachInfo_JSONText _
                                                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportValueApproachInfo (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                  ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                  JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                     Peek_ReportValueApproachInfo_Markup _
                                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportValueApproachInfo (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                              ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                              Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                     Peek_ReportValueApproachInfo_ReportValueApproachInfo _
                                                                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportView__reportValueApproachInfo (peekPath (Proxy :: Proxy ReportValueApproachInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                                                ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                                                                ReportValueApproachInfo)) (peekValue (Proxy :: Proxy ReportValueApproachInfo) pk)
                                                                                                                                                                                                                                     Peek_ReportValueApproachInfo_Text _
                                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportValueApproachInfo (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                          ReportValueApproachInfo
                                                                                                                                                                                                                                                                                                                                                                          Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportValueApproachInfo])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportValueApproachInfo) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportClientName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                              Peek_Markup_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportClientName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                              Peek_Markup_Markup _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportClientName (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                               Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                              Peek_Markup_Text _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportClientName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportClientAddress _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             Markup of
                                                                                                                                                                                                                                 Peek_Markup_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportClientAddress (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_Markup_Markup _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportClientAddress (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_Markup_Text _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportClientAddress (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                  Peek_Markup_JSONText _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportClientGreeting (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                  Peek_Markup_Markup _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportClientGreeting (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                  Peek_Markup_Text _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportClientGreeting (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                             in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                              Markup of
                                                                                                                                                                                                                                  Peek_Markup_JSONText _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportItemsOwnerFull (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                  Peek_Markup_Markup _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportItemsOwnerFull (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Markup
                                                                                                                                                                                                                                                                                                                                                       Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                  Peek_Markup_Text _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportItemsOwnerFull (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                              Peek_Markup_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportItemsOwner (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                              Peek_Markup_Markup _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportItemsOwner (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                               Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                              Peek_Markup_Text _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportItemsOwner (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportBriefItems _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                              Peek_Markup_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBriefItems (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                              Peek_Markup_Markup _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportBriefItems (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                               Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                              Peek_Markup_Text _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportBriefItems (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                  Markup of
                                                                                                                                                                                                                                      Peek_Markup_JSONText _
                                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportInspectionLocation (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                   Markup
                                                                                                                                                                                                                                                                                                                                                                   JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                      Peek_Markup_Markup _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportInspectionLocation (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                               Markup
                                                                                                                                                                                                                                                                                                                                                               Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                      Peek_Markup_Text _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportInspectionLocation (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Markup
                                                                                                                                                                                                                                                                                                                                                           Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportBody _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportElems) :: Forest (Peek Univ ReportElems)
                                                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportElems of
                                                                                                                                                                                                                        Peek_ReportElems_String _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                                                                                                                        String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Bool _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    ReportElems
                                                                                                                                                                                                                                                                                                                                    Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Double _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                                                                                                                        Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Dimension _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              ReportElems
                                                                                                                                                                                                                                                                                                                                              Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ImageCrop _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              ReportElems
                                                                                                                                                                                                                                                                                                                                              ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ImageSize _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              ReportElems
                                                                                                                                                                                                                                                                                                                                              ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Units _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      ReportElems
                                                                                                                                                                                                                                                                                                                                      Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ImageFile _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              ReportElems
                                                                                                                                                                                                                                                                                                                                              ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                                                        Peek_ReportElems_JSONText _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            ReportElems
                                                                                                                                                                                                                                                                                                                                            JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Markup _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                                                                                                                        Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ReportElem _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ReportElem) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                ReportElems
                                                                                                                                                                                                                                                                                                                                                ReportElem)) (peekValue (Proxy :: Proxy ReportElem) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ReportElems _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ReportElems) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  ReportElems
                                                                                                                                                                                                                                                                                                                                                  ReportElems)) (peekValue (Proxy :: Proxy ReportElems) pk)
                                                                                                                                                                                                                        Peek_ReportElems_EUI _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                  ReportElems
                                                                                                                                                                                                                                                                                                                                  EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                                                        Peek_ReportElems_MEUI _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    ReportElems
                                                                                                                                                                                                                                                                                                                                    MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                                                        Peek_ReportElems_MaybeImageFile _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        ReportElems
                                                                                                                                                                                                                                                                                                                                                        MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ReportImage _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  ReportElems
                                                                                                                                                                                                                                                                                                                                                  ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ReportImages _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    ReportElems
                                                                                                                                                                                                                                                                                                                                                    ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                                                                        Peek_ReportElems_ReportImageView _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                          ReportElems
                                                                                                                                                                                                                                                                                                                                                          ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                                                        Peek_ReportElems_SaneSizeImageSize _
                                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                              ReportElems
                                                                                                                                                                                                                                                                                                                                                              SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Item _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    ReportElems
                                                                                                                                                                                                                                                                                                                                    Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                                                                        Peek_ReportElems_MIM _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                  ReportElems
                                                                                                                                                                                                                                                                                                                                  MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                                                                        Peek_ReportElems_URI _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                  ReportElems
                                                                                                                                                                                                                                                                                                                                  URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                                                        Peek_ReportElems_Text _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportView__reportBody (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    ReportElems
                                                                                                                                                                                                                                                                                                                                    Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportElems])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportElems) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportGlossary _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MarkupPairs) :: Forest (Peek Univ MarkupPairs)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                        MarkupPairs of
                                                                                                                                                                                                                            Peek_MarkupPairs_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportGlossary (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    MarkupPairs
                                                                                                                                                                                                                                                                                                                                                    JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                            Peek_MarkupPairs_Markup _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportGlossary (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                MarkupPairs
                                                                                                                                                                                                                                                                                                                                                Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                            Peek_MarkupPairs_MarkupPair _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportGlossary (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        MarkupPairs
                                                                                                                                                                                                                                                                                                                                                        MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                                                                            Peek_MarkupPairs_MarkupPairs _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportGlossary (peekPath (Proxy :: Proxy MarkupPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                                                                                                                                          MarkupPairs)) (peekValue (Proxy :: Proxy MarkupPairs) pk)
                                                                                                                                                                                                                            Peek_MarkupPairs_Text _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportGlossary (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            MarkupPairs
                                                                                                                                                                                                                                                                                                                                            Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [MarkupPairs])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPairs) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportSources _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MarkupPairs) :: Forest (Peek Univ MarkupPairs)
                                                                                                                                      in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MarkupPairs of
                                                                                                                                                                                                                           Peek_MarkupPairs_JSONText _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportSources (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  MarkupPairs
                                                                                                                                                                                                                                                                                                                                                  JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                           Peek_MarkupPairs_Markup _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportSources (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              MarkupPairs
                                                                                                                                                                                                                                                                                                                                              Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                           Peek_MarkupPairs_MarkupPair _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportSources (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                      MarkupPairs
                                                                                                                                                                                                                                                                                                                                                      MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                                                                           Peek_MarkupPairs_MarkupPairs _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportSources (peekPath (Proxy :: Proxy MarkupPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        MarkupPairs
                                                                                                                                                                                                                                                                                                                                                        MarkupPairs)) (peekValue (Proxy :: Proxy MarkupPairs) pk)
                                                                                                                                                                                                                           Peek_MarkupPairs_Text _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportSources (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          MarkupPairs
                                                                                                                                                                                                                                                                                                                                          Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [MarkupPairs])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPairs) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                                  in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                   Markup of
                                                                                                                                                                                                                                       Peek_Markup_JSONText _
                                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportView__reportLetterOfTransmittal (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                       Peek_Markup_Markup _
                                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportView__reportLetterOfTransmittal (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                       Peek_Markup_Text _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportLetterOfTransmittal (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                          in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                                                                               Peek_Markup_JSONText _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportScopeOfWork (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                               Peek_Markup_Markup _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportScopeOfWork (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                               Peek_Markup_Text _
                                                                                                                                                                                                                                                _ -> peekCons (Path_ReportView__reportScopeOfWork (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                             Markup
                                                                                                                                                                                                                                                                                                                                             Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportCertification _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markups) :: Forest (Peek Univ Markups)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             Markups of
                                                                                                                                                                                                                                 Peek_Markups_JSONText _
                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportCertification (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                          Markups
                                                                                                                                                                                                                                                                                                                                                          JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_Markups_Markup _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportCertification (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                      Markups
                                                                                                                                                                                                                                                                                                                                                      Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_Markups_Markups _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportCertification (peekPath (Proxy :: Proxy Markups) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                        Markups
                                                                                                                                                                                                                                                                                                                                                        Markups)) (peekValue (Proxy :: Proxy Markups) pk)
                                                                                                                                                                                                                                 Peek_Markups_Text _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportCertification (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                  Markups
                                                                                                                                                                                                                                                                                                                                                  Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markups])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markups) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markups) :: Forest (Peek Univ Markups)
                                                                                                                                                 in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                  Markups of
                                                                                                                                                                                                                                      Peek_Markups_JSONText _
                                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportView__reportLimitingConditions (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                    Markups
                                                                                                                                                                                                                                                                                                                                                                    JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                      Peek_Markups_Markup _
                                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportView__reportLimitingConditions (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                Markups
                                                                                                                                                                                                                                                                                                                                                                Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                      Peek_Markups_Markups _
                                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportLimitingConditions (peekPath (Proxy :: Proxy Markups) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                  Markups
                                                                                                                                                                                                                                                                                                                                                                  Markups)) (peekValue (Proxy :: Proxy Markups) pk)
                                                                                                                                                                                                                                      Peek_Markups_Text _
                                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportView__reportLimitingConditions (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                            Markups
                                                                                                                                                                                                                                                                                                                                                            Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markups])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markups) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                                                                            in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                             Markup of
                                                                                                                                                                                                                                 Peek_Markup_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportPrivacyPolicy (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         Markup
                                                                                                                                                                                                                                                                                                                                                         JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                                 Peek_Markup_Markup _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportPrivacyPolicy (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                     Markup
                                                                                                                                                                                                                                                                                                                                                     Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                                                 Peek_Markup_Text _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportPrivacyPolicy (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Markup
                                                                                                                                                                                                                                                                                                                                                 Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportPerms _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Permissions) :: Forest (Peek Univ Permissions)
                                                                                                                                    in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Permissions of
                                                                                                                                                                                                                         Peek_Permissions_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportPerms (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              Permissions
                                                                                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                         Peek_Permissions_Permissions _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportPerms (peekPath (Proxy :: Proxy Permissions) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    Permissions
                                                                                                                                                                                                                                                                                                                                                    Permissions)) (peekValue (Proxy :: Proxy Permissions) pk)
                                                                                                                                                                                                                         Peek_Permissions_UserIds _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportPerms (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                            Permissions
                                                                                                                                                                                                                                                                                                                                            UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                                                                         Peek_Permissions_Text _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportPerms (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      Permissions
                                                                                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)
                                                                                                                                                                                                                         Peek_Permissions_UserId _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportPerms (peekPath (Proxy :: Proxy UserId) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          Permissions
                                                                                                                                                                                                                                                                                                                                          UserId)) (peekValue (Proxy :: Proxy UserId) pk)) wtree)) (toListOf (toLens p) _s :: [Permissions])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Permissions) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportRevision _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Integer) :: Forest (Peek Univ Integer)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Integer of
                                                                                                                                                                                                                            Peek_Integer_Integer _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportRevision (peekPath (Proxy :: Proxy Integer) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              Integer
                                                                                                                                                                                                                                                                                                                                              Integer)) (peekValue (Proxy :: Proxy Integer) pk)) wtree)) (toListOf (toLens p) _s :: [Integer])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Integer) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportCreated _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Int64) :: Forest (Peek Univ Int64)
                                                                                                                                      in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Int64 of
                                                                                                                                                                                                                           Peek_Int64_Int64 _
                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportView__reportCreated (peekPath (Proxy :: Proxy Int64) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      Int64
                                                                                                                                                                                                                                                                                                                                      Int64)) (peekValue (Proxy :: Proxy Int64) pk)) wtree)) (toListOf (toLens p) _s :: [Int64])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Int64) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportBranding _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Branding) :: Forest (Peek Univ Branding)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Branding of
                                                                                                                                                                                                                            Peek_Branding_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBranding (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Branding
                                                                                                                                                                                                                                                                                                                                                 JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                            Peek_Branding_Branding _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportBranding (peekPath (Proxy :: Proxy Branding) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 Branding
                                                                                                                                                                                                                                                                                                                                                 Branding)) (peekValue (Proxy :: Proxy Branding) pk)
                                                                                                                                                                                                                            Peek_Branding_Text _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportBranding (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                         Branding
                                                                                                                                                                                                                                                                                                                                         Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Branding])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Branding) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportStatus _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportStatus) :: Forest (Peek Univ ReportStatus)
                                                                                                                                     in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportStatus of
                                                                                                                                                                                                                          Peek_ReportStatus_String _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportStatus (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                             ReportStatus
                                                                                                                                                                                                                                                                                                                                             String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                          Peek_ReportStatus_JSONText _
                                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportView__reportStatus (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                 ReportStatus
                                                                                                                                                                                                                                                                                                                                                 JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                          Peek_ReportStatus_ReportStatus _
                                                                                                                                                                                                                                                         _ -> peekCons (Path_ReportView__reportStatus (peekPath (Proxy :: Proxy ReportStatus) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                         ReportStatus
                                                                                                                                                                                                                                                                                                                                                         ReportStatus)) (peekValue (Proxy :: Proxy ReportStatus) pk)) wtree)) (toListOf (toLens p) _s :: [ReportStatus])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportStatus) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportRedacted _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Bool) :: Forest (Peek Univ Bool)
                                                                                                                                       in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Bool of
                                                                                                                                                                                                                            Peek_Bool_String _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportView__reportRedacted (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                         Bool
                                                                                                                                                                                                                                                                                                                                         String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                            Peek_Bool_Bool _
                                                                                                                                                                                                                                           _ -> peekCons (Path_ReportView__reportRedacted (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                     Bool
                                                                                                                                                                                                                                                                                                                                     Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                            Peek_Bool_JSONText _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportRedacted (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                             Bool
                                                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Bool])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportFlags _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportFlags) :: Forest (Peek Univ ReportFlags)
                                                                                                                                    in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportFlags of
                                                                                                                                                                                                                         Peek_ReportFlags_String _
                                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportView__reportFlags (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          ReportFlags
                                                                                                                                                                                                                                                                                                                                          String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                         Peek_ReportFlags_Bool _
                                                                                                                                                                                                                                               _ -> peekCons (Path_ReportView__reportFlags (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      ReportFlags
                                                                                                                                                                                                                                                                                                                                      Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                         Peek_ReportFlags_JSONText _
                                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportView__reportFlags (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              ReportFlags
                                                                                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                                         Peek_ReportFlags_ReportFlags _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportFlags (peekPath (Proxy :: Proxy ReportFlags) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    ReportFlags
                                                                                                                                                                                                                                                                                                                                                    ReportFlags)) (peekValue (Proxy :: Proxy ReportFlags) pk)) wtree)) (toListOf (toLens p) _s :: [ReportFlags])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportFlags) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportUUID _wp) -> map (\a -> let wtree = peekTree Proxy (a :: UUID) :: Forest (Peek Univ UUID)
                                                                                                                                   in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ UUID of
                                                                                                                                                                                                                        Peek_UUID_UUID _
                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportUUID (peekPath (Proxy :: Proxy UUID) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                             UUID
                                                                                                                                                                                                                                                                                                                             UUID)) (peekValue (Proxy :: Proxy UUID) pk)) wtree)) (toListOf (toLens p) _s :: [UUID])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UUID) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Bool) :: Forest (Peek Univ Bool)
                                                                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                               Bool of
                                                                                                                                                                                                                                   Peek_Bool_String _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportOrderByItemName (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Bool
                                                                                                                                                                                                                                                                                                                                                       String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                                   Peek_Bool_Bool _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportOrderByItemName (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                                                                                                                   Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                                   Peek_Bool_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportOrderByItemName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Bool
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Bool])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Bool) :: Forest (Peek Univ Bool)
                                                                                                                                              in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                               Bool of
                                                                                                                                                                                                                                   Peek_Bool_String _
                                                                                                                                                                                                                                                    _ -> peekCons (Path_ReportView__reportDisplayItemName (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                       Bool
                                                                                                                                                                                                                                                                                                                                                       String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                                                   Peek_Bool_Bool _
                                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportView__reportDisplayItemName (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                   Bool
                                                                                                                                                                                                                                                                                                                                                   Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                                                   Peek_Bool_JSONText _
                                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportView__reportDisplayItemName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                           Bool
                                                                                                                                                                                                                                                                                                                                                           JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [Bool])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                           let dopath pth = case pth of
                                                                                p@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportStandard) :: Forest (Peek Univ ReportStandard)
                                                                                                                                               in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ
                                                                                                                                                                                                                                                ReportStandard of
                                                                                                                                                                                                                                    Peek_ReportStandard_Int _
                                                                                                                                                                                                                                                            _ -> peekCons (Path_ReportView__reportStandardsVersion (peekPath (Proxy :: Proxy Int) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                             ReportStandard
                                                                                                                                                                                                                                                                                                                                                             Int)) (peekValue (Proxy :: Proxy Int) pk)
                                                                                                                                                                                                                                    Peek_ReportStandard_ReportStandard _
                                                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportView__reportStandardsVersion (peekPath (Proxy :: Proxy ReportStandard) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                                                   ReportStandard
                                                                                                                                                                                                                                                                                                                                                                                   ReportStandard)) (peekValue (Proxy :: Proxy ReportStandard) pk)) wtree)) (toListOf (toLens p) _s :: [ReportStandard])
                                                                                _ -> []
                                                            in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportStandard) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ ReportView)
          peekRow (Proxy) (_s@(ReportView {})) = mconcat [let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportFolder _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReadOnlyFilePath])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReadOnlyFilePath) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportDate _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportContractDate _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportAuthors _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Authors])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Authors) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPreparer _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [AbbrevPairs])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy AbbrevPairs) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportTitle _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportHeader _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportFooter _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MaybeReportIntendedUse])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MaybeReportIntendedUse) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportValueTypeInfo])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportValueTypeInfo) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportValueApproachInfo])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportValueApproachInfo) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportClientName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportClientAddress _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportBriefItems _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportBody _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportElems])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportElems) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportGlossary _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MarkupPairs])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPairs) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportSources _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MarkupPairs])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MarkupPairs) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportCertification _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markups])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markups) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markups])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markups) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportPerms _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Permissions])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Permissions) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportRevision _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Integer])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Integer) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportCreated _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Int64])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Int64) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportBranding _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Branding])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Branding) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportStatus _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportStatus])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportStatus) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportRedacted _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Bool])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportFlags _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportFlags])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportFlags) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportUUID _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [UUID])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy UUID) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Bool])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Bool])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Bool) (\pth r -> dopath pth ++ r) [],
                                                          let dopath pth = case pth of
                                                                               p@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportStandard])
                                                                               _ -> []
                                                           in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportStandard) (\pth r -> dopath pth ++ r) []] :: [Peek Univ ReportView]
instance PathStart Univ SaneSizeImageSize
    where data Peek Univ SaneSizeImageSize
              = Peek_SaneSizeImageSize_String (Path Univ SaneSizeImageSize String) (Maybe String)
              | Peek_SaneSizeImageSize_Double (Path Univ SaneSizeImageSize Double) (Maybe Double)
              | Peek_SaneSizeImageSize_Dimension (Path Univ SaneSizeImageSize Dimension) (Maybe Dimension)
              | Peek_SaneSizeImageSize_ImageSize (Path Univ SaneSizeImageSize ImageSize) (Maybe ImageSize)
              | Peek_SaneSizeImageSize_Units (Path Univ SaneSizeImageSize Units) (Maybe Units)
              | Peek_SaneSizeImageSize_JSONText (Path Univ SaneSizeImageSize JSONText) (Maybe JSONText)
              | Peek_SaneSizeImageSize_SaneSizeImageSize (Path Univ SaneSizeImageSize SaneSizeImageSize) (Maybe SaneSizeImageSize)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_SaneSizeImageSize_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ImageSize) :: Forest (Peek Univ ImageSize)
                                                                                                        in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ImageSize of
                                                                                                                                                                                             Peek_ImageSize_String _
                                                                                                                                                                                                                   _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                                                                                           String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                             Peek_ImageSize_Double _
                                                                                                                                                                                                                   _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ImageSize
                                                                                                                                                                                                                                                                                                           Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                             Peek_ImageSize_Dimension _
                                                                                                                                                                                                                      _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                 ImageSize
                                                                                                                                                                                                                                                                                                                 Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                             Peek_ImageSize_ImageSize _
                                                                                                                                                                                                                      _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                 ImageSize
                                                                                                                                                                                                                                                                                                                 ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                             Peek_ImageSize_Units _
                                                                                                                                                                                                                  _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                         ImageSize
                                                                                                                                                                                                                                                                                                         Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                             Peek_ImageSize_JSONText _
                                                                                                                                                                                                                     _ -> peekCons (Path_SaneSizeImageSize_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                               ImageSize
                                                                                                                                                                                                                                                                                                               JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [ImageSize])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageSize) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ SaneSizeImageSize)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_SaneSizeImageSize_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ImageSize])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ImageSize) (\pth r -> dopath pth ++ r) [] :: [Peek Univ SaneSizeImageSize]
instance PathStart Univ Item
    where data Peek Univ Item
              = Peek_Item_String (Path Univ Item String) (Maybe String)
              | Peek_Item_Bool (Path Univ Item Bool) (Maybe Bool)
              | Peek_Item_Double (Path Univ Item Double) (Maybe Double)
              | Peek_Item_Dimension (Path Univ Item Dimension) (Maybe Dimension)
              | Peek_Item_ImageCrop (Path Univ Item ImageCrop) (Maybe ImageCrop)
              | Peek_Item_ImageSize (Path Univ Item ImageSize) (Maybe ImageSize)
              | Peek_Item_Units (Path Univ Item Units) (Maybe Units)
              | Peek_Item_ImageFile (Path Univ Item ImageFile) (Maybe ImageFile)
              | Peek_Item_JSONText (Path Univ Item JSONText) (Maybe JSONText)
              | Peek_Item_Markup (Path Univ Item Markup) (Maybe Markup)
              | Peek_Item_EUI (Path Univ Item EUI) (Maybe EUI)
              | Peek_Item_MEUI (Path Univ Item MEUI) (Maybe MEUI)
              | Peek_Item_MaybeImageFile (Path Univ Item MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_Item_ReportImage (Path Univ Item ReportImage) (Maybe ReportImage)
              | Peek_Item_ReportImages (Path Univ Item ReportImages) (Maybe ReportImages)
              | Peek_Item_ReportImageView (Path Univ Item ReportImageView) (Maybe ReportImageView)
              | Peek_Item_SaneSizeImageSize (Path Univ Item SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_Item_Item (Path Univ Item Item) (Maybe Item)
              | Peek_Item_MIM (Path Univ Item MIM) (Maybe MIM)
              | Peek_Item_URI (Path Univ Item URI) (Maybe URI)
              | Peek_Item_Text (Path Univ Item Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(Item {})) = mconcat [let dopath pth = case pth of
                                                                          p@(Path_Item_itemName _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                                                    in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                                         Peek_Text_JSONText _
                                                                                                                                                                                                                            _ -> peekCons (Path_Item_itemName (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                             Text
                                                                                                                                                                                                                                                                                                             JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                         Peek_Text_Text _
                                                                                                                                                                                                                        _ -> peekCons (Path_Item_itemName (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                     Text
                                                                                                                                                                                                                                                                                                     Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                                          _ -> []
                                                      in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [],
                                                     let dopath pth = case pth of
                                                                          p@(Path_Item_fields _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MIM) :: Forest (Peek Univ MIM)
                                                                                                                  in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MIM of
                                                                                                                                                                                                       Peek_MIM_JSONText _
                                                                                                                                                                                                                         _ -> peekCons (Path_Item_fields (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                        MIM
                                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                       Peek_MIM_Markup _
                                                                                                                                                                                                                       _ -> peekCons (Path_Item_fields (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                    MIM
                                                                                                                                                                                                                                                                                                    Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                       Peek_MIM_MIM _
                                                                                                                                                                                                                    _ -> peekCons (Path_Item_fields (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                                              MIM
                                                                                                                                                                                                                                                                                              MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                                                       Peek_MIM_Text _
                                                                                                                                                                                                                     _ -> peekCons (Path_Item_fields (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                MIM
                                                                                                                                                                                                                                                                                                Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [MIM])
                                                                          _ -> []
                                                      in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MIM) (\pth r -> dopath pth ++ r) [],
                                                     let dopath pth = case pth of
                                                                          p@(Path_Item_images _wp) -> map (\a -> let wtree = peekTree Proxy (a :: ReportImages) :: Forest (Peek Univ ReportImages)
                                                                                                                  in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ ReportImages of
                                                                                                                                                                                                       Peek_ReportImages_String _
                                                                                                                                                                                                                                _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                             ReportImages
                                                                                                                                                                                                                                                                                                             String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                       Peek_ReportImages_Bool _
                                                                                                                                                                                                                              _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                                                                                                         Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                       Peek_ReportImages_Double _
                                                                                                                                                                                                                                _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                             ReportImages
                                                                                                                                                                                                                                                                                                             Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                       Peek_ReportImages_Dimension _
                                                                                                                                                                                                                                   _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                                                                                                   Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                       Peek_ReportImages_ImageCrop _
                                                                                                                                                                                                                                   _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                                                                                                   ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                                       Peek_ReportImages_ImageSize _
                                                                                                                                                                                                                                   _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                                                                                                   ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                                       Peek_ReportImages_Units _
                                                                                                                                                                                                                               _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                           ReportImages
                                                                                                                                                                                                                                                                                                           Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                       Peek_ReportImages_ImageFile _
                                                                                                                                                                                                                                   _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                                                                                                   ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                                       Peek_ReportImages_JSONText _
                                                                                                                                                                                                                                  _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                 ReportImages
                                                                                                                                                                                                                                                                                                                 JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                       Peek_ReportImages_Markup _
                                                                                                                                                                                                                                _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                             ReportImages
                                                                                                                                                                                                                                                                                                             Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                       Peek_ReportImages_EUI _
                                                                                                                                                                                                                             _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                       ReportImages
                                                                                                                                                                                                                                                                                                       EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                                       Peek_ReportImages_MEUI _
                                                                                                                                                                                                                              _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                                                                                                         MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                                       Peek_ReportImages_MaybeImageFile _
                                                                                                                                                                                                                                        _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                             ReportImages
                                                                                                                                                                                                                                                                                                                             MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                                       Peek_ReportImages_ReportImage _
                                                                                                                                                                                                                                     _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                       ReportImages
                                                                                                                                                                                                                                                                                                                       ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                                                       Peek_ReportImages_ReportImages _
                                                                                                                                                                                                                                      _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                                                                                                                         ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                                                       Peek_ReportImages_ReportImageView _
                                                                                                                                                                                                                                         _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                               ReportImages
                                                                                                                                                                                                                                                                                                                               ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                                       Peek_ReportImages_SaneSizeImageSize _
                                                                                                                                                                                                                                           _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                   ReportImages
                                                                                                                                                                                                                                                                                                                                   SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                                       Peek_ReportImages_URI _
                                                                                                                                                                                                                             _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                       ReportImages
                                                                                                                                                                                                                                                                                                       URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                                       Peek_ReportImages_Text _
                                                                                                                                                                                                                              _ -> peekCons (Path_Item_images (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                         ReportImages
                                                                                                                                                                                                                                                                                                         Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [ReportImages])
                                                                          _ -> []
                                                      in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImages) (\pth r -> dopath pth ++ r) []] :: Forest (Peek Univ Item)
          peekRow (Proxy) (_s@(Item {})) = mconcat [let dopath pth = case pth of
                                                                         p@(Path_Item_itemName _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                                         _ -> []
                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [],
                                                    let dopath pth = case pth of
                                                                         p@(Path_Item_fields _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MIM])
                                                                         _ -> []
                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MIM) (\pth r -> dopath pth ++ r) [],
                                                    let dopath pth = case pth of
                                                                         p@(Path_Item_images _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [ReportImages])
                                                                         _ -> []
                                                     in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy ReportImages) (\pth r -> dopath pth ++ r) []] :: [Peek Univ Item]
instance PathStart Univ MIM
    where data Peek Univ MIM
              = Peek_MIM_JSONText (Path Univ MIM JSONText) (Maybe JSONText)
              | Peek_MIM_Markup (Path Univ MIM Markup) (Maybe Markup)
              | Peek_MIM_MIM (Path Univ MIM MIM) (Maybe MIM)
              | Peek_MIM_Text (Path Univ MIM Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Look _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Markup) :: Forest (Peek Univ Markup)
                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Markup of
                                                                                                                                                                              Peek_Markup_JSONText _
                                                                                                                                                                                                   _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                              Markup
                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                              Peek_Markup_Markup _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                          Markup
                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                              Peek_Markup_Text _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                      Markup
                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Markup])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MIM)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Look _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Markup])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Markup) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MIM]
instance PathStart Univ MRR
    where data Peek Univ MRR
              = Peek_MRR_String (Path Univ MRR String) (Maybe String)
              | Peek_MRR_Int64 (Path Univ MRR Int64) (Maybe Int64)
              | Peek_MRR_Int (Path Univ MRR Int) (Maybe Int)
              | Peek_MRR_Bool (Path Univ MRR Bool) (Maybe Bool)
              | Peek_MRR_Double (Path Univ MRR Double) (Maybe Double)
              | Peek_MRR_Dimension (Path Univ MRR Dimension) (Maybe Dimension)
              | Peek_MRR_ImageCrop (Path Univ MRR ImageCrop) (Maybe ImageCrop)
              | Peek_MRR_ImageSize (Path Univ MRR ImageSize) (Maybe ImageSize)
              | Peek_MRR_Units (Path Univ MRR Units) (Maybe Units)
              | Peek_MRR_ImageFile (Path Univ MRR ImageFile) (Maybe ImageFile)
              | Peek_MRR_Integer (Path Univ MRR Integer) (Maybe Integer)
              | Peek_MRR_JSONText (Path Univ MRR JSONText) (Maybe JSONText)
              | Peek_MRR_Markup (Path Univ MRR Markup) (Maybe Markup)
              | Peek_MRR_Permissions (Path Univ MRR Permissions) (Maybe Permissions)
              | Peek_MRR_UserIds (Path Univ MRR UserIds) (Maybe UserIds)
              | Peek_MRR_AbbrevPair (Path Univ MRR AbbrevPair) (Maybe AbbrevPair)
              | Peek_MRR_AbbrevPairs (Path Univ MRR AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_MRR_Author (Path Univ MRR Author) (Maybe Author)
              | Peek_MRR_Authors (Path Univ MRR Authors) (Maybe Authors)
              | Peek_MRR_Branding (Path Univ MRR Branding) (Maybe Branding)
              | Peek_MRR_MarkupPair (Path Univ MRR MarkupPair) (Maybe MarkupPair)
              | Peek_MRR_MarkupPairs (Path Univ MRR MarkupPairs) (Maybe MarkupPairs)
              | Peek_MRR_Markups (Path Univ MRR Markups) (Maybe Markups)
              | Peek_MRR_MaybeReportIntendedUse (Path Univ MRR MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_MRR_Report (Path Univ MRR Report) (Maybe Report)
              | Peek_MRR_ReportElem (Path Univ MRR ReportElem) (Maybe ReportElem)
              | Peek_MRR_ReportElems (Path Univ MRR ReportElems) (Maybe ReportElems)
              | Peek_MRR_ReportFlags (Path Univ MRR ReportFlags) (Maybe ReportFlags)
              | Peek_MRR_ReportStandard (Path Univ MRR ReportStandard) (Maybe ReportStandard)
              | Peek_MRR_ReportStatus (Path Univ MRR ReportStatus) (Maybe ReportStatus)
              | Peek_MRR_ReportValueApproachInfo (Path Univ MRR ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_MRR_ReportValueTypeInfo (Path Univ MRR ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_MRR_EUI (Path Univ MRR EUI) (Maybe EUI)
              | Peek_MRR_MEUI (Path Univ MRR MEUI) (Maybe MEUI)
              | Peek_MRR_MaybeImageFile (Path Univ MRR MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_MRR_ReportImage (Path Univ MRR ReportImage) (Maybe ReportImage)
              | Peek_MRR_ReportImages (Path Univ MRR ReportImages) (Maybe ReportImages)
              | Peek_MRR_ReadOnlyFilePath (Path Univ MRR ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_MRR_ReportImageView (Path Univ MRR ReportImageView) (Maybe ReportImageView)
              | Peek_MRR_ReportView (Path Univ MRR ReportView) (Maybe ReportView)
              | Peek_MRR_SaneSizeImageSize (Path Univ MRR SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_MRR_Item (Path Univ MRR Item) (Maybe Item)
              | Peek_MRR_MIM (Path Univ MRR MIM) (Maybe MIM)
              | Peek_MRR_MRR (Path Univ MRR MRR) (Maybe MRR)
              | Peek_MRR_CIString (Path Univ MRR CIString) (Maybe CIString)
              | Peek_MRR_URI (Path Univ MRR URI) (Maybe URI)
              | Peek_MRR_Text (Path Univ MRR Text) (Maybe Text)
              | Peek_MRR_UserId (Path Univ MRR UserId) (Maybe UserId)
              | Peek_MRR_UUID (Path Univ MRR UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Look _k _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Report) :: Forest (Peek Univ Report)
                                                                                         in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Report of
                                                                                                                                                                              Peek_Report_String _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                              Peek_Report_Int64 _
                                                                                                                                                                                                _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Int64) pk :: Path Univ
                                                                                                                                                                                                                                                                        Report
                                                                                                                                                                                                                                                                        Int64)) (peekValue (Proxy :: Proxy Int64) pk)
                                                                                                                                                                              Peek_Report_Int _
                                                                                                                                                                                              _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Int) pk :: Path Univ
                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                    Int)) (peekValue (Proxy :: Proxy Int) pk)
                                                                                                                                                                              Peek_Report_Bool _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                              Peek_Report_Double _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                              Peek_Report_Dimension _
                                                                                                                                                                                                    _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                                Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                              Peek_Report_ImageCrop _
                                                                                                                                                                                                    _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                                ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                              Peek_Report_ImageSize _
                                                                                                                                                                                                    _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                                ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                              Peek_Report_Units _
                                                                                                                                                                                                _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                        Report
                                                                                                                                                                                                                                                                        Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                              Peek_Report_ImageFile _
                                                                                                                                                                                                    _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                                ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                              Peek_Report_Integer _
                                                                                                                                                                                                  _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Integer) pk :: Path Univ
                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                            Integer)) (peekValue (Proxy :: Proxy Integer) pk)
                                                                                                                                                                              Peek_Report_JSONText _
                                                                                                                                                                                                   _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                              Report
                                                                                                                                                                                                                                                                              JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                              Peek_Report_Markup _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                              Peek_Report_Permissions _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Permissions) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    Permissions)) (peekValue (Proxy :: Proxy Permissions) pk)
                                                                                                                                                                              Peek_Report_UserIds _
                                                                                                                                                                                                  _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                            UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                              Peek_Report_AbbrevPair _
                                                                                                                                                                                                     _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy AbbrevPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  AbbrevPair)) (peekValue (Proxy :: Proxy AbbrevPair) pk)
                                                                                                                                                                              Peek_Report_AbbrevPairs _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy AbbrevPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    AbbrevPairs)) (peekValue (Proxy :: Proxy AbbrevPairs) pk)
                                                                                                                                                                              Peek_Report_Author _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Author) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          Author)) (peekValue (Proxy :: Proxy Author) pk)
                                                                                                                                                                              Peek_Report_Authors _
                                                                                                                                                                                                  _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Authors) pk :: Path Univ
                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                            Authors)) (peekValue (Proxy :: Proxy Authors) pk)
                                                                                                                                                                              Peek_Report_Branding _
                                                                                                                                                                                                   _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Branding) pk :: Path Univ
                                                                                                                                                                                                                                                                              Report
                                                                                                                                                                                                                                                                              Branding)) (peekValue (Proxy :: Proxy Branding) pk)
                                                                                                                                                                              Peek_Report_MarkupPair _
                                                                                                                                                                                                     _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                              Peek_Report_MarkupPairs _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MarkupPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    MarkupPairs)) (peekValue (Proxy :: Proxy MarkupPairs) pk)
                                                                                                                                                                              Peek_Report_Markups _
                                                                                                                                                                                                  _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Markups) pk :: Path Univ
                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                            Markups)) (peekValue (Proxy :: Proxy Markups) pk)
                                                                                                                                                                              Peek_Report_MaybeReportIntendedUse _
                                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MaybeReportIntendedUse) pk :: Path Univ
                                                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                                                          MaybeReportIntendedUse)) (peekValue (Proxy :: Proxy MaybeReportIntendedUse) pk)
                                                                                                                                                                              Peek_Report_Report _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Report) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          Report)) (peekValue (Proxy :: Proxy Report) pk)
                                                                                                                                                                              Peek_Report_ReportElem _
                                                                                                                                                                                                     _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportElem) pk :: Path Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportElem)) (peekValue (Proxy :: Proxy ReportElem) pk)
                                                                                                                                                                              Peek_Report_ReportElems _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportElems) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    ReportElems)) (peekValue (Proxy :: Proxy ReportElems) pk)
                                                                                                                                                                              Peek_Report_ReportFlags _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportFlags) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    ReportFlags)) (peekValue (Proxy :: Proxy ReportFlags) pk)
                                                                                                                                                                              Peek_Report_ReportStandard _
                                                                                                                                                                                                         _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportStandard) pk :: Path Univ
                                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                                          ReportStandard)) (peekValue (Proxy :: Proxy ReportStandard) pk)
                                                                                                                                                                              Peek_Report_ReportStatus _
                                                                                                                                                                                                       _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportStatus) pk :: Path Univ
                                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                                      ReportStatus)) (peekValue (Proxy :: Proxy ReportStatus) pk)
                                                                                                                                                                              Peek_Report_ReportValueApproachInfo _
                                                                                                                                                                                                                  _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportValueApproachInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                                                            ReportValueApproachInfo)) (peekValue (Proxy :: Proxy ReportValueApproachInfo) pk)
                                                                                                                                                                              Peek_Report_ReportValueTypeInfo _
                                                                                                                                                                                                              _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportValueTypeInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                                    ReportValueTypeInfo)) (peekValue (Proxy :: Proxy ReportValueTypeInfo) pk)
                                                                                                                                                                              Peek_Report_EUI _
                                                                                                                                                                                              _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                    EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                              Peek_Report_MEUI _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                              Peek_Report_MaybeImageFile _
                                                                                                                                                                                                         _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                                          MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                              Peek_Report_ReportImage _
                                                                                                                                                                                                      _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                                    ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                              Peek_Report_ReportImages _
                                                                                                                                                                                                       _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                                      ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                              Peek_Report_ReadOnlyFilePath _
                                                                                                                                                                                                           _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReadOnlyFilePath) pk :: Path Univ
                                                                                                                                                                                                                                                                                              Report
                                                                                                                                                                                                                                                                                              ReadOnlyFilePath)) (peekValue (Proxy :: Proxy ReadOnlyFilePath) pk)
                                                                                                                                                                              Peek_Report_ReportImageView _
                                                                                                                                                                                                          _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                            Report
                                                                                                                                                                                                                                                                                            ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                              Peek_Report_ReportView _
                                                                                                                                                                                                     _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy ReportView) pk :: Path Univ
                                                                                                                                                                                                                                                                                  Report
                                                                                                                                                                                                                                                                                  ReportView)) (peekValue (Proxy :: Proxy ReportView) pk)
                                                                                                                                                                              Peek_Report_SaneSizeImageSize _
                                                                                                                                                                                                            _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                Report
                                                                                                                                                                                                                                                                                                SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                              Peek_Report_Item _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                              Peek_Report_MIM _
                                                                                                                                                                                              _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                    MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                              Peek_Report_CIString _
                                                                                                                                                                                                   _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                              Report
                                                                                                                                                                                                                                                                              CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                              Peek_Report_URI _
                                                                                                                                                                                              _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                    Report
                                                                                                                                                                                                                                                                    URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                              Peek_Report_Text _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      Text)) (peekValue (Proxy :: Proxy Text) pk)
                                                                                                                                                                              Peek_Report_UserId _
                                                                                                                                                                                                 _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy UserId) pk :: Path Univ
                                                                                                                                                                                                                                                                          Report
                                                                                                                                                                                                                                                                          UserId)) (peekValue (Proxy :: Proxy UserId) pk)
                                                                                                                                                                              Peek_Report_UUID _
                                                                                                                                                                                               _ -> peekCons (Path_Look _k (peekPath (Proxy :: Proxy UUID) pk :: Path Univ
                                                                                                                                                                                                                                                                      Report
                                                                                                                                                                                                                                                                      UUID)) (peekValue (Proxy :: Proxy UUID) pk)) wtree)) (toListOf (toLens p) _s :: [Report])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Report) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ MRR)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Look _k _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Report])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Report) (\pth r -> dopath pth ++ r) [] :: [Peek Univ MRR]
instance PathStart Univ ReportMap
    where data Peek Univ ReportMap
              = Peek_ReportMap_String (Path Univ ReportMap String) (Maybe String)
              | Peek_ReportMap_Int64 (Path Univ ReportMap Int64) (Maybe Int64)
              | Peek_ReportMap_Int (Path Univ ReportMap Int) (Maybe Int)
              | Peek_ReportMap_Bool (Path Univ ReportMap Bool) (Maybe Bool)
              | Peek_ReportMap_Double (Path Univ ReportMap Double) (Maybe Double)
              | Peek_ReportMap_Dimension (Path Univ ReportMap Dimension) (Maybe Dimension)
              | Peek_ReportMap_ImageCrop (Path Univ ReportMap ImageCrop) (Maybe ImageCrop)
              | Peek_ReportMap_ImageSize (Path Univ ReportMap ImageSize) (Maybe ImageSize)
              | Peek_ReportMap_Units (Path Univ ReportMap Units) (Maybe Units)
              | Peek_ReportMap_ImageFile (Path Univ ReportMap ImageFile) (Maybe ImageFile)
              | Peek_ReportMap_Integer (Path Univ ReportMap Integer) (Maybe Integer)
              | Peek_ReportMap_JSONText (Path Univ ReportMap JSONText) (Maybe JSONText)
              | Peek_ReportMap_Markup (Path Univ ReportMap Markup) (Maybe Markup)
              | Peek_ReportMap_Permissions (Path Univ ReportMap Permissions) (Maybe Permissions)
              | Peek_ReportMap_UserIds (Path Univ ReportMap UserIds) (Maybe UserIds)
              | Peek_ReportMap_AbbrevPair (Path Univ ReportMap AbbrevPair) (Maybe AbbrevPair)
              | Peek_ReportMap_AbbrevPairs (Path Univ ReportMap AbbrevPairs) (Maybe AbbrevPairs)
              | Peek_ReportMap_Author (Path Univ ReportMap Author) (Maybe Author)
              | Peek_ReportMap_Authors (Path Univ ReportMap Authors) (Maybe Authors)
              | Peek_ReportMap_Branding (Path Univ ReportMap Branding) (Maybe Branding)
              | Peek_ReportMap_MarkupPair (Path Univ ReportMap MarkupPair) (Maybe MarkupPair)
              | Peek_ReportMap_MarkupPairs (Path Univ ReportMap MarkupPairs) (Maybe MarkupPairs)
              | Peek_ReportMap_Markups (Path Univ ReportMap Markups) (Maybe Markups)
              | Peek_ReportMap_MaybeReportIntendedUse (Path Univ ReportMap MaybeReportIntendedUse) (Maybe MaybeReportIntendedUse)
              | Peek_ReportMap_Report (Path Univ ReportMap Report) (Maybe Report)
              | Peek_ReportMap_ReportElem (Path Univ ReportMap ReportElem) (Maybe ReportElem)
              | Peek_ReportMap_ReportElems (Path Univ ReportMap ReportElems) (Maybe ReportElems)
              | Peek_ReportMap_ReportFlags (Path Univ ReportMap ReportFlags) (Maybe ReportFlags)
              | Peek_ReportMap_ReportStandard (Path Univ ReportMap ReportStandard) (Maybe ReportStandard)
              | Peek_ReportMap_ReportStatus (Path Univ ReportMap ReportStatus) (Maybe ReportStatus)
              | Peek_ReportMap_ReportValueApproachInfo (Path Univ ReportMap ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportMap_ReportValueTypeInfo (Path Univ ReportMap ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportMap_EUI (Path Univ ReportMap EUI) (Maybe EUI)
              | Peek_ReportMap_MEUI (Path Univ ReportMap MEUI) (Maybe MEUI)
              | Peek_ReportMap_MaybeImageFile (Path Univ ReportMap MaybeImageFile) (Maybe MaybeImageFile)
              | Peek_ReportMap_ReportImage (Path Univ ReportMap ReportImage) (Maybe ReportImage)
              | Peek_ReportMap_ReportImages (Path Univ ReportMap ReportImages) (Maybe ReportImages)
              | Peek_ReportMap_ReadOnlyFilePath (Path Univ ReportMap ReadOnlyFilePath) (Maybe ReadOnlyFilePath)
              | Peek_ReportMap_ReportImageView (Path Univ ReportMap ReportImageView) (Maybe ReportImageView)
              | Peek_ReportMap_ReportView (Path Univ ReportMap ReportView) (Maybe ReportView)
              | Peek_ReportMap_SaneSizeImageSize (Path Univ ReportMap SaneSizeImageSize) (Maybe SaneSizeImageSize)
              | Peek_ReportMap_Item (Path Univ ReportMap Item) (Maybe Item)
              | Peek_ReportMap_MIM (Path Univ ReportMap MIM) (Maybe MIM)
              | Peek_ReportMap_MRR (Path Univ ReportMap MRR) (Maybe MRR)
              | Peek_ReportMap_ReportMap (Path Univ ReportMap ReportMap) (Maybe ReportMap)
              | Peek_ReportMap_CIString (Path Univ ReportMap CIString) (Maybe CIString)
              | Peek_ReportMap_URI (Path Univ ReportMap URI) (Maybe URI)
              | Peek_ReportMap_Text (Path Univ ReportMap Text) (Maybe Text)
              | Peek_ReportMap_UserId (Path Univ ReportMap UserId) (Maybe UserId)
              | Peek_ReportMap_UUID (Path Univ ReportMap UUID) (Maybe UUID)
              deriving (Eq, Show)
          peekTree (Proxy) (_s@(ReportMap {})) = let dopath pth = case pth of
                                                                      p@(Path_ReportMap_unReportMap _wp) -> map (\a -> let wtree = peekTree Proxy (a :: MRR) :: Forest (Peek Univ MRR)
                                                                                                                        in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ MRR of
                                                                                                                                                                                                             Peek_MRR_String _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy String) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    String)) (peekValue (Proxy :: Proxy String) pk)
                                                                                                                                                                                                             Peek_MRR_Int64 _
                                                                                                                                                                                                                            _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Int64) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  MRR
                                                                                                                                                                                                                                                                                                                  Int64)) (peekValue (Proxy :: Proxy Int64) pk)
                                                                                                                                                                                                             Peek_MRR_Int _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Int) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                              Int)) (peekValue (Proxy :: Proxy Int) pk)
                                                                                                                                                                                                             Peek_MRR_Bool _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Bool) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                Bool)) (peekValue (Proxy :: Proxy Bool) pk)
                                                                                                                                                                                                             Peek_MRR_Double _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Double) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    Double)) (peekValue (Proxy :: Proxy Double) pk)
                                                                                                                                                                                                             Peek_MRR_Dimension _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Dimension) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                                                                                                                          Dimension)) (peekValue (Proxy :: Proxy Dimension) pk)
                                                                                                                                                                                                             Peek_MRR_ImageCrop _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ImageCrop) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                                                                                                                          ImageCrop)) (peekValue (Proxy :: Proxy ImageCrop) pk)
                                                                                                                                                                                                             Peek_MRR_ImageSize _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                                                                                                                          ImageSize)) (peekValue (Proxy :: Proxy ImageSize) pk)
                                                                                                                                                                                                             Peek_MRR_Units _
                                                                                                                                                                                                                            _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Units) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                  MRR
                                                                                                                                                                                                                                                                                                                  Units)) (peekValue (Proxy :: Proxy Units) pk)
                                                                                                                                                                                                             Peek_MRR_ImageFile _
                                                                                                                                                                                                                                _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                                                                                                                          ImageFile)) (peekValue (Proxy :: Proxy ImageFile) pk)
                                                                                                                                                                                                             Peek_MRR_Integer _
                                                                                                                                                                                                                              _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Integer) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                      Integer)) (peekValue (Proxy :: Proxy Integer) pk)
                                                                                                                                                                                                             Peek_MRR_JSONText _
                                                                                                                                                                                                                               _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        MRR
                                                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                                             Peek_MRR_Markup _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Markup) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    Markup)) (peekValue (Proxy :: Proxy Markup) pk)
                                                                                                                                                                                                             Peek_MRR_Permissions _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Permissions) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              Permissions)) (peekValue (Proxy :: Proxy Permissions) pk)
                                                                                                                                                                                                             Peek_MRR_UserIds _
                                                                                                                                                                                                                              _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy UserIds) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                      UserIds)) (peekValue (Proxy :: Proxy UserIds) pk)
                                                                                                                                                                                                             Peek_MRR_AbbrevPair _
                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy AbbrevPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                            MRR
                                                                                                                                                                                                                                                                                                                            AbbrevPair)) (peekValue (Proxy :: Proxy AbbrevPair) pk)
                                                                                                                                                                                                             Peek_MRR_AbbrevPairs _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy AbbrevPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              AbbrevPairs)) (peekValue (Proxy :: Proxy AbbrevPairs) pk)
                                                                                                                                                                                                             Peek_MRR_Author _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Author) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    Author)) (peekValue (Proxy :: Proxy Author) pk)
                                                                                                                                                                                                             Peek_MRR_Authors _
                                                                                                                                                                                                                              _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Authors) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                      Authors)) (peekValue (Proxy :: Proxy Authors) pk)
                                                                                                                                                                                                             Peek_MRR_Branding _
                                                                                                                                                                                                                               _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Branding) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        MRR
                                                                                                                                                                                                                                                                                                                        Branding)) (peekValue (Proxy :: Proxy Branding) pk)
                                                                                                                                                                                                             Peek_MRR_MarkupPair _
                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MarkupPair) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                            MRR
                                                                                                                                                                                                                                                                                                                            MarkupPair)) (peekValue (Proxy :: Proxy MarkupPair) pk)
                                                                                                                                                                                                             Peek_MRR_MarkupPairs _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MarkupPairs) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              MarkupPairs)) (peekValue (Proxy :: Proxy MarkupPairs) pk)
                                                                                                                                                                                                             Peek_MRR_Markups _
                                                                                                                                                                                                                              _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Markups) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                      Markups)) (peekValue (Proxy :: Proxy Markups) pk)
                                                                                                                                                                                                             Peek_MRR_MaybeReportIntendedUse _
                                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MaybeReportIntendedUse) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                                                    MaybeReportIntendedUse)) (peekValue (Proxy :: Proxy MaybeReportIntendedUse) pk)
                                                                                                                                                                                                             Peek_MRR_Report _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Report) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    Report)) (peekValue (Proxy :: Proxy Report) pk)
                                                                                                                                                                                                             Peek_MRR_ReportElem _
                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportElem) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                            MRR
                                                                                                                                                                                                                                                                                                                            ReportElem)) (peekValue (Proxy :: Proxy ReportElem) pk)
                                                                                                                                                                                                             Peek_MRR_ReportElems _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportElems) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              ReportElems)) (peekValue (Proxy :: Proxy ReportElems) pk)
                                                                                                                                                                                                             Peek_MRR_ReportFlags _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportFlags) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              ReportFlags)) (peekValue (Proxy :: Proxy ReportFlags) pk)
                                                                                                                                                                                                             Peek_MRR_ReportStandard _
                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportStandard) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                                    ReportStandard)) (peekValue (Proxy :: Proxy ReportStandard) pk)
                                                                                                                                                                                                             Peek_MRR_ReportStatus _
                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportStatus) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                                ReportStatus)) (peekValue (Proxy :: Proxy ReportStatus) pk)
                                                                                                                                                                                                             Peek_MRR_ReportValueApproachInfo _
                                                                                                                                                                                                                                              _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportValueApproachInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                                                      ReportValueApproachInfo)) (peekValue (Proxy :: Proxy ReportValueApproachInfo) pk)
                                                                                                                                                                                                             Peek_MRR_ReportValueTypeInfo _
                                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportValueTypeInfo) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                                              ReportValueTypeInfo)) (peekValue (Proxy :: Proxy ReportValueTypeInfo) pk)
                                                                                                                                                                                                             Peek_MRR_EUI _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy EUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                              EUI)) (peekValue (Proxy :: Proxy EUI) pk)
                                                                                                                                                                                                             Peek_MRR_MEUI _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MEUI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                MEUI)) (peekValue (Proxy :: Proxy MEUI) pk)
                                                                                                                                                                                                             Peek_MRR_MaybeImageFile _
                                                                                                                                                                                                                                     _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MaybeImageFile) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                                    MaybeImageFile)) (peekValue (Proxy :: Proxy MaybeImageFile) pk)
                                                                                                                                                                                                             Peek_MRR_ReportImage _
                                                                                                                                                                                                                                  _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportImage) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                                              ReportImage)) (peekValue (Proxy :: Proxy ReportImage) pk)
                                                                                                                                                                                                             Peek_MRR_ReportImages _
                                                                                                                                                                                                                                   _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportImages) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                                ReportImages)) (peekValue (Proxy :: Proxy ReportImages) pk)
                                                                                                                                                                                                             Peek_MRR_ReadOnlyFilePath _
                                                                                                                                                                                                                                       _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReadOnlyFilePath) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                        MRR
                                                                                                                                                                                                                                                                                                                                        ReadOnlyFilePath)) (peekValue (Proxy :: Proxy ReadOnlyFilePath) pk)
                                                                                                                                                                                                             Peek_MRR_ReportImageView _
                                                                                                                                                                                                                                      _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportImageView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                      MRR
                                                                                                                                                                                                                                                                                                                                      ReportImageView)) (peekValue (Proxy :: Proxy ReportImageView) pk)
                                                                                                                                                                                                             Peek_MRR_ReportView _
                                                                                                                                                                                                                                 _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy ReportView) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                            MRR
                                                                                                                                                                                                                                                                                                                            ReportView)) (peekValue (Proxy :: Proxy ReportView) pk)
                                                                                                                                                                                                             Peek_MRR_SaneSizeImageSize _
                                                                                                                                                                                                                                        _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy SaneSizeImageSize) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                                          MRR
                                                                                                                                                                                                                                                                                                                                          SaneSizeImageSize)) (peekValue (Proxy :: Proxy SaneSizeImageSize) pk)
                                                                                                                                                                                                             Peek_MRR_Item _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Item) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                Item)) (peekValue (Proxy :: Proxy Item) pk)
                                                                                                                                                                                                             Peek_MRR_MIM _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MIM) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                              MIM)) (peekValue (Proxy :: Proxy MIM) pk)
                                                                                                                                                                                                             Peek_MRR_MRR _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy MRR) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                              MRR)) (peekValue (Proxy :: Proxy MRR) pk)
                                                                                                                                                                                                             Peek_MRR_CIString _
                                                                                                                                                                                                                               _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy CIString) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                        MRR
                                                                                                                                                                                                                                                                                                                        CIString)) (peekValue (Proxy :: Proxy CIString) pk)
                                                                                                                                                                                                             Peek_MRR_URI _
                                                                                                                                                                                                                          _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy URI) pk :: Path Univ
                                                                                                                                                                                                                                                                                                              MRR
                                                                                                                                                                                                                                                                                                              URI)) (peekValue (Proxy :: Proxy URI) pk)
                                                                                                                                                                                                             Peek_MRR_Text _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                Text)) (peekValue (Proxy :: Proxy Text) pk)
                                                                                                                                                                                                             Peek_MRR_UserId _
                                                                                                                                                                                                                             _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy UserId) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                    MRR
                                                                                                                                                                                                                                                                                                                    UserId)) (peekValue (Proxy :: Proxy UserId) pk)
                                                                                                                                                                                                             Peek_MRR_UUID _
                                                                                                                                                                                                                           _ -> peekCons (Path_ReportMap_unReportMap (peekPath (Proxy :: Proxy UUID) pk :: Path Univ
                                                                                                                                                                                                                                                                                                                MRR
                                                                                                                                                                                                                                                                                                                UUID)) (peekValue (Proxy :: Proxy UUID) pk)) wtree)) (toListOf (toLens p) _s :: [MRR])
                                                                      _ -> []
                                                  in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MRR) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ ReportMap)
          peekRow (Proxy) (_s@(ReportMap {})) = let dopath pth = case pth of
                                                                     p@(Path_ReportMap_unReportMap _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [MRR])
                                                                     _ -> []
                                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy MRR) (\pth r -> dopath pth ++ r) [] :: [Peek Univ ReportMap]
instance PathStart Univ CIString
    where data Peek Univ CIString
              = Peek_CIString_JSONText (Path Univ CIString JSONText) (Maybe JSONText)
              | Peek_CIString_CIString (Path Univ CIString CIString) (Maybe CIString)
              | Peek_CIString_Text (Path Univ CIString Text) (Maybe Text)
              deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_CIString_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: Text) :: Forest (Peek Univ Text)
                                                                                               in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ Text of
                                                                                                                                                                                    Peek_Text_JSONText _
                                                                                                                                                                                                       _ -> peekCons (Path_CIString_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                        Text
                                                                                                                                                                                                                                                                                        JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)
                                                                                                                                                                                    Peek_Text_Text _
                                                                                                                                                                                                   _ -> peekCons (Path_CIString_View (peekPath (Proxy :: Proxy Text) pk :: Path Univ
                                                                                                                                                                                                                                                                                Text
                                                                                                                                                                                                                                                                                Text)) (peekValue (Proxy :: Proxy Text) pk)) wtree)) (toListOf (toLens p) _s :: [Text])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ CIString)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_CIString_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [Text])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy Text) (\pth r -> dopath pth ++ r) [] :: [Peek Univ CIString]
instance PathStart Univ URI
    where data Peek Univ URI = Peek_URI_URI (Path Univ URI URI) (Maybe URI) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ Text
    where data Peek Univ Text = Peek_Text_JSONText (Path Univ Text JSONText) (Maybe JSONText) | Peek_Text_Text (Path Univ Text Text) (Maybe Text) deriving (Eq, Show)
          peekTree (Proxy) _s = let dopath pth = case pth of
                                                     p@(Path_Text_View _wp) -> map (\a -> let wtree = peekTree Proxy (a :: JSONText) :: Forest (Peek Univ JSONText)
                                                                                           in Node (peekCons p (if null wtree then Just a else Nothing)) (forestMap (\pk -> case pk :: Peek Univ JSONText of
                                                                                                                                                                                Peek_JSONText_JSONText _
                                                                                                                                                                                                       _ -> peekCons (Path_Text_View (peekPath (Proxy :: Proxy JSONText) pk :: Path Univ
                                                                                                                                                                                                                                                                                    JSONText
                                                                                                                                                                                                                                                                                    JSONText)) (peekValue (Proxy :: Proxy JSONText) pk)) wtree)) (toListOf (toLens p) _s :: [JSONText])
                                                     _ -> []
                                 in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: Forest (Peek Univ Text)
          peekRow (Proxy) _s = let dopath pth = case pth of
                                                    p@(Path_Text_View _wp) -> map (\a -> peekCons p (Just a)) (toListOf (toLens p) _s :: [JSONText])
                                                    _ -> []
                                in paths (Proxy :: Proxy Univ) _s (Proxy :: Proxy JSONText) (\pth r -> dopath pth ++ r) [] :: [Peek Univ Text]
instance PathStart Univ UserId
    where data Peek Univ UserId = Peek_UserId_UserId (Path Univ UserId UserId) (Maybe UserId) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance PathStart Univ UUID
    where data Peek Univ UUID = Peek_UUID_UUID (Path Univ UUID UUID) (Maybe UUID) deriving (Eq, Show)
          peekTree _ _ = []
          peekRow _ _ = []
instance U Univ String
    where u = U1
          unU (U1 a) = a
instance U Univ Int64
    where u = U2
          unU (U2 a) = a
instance U Univ Bool
    where u = U4
          unU (U4 a) = a
instance U Univ Double
    where u = U5
          unU (U5 a) = a
instance U Univ Int
    where u = U3
          unU (U3 a) = a
instance U Univ Dimension
    where u = U6
          unU (U6 a) = a
instance U Univ ImageCrop
    where u = U7
          unU (U7 a) = a
instance U Univ ImageSize
    where u = U8
          unU (U8 a) = a
instance U Univ Units
    where u = U9
          unU (U9 a) = a
instance U Univ ImageFile
    where u = U10
          unU (U10 a) = a
instance U Univ Integer
    where u = U11
          unU (U11 a) = a
instance U Univ JSONText
    where u = U12
          unU (U12 a) = a
instance U Univ Markup
    where u = U13
          unU (U13 a) = a
instance U Univ Permissions
    where u = U14
          unU (U14 a) = a
instance U Univ UserIds
    where u = U15
          unU (U15 a) = a
instance U Univ AbbrevPair
    where u = U16
          unU (U16 a) = a
instance U Univ AbbrevPairs
    where u = U17
          unU (U17 a) = a
instance U Univ Author
    where u = U18
          unU (U18 a) = a
instance U Univ Authors
    where u = U19
          unU (U19 a) = a
instance U Univ Branding
    where u = U20
          unU (U20 a) = a
instance U Univ MarkupPair
    where u = U21
          unU (U21 a) = a
instance U Univ MarkupPairs
    where u = U22
          unU (U22 a) = a
instance U Univ Markups
    where u = U23
          unU (U23 a) = a
instance U Univ MaybeReportIntendedUse
    where u = U24
          unU (U24 a) = a
instance U Univ Report
    where u = U25
          unU (U25 a) = a
instance U Univ ReportElem
    where u = U26
          unU (U26 a) = a
instance U Univ ReportElems
    where u = U27
          unU (U27 a) = a
instance U Univ ReportFlags
    where u = U28
          unU (U28 a) = a
instance U Univ ReportIntendedUse
    where u = U29
          unU (U29 a) = a
instance U Univ ReportStandard
    where u = U30
          unU (U30 a) = a
instance U Univ ReportStatus
    where u = U31
          unU (U31 a) = a
instance U Univ ReportValueApproachInfo
    where u = U32
          unU (U32 a) = a
instance U Univ ReportValueTypeInfo
    where u = U33
          unU (U33 a) = a
instance U Univ EUI
    where u = U34
          unU (U34 a) = a
instance U Univ MEUI
    where u = U35
          unU (U35 a) = a
instance U Univ MaybeImageFile
    where u = U36
          unU (U36 a) = a
instance U Univ ReportImage
    where u = U37
          unU (U37 a) = a
instance U Univ ReportImages
    where u = U38
          unU (U38 a) = a
instance U Univ ReadOnlyFilePath
    where u = U39
          unU (U39 a) = a
instance U Univ ReportImageView
    where u = U40
          unU (U40 a) = a
instance U Univ ReportView
    where u = U41
          unU (U41 a) = a
instance U Univ SaneSizeImageSize
    where u = U42
          unU (U42 a) = a
instance U Univ Item
    where u = U43
          unU (U43 a) = a
instance U Univ MIM
    where u = U44
          unU (U44 a) = a
instance U Univ MRR
    where u = U45
          unU (U45 a) = a
instance U Univ ReportMap
    where u = U46
          unU (U46 a) = a
instance U Univ CIString
    where u = U47
          unU (U47 a) = a
instance U Univ URI
    where u = U48
          unU (U48 a) = a
instance U Univ Text
    where u = U49
          unU (U49 a) = a
instance U Univ UserId
    where u = U50
          unU (U50 a) = a
instance U Univ UUID
    where u = U51
          unU (U51 a) = a
instance HasAuthor Author
    where lens_author = id
          lens_Author_authorCredentials f (Author x1 x2) = fmap (\y1 -> Author x1 y1) (f x2)
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName f (Author x1 x2) = fmap (\y1 -> Author y1 x2) (f x1)
          {-# INLINE lens_Author_authorName #-}
instance HasBool Bool
    where lens_bool = id
instance HasBranding Branding
    where lens_branding = id
instance HasCIString CIString
    where lens_cIString = id
          lens_CIString_unCIString = iso (\(CIString x) -> x) CIString
          {-# INLINE lens_CIString_unCIString #-}
instance HasDimension Dimension
    where lens_dimension = id
instance HasDouble Double
    where lens_double = id
instance HasImageCrop ImageCrop
    where lens_imageCrop = id
          lens_ImageCrop_bottomCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageCrop_topCrop #-}
instance HasImageFile ImageFile
    where lens_imageFile = id
          lens_ImageFile_imageFile f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance HasImageSize ImageSize
    where lens_imageSize = id
          lens_ImageSize_dim f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize y1 x2 x3) (f x1)
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 y1 x3) (f x2)
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 x2 y1) (f x3)
          {-# INLINE lens_ImageSize_units #-}
instance HasInt Int
    where lens_int = id
instance HasInt64 Int64
    where lens_int64 = id
instance HasInteger Integer
    where lens_integer = id
instance HasItem Item
    where lens_item = id
          lens_Item_fields f (Item x1 x2 x3) = fmap (\y1 -> Item x1 y1 x3) (f x2)
          {-# INLINE lens_Item_fields #-}
          lens_Item_images f (Item x1 x2 x3) = fmap (\y1 -> Item x1 x2 y1) (f x3)
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName f (Item x1 x2 x3) = fmap (\y1 -> Item y1 x2 x3) (f x1)
          {-# INLINE lens_Item_itemName #-}
instance HasJSONText JSONText
    where lens_jSONText = id
          lens_JSONText_unJSONText = iso (\(JSONText x) -> x) JSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance HasMarkup Markup
    where lens_markup = id
          lens_Markup_htmlText _ (Markdown x1) = pure (Markdown x1)
          lens_Markup_htmlText f (Html x1) = fmap (\y1 -> Html y1) (f x1)
          lens_Markup_htmlText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_htmlText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_htmlText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText f (Markdown x1) = fmap (\y1 -> Markdown y1) (f x1)
          lens_Markup_markdownText _ (Html x1) = pure (Html x1)
          lens_Markup_markdownText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_markdownText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_markdownText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_markdownText #-}
instance HasPermissions Permissions
    where lens_permissions = id
          lens_Permissions_owner f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions y1 x2 x3) (f x1)
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 x2 y1) (f x3)
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 y1 x3) (f x2)
          {-# INLINE lens_Permissions_writers #-}
instance HasReport Report
    where lens_report = id
          lens_Report_reportAbbrevs f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate f (Report x1
                                                   x2
                                                   x3
                                                   x4
                                                   x5
                                                   x6
                                                   x7
                                                   x8
                                                   x9
                                                   x10
                                                   x11
                                                   x12
                                                   x13
                                                   x14
                                                   x15
                                                   x16
                                                   x17
                                                   x18
                                                   x19
                                                   x20
                                                   x21
                                                   x22
                                                   x23
                                                   x24
                                                   x25
                                                   x26
                                                   x27
                                                   x28
                                                   x29
                                                   x30
                                                   x31
                                                   x32
                                                   x33
                                                   x34
                                                   x35
                                                   x36
                                                   x37
                                                   x38
                                                   x39
                                                   x40
                                                   x41
                                                   x42
                                                   x43
                                                   x44
                                                   x45) = fmap (\y1 -> Report x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal f (Report x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion f (Report x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo f (Report x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance HasReportElem ReportElem
    where lens_reportElem = id
          lens_ReportElem_elemItem f (ReportItem x1) = fmap (\y1 -> ReportItem y1) (f x1)
          lens_ReportElem_elemItem _ (ReportParagraph x1) = pure (ReportParagraph x1)
          lens_ReportElem_elemItem _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText _ (ReportItem x1) = pure (ReportItem x1)
          lens_ReportElem_elemText f (ReportParagraph x1) = fmap (\y1 -> ReportParagraph y1) (f x1)
          lens_ReportElem_elemText _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemText #-}
instance HasReportFlags ReportFlags
    where lens_reportFlags = id
          lens_ReportFlags_hideEmptyItemFields = iso (\(ReportFlags x) -> x) ReportFlags
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance HasReportImage ReportImage
    where lens_reportImage = id
          lens_ReportImage_picCaption f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance HasReportImageView ReportImageView
    where lens_reportImageView = id
          lens_ReportImageView__picCaption f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance HasReportIntendedUse ReportIntendedUse
    where lens_reportIntendedUse = id
instance HasReportMap ReportMap
    where lens_reportMap = id
          lens_ReportMap_unReportMap = iso (\(ReportMap x) -> x) ReportMap
          {-# INLINE lens_ReportMap_unReportMap #-}
instance HasReportStandard ReportStandard
    where lens_reportStandard = id
          lens_ReportStandard_unReportStandard = iso (\(ReportStandard x) -> x) ReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance HasReportStatus ReportStatus
    where lens_reportStatus = id
instance HasReportValueApproachInfo ReportValueApproachInfo
    where lens_reportValueApproachInfo = id
          lens_ReportValueApproachInfo_reportValueApproachDescription f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo x1 y1) (f x2)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo y1 x2) (f x1)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance HasReportValueTypeInfo ReportValueTypeInfo
    where lens_reportValueTypeInfo = id
          lens_ReportValueTypeInfo_reportValueTypeDefinition f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 x2 y1) (f x3)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 y1 x3) (f x2)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo y1 x2 x3) (f x1)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance HasReportView ReportView
    where lens_reportView = id
          lens_ReportView__reportAbbrevs f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate f (ReportView x1
                                                            x2
                                                            x3
                                                            x4
                                                            x5
                                                            x6
                                                            x7
                                                            x8
                                                            x9
                                                            x10
                                                            x11
                                                            x12
                                                            x13
                                                            x14
                                                            x15
                                                            x16
                                                            x17
                                                            x18
                                                            x19
                                                            x20
                                                            x21
                                                            x22
                                                            x23
                                                            x24
                                                            x25
                                                            x26
                                                            x27
                                                            x28
                                                            x29
                                                            x30
                                                            x31
                                                            x32
                                                            x33
                                                            x34
                                                            x35
                                                            x36
                                                            x37
                                                            x38
                                                            x39
                                                            x40
                                                            x41
                                                            x42
                                                            x43
                                                            x44
                                                            x45) = fmap (\y1 -> ReportView x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal f (ReportView x1
                                                                   x2
                                                                   x3
                                                                   x4
                                                                   x5
                                                                   x6
                                                                   x7
                                                                   x8
                                                                   x9
                                                                   x10
                                                                   x11
                                                                   x12
                                                                   x13
                                                                   x14
                                                                   x15
                                                                   x16
                                                                   x17
                                                                   x18
                                                                   x19
                                                                   x20
                                                                   x21
                                                                   x22
                                                                   x23
                                                                   x24
                                                                   x25
                                                                   x26
                                                                   x27
                                                                   x28
                                                                   x29
                                                                   x30
                                                                   x31
                                                                   x32
                                                                   x33
                                                                   x34
                                                                   x35
                                                                   x36
                                                                   x37
                                                                   x38
                                                                   x39
                                                                   x40
                                                                   x41
                                                                   x42
                                                                   x43
                                                                   x44
                                                                   x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion f (ReportView x1
                                                                x2
                                                                x3
                                                                x4
                                                                x5
                                                                x6
                                                                x7
                                                                x8
                                                                x9
                                                                x10
                                                                x11
                                                                x12
                                                                x13
                                                                x14
                                                                x15
                                                                x16
                                                                x17
                                                                x18
                                                                x19
                                                                x20
                                                                x21
                                                                x22
                                                                x23
                                                                x24
                                                                x25
                                                                x26
                                                                x27
                                                                x28
                                                                x29
                                                                x30
                                                                x31
                                                                x32
                                                                x33
                                                                x34
                                                                x35
                                                                x36
                                                                x37
                                                                x38
                                                                x39
                                                                x40
                                                                x41
                                                                x42
                                                                x43
                                                                x44
                                                                x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo f (ReportView x1
                                                                 x2
                                                                 x3
                                                                 x4
                                                                 x5
                                                                 x6
                                                                 x7
                                                                 x8
                                                                 x9
                                                                 x10
                                                                 x11
                                                                 x12
                                                                 x13
                                                                 x14
                                                                 x15
                                                                 x16
                                                                 x17
                                                                 x18
                                                                 x19
                                                                 x20
                                                                 x21
                                                                 x22
                                                                 x23
                                                                 x24
                                                                 x25
                                                                 x26
                                                                 x27
                                                                 x28
                                                                 x29
                                                                 x30
                                                                 x31
                                                                 x32
                                                                 x33
                                                                 x34
                                                                 x35
                                                                 x36
                                                                 x37
                                                                 x38
                                                                 x39
                                                                 x40
                                                                 x41
                                                                 x42
                                                                 x43
                                                                 x44
                                                                 x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance HasText Text
    where lens_text = id
instance HasURI URI
    where lens_uRI = id
          lens_URI_uriAuthority f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_URI_uriScheme #-}
instance HasUUID UUID
    where lens_uUID = id
instance HasUnits Units
    where lens_units = id
instance HasUserId UserId
    where lens_userId = id
          lens_UserId__unUserId = iso (\(UserId x) -> x) UserId
          {-# INLINE lens_UserId__unUserId #-}
instance Describe (Peek Univ String)
    where describe' _f (Peek_String_JSONText (_p@(Path_String_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ JSONText);
                                                                                    top = describe' _f (Proxy :: Proxy String)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy String)
instance Describe (Peek Univ Int64)
    where describe' _ _ = Nothing
instance Describe (Peek Univ Bool)
    where describe' _f (Peek_Bool_String (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                              top = describe' _f (Proxy :: Proxy Bool)}
                                                                          in maybe top Just next
          describe' _f (Peek_Bool_JSONText (_p@(Path_Bool_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                top = describe' _f (Proxy :: Proxy Bool)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Bool)
instance Describe (Peek Univ Double)
    where describe' _f (Peek_Double_String (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                  top = describe' _f (Proxy :: Proxy Double)}
                                                                              in maybe top Just next
          describe' _f (Peek_Double_JSONText (_p@(Path_Double_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                    top = describe' _f (Proxy :: Proxy Double)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Double)
instance Describe (Peek Univ Int)
    where describe' _ _ = Nothing
instance Describe (Peek Univ Dimension)
    where describe' _f (Peek_Dimension_JSONText (_p@(Path_Dimension_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ JSONText);
                                                                                          top = describe' _f (Proxy :: Proxy Dimension)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Dimension)
instance Describe (Peek Univ ImageCrop)
    where describe' _ _ = Nothing
instance Describe (Peek Univ ImageSize)
    where describe' _f (Peek_ImageSize_Dimension (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ Dimension);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Dimension);
                                                                                         top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ImageSize_String (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Double);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_Double (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ Double);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_size _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Double);
                                                                                          top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ImageSize_Units (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ Units);
                                                                                        top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just next
          describe' _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_units _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Units);
                                                                                           top = describe' _f (Proxy :: Proxy ImageSize)}
                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ImageSize)
instance Describe (Peek Univ Units)
    where describe' _f (Peek_Units_JSONText (_p@(Path_Units_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ JSONText);
                                                                                  top = describe' _f (Proxy :: Proxy Units)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Units)
instance Describe (Peek Univ ImageFile)
    where describe' _ _ = Nothing
instance Describe (Peek Univ Integer)
    where describe' _ _ = Nothing
instance Describe (Peek Univ JSONText)
    where describe' _ _ = Nothing
instance Describe (Peek Univ Markup)
    where describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                            top = describe' _f (Proxy :: Proxy Markup)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_JSONText (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Markup)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Markup_Text (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Markup)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markup)
instance Describe (Peek Univ Permissions)
    where describe' _f (Peek_Permissions_UserId (_p@(Path_Permissions_owner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "owner");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe UserId) :: Peek Univ UserId);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ UserIds);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ UserIds);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_writers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ UserIds);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Permissions_JSONText (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ UserIds);
                                                                                                 top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Permissions_UserIds (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ UserIds);
                                                                                                top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just next
          describe' _f (Peek_Permissions_Text (_p@(Path_Permissions_readers _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ UserIds);
                                                                                             top = describe' _f (Proxy :: Proxy Permissions)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Permissions)
instance Describe (Peek Univ UserIds)
    where describe' _f (Peek_UserIds_JSONText (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                      top = describe' _f (Proxy :: Proxy UserIds)}
                                                                                  in maybe top Just next
          describe' _f (Peek_UserIds_Text (_p@(Path_UserIds_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                  top = describe' _f (Proxy :: Proxy UserIds)}
                                                                              in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy UserIds)
instance Describe (Peek Univ AbbrevPair)
    where describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ CIString);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_CIString (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ CIString);
                                                                                  top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ CIString);
                                                                              top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_AbbrevPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPair)
instance Describe (Peek Univ AbbrevPairs)
    where describe' _f (Peek_AbbrevPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ AbbrevPair);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ AbbrevPair);
                                                                                 top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_AbbrevPairs_AbbrevPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPair) :: Peek Univ AbbrevPair);
                                                                                     top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_AbbrevPairs_CIString (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ AbbrevPair);
                                                                                   top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_AbbrevPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ AbbrevPair);
                                                                               top = describe' _f (Proxy :: Proxy AbbrevPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy AbbrevPairs)
instance Describe (Peek Univ Author)
    where describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Just ("Author", "Author", Right "authorName");
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                          top = describe' _f (Proxy :: Proxy Author)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Author", "Author", Right "authorName");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                        top = describe' _f (Proxy :: Proxy Author)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Author", "Author", Right "authorName");
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                      top = describe' _f (Proxy :: Proxy Author)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Author_JSONText (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy Author)}
                                                                                             in maybe top Just next
          describe' _f (Peek_Author_Markup (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy Author)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Author_Text (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                             top = describe' _f (Proxy :: Proxy Author)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Author)
instance Describe (Peek Univ Authors)
    where describe' _f (Peek_Authors_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Author);
                                                                               top = describe' _f (Proxy :: Proxy Authors)}
                                                                           in maybe top Just next
          describe' _f (Peek_Authors_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Author);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Author (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Author) :: Peek Univ Author);
                                                                             top = describe' _f (Proxy :: Proxy Authors)}
                                                                         in maybe top Just next
          describe' _f (Peek_Authors_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Author);
                                                                           top = describe' _f (Proxy :: Proxy Authors)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Authors)
instance Describe (Peek Univ Branding)
    where describe' _f (Peek_Branding_JSONText (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy Branding)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Branding_Text (_p@(Path_Branding_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Branding)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Branding)
instance Describe (Peek Univ MarkupPair)
    where describe' _f (Peek_MarkupPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                  top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                              in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                            in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_First _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                              top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                          in maybe top Just next
          describe' _f (Peek_MarkupPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPair_Text (_p@(Path_Second _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPair)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPair)
instance Describe (Peek Univ MarkupPairs)
    where describe' _f (Peek_MarkupPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MarkupPair);
                                                                                   top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                               in maybe top Just next
          describe' _f (Peek_MarkupPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ MarkupPair);
                                                                                 top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                             in maybe top Just next
          describe' _f (Peek_MarkupPairs_MarkupPair (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ MarkupPair);
                                                                                     top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MarkupPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ MarkupPair);
                                                                               top = describe' _f (Proxy :: Proxy MarkupPairs)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MarkupPairs)
instance Describe (Peek Univ Markups)
    where describe' _f (Peek_Markups_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                               top = describe' _f (Proxy :: Proxy Markups)}
                                                                           in maybe top Just next
          describe' _f (Peek_Markups_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                             top = describe' _f (Proxy :: Proxy Markups)}
                                                                         in maybe top Just next
          describe' _f (Peek_Markups_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                           top = describe' _f (Proxy :: Proxy Markups)}
                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Markups)
instance Describe (Peek Univ MaybeReportIntendedUse)
    where describe' _f (Peek_MaybeReportIntendedUse_String (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Nothing;
                                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                                                  top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeReportIntendedUse_JSONText (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Nothing;
                                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                                                    top = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)}
                                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeReportIntendedUse)
instance Describe (Peek Univ Report)
    where describe' _f (Peek_Report_String (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Int64 (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Int64) :: Peek Univ ReportView);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_Int (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Int) :: Peek Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Bool (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_Double (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Dimension (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageCrop (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_ImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Units (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportView);
                                                                                 top = describe' _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just next
          describe' _f (Peek_Report_ImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportView);
                                                                                     top = describe' _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Report_Integer (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Integer) :: Peek Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_JSONText (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_Markup (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Permissions (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Permissions) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_UserIds (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_AbbrevPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPair) :: Peek Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_AbbrevPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPairs) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Author (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Author) :: Peek Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_Authors (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Authors) :: Peek Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_Branding (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Branding) :: Peek Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_MarkupPair (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_MarkupPairs (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPairs) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_Markups (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Markups) :: Peek Univ ReportView);
                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just next
          describe' _f (Peek_Report_MaybeReportIntendedUse (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeReportIntendedUse) :: Peek Univ ReportView);
                                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                                              in maybe top Just next
          describe' _f (Peek_Report_ReportElem (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElem) :: Peek Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_ReportElems (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElems) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportFlags (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportFlags) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportStandard (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStandard) :: Peek Univ ReportView);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportStatus (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStatus) :: Peek Univ ReportView);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReportValueApproachInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Nothing;
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueApproachInfo) :: Peek Univ ReportView);
                                                                                                   top = describe' _f (Proxy :: Proxy Report)}
                                                                                               in maybe top Just next
          describe' _f (Peek_Report_ReportValueTypeInfo (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueTypeInfo) :: Peek Univ ReportView);
                                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                                           in maybe top Just next
          describe' _f (Peek_Report_EUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_MEUI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MaybeImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportView);
                                                                                          top = describe' _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just next
          describe' _f (Peek_Report_ReportImage (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ ReportView);
                                                                                       top = describe' _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just next
          describe' _f (Peek_Report_ReportImages (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ ReportView);
                                                                                        top = describe' _f (Proxy :: Proxy Report)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Report_ReadOnlyFilePath (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe ReadOnlyFilePath) :: Peek Univ ReportView);
                                                                                            top = describe' _f (Proxy :: Proxy Report)}
                                                                                        in maybe top Just next
          describe' _f (Peek_Report_ReportImageView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportView);
                                                                                           top = describe' _f (Proxy :: Proxy Report)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Report_ReportView (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportView) :: Peek Univ ReportView);
                                                                                      top = describe' _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Report_SaneSizeImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportView);
                                                                                             top = describe' _f (Proxy :: Proxy Report)}
                                                                                         in maybe top Just next
          describe' _f (Peek_Report_Item (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_MIM (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_CIString (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ ReportView);
                                                                                    top = describe' _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just next
          describe' _f (Peek_Report_URI (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportView);
                                                                               top = describe' _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just next
          describe' _f (Peek_Report_Text (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f (Peek_Report_UserId (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe UserId) :: Peek Univ ReportView);
                                                                                  top = describe' _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just next
          describe' _f (Peek_Report_UUID (_p@(Path_Report_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe UUID) :: Peek Univ ReportView);
                                                                                top = describe' _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Report)
instance Describe (Peek Univ ReportElem)
    where describe' _f (Peek_ReportElem_String (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Bool (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_Double (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Dimension (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageCrop (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_ImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_Units (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ Item);
                                                                                             top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportElem_ImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ Item);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Item);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Item);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_EUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_MEUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MaybeImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ Item);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImage (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ Item);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImages (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ Item);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportElem_ReportImageView (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ Item);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElem_SaneSizeImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ Item);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElem_Item (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_MIM (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_URI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ Item);
                                                                                           top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Item);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                              top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElem)
instance Describe (Peek Univ ReportElems)
    where describe' _f (Peek_ReportElems_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportElem);
                                                                                top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportElems_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportElem);
                                                                                    top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportElems_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportElem);
                                                                                   top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                               in maybe top Just next
          describe' _f (Peek_ReportElems_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportElem);
                                                                                 top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportElems_ReportElem (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElem) :: Peek Univ ReportElem);
                                                                                     top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportElems_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportElem);
                                                                                         top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ ReportElem);
                                                                                      top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                  in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImages (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ ReportElem);
                                                                                       top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportElems_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportElem);
                                                                                          top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportElems_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportElem);
                                                                                            top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportElems_Item (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportElems_MIM (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportElem);
                                                                              top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                          in maybe top Just next
          describe' _f (Peek_ReportElems_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportElem);
                                                                               top = describe' _f (Proxy :: Proxy ReportElems)}
                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportElems)
instance Describe (Peek Univ ReportFlags)
    where describe' _f (Peek_ReportFlags_String (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Bool);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportFlags_Bool (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Bool);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportFlags_JSONText (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Bool);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportFlags)}
                                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportFlags)
instance Describe (Peek Univ ReportIntendedUse)
    where describe' _f (Peek_ReportIntendedUse_String (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportIntendedUse_JSONText (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportIntendedUse)
instance Describe (Peek Univ ReportStandard)
    where describe' _f (Peek_ReportStandard_Int (_p@(Path_ReportStandard_unReportStandard _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportStandard", "ReportStandard", Right "unReportStandard");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Int) :: Peek Univ Int);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportStandard)}
                                                                                                       in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStandard)
instance Describe (Peek Univ ReportStatus)
    where describe' _f (Peek_ReportStatus_String (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                              top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportStatus_JSONText (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Nothing;
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                                top = describe' _f (Proxy :: Proxy ReportStatus)}
                                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportStatus)
instance Describe (Peek Univ ReportValueApproachInfo)
    where describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                         String,
                                                                                                                                                         Either Int String));
                                                                                                                                         wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                       String,
                                                                                                                                                       Either Int String));
                                                                                                                                       wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                                       top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                     String,
                                                                                                                                                     Either Int String));
                                                                                                                                     wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                                                     top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                                String,
                                                                                                                                                                Either Int String));
                                                                                                                                                wfld = Just ("ReportValueApproachInfo",
                                                                                                                                                             "ReportValueApproachInfo",
                                                                                                                                                             Right "reportValueApproachDescription");
                                                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                              String,
                                                                                                                                                              Either Int String));
                                                                                                                                              wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                                              top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                            String,
                                                                                                                                                            Either Int String));
                                                                                                                                            wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                                                            top = describe' _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueApproachInfo)
instance Describe (Peek Univ ReportValueTypeInfo)
    where describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                             String,
                                                                                                                                             Either Int String));
                                                                                                                             wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                         wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeName");
                                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                                         top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                    String,
                                                                                                                                                    Either Int String));
                                                                                                                                    wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                                    top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                  String,
                                                                                                                                                  Either Int String));
                                                                                                                                  wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                                  top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                String,
                                                                                                                                                Either Int String));
                                                                                                                                wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDescription");
                                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                                                top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                   String,
                                                                                                                                                   Either Int String));
                                                                                                                                   wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                                   top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                                 String,
                                                                                                                                                 Either Int String));
                                                                                                                                 wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                                 top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportValueTypeInfo", "ReportValueTypeInfo", Right "reportValueTypeDefinition");
                                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                           in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportValueTypeInfo)
instance Describe (Peek Univ EUI)
    where describe' _f (Peek_EUI_URI (_p@(Path_Left _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                     wfld = Nothing;
                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ URI);
                                                                     top = describe' _f (Proxy :: Proxy EUI)}
                                                                 in maybe top Just next
          describe' _f (Peek_EUI_ImageFile (_p@(Path_Right _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ImageFile);
                                                                            top = describe' _f (Proxy :: Proxy EUI)}
                                                                        in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy EUI)
instance Describe (Peek Univ MEUI)
    where describe' _f (Peek_MEUI_ImageFile (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ EUI);
                                                                            top = describe' _f (Proxy :: Proxy MEUI)}
                                                                        in maybe top Just next
          describe' _f (Peek_MEUI_EUI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ EUI);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f (Peek_MEUI_URI (_p@(Path_Just _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                      wfld = Nothing;
                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ EUI);
                                                                      top = describe' _f (Proxy :: Proxy MEUI)}
                                                                  in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MEUI)
instance Describe (Peek Univ MaybeImageFile)
    where describe' _f (Peek_MaybeImageFile_String (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Nothing;
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                                  top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                              in maybe top Just next
          describe' _f (Peek_MaybeImageFile_JSONText (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                                    top = describe' _f (Proxy :: Proxy MaybeImageFile)}
                                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MaybeImageFile)
instance Describe (Peek Univ ReportImage)
    where describe' _f (Peek_ReportImage_String (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Bool (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_Double (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_Dimension (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageCrop (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_ImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_Units (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportImageView);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImage_ImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Nothing;
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportImageView);
                                                                                               top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImage_JSONText (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Nothing;
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportImageView);
                                                                                              top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportImage_Markup (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportImageView);
                                                                                            top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImage_EUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportImageView);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_MEUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImage_MaybeImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Nothing;
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportImageView);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImage_ReportImageView (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Nothing;
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportImageView);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImage_SaneSizeImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportImageView);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImage_URI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Nothing;
                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportImageView);
                                                                                         top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImage_Text (_p@(Path_ReportImage_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportImageView);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImage)
instance Describe (Peek Univ ReportImages)
    where describe' _f (Peek_ReportImages_String (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Bool (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_Double (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_Units (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportImage);
                                                                                 top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                             in maybe top Just next
          describe' _f (Peek_ReportImages_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportImage);
                                                                                     top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImages_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportImage);
                                                                                    top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                in maybe top Just next
          describe' _f (Peek_ReportImages_Markup (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Nothing;
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportImage);
                                                                                  top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                              in maybe top Just next
          describe' _f (Peek_ReportImages_EUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportImage);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f (Peek_ReportImages_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                          wfld = Nothing;
                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportImage);
                                                                                          top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                       wfld = Nothing;
                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ ReportImage);
                                                                                       top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImages_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportImage);
                                                                                           top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImages_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Nothing;
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportImage);
                                                                                             top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImages_URI (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportImage);
                                                                               top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                           in maybe top Just next
          describe' _f (Peek_ReportImages_Text (_p@(Path_At _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportImage);
                                                                                top = describe' _f (Proxy :: Proxy ReportImages)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImages)
instance Describe (Peek Univ ReadOnlyFilePath)
    where describe' _f (Peek_ReadOnlyFilePath_String (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Nothing;
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ String);
                                                                                                      top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReadOnlyFilePath_JSONText (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ String);
                                                                                                        top = describe' _f (Proxy :: Proxy ReadOnlyFilePath)}
                                                                                                    in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReadOnlyFilePath)
instance Describe (Peek Univ ReportImageView)
    where describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ SaneSizeImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Double (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ SaneSizeImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_Dimension (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ SaneSizeImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ SaneSizeImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Units (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ SaneSizeImageSize);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ SaneSizeImageSize);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_SaneSizeImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ SaneSizeImageSize);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageCrop (_p@(Path_ReportImageView__picCrop _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCrop");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ImageCrop);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_Markup (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_Text (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_ImageFile (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ MEUI);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_EUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ MEUI);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_MEUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ MEUI);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportImageView_URI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ MEUI);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                    wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MaybeImageFile);
                                                                                                                    top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MaybeImageFile);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                            wfld = Just ("ReportImageView", "ReportImageView", Right "_picEditedDeprecated");
                                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ MaybeImageFile);
                                                                                                                            top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                   wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MaybeImageFile);
                                                                                                                   top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MaybeImageFile);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                           wfld = Just ("ReportImageView", "ReportImageView", Right "_picThumbDeprecated");
                                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ MaybeImageFile);
                                                                                                                           top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MaybeImageFile);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MaybeImageFile);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picPrinterDeprecated");
                                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ MaybeImageFile);
                                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Bool);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportImageView_Bool (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Bool);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportImageView", "ReportImageView", Right "_picMustEnlarge");
                                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Bool);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                      wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MaybeImageFile);
                                                                                                                      top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MaybeImageFile);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                              String,
                                                                                                                                              Either Int String));
                                                                                                                              wfld = Just ("ReportImageView", "ReportImageView", Right "_picEnlargedDeprecated");
                                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ MaybeImageFile);
                                                                                                                              top = describe' _f (Proxy :: Proxy ReportImageView)}
                                                                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportImageView)
instance Describe (Peek Univ ReportView)
    where describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReadOnlyFilePath);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReadOnlyFilePath);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReadOnlyFilePath (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe ReadOnlyFilePath) :: Peek Univ ReadOnlyFilePath);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Authors);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Authors);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Author (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Author) :: Peek Univ Authors);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Authors (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Authors) :: Peek Univ Authors);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Authors);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerAddress");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPreparerWebsite");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ AbbrevPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ AbbrevPairs);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPair (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPair) :: Peek Univ AbbrevPairs);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_AbbrevPairs (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPairs) :: Peek Univ AbbrevPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_CIString (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ AbbrevPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ AbbrevPairs);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MaybeReportIntendedUse);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MaybeReportIntendedUse);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_MaybeReportIntendedUse (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeReportIntendedUse) :: Peek Univ MaybeReportIntendedUse);
                                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportValueTypeInfo);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportValueTypeInfo);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueTypeInfo (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueTypeInfo) :: Peek Univ ReportValueTypeInfo);
                                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportValueTypeInfo);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportValueApproachInfo);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportValueApproachInfo);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_ReportValueApproachInfo (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String,
                                                                                                                                               String,
                                                                                                                                               Either Int String));
                                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueApproachInfo) :: Peek Univ ReportValueApproachInfo);
                                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportValueApproachInfo");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportValueApproachInfo);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportInspectionLocation");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Double (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Dimension (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageCrop (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Units (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportElems);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_ImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportElems);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportElems);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportElems);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_ReportElem (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElem) :: Peek Univ ReportElems);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportElems (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElems) :: Peek Univ ReportElems);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_EUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_MEUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MaybeImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportElems);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_ReportImage (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ ReportElems);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_ReportImages (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ ReportElems);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_ReportImageView (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportElems);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_SaneSizeImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportElems);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Item (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_MIM (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_URI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportElems);
                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportElems);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MarkupPairs);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ MarkupPairs);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ MarkupPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPairs) :: Peek Univ MarkupPairs);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ MarkupPairs);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MarkupPairs);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ MarkupPairs);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ MarkupPairs);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPairs) :: Peek Univ MarkupPairs);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ MarkupPairs);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportLetterOfTransmittal");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markups);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markups);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markups) :: Peek Univ Markups);
                                                                                                           top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markups);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                 wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markups);
                                                                                                                 top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markups);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markups) :: Peek Univ Markups);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                             wfld = Just ("ReportView", "ReportView", Right "_reportLimitingConditions");
                                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markups);
                                                                                                             top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Permissions);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_Permissions (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Permissions) :: Peek Univ Permissions);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UserIds (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ Permissions);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Permissions);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_UserId (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe UserId) :: Peek Univ Permissions);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Integer (_p@(Path_ReportView__reportRevision _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                      wfld = Just ("ReportView", "ReportView", Right "_reportRevision");
                                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe Integer) :: Peek Univ Integer);
                                                                                                      top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just next
          describe' _f (Peek_ReportView_Int64 (_p@(Path_ReportView__reportCreated _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportCreated");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Int64) :: Peek Univ Int64);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Branding);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Branding (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Branding) :: Peek Univ Branding);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Branding);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportStatus);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportStatus);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_ReportStatus (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStatus) :: Peek Univ ReportStatus);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Bool);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Bool);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Bool);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportFlags);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportFlags);
                                                                                                top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportFlags);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportView_ReportFlags (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportFlags) :: Peek Univ ReportFlags);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportView_UUID (_p@(Path_ReportView__reportUUID _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportView", "ReportView", Right "_reportUUID");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe UUID) :: Peek Univ UUID);
                                                                                               top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Bool);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Bool);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportOrderByItemName");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Bool);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_String (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Bool);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Bool);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                              wfld = Just ("ReportView", "ReportView", Right "_reportDisplayItemName");
                                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Bool);
                                                                                                              top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just next
          describe' _f (Peek_ReportView_Int (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Int) :: Peek Univ ReportStandard);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportView_ReportStandard (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                     wfld = Just ("ReportView", "ReportView", Right "_reportStandardsVersion");
                                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStandard) :: Peek Univ ReportStandard);
                                                                                                                     top = describe' _f (Proxy :: Proxy ReportView)}
                                                                                                                 in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportView)
instance Describe (Peek Univ SaneSizeImageSize)
    where describe' _f (Peek_SaneSizeImageSize_String (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Double (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Nothing;
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ImageSize);
                                                                                                        top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Dimension (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_ImageSize (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                           wfld = Nothing;
                                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ImageSize);
                                                                                                           top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                       in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_Units (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Nothing;
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ImageSize);
                                                                                                       top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_SaneSizeImageSize_JSONText (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Nothing;
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ImageSize);
                                                                                                          top = describe' _f (Proxy :: Proxy SaneSizeImageSize)}
                                                                                                      in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy SaneSizeImageSize)
instance Describe (Peek Univ Item)
    where describe' _f (Peek_Item_JSONText (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Just ("Item", "Item", Right "itemName");
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy Item)}
                                                                                in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_itemName _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "itemName");
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "fields");
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MIM);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "fields");
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ MIM);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_MIM (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "fields");
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ MIM);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_fields _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "fields");
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ MIM);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_String (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Bool (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_Double (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_Dimension (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageCrop (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_ImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_Units (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Just ("Item", "Item", Right "images");
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ ReportImages);
                                                                               top = describe' _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just next
          describe' _f (Peek_Item_ImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Just ("Item", "Item", Right "images");
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ ReportImages);
                                                                                   top = describe' _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just next
          describe' _f (Peek_Item_JSONText (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                  wfld = Just ("Item", "Item", Right "images");
                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ ReportImages);
                                                                                  top = describe' _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just next
          describe' _f (Peek_Item_Markup (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Just ("Item", "Item", Right "images");
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ ReportImages);
                                                                                top = describe' _f (Proxy :: Proxy Item)}
                                                                            in maybe top Just next
          describe' _f (Peek_Item_EUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ ReportImages);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_MEUI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f (Peek_Item_MaybeImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Just ("Item", "Item", Right "images");
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ ReportImages);
                                                                                        top = describe' _f (Proxy :: Proxy Item)}
                                                                                    in maybe top Just next
          describe' _f (Peek_Item_ReportImage (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Just ("Item", "Item", Right "images");
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ ReportImages);
                                                                                     top = describe' _f (Proxy :: Proxy Item)}
                                                                                 in maybe top Just next
          describe' _f (Peek_Item_ReportImages (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Just ("Item", "Item", Right "images");
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ ReportImages);
                                                                                      top = describe' _f (Proxy :: Proxy Item)}
                                                                                  in maybe top Just next
          describe' _f (Peek_Item_ReportImageView (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                         wfld = Just ("Item", "Item", Right "images");
                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ ReportImages);
                                                                                         top = describe' _f (Proxy :: Proxy Item)}
                                                                                     in maybe top Just next
          describe' _f (Peek_Item_SaneSizeImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Just ("Item", "Item", Right "images");
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ ReportImages);
                                                                                           top = describe' _f (Proxy :: Proxy Item)}
                                                                                       in maybe top Just next
          describe' _f (Peek_Item_URI (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Just ("Item", "Item", Right "images");
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ ReportImages);
                                                                             top = describe' _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just next
          describe' _f (Peek_Item_Text (_p@(Path_Item_images _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Just ("Item", "Item", Right "images");
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ ReportImages);
                                                                              top = describe' _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Item)
instance Describe (Peek Univ MIM)
    where describe' _f (Peek_MIM_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Markup);
                                                                             top = describe' _f (Proxy :: Proxy MIM)}
                                                                         in maybe top Just next
          describe' _f (Peek_MIM_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Markup);
                                                                           top = describe' _f (Proxy :: Proxy MIM)}
                                                                       in maybe top Just next
          describe' _f (Peek_MIM_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Markup);
                                                                         top = describe' _f (Proxy :: Proxy MIM)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MIM)
instance Describe (Peek Univ MRR)
    where describe' _f (Peek_MRR_String (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Int64 (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Int64) :: Peek Univ Report);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_Int (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe Int) :: Peek Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Bool (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_Double (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Dimension (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageCrop (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_ImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Units (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                          wfld = Nothing;
                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ Report);
                                                                          top = describe' _f (Proxy :: Proxy MRR)}
                                                                      in maybe top Just next
          describe' _f (Peek_MRR_ImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                              wfld = Nothing;
                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ Report);
                                                                              top = describe' _f (Proxy :: Proxy MRR)}
                                                                          in maybe top Just next
          describe' _f (Peek_MRR_Integer (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Integer) :: Peek Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Permissions (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Permissions) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_UserIds (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPair) :: Peek Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_AbbrevPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPairs) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Author (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Author) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Authors (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Authors) :: Peek Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_Branding (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Branding) :: Peek Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_MarkupPair (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_MarkupPairs (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPairs) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_Markups (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                            wfld = Nothing;
                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Markups) :: Peek Univ Report);
                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                        in maybe top Just next
          describe' _f (Peek_MRR_MaybeReportIntendedUse (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                           wfld = Nothing;
                                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeReportIntendedUse) :: Peek Univ Report);
                                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                                       in maybe top Just next
          describe' _f (Peek_MRR_Report (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe Report) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_ReportElem (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElem) :: Peek Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_ReportElems (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElems) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportFlags (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe ReportFlags) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportStandard (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStandard) :: Peek Univ Report);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportStatus (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStatus) :: Peek Univ Report);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReportValueApproachInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Nothing;
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueApproachInfo) :: Peek Univ Report);
                                                                                            top = describe' _f (Proxy :: Proxy MRR)}
                                                                                        in maybe top Just next
          describe' _f (Peek_MRR_ReportValueTypeInfo (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueTypeInfo) :: Peek Univ Report);
                                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                                    in maybe top Just next
          describe' _f (Peek_MRR_EUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_MEUI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MaybeImageFile (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                   wfld = Nothing;
                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ Report);
                                                                                   top = describe' _f (Proxy :: Proxy MRR)}
                                                                               in maybe top Just next
          describe' _f (Peek_MRR_ReportImage (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ Report);
                                                                                top = describe' _f (Proxy :: Proxy MRR)}
                                                                            in maybe top Just next
          describe' _f (Peek_MRR_ReportImages (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                 wfld = Nothing;
                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ Report);
                                                                                 top = describe' _f (Proxy :: Proxy MRR)}
                                                                             in maybe top Just next
          describe' _f (Peek_MRR_ReadOnlyFilePath (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                     wfld = Nothing;
                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReadOnlyFilePath) :: Peek Univ Report);
                                                                                     top = describe' _f (Proxy :: Proxy MRR)}
                                                                                 in maybe top Just next
          describe' _f (Peek_MRR_ReportImageView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ Report);
                                                                                    top = describe' _f (Proxy :: Proxy MRR)}
                                                                                in maybe top Just next
          describe' _f (Peek_MRR_ReportView (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                               wfld = Nothing;
                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe ReportView) :: Peek Univ Report);
                                                                               top = describe' _f (Proxy :: Proxy MRR)}
                                                                           in maybe top Just next
          describe' _f (Peek_MRR_SaneSizeImageSize (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                      wfld = Nothing;
                                                                                      next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ Report);
                                                                                      top = describe' _f (Proxy :: Proxy MRR)}
                                                                                  in maybe top Just next
          describe' _f (Peek_MRR_Item (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_MIM (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_CIString (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                             wfld = Nothing;
                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ Report);
                                                                             top = describe' _f (Proxy :: Proxy MRR)}
                                                                         in maybe top Just next
          describe' _f (Peek_MRR_URI (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                        wfld = Nothing;
                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ Report);
                                                                        top = describe' _f (Proxy :: Proxy MRR)}
                                                                    in maybe top Just next
          describe' _f (Peek_MRR_Text (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f (Peek_MRR_UserId (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                           wfld = Nothing;
                                                                           next = describe' wfld (peekCons _wp (undefined :: Maybe UserId) :: Peek Univ Report);
                                                                           top = describe' _f (Proxy :: Proxy MRR)}
                                                                       in maybe top Just next
          describe' _f (Peek_MRR_UUID (_p@(Path_Look _k _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                         wfld = Nothing;
                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe UUID) :: Peek Univ Report);
                                                                         top = describe' _f (Proxy :: Proxy MRR)}
                                                                     in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy MRR)
instance Describe (Peek Univ ReportMap)
    where describe' _f (Peek_ReportMap_String (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe String) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Int64 (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Int64) :: Peek Univ MRR);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_Int (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe Int) :: Peek Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Bool (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Bool) :: Peek Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_Double (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Double) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Dimension (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe Dimension) :: Peek Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageCrop (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe ImageCrop) :: Peek Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_ImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe ImageSize) :: Peek Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Units (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                              wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                              next = describe' wfld (peekCons _wp (undefined :: Maybe Units) :: Peek Univ MRR);
                                                                                              top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                          in maybe top Just next
          describe' _f (Peek_ReportMap_ImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                  wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                  next = describe' wfld (peekCons _wp (undefined :: Maybe ImageFile) :: Peek Univ MRR);
                                                                                                  top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                              in maybe top Just next
          describe' _f (Peek_ReportMap_Integer (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Integer) :: Peek Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_JSONText (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_Markup (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Markup) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Permissions (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Permissions) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_UserIds (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe UserIds) :: Peek Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPair) :: Peek Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_AbbrevPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe AbbrevPairs) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Author (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Author) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Authors (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Authors) :: Peek Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_Branding (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe Branding) :: Peek Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPair (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPair) :: Peek Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_MarkupPairs (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe MarkupPairs) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_Markups (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe Markups) :: Peek Univ MRR);
                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeReportIntendedUse (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeReportIntendedUse) :: Peek Univ MRR);
                                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_Report (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe Report) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElem (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElem) :: Peek Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_ReportElems (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ReportElems) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportFlags (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ReportFlags) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStandard (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStandard) :: Peek Univ MRR);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportStatus (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportStatus) :: Peek Univ MRR);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueApproachInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                                wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueApproachInfo) :: Peek Univ MRR);
                                                                                                                top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                            in maybe top Just next
          describe' _f (Peek_ReportMap_ReportValueTypeInfo (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe ReportValueTypeInfo) :: Peek Univ MRR);
                                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_EUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe EUI) :: Peek Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MEUI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe MEUI) :: Peek Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MaybeImageFile (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                       wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                       next = describe' wfld (peekCons _wp (undefined :: Maybe MaybeImageFile) :: Peek Univ MRR);
                                                                                                       top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                   in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImage (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                    wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImage) :: Peek Univ MRR);
                                                                                                    top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImages (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                     wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                     next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImages) :: Peek Univ MRR);
                                                                                                     top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                 in maybe top Just next
          describe' _f (Peek_ReportMap_ReadOnlyFilePath (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                         wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                         next = describe' wfld (peekCons _wp (undefined :: Maybe ReadOnlyFilePath) :: Peek Univ MRR);
                                                                                                         top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                     in maybe top Just next
          describe' _f (Peek_ReportMap_ReportImageView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                        wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe ReportImageView) :: Peek Univ MRR);
                                                                                                        top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                    in maybe top Just next
          describe' _f (Peek_ReportMap_ReportView (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                   wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                   next = describe' wfld (peekCons _wp (undefined :: Maybe ReportView) :: Peek Univ MRR);
                                                                                                   top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                               in maybe top Just next
          describe' _f (Peek_ReportMap_SaneSizeImageSize (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                          wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                          next = describe' wfld (peekCons _wp (undefined :: Maybe SaneSizeImageSize) :: Peek Univ MRR);
                                                                                                          top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                                      in maybe top Just next
          describe' _f (Peek_ReportMap_Item (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Item) :: Peek Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_MIM (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe MIM) :: Peek Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_MRR (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe MRR) :: Peek Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_CIString (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                                 wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                                 next = describe' wfld (peekCons _wp (undefined :: Maybe CIString) :: Peek Univ MRR);
                                                                                                 top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                             in maybe top Just next
          describe' _f (Peek_ReportMap_URI (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                            wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                            next = describe' wfld (peekCons _wp (undefined :: Maybe URI) :: Peek Univ MRR);
                                                                                            top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                        in maybe top Just next
          describe' _f (Peek_ReportMap_Text (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f (Peek_ReportMap_UserId (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                               wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                               next = describe' wfld (peekCons _wp (undefined :: Maybe UserId) :: Peek Univ MRR);
                                                                                               top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                           in maybe top Just next
          describe' _f (Peek_ReportMap_UUID (_p@(Path_ReportMap_unReportMap _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                             wfld = Just ("ReportMap", "ReportMap", Right "unReportMap");
                                                                                             next = describe' wfld (peekCons _wp (undefined :: Maybe UUID) :: Peek Univ MRR);
                                                                                             top = describe' _f (Proxy :: Proxy ReportMap)}
                                                                                         in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy ReportMap)
instance Describe (Peek Univ CIString)
    where describe' _f (Peek_CIString_JSONText (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                        wfld = Nothing;
                                                                                        next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ Text);
                                                                                        top = describe' _f (Proxy :: Proxy CIString)}
                                                                                    in maybe top Just next
          describe' _f (Peek_CIString_Text (_p@(Path_CIString_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                    wfld = Nothing;
                                                                                    next = describe' wfld (peekCons _wp (undefined :: Maybe Text) :: Peek Univ Text);
                                                                                    top = describe' _f (Proxy :: Proxy CIString)}
                                                                                in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy CIString)
instance Describe (Peek Univ URI)
    where describe' _ _ = Nothing
instance Describe (Peek Univ Text)
    where describe' _f (Peek_Text_JSONText (_p@(Path_Text_View _wp)) _x) = let {wfld :: Maybe ((String, String, Either Int String));
                                                                                wfld = Nothing;
                                                                                next = describe' wfld (peekCons _wp (undefined :: Maybe JSONText) :: Peek Univ JSONText);
                                                                                top = describe' _f (Proxy :: Proxy Text)}
                                                                            in maybe top Just next
          describe' _f _ = describe' _f (Proxy :: Proxy Text)
instance Describe (Peek Univ UserId)
    where describe' _ _ = Nothing
instance Describe (Peek Univ UUID)
    where describe' _ _ = Nothing
instance Describe (Proxy Int64)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int64"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Int)
    where describe' _f _ = case _f of
                               Nothing -> Just "Int"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Dimension)
    where describe' _f _ = case _f of
                               Nothing -> Just "Dimension"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageCrop)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Crop"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Units)
    where describe' _f _ = case _f of
                               Nothing -> Just "Units"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Integer)
    where describe' _f _ = case _f of
                               Nothing -> Just "Integer"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Permissions)
    where describe' _f _ = case _f of
                               Nothing -> Just "Permissions"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserIds)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Ids"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy AbbrevPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Abbrev Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Author)
    where describe' _f _ = case _f of
                               Nothing -> Just "Author"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Authors)
    where describe' _f _ = case _f of
                               Nothing -> Just "Authors"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Branding)
    where describe' _f _ = case _f of
                               Nothing -> Just "Branding"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPair)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pair"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MarkupPairs)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markup Pairs"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Markups)
    where describe' _f _ = case _f of
                               Nothing -> Just "Markups"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Report)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElem)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elem"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportElems)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Elems"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportFlags)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Flags"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportIntendedUse)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Intended Use"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStandard)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Standard"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportStatus)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Status"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueApproachInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Approach Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportValueTypeInfo)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Value Type Info"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy EUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "EUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MEUI)
    where describe' _f _ = case _f of
                               Nothing -> Just "MEUI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MaybeImageFile)
    where describe' _f _ = case _f of
                               Nothing -> Just "Maybe Image File"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImage)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImages)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Images"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReadOnlyFilePath)
    where describe' _f _ = case _f of
                               Nothing -> Just "Read Only File Path"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportImageView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Image View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportView)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report View"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy SaneSizeImageSize)
    where describe' _f _ = case _f of
                               Nothing -> Just "Sane Size Image Size"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy Item)
    where describe' _f _ = case _f of
                               Nothing -> Just "Item"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MIM)
    where describe' _f _ = case _f of
                               Nothing -> Just "MIM"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy MRR)
    where describe' _f _ = case _f of
                               Nothing -> Just "MRR"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy ReportMap)
    where describe' _f _ = case _f of
                               Nothing -> Just "Report Map"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy CIString)
    where describe' _f _ = case _f of
                               Nothing -> Just "CIString"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy URI)
    where describe' _f _ = case _f of
                               Nothing -> Just "URI"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UserId)
    where describe' _f _ = case _f of
                               Nothing -> Just "User Id"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance Describe (Proxy UUID)
    where describe' _f _ = case _f of
                               Nothing -> Just "UUID"
                               Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                               Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance IdPath (Path_Author a)
    where idPath = Path_Author
instance IdPath (Path_Bool a)
    where idPath = Path_Bool
instance IdPath (Path_Branding a)
    where idPath = Path_Branding
instance IdPath (Path_CIString a)
    where idPath = Path_CIString
instance IdPath (Path_Dimension a)
    where idPath = Path_Dimension
instance IdPath (Path_Double a)
    where idPath = Path_Double
instance IdPath (Path_ImageCrop a)
    where idPath = Path_ImageCrop
instance IdPath (Path_ImageFile a)
    where idPath = Path_ImageFile
instance IdPath (Path_ImageSize a)
    where idPath = Path_ImageSize
instance IdPath (Path_Int a)
    where idPath = Path_Int
instance IdPath (Path_Int64 a)
    where idPath = Path_Int64
instance IdPath (Path_Integer a)
    where idPath = Path_Integer
instance IdPath (Path_Item a)
    where idPath = Path_Item
instance IdPath (Path_JSONText a)
    where idPath = Path_JSONText
instance IdPath (Path_Markup a)
    where idPath = Path_Markup
instance IdPath (Path_MaybeImageFile a)
    where idPath = Path_MaybeImageFile
instance IdPath (Path_MaybeReportIntendedUse a)
    where idPath = Path_MaybeReportIntendedUse
instance IdPath (Path_Permissions a)
    where idPath = Path_Permissions
instance IdPath (Path_ReadOnlyFilePath a)
    where idPath = Path_ReadOnlyFilePath
instance IdPath (Path_Report a)
    where idPath = Path_Report
instance IdPath (Path_ReportElem a)
    where idPath = Path_ReportElem
instance IdPath (Path_ReportFlags a)
    where idPath = Path_ReportFlags
instance IdPath (Path_ReportImage a)
    where idPath = Path_ReportImage
instance IdPath (Path_ReportImageView a)
    where idPath = Path_ReportImageView
instance IdPath (Path_ReportIntendedUse a)
    where idPath = Path_ReportIntendedUse
instance IdPath (Path_ReportMap a)
    where idPath = Path_ReportMap
instance IdPath (Path_ReportStandard a)
    where idPath = Path_ReportStandard
instance IdPath (Path_ReportStatus a)
    where idPath = Path_ReportStatus
instance IdPath (Path_ReportValueApproachInfo a)
    where idPath = Path_ReportValueApproachInfo
instance IdPath (Path_ReportValueTypeInfo a)
    where idPath = Path_ReportValueTypeInfo
instance IdPath (Path_ReportView a)
    where idPath = Path_ReportView
instance IdPath (Path_SaneSizeImageSize a)
    where idPath = Path_SaneSizeImageSize
instance IdPath (Path_String a)
    where idPath = Path_String
instance IdPath (Path_Text a)
    where idPath = Path_Text
instance IdPath (Path_URI a)
    where idPath = Path_URI
instance IdPath (Path_UUID a)
    where idPath = Path_UUID
instance IdPath (Path_Units a)
    where idPath = Path_Units
instance IdPath (Path_UserId a)
    where idPath = Path_UserId
instance IdPath (Path_UserIds a)
    where idPath = Path_UserIds
instance ToLens (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
    where type S (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = EUI
          type A (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = ImageFile
          toLens (Path_Right _) = _Right
instance ToLens (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
    where type S (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          type A (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          toLens _ = id
instance ToLens (Path_Either (Path_URI URI) (Path_ImageFile URI))
    where type S (Path_Either (Path_URI URI) (Path_ImageFile URI)) = EUI
          type A (Path_Either (Path_URI URI) (Path_ImageFile URI)) = URI
          toLens (Path_Left _) = _Left
instance ToLens (Path_Map ItemFieldName (Path_Markup JSONText))
    where type S (Path_Map ItemFieldName (Path_Markup JSONText)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup Markup))
    where type S (Path_Map ItemFieldName (Path_Markup Markup)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Markup)) = Markup
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ItemFieldName (Path_Markup MIM))
    where type S (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          toLens _ = id
instance ToLens (Path_Map ItemFieldName (Path_Markup Text))
    where type S (Path_Map ItemFieldName (Path_Markup Text)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report String))
    where type S (Path_Map ReportID (Path_Report String)) = MRR
          type A (Path_Map ReportID (Path_Report String)) = String
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int64))
    where type S (Path_Map ReportID (Path_Report Int64)) = MRR
          type A (Path_Map ReportID (Path_Report Int64)) = Int64
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Bool))
    where type S (Path_Map ReportID (Path_Report Bool)) = MRR
          type A (Path_Map ReportID (Path_Report Bool)) = Bool
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Double))
    where type S (Path_Map ReportID (Path_Report Double)) = MRR
          type A (Path_Map ReportID (Path_Report Double)) = Double
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Int))
    where type S (Path_Map ReportID (Path_Report Int)) = MRR
          type A (Path_Map ReportID (Path_Report Int)) = Int
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Dimension))
    where type S (Path_Map ReportID (Path_Report Dimension)) = MRR
          type A (Path_Map ReportID (Path_Report Dimension)) = Dimension
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageCrop))
    where type S (Path_Map ReportID (Path_Report ImageCrop)) = MRR
          type A (Path_Map ReportID (Path_Report ImageCrop)) = ImageCrop
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageSize))
    where type S (Path_Map ReportID (Path_Report ImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report ImageSize)) = ImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Units))
    where type S (Path_Map ReportID (Path_Report Units)) = MRR
          type A (Path_Map ReportID (Path_Report Units)) = Units
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ImageFile))
    where type S (Path_Map ReportID (Path_Report ImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report ImageFile)) = ImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Integer))
    where type S (Path_Map ReportID (Path_Report Integer)) = MRR
          type A (Path_Map ReportID (Path_Report Integer)) = Integer
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report JSONText))
    where type S (Path_Map ReportID (Path_Report JSONText)) = MRR
          type A (Path_Map ReportID (Path_Report JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markup))
    where type S (Path_Map ReportID (Path_Report Markup)) = MRR
          type A (Path_Map ReportID (Path_Report Markup)) = Markup
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Permissions))
    where type S (Path_Map ReportID (Path_Report Permissions)) = MRR
          type A (Path_Map ReportID (Path_Report Permissions)) = Permissions
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserIds))
    where type S (Path_Map ReportID (Path_Report UserIds)) = MRR
          type A (Path_Map ReportID (Path_Report UserIds)) = UserIds
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPair))
    where type S (Path_Map ReportID (Path_Report AbbrevPair)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPair)) = AbbrevPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report AbbrevPairs))
    where type S (Path_Map ReportID (Path_Report AbbrevPairs)) = MRR
          type A (Path_Map ReportID (Path_Report AbbrevPairs)) = AbbrevPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Author))
    where type S (Path_Map ReportID (Path_Report Author)) = MRR
          type A (Path_Map ReportID (Path_Report Author)) = Author
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Authors))
    where type S (Path_Map ReportID (Path_Report Authors)) = MRR
          type A (Path_Map ReportID (Path_Report Authors)) = Authors
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Branding))
    where type S (Path_Map ReportID (Path_Report Branding)) = MRR
          type A (Path_Map ReportID (Path_Report Branding)) = Branding
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPair))
    where type S (Path_Map ReportID (Path_Report MarkupPair)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPair)) = MarkupPair
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MarkupPairs))
    where type S (Path_Map ReportID (Path_Report MarkupPairs)) = MRR
          type A (Path_Map ReportID (Path_Report MarkupPairs)) = MarkupPairs
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Markups))
    where type S (Path_Map ReportID (Path_Report Markups)) = MRR
          type A (Path_Map ReportID (Path_Report Markups)) = Markups
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeReportIntendedUse))
    where type S (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeReportIntendedUse)) = MaybeReportIntendedUse
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Report))
    where type S (Path_Map ReportID (Path_Report Report)) = MRR
          type A (Path_Map ReportID (Path_Report Report)) = Report
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ReportID (Path_Report ReportElem))
    where type S (Path_Map ReportID (Path_Report ReportElem)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElem)) = ReportElem
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportElems))
    where type S (Path_Map ReportID (Path_Report ReportElems)) = MRR
          type A (Path_Map ReportID (Path_Report ReportElems)) = ReportElems
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportFlags))
    where type S (Path_Map ReportID (Path_Report ReportFlags)) = MRR
          type A (Path_Map ReportID (Path_Report ReportFlags)) = ReportFlags
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStandard))
    where type S (Path_Map ReportID (Path_Report ReportStandard)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStandard)) = ReportStandard
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportStatus))
    where type S (Path_Map ReportID (Path_Report ReportStatus)) = MRR
          type A (Path_Map ReportID (Path_Report ReportStatus)) = ReportStatus
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueApproachInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueApproachInfo)) = ReportValueApproachInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportValueTypeInfo))
    where type S (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = MRR
          type A (Path_Map ReportID (Path_Report ReportValueTypeInfo)) = ReportValueTypeInfo
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report EUI))
    where type S (Path_Map ReportID (Path_Report EUI)) = MRR
          type A (Path_Map ReportID (Path_Report EUI)) = EUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MEUI))
    where type S (Path_Map ReportID (Path_Report MEUI)) = MRR
          type A (Path_Map ReportID (Path_Report MEUI)) = MEUI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MaybeImageFile))
    where type S (Path_Map ReportID (Path_Report MaybeImageFile)) = MRR
          type A (Path_Map ReportID (Path_Report MaybeImageFile)) = MaybeImageFile
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImage))
    where type S (Path_Map ReportID (Path_Report ReportImage)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImage)) = ReportImage
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImages))
    where type S (Path_Map ReportID (Path_Report ReportImages)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImages)) = ReportImages
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReadOnlyFilePath))
    where type S (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = MRR
          type A (Path_Map ReportID (Path_Report ReadOnlyFilePath)) = ReadOnlyFilePath
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportImageView))
    where type S (Path_Map ReportID (Path_Report ReportImageView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportImageView)) = ReportImageView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report ReportView))
    where type S (Path_Map ReportID (Path_Report ReportView)) = MRR
          type A (Path_Map ReportID (Path_Report ReportView)) = ReportView
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report SaneSizeImageSize))
    where type S (Path_Map ReportID (Path_Report SaneSizeImageSize)) = MRR
          type A (Path_Map ReportID (Path_Report SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Item))
    where type S (Path_Map ReportID (Path_Report Item)) = MRR
          type A (Path_Map ReportID (Path_Report Item)) = Item
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MIM))
    where type S (Path_Map ReportID (Path_Report MIM)) = MRR
          type A (Path_Map ReportID (Path_Report MIM)) = MIM
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report MRR))
    where type S (Path_Map ReportID (Path_Report MRR)) = MRR
          type A (Path_Map ReportID (Path_Report MRR)) = MRR
          toLens _ = id
instance ToLens (Path_Map ReportID (Path_Report CIString))
    where type S (Path_Map ReportID (Path_Report CIString)) = MRR
          type A (Path_Map ReportID (Path_Report CIString)) = CIString
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report URI))
    where type S (Path_Map ReportID (Path_Report URI)) = MRR
          type A (Path_Map ReportID (Path_Report URI)) = URI
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report Text))
    where type S (Path_Map ReportID (Path_Report Text)) = MRR
          type A (Path_Map ReportID (Path_Report Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UserId))
    where type S (Path_Map ReportID (Path_Report UserId)) = MRR
          type A (Path_Map ReportID (Path_Report UserId)) = UserId
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ReportID (Path_Report UUID))
    where type S (Path_Map ReportID (Path_Report UUID)) = MRR
          type A (Path_Map ReportID (Path_Report UUID)) = UUID
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = AbbrevPair
          type A (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = AbbrevPair
          type A (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = Markup
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
    where type S (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          type A (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          toLens _ = id
instance ToLens (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
    where type S (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = AbbrevPair
          type A (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = CIString
          toLens (Path_First _) = _1
instance ToLens (Path_Pair (Path_CIString Text) (Path_Markup Text))
    where type S (Path_Pair (Path_CIString Text) (Path_Markup Text)) = AbbrevPair
          type A (Path_Pair (Path_CIString Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = MarkupPair
          type A (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = MarkupPair
          type A (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = Markup
          toLens (Path_First _) = _1
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
    where type S (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          type A (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          toLens _ = id
instance ToLens (Path_Pair (Path_Markup Text) (Path_Markup Text))
    where type S (Path_Pair (Path_Markup Text) (Path_Markup Text)) = MarkupPair
          type A (Path_Pair (Path_Markup Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          toLens _ = id
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = CIString
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author JSONText))
    where type S (Path_OMap AuthorID (Path_Author JSONText)) = Authors
          type A (Path_OMap AuthorID (Path_Author JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Markup))
    where type S (Path_OMap AuthorID (Path_Author Markup)) = Authors
          type A (Path_OMap AuthorID (Path_Author Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Author))
    where type S (Path_OMap AuthorID (Path_Author Author)) = Authors
          type A (Path_OMap AuthorID (Path_Author Author)) = Author
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AuthorID (Path_Author Authors))
    where type S (Path_OMap AuthorID (Path_Author Authors)) = Authors
          type A (Path_OMap AuthorID (Path_Author Authors)) = Authors
          toLens _ = id
instance ToLens (Path_OMap AuthorID (Path_Author Text))
    where type S (Path_OMap AuthorID (Path_Author Text)) = Authors
          type A (Path_OMap AuthorID (Path_Author Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup JSONText))
    where type S (Path_OMap MarkupID (Path_Markup JSONText)) = Markups
          type A (Path_OMap MarkupID (Path_Markup JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup Markup))
    where type S (Path_OMap MarkupID (Path_Markup Markup)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markup)) = Markup
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupID (Path_Markup Markups))
    where type S (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          toLens _ = id
instance ToLens (Path_OMap MarkupID (Path_Markup Text))
    where type S (Path_OMap MarkupID (Path_Markup Text)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          toLens _ = id
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem String))
    where type S (Path_OMap ReportElemID (Path_ReportElem String)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Bool))
    where type S (Path_OMap ReportElemID (Path_ReportElem Bool)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Double))
    where type S (Path_OMap ReportElemID (Path_ReportElem Double)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Dimension))
    where type S (Path_OMap ReportElemID (Path_ReportElem Dimension)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageCrop))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Units))
    where type S (Path_OMap ReportElemID (Path_ReportElem Units)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem JSONText))
    where type S (Path_OMap ReportElemID (Path_ReportElem JSONText)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Markup))
    where type S (Path_OMap ReportElemID (Path_ReportElem Markup)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElem))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElem
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElems))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          toLens _ = id
instance ToLens (Path_OMap ReportElemID (Path_ReportElem EUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem EUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MEUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem MEUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImage))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportImage
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImages))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportImages
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImageView))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Item))
    where type S (Path_OMap ReportElemID (Path_ReportElem Item)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Item)) = Item
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MIM))
    where type S (Path_OMap ReportElemID (Path_ReportElem MIM)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MIM)) = MIM
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem URI))
    where type S (Path_OMap ReportElemID (Path_ReportElem URI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Text))
    where type S (Path_OMap ReportElemID (Path_ReportElem Text)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage String))
    where type S (Path_OMap ReportImageID (Path_ReportImage String)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Bool))
    where type S (Path_OMap ReportImageID (Path_ReportImage Bool)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Double))
    where type S (Path_OMap ReportImageID (Path_ReportImage Double)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Dimension))
    where type S (Path_OMap ReportImageID (Path_ReportImage Dimension)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageCrop))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Units))
    where type S (Path_OMap ReportImageID (Path_ReportImage Units)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage JSONText))
    where type S (Path_OMap ReportImageID (Path_ReportImage JSONText)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Markup))
    where type S (Path_OMap ReportImageID (Path_ReportImage Markup)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage EUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage EUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MEUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage MEUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImage))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImage
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImages))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          toLens _ = id
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImageView))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage URI))
    where type S (Path_OMap ReportImageID (Path_ReportImage URI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Text))
    where type S (Path_OMap ReportImageID (Path_ReportImage Text)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_Author JSONText)
    where type S (Path_Author JSONText) = Author
          type A (Path_Author JSONText) = JSONText
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Author Markup)
    where type S (Path_Author Markup) = Author
          type A (Path_Author Markup) = Markup
          toLens (Path_Author_authorName _x) = lens_Author_authorName
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials
instance ToLens (Path_Author Author)
    where type S (Path_Author Author) = Author
          type A (Path_Author Author) = Author
          toLens _ = id
instance ToLens (Path_Author Text)
    where type S (Path_Author Text) = Author
          type A (Path_Author Text) = Text
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Bool String)
    where type S (Path_Bool String) = Bool
          type A (Path_Bool String) = String
          toLens (Path_Bool_View _) = viewLens :: Lens' Bool String
instance ToLens (Path_Bool Bool)
    where type S (Path_Bool Bool) = Bool
          type A (Path_Bool Bool) = Bool
          toLens _ = id
instance ToLens (Path_Bool JSONText)
    where type S (Path_Bool JSONText) = Bool
          type A (Path_Bool JSONText) = JSONText
          toLens (Path_Bool_View v) = (viewLens :: Lens' Bool String) . toLens v
instance ToLens (Path_Branding JSONText)
    where type S (Path_Branding JSONText) = Branding
          type A (Path_Branding JSONText) = JSONText
          toLens (Path_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens (Path_Branding Branding)
    where type S (Path_Branding Branding) = Branding
          type A (Path_Branding Branding) = Branding
          toLens _ = id
instance ToLens (Path_Branding Text)
    where type S (Path_Branding Text) = Branding
          type A (Path_Branding Text) = Text
          toLens (Path_Branding_View _) = viewLens :: Lens' Branding Text
instance ToLens (Path_CIString JSONText)
    where type S (Path_CIString JSONText) = CIString
          type A (Path_CIString JSONText) = JSONText
          toLens (Path_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens (Path_CIString CIString)
    where type S (Path_CIString CIString) = CIString
          type A (Path_CIString CIString) = CIString
          toLens _ = id
instance ToLens (Path_CIString Text)
    where type S (Path_CIString Text) = CIString
          type A (Path_CIString Text) = Text
          toLens (Path_CIString_View _) = viewLens :: Lens' CIString Text
instance ToLens (Path_Dimension Dimension)
    where type S (Path_Dimension Dimension) = Dimension
          type A (Path_Dimension Dimension) = Dimension
          toLens _ = id
instance ToLens (Path_Dimension JSONText)
    where type S (Path_Dimension JSONText) = Dimension
          type A (Path_Dimension JSONText) = JSONText
          toLens (Path_Dimension_View _) = viewLens :: Lens' Dimension JSONText
instance ToLens (Path_Double String)
    where type S (Path_Double String) = Double
          type A (Path_Double String) = String
          toLens (Path_Double_View _) = viewLens :: Lens' Double String
instance ToLens (Path_Double Double)
    where type S (Path_Double Double) = Double
          type A (Path_Double Double) = Double
          toLens _ = id
instance ToLens (Path_Double JSONText)
    where type S (Path_Double JSONText) = Double
          type A (Path_Double JSONText) = JSONText
          toLens (Path_Double_View v) = (viewLens :: Lens' Double String) . toLens v
instance ToLens (Path_ImageCrop ImageCrop)
    where type S (Path_ImageCrop ImageCrop) = ImageCrop
          type A (Path_ImageCrop ImageCrop) = ImageCrop
          toLens _ = id
instance ToLens (Path_ImageFile ImageFile)
    where type S (Path_ImageFile ImageFile) = ImageFile
          type A (Path_ImageFile ImageFile) = ImageFile
          toLens _ = id
instance ToLens (Path_ImageSize String)
    where type S (Path_ImageSize String) = ImageSize
          type A (Path_ImageSize String) = String
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
instance ToLens (Path_ImageSize Double)
    where type S (Path_ImageSize Double) = ImageSize
          type A (Path_ImageSize Double) = Double
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size
instance ToLens (Path_ImageSize Dimension)
    where type S (Path_ImageSize Dimension) = ImageSize
          type A (Path_ImageSize Dimension) = Dimension
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim
instance ToLens (Path_ImageSize ImageSize)
    where type S (Path_ImageSize ImageSize) = ImageSize
          type A (Path_ImageSize ImageSize) = ImageSize
          toLens _ = id
instance ToLens (Path_ImageSize Units)
    where type S (Path_ImageSize Units) = ImageSize
          type A (Path_ImageSize Units) = Units
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units
instance ToLens (Path_ImageSize JSONText)
    where type S (Path_ImageSize JSONText) = ImageSize
          type A (Path_ImageSize JSONText) = JSONText
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim . toLens _x
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units . toLens _x
instance ToLens (Path_Int Int)
    where type S (Path_Int Int) = Int
          type A (Path_Int Int) = Int
          toLens _ = id
instance ToLens (Path_Int64 Int64)
    where type S (Path_Int64 Int64) = Int64
          type A (Path_Int64 Int64) = Int64
          toLens _ = id
instance ToLens (Path_Integer Integer)
    where type S (Path_Integer Integer) = Integer
          type A (Path_Integer Integer) = Integer
          toLens _ = id
instance ToLens (Path_Item String)
    where type S (Path_Item String) = Item
          type A (Path_Item String) = String
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Bool)
    where type S (Path_Item Bool) = Item
          type A (Path_Item Bool) = Bool
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Double)
    where type S (Path_Item Double) = Item
          type A (Path_Item Double) = Double
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Dimension)
    where type S (Path_Item Dimension) = Item
          type A (Path_Item Dimension) = Dimension
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageCrop)
    where type S (Path_Item ImageCrop) = Item
          type A (Path_Item ImageCrop) = ImageCrop
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageSize)
    where type S (Path_Item ImageSize) = Item
          type A (Path_Item ImageSize) = ImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Units)
    where type S (Path_Item Units) = Item
          type A (Path_Item Units) = Units
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageFile)
    where type S (Path_Item ImageFile) = Item
          type A (Path_Item ImageFile) = ImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item JSONText)
    where type S (Path_Item JSONText) = Item
          type A (Path_Item JSONText) = JSONText
          toLens (Path_Item_itemName _x) = lens_Item_itemName . toLens _x
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Markup)
    where type S (Path_Item Markup) = Item
          type A (Path_Item Markup) = Markup
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item EUI)
    where type S (Path_Item EUI) = Item
          type A (Path_Item EUI) = EUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MEUI)
    where type S (Path_Item MEUI) = Item
          type A (Path_Item MEUI) = MEUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MaybeImageFile)
    where type S (Path_Item MaybeImageFile) = Item
          type A (Path_Item MaybeImageFile) = MaybeImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImage)
    where type S (Path_Item ReportImage) = Item
          type A (Path_Item ReportImage) = ReportImage
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImages)
    where type S (Path_Item ReportImages) = Item
          type A (Path_Item ReportImages) = ReportImages
          toLens (Path_Item_images _x) = lens_Item_images
instance ToLens (Path_Item ReportImageView)
    where type S (Path_Item ReportImageView) = Item
          type A (Path_Item ReportImageView) = ReportImageView
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item SaneSizeImageSize)
    where type S (Path_Item SaneSizeImageSize) = Item
          type A (Path_Item SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Item)
    where type S (Path_Item Item) = Item
          type A (Path_Item Item) = Item
          toLens _ = id
instance ToLens (Path_Item MIM)
    where type S (Path_Item MIM) = Item
          type A (Path_Item MIM) = MIM
          toLens (Path_Item_fields _x) = lens_Item_fields
instance ToLens (Path_Item URI)
    where type S (Path_Item URI) = Item
          type A (Path_Item URI) = URI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Text)
    where type S (Path_Item Text) = Item
          type A (Path_Item Text) = Text
          toLens (Path_Item_itemName _x) = lens_Item_itemName
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_JSONText JSONText)
    where type S (Path_JSONText JSONText) = JSONText
          type A (Path_JSONText JSONText) = JSONText
          toLens _ = id
instance ToLens (Path_Markup JSONText)
    where type S (Path_Markup JSONText) = Markup
          type A (Path_Markup JSONText) = JSONText
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText . toLens _x
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText . toLens _x
instance ToLens (Path_Markup Markup)
    where type S (Path_Markup Markup) = Markup
          type A (Path_Markup Markup) = Markup
          toLens _ = id
instance ToLens (Path_Markup Text)
    where type S (Path_Markup Text) = Markup
          type A (Path_Markup Text) = Text
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText
instance ToLens (Path_MaybeImageFile String)
    where type S (Path_MaybeImageFile String) = MaybeImageFile
          type A (Path_MaybeImageFile String) = String
          toLens (Path_MaybeImageFile_View _) = viewLens :: Lens' MaybeImageFile String
instance ToLens (Path_MaybeImageFile JSONText)
    where type S (Path_MaybeImageFile JSONText) = MaybeImageFile
          type A (Path_MaybeImageFile JSONText) = JSONText
          toLens (Path_MaybeImageFile_View v) = (viewLens :: Lens' MaybeImageFile String) . toLens v
instance ToLens (Path_MaybeImageFile MaybeImageFile)
    where type S (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          type A (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          toLens _ = id
instance ToLens (Path_MaybeReportIntendedUse String)
    where type S (Path_MaybeReportIntendedUse String) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse String) = String
          toLens (Path_MaybeReportIntendedUse_View _) = viewLens :: Lens' MaybeReportIntendedUse String
instance ToLens (Path_MaybeReportIntendedUse JSONText)
    where type S (Path_MaybeReportIntendedUse JSONText) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse JSONText) = JSONText
          toLens (Path_MaybeReportIntendedUse_View v) = (viewLens :: Lens' MaybeReportIntendedUse String) . toLens v
instance ToLens (Path_MaybeReportIntendedUse MaybeReportIntendedUse)
    where type S (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens _ = id
instance ToLens (Path_Permissions JSONText)
    where type S (Path_Permissions JSONText) = Permissions
          type A (Path_Permissions JSONText) = JSONText
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions Permissions)
    where type S (Path_Permissions Permissions) = Permissions
          type A (Path_Permissions Permissions) = Permissions
          toLens _ = id
instance ToLens (Path_Permissions UserIds)
    where type S (Path_Permissions UserIds) = Permissions
          type A (Path_Permissions UserIds) = UserIds
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers
instance ToLens (Path_Permissions Text)
    where type S (Path_Permissions Text) = Permissions
          type A (Path_Permissions Text) = Text
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions UserId)
    where type S (Path_Permissions UserId) = Permissions
          type A (Path_Permissions UserId) = UserId
          toLens (Path_Permissions_owner _x) = lens_Permissions_owner
instance ToLens (Path_ReadOnlyFilePath String)
    where type S (Path_ReadOnlyFilePath String) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath String) = String
          toLens (Path_ReadOnlyFilePath_View _) = viewLens :: Lens' ReadOnlyFilePath String
instance ToLens (Path_ReadOnlyFilePath JSONText)
    where type S (Path_ReadOnlyFilePath JSONText) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath JSONText) = JSONText
          toLens (Path_ReadOnlyFilePath_View v) = (viewLens :: Lens' ReadOnlyFilePath String) . toLens v
instance ToLens (Path_ReadOnlyFilePath ReadOnlyFilePath)
    where type S (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          toLens _ = id
instance ToLens (Path_Report String)
    where type S (Path_Report String) = Report
          type A (Path_Report String) = String
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int64)
    where type S (Path_Report Int64) = Report
          type A (Path_Report Int64) = Int64
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Bool)
    where type S (Path_Report Bool) = Report
          type A (Path_Report Bool) = Bool
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Double)
    where type S (Path_Report Double) = Report
          type A (Path_Report Double) = Double
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int)
    where type S (Path_Report Int) = Report
          type A (Path_Report Int) = Int
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Dimension)
    where type S (Path_Report Dimension) = Report
          type A (Path_Report Dimension) = Dimension
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageCrop)
    where type S (Path_Report ImageCrop) = Report
          type A (Path_Report ImageCrop) = ImageCrop
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageSize)
    where type S (Path_Report ImageSize) = Report
          type A (Path_Report ImageSize) = ImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Units)
    where type S (Path_Report Units) = Report
          type A (Path_Report Units) = Units
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageFile)
    where type S (Path_Report ImageFile) = Report
          type A (Path_Report ImageFile) = ImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Integer)
    where type S (Path_Report Integer) = Report
          type A (Path_Report Integer) = Integer
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report JSONText)
    where type S (Path_Report JSONText) = Report
          type A (Path_Report JSONText) = JSONText
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markup)
    where type S (Path_Report Markup) = Report
          type A (Path_Report Markup) = Markup
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Permissions)
    where type S (Path_Report Permissions) = Report
          type A (Path_Report Permissions) = Permissions
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserIds)
    where type S (Path_Report UserIds) = Report
          type A (Path_Report UserIds) = UserIds
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPair)
    where type S (Path_Report AbbrevPair) = Report
          type A (Path_Report AbbrevPair) = AbbrevPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPairs)
    where type S (Path_Report AbbrevPairs) = Report
          type A (Path_Report AbbrevPairs) = AbbrevPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Author)
    where type S (Path_Report Author) = Report
          type A (Path_Report Author) = Author
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Authors)
    where type S (Path_Report Authors) = Report
          type A (Path_Report Authors) = Authors
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Branding)
    where type S (Path_Report Branding) = Report
          type A (Path_Report Branding) = Branding
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPair)
    where type S (Path_Report MarkupPair) = Report
          type A (Path_Report MarkupPair) = MarkupPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPairs)
    where type S (Path_Report MarkupPairs) = Report
          type A (Path_Report MarkupPairs) = MarkupPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markups)
    where type S (Path_Report Markups) = Report
          type A (Path_Report Markups) = Markups
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeReportIntendedUse)
    where type S (Path_Report MaybeReportIntendedUse) = Report
          type A (Path_Report MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Report)
    where type S (Path_Report Report) = Report
          type A (Path_Report Report) = Report
          toLens _ = id
instance ToLens (Path_Report ReportElem)
    where type S (Path_Report ReportElem) = Report
          type A (Path_Report ReportElem) = ReportElem
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportElems)
    where type S (Path_Report ReportElems) = Report
          type A (Path_Report ReportElems) = ReportElems
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportFlags)
    where type S (Path_Report ReportFlags) = Report
          type A (Path_Report ReportFlags) = ReportFlags
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStandard)
    where type S (Path_Report ReportStandard) = Report
          type A (Path_Report ReportStandard) = ReportStandard
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStatus)
    where type S (Path_Report ReportStatus) = Report
          type A (Path_Report ReportStatus) = ReportStatus
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueApproachInfo)
    where type S (Path_Report ReportValueApproachInfo) = Report
          type A (Path_Report ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueTypeInfo)
    where type S (Path_Report ReportValueTypeInfo) = Report
          type A (Path_Report ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report EUI)
    where type S (Path_Report EUI) = Report
          type A (Path_Report EUI) = EUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MEUI)
    where type S (Path_Report MEUI) = Report
          type A (Path_Report MEUI) = MEUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeImageFile)
    where type S (Path_Report MaybeImageFile) = Report
          type A (Path_Report MaybeImageFile) = MaybeImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImage)
    where type S (Path_Report ReportImage) = Report
          type A (Path_Report ReportImage) = ReportImage
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImages)
    where type S (Path_Report ReportImages) = Report
          type A (Path_Report ReportImages) = ReportImages
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReadOnlyFilePath)
    where type S (Path_Report ReadOnlyFilePath) = Report
          type A (Path_Report ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImageView)
    where type S (Path_Report ReportImageView) = Report
          type A (Path_Report ReportImageView) = ReportImageView
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportView)
    where type S (Path_Report ReportView) = Report
          type A (Path_Report ReportView) = ReportView
          toLens (Path_Report_View _) = viewLens :: Lens' Report ReportView
instance ToLens (Path_Report SaneSizeImageSize)
    where type S (Path_Report SaneSizeImageSize) = Report
          type A (Path_Report SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Item)
    where type S (Path_Report Item) = Report
          type A (Path_Report Item) = Item
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MIM)
    where type S (Path_Report MIM) = Report
          type A (Path_Report MIM) = MIM
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report CIString)
    where type S (Path_Report CIString) = Report
          type A (Path_Report CIString) = CIString
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report URI)
    where type S (Path_Report URI) = Report
          type A (Path_Report URI) = URI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Text)
    where type S (Path_Report Text) = Report
          type A (Path_Report Text) = Text
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserId)
    where type S (Path_Report UserId) = Report
          type A (Path_Report UserId) = UserId
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UUID)
    where type S (Path_Report UUID) = Report
          type A (Path_Report UUID) = UUID
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_ReportElem String)
    where type S (Path_ReportElem String) = ReportElem
          type A (Path_ReportElem String) = String
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Bool)
    where type S (Path_ReportElem Bool) = ReportElem
          type A (Path_ReportElem Bool) = Bool
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Double)
    where type S (Path_ReportElem Double) = ReportElem
          type A (Path_ReportElem Double) = Double
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Dimension)
    where type S (Path_ReportElem Dimension) = ReportElem
          type A (Path_ReportElem Dimension) = Dimension
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageCrop)
    where type S (Path_ReportElem ImageCrop) = ReportElem
          type A (Path_ReportElem ImageCrop) = ImageCrop
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageSize)
    where type S (Path_ReportElem ImageSize) = ReportElem
          type A (Path_ReportElem ImageSize) = ImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Units)
    where type S (Path_ReportElem Units) = ReportElem
          type A (Path_ReportElem Units) = Units
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageFile)
    where type S (Path_ReportElem ImageFile) = ReportElem
          type A (Path_ReportElem ImageFile) = ImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem JSONText)
    where type S (Path_ReportElem JSONText) = ReportElem
          type A (Path_ReportElem JSONText) = JSONText
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportElem Markup)
    where type S (Path_ReportElem Markup) = ReportElem
          type A (Path_ReportElem Markup) = Markup
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText
instance ToLens (Path_ReportElem ReportElem)
    where type S (Path_ReportElem ReportElem) = ReportElem
          type A (Path_ReportElem ReportElem) = ReportElem
          toLens _ = id
instance ToLens (Path_ReportElem EUI)
    where type S (Path_ReportElem EUI) = ReportElem
          type A (Path_ReportElem EUI) = EUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MEUI)
    where type S (Path_ReportElem MEUI) = ReportElem
          type A (Path_ReportElem MEUI) = MEUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MaybeImageFile)
    where type S (Path_ReportElem MaybeImageFile) = ReportElem
          type A (Path_ReportElem MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImage)
    where type S (Path_ReportElem ReportImage) = ReportElem
          type A (Path_ReportElem ReportImage) = ReportImage
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImages)
    where type S (Path_ReportElem ReportImages) = ReportElem
          type A (Path_ReportElem ReportImages) = ReportImages
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImageView)
    where type S (Path_ReportElem ReportImageView) = ReportElem
          type A (Path_ReportElem ReportImageView) = ReportImageView
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem SaneSizeImageSize)
    where type S (Path_ReportElem SaneSizeImageSize) = ReportElem
          type A (Path_ReportElem SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Item)
    where type S (Path_ReportElem Item) = ReportElem
          type A (Path_ReportElem Item) = Item
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem
instance ToLens (Path_ReportElem MIM)
    where type S (Path_ReportElem MIM) = ReportElem
          type A (Path_ReportElem MIM) = MIM
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem URI)
    where type S (Path_ReportElem URI) = ReportElem
          type A (Path_ReportElem URI) = URI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Text)
    where type S (Path_ReportElem Text) = ReportElem
          type A (Path_ReportElem Text) = Text
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportFlags String)
    where type S (Path_ReportFlags String) = ReportFlags
          type A (Path_ReportFlags String) = String
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags Bool)
    where type S (Path_ReportFlags Bool) = ReportFlags
          type A (Path_ReportFlags Bool) = Bool
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields
instance ToLens (Path_ReportFlags JSONText)
    where type S (Path_ReportFlags JSONText) = ReportFlags
          type A (Path_ReportFlags JSONText) = JSONText
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags ReportFlags)
    where type S (Path_ReportFlags ReportFlags) = ReportFlags
          type A (Path_ReportFlags ReportFlags) = ReportFlags
          toLens _ = id
instance ToLens (Path_ReportImage String)
    where type S (Path_ReportImage String) = ReportImage
          type A (Path_ReportImage String) = String
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Bool)
    where type S (Path_ReportImage Bool) = ReportImage
          type A (Path_ReportImage Bool) = Bool
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Double)
    where type S (Path_ReportImage Double) = ReportImage
          type A (Path_ReportImage Double) = Double
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Dimension)
    where type S (Path_ReportImage Dimension) = ReportImage
          type A (Path_ReportImage Dimension) = Dimension
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageCrop)
    where type S (Path_ReportImage ImageCrop) = ReportImage
          type A (Path_ReportImage ImageCrop) = ImageCrop
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageSize)
    where type S (Path_ReportImage ImageSize) = ReportImage
          type A (Path_ReportImage ImageSize) = ImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Units)
    where type S (Path_ReportImage Units) = ReportImage
          type A (Path_ReportImage Units) = Units
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageFile)
    where type S (Path_ReportImage ImageFile) = ReportImage
          type A (Path_ReportImage ImageFile) = ImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage JSONText)
    where type S (Path_ReportImage JSONText) = ReportImage
          type A (Path_ReportImage JSONText) = JSONText
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Markup)
    where type S (Path_ReportImage Markup) = ReportImage
          type A (Path_ReportImage Markup) = Markup
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage EUI)
    where type S (Path_ReportImage EUI) = ReportImage
          type A (Path_ReportImage EUI) = EUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MEUI)
    where type S (Path_ReportImage MEUI) = ReportImage
          type A (Path_ReportImage MEUI) = MEUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MaybeImageFile)
    where type S (Path_ReportImage MaybeImageFile) = ReportImage
          type A (Path_ReportImage MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ReportImage)
    where type S (Path_ReportImage ReportImage) = ReportImage
          type A (Path_ReportImage ReportImage) = ReportImage
          toLens _ = id
instance ToLens (Path_ReportImage ReportImageView)
    where type S (Path_ReportImage ReportImageView) = ReportImage
          type A (Path_ReportImage ReportImageView) = ReportImageView
          toLens (Path_ReportImage_View _) = viewLens :: Lens' ReportImage ReportImageView
instance ToLens (Path_ReportImage SaneSizeImageSize)
    where type S (Path_ReportImage SaneSizeImageSize) = ReportImage
          type A (Path_ReportImage SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage URI)
    where type S (Path_ReportImage URI) = ReportImage
          type A (Path_ReportImage URI) = URI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Text)
    where type S (Path_ReportImage Text) = ReportImage
          type A (Path_ReportImage Text) = Text
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImageView String)
    where type S (Path_ReportImageView String) = ReportImageView
          type A (Path_ReportImageView String) = String
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Bool)
    where type S (Path_ReportImageView Bool) = ReportImageView
          type A (Path_ReportImageView Bool) = Bool
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge
instance ToLens (Path_ReportImageView Double)
    where type S (Path_ReportImageView Double) = ReportImageView
          type A (Path_ReportImageView Double) = Double
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Dimension)
    where type S (Path_ReportImageView Dimension) = ReportImageView
          type A (Path_ReportImageView Dimension) = Dimension
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageCrop)
    where type S (Path_ReportImageView ImageCrop) = ReportImageView
          type A (Path_ReportImageView ImageCrop) = ImageCrop
          toLens (Path_ReportImageView__picCrop _x) = lens_ReportImageView__picCrop
instance ToLens (Path_ReportImageView ImageSize)
    where type S (Path_ReportImageView ImageSize) = ReportImageView
          type A (Path_ReportImageView ImageSize) = ImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Units)
    where type S (Path_ReportImageView Units) = ReportImageView
          type A (Path_ReportImageView Units) = Units
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageFile)
    where type S (Path_ReportImageView ImageFile) = ReportImageView
          type A (Path_ReportImageView ImageFile) = ImageFile
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView JSONText)
    where type S (Path_ReportImageView JSONText) = ReportImageView
          type A (Path_ReportImageView JSONText) = JSONText
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Markup)
    where type S (Path_ReportImageView Markup) = ReportImageView
          type A (Path_ReportImageView Markup) = Markup
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption
instance ToLens (Path_ReportImageView EUI)
    where type S (Path_ReportImageView EUI) = ReportImageView
          type A (Path_ReportImageView EUI) = EUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView MEUI)
    where type S (Path_ReportImageView MEUI) = ReportImageView
          type A (Path_ReportImageView MEUI) = MEUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal
instance ToLens (Path_ReportImageView MaybeImageFile)
    where type S (Path_ReportImageView MaybeImageFile) = ReportImageView
          type A (Path_ReportImageView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated
instance ToLens (Path_ReportImageView ReportImageView)
    where type S (Path_ReportImageView ReportImageView) = ReportImageView
          type A (Path_ReportImageView ReportImageView) = ReportImageView
          toLens _ = id
instance ToLens (Path_ReportImageView SaneSizeImageSize)
    where type S (Path_ReportImageView SaneSizeImageSize) = ReportImageView
          type A (Path_ReportImageView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize
instance ToLens (Path_ReportImageView URI)
    where type S (Path_ReportImageView URI) = ReportImageView
          type A (Path_ReportImageView URI) = URI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView Text)
    where type S (Path_ReportImageView Text) = ReportImageView
          type A (Path_ReportImageView Text) = Text
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
instance ToLens (Path_ReportIntendedUse String)
    where type S (Path_ReportIntendedUse String) = ReportIntendedUse
          type A (Path_ReportIntendedUse String) = String
          toLens (Path_ReportIntendedUse_View _) = viewLens :: Lens' ReportIntendedUse String
instance ToLens (Path_ReportIntendedUse JSONText)
    where type S (Path_ReportIntendedUse JSONText) = ReportIntendedUse
          type A (Path_ReportIntendedUse JSONText) = JSONText
          toLens (Path_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse String) . toLens v
instance ToLens (Path_ReportIntendedUse ReportIntendedUse)
    where type S (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          type A (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          toLens _ = id
instance ToLens (Path_ReportMap String)
    where type S (Path_ReportMap String) = ReportMap
          type A (Path_ReportMap String) = String
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int64)
    where type S (Path_ReportMap Int64) = ReportMap
          type A (Path_ReportMap Int64) = Int64
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Bool)
    where type S (Path_ReportMap Bool) = ReportMap
          type A (Path_ReportMap Bool) = Bool
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Double)
    where type S (Path_ReportMap Double) = ReportMap
          type A (Path_ReportMap Double) = Double
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Int)
    where type S (Path_ReportMap Int) = ReportMap
          type A (Path_ReportMap Int) = Int
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Dimension)
    where type S (Path_ReportMap Dimension) = ReportMap
          type A (Path_ReportMap Dimension) = Dimension
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageCrop)
    where type S (Path_ReportMap ImageCrop) = ReportMap
          type A (Path_ReportMap ImageCrop) = ImageCrop
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageSize)
    where type S (Path_ReportMap ImageSize) = ReportMap
          type A (Path_ReportMap ImageSize) = ImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Units)
    where type S (Path_ReportMap Units) = ReportMap
          type A (Path_ReportMap Units) = Units
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ImageFile)
    where type S (Path_ReportMap ImageFile) = ReportMap
          type A (Path_ReportMap ImageFile) = ImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Integer)
    where type S (Path_ReportMap Integer) = ReportMap
          type A (Path_ReportMap Integer) = Integer
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap JSONText)
    where type S (Path_ReportMap JSONText) = ReportMap
          type A (Path_ReportMap JSONText) = JSONText
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markup)
    where type S (Path_ReportMap Markup) = ReportMap
          type A (Path_ReportMap Markup) = Markup
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Permissions)
    where type S (Path_ReportMap Permissions) = ReportMap
          type A (Path_ReportMap Permissions) = Permissions
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserIds)
    where type S (Path_ReportMap UserIds) = ReportMap
          type A (Path_ReportMap UserIds) = UserIds
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPair)
    where type S (Path_ReportMap AbbrevPair) = ReportMap
          type A (Path_ReportMap AbbrevPair) = AbbrevPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap AbbrevPairs)
    where type S (Path_ReportMap AbbrevPairs) = ReportMap
          type A (Path_ReportMap AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Author)
    where type S (Path_ReportMap Author) = ReportMap
          type A (Path_ReportMap Author) = Author
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Authors)
    where type S (Path_ReportMap Authors) = ReportMap
          type A (Path_ReportMap Authors) = Authors
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Branding)
    where type S (Path_ReportMap Branding) = ReportMap
          type A (Path_ReportMap Branding) = Branding
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPair)
    where type S (Path_ReportMap MarkupPair) = ReportMap
          type A (Path_ReportMap MarkupPair) = MarkupPair
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MarkupPairs)
    where type S (Path_ReportMap MarkupPairs) = ReportMap
          type A (Path_ReportMap MarkupPairs) = MarkupPairs
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Markups)
    where type S (Path_ReportMap Markups) = ReportMap
          type A (Path_ReportMap Markups) = Markups
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeReportIntendedUse)
    where type S (Path_ReportMap MaybeReportIntendedUse) = ReportMap
          type A (Path_ReportMap MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Report)
    where type S (Path_ReportMap Report) = ReportMap
          type A (Path_ReportMap Report) = Report
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElem)
    where type S (Path_ReportMap ReportElem) = ReportMap
          type A (Path_ReportMap ReportElem) = ReportElem
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportElems)
    where type S (Path_ReportMap ReportElems) = ReportMap
          type A (Path_ReportMap ReportElems) = ReportElems
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportFlags)
    where type S (Path_ReportMap ReportFlags) = ReportMap
          type A (Path_ReportMap ReportFlags) = ReportFlags
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStandard)
    where type S (Path_ReportMap ReportStandard) = ReportMap
          type A (Path_ReportMap ReportStandard) = ReportStandard
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportStatus)
    where type S (Path_ReportMap ReportStatus) = ReportMap
          type A (Path_ReportMap ReportStatus) = ReportStatus
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueApproachInfo)
    where type S (Path_ReportMap ReportValueApproachInfo) = ReportMap
          type A (Path_ReportMap ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportValueTypeInfo)
    where type S (Path_ReportMap ReportValueTypeInfo) = ReportMap
          type A (Path_ReportMap ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap EUI)
    where type S (Path_ReportMap EUI) = ReportMap
          type A (Path_ReportMap EUI) = EUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MEUI)
    where type S (Path_ReportMap MEUI) = ReportMap
          type A (Path_ReportMap MEUI) = MEUI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MaybeImageFile)
    where type S (Path_ReportMap MaybeImageFile) = ReportMap
          type A (Path_ReportMap MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImage)
    where type S (Path_ReportMap ReportImage) = ReportMap
          type A (Path_ReportMap ReportImage) = ReportImage
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImages)
    where type S (Path_ReportMap ReportImages) = ReportMap
          type A (Path_ReportMap ReportImages) = ReportImages
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReadOnlyFilePath)
    where type S (Path_ReportMap ReadOnlyFilePath) = ReportMap
          type A (Path_ReportMap ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportImageView)
    where type S (Path_ReportMap ReportImageView) = ReportMap
          type A (Path_ReportMap ReportImageView) = ReportImageView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap ReportView)
    where type S (Path_ReportMap ReportView) = ReportMap
          type A (Path_ReportMap ReportView) = ReportView
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap SaneSizeImageSize)
    where type S (Path_ReportMap SaneSizeImageSize) = ReportMap
          type A (Path_ReportMap SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Item)
    where type S (Path_ReportMap Item) = ReportMap
          type A (Path_ReportMap Item) = Item
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MIM)
    where type S (Path_ReportMap MIM) = ReportMap
          type A (Path_ReportMap MIM) = MIM
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap MRR)
    where type S (Path_ReportMap MRR) = ReportMap
          type A (Path_ReportMap MRR) = MRR
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap
instance ToLens (Path_ReportMap ReportMap)
    where type S (Path_ReportMap ReportMap) = ReportMap
          type A (Path_ReportMap ReportMap) = ReportMap
          toLens _ = id
instance ToLens (Path_ReportMap CIString)
    where type S (Path_ReportMap CIString) = ReportMap
          type A (Path_ReportMap CIString) = CIString
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap URI)
    where type S (Path_ReportMap URI) = ReportMap
          type A (Path_ReportMap URI) = URI
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap Text)
    where type S (Path_ReportMap Text) = ReportMap
          type A (Path_ReportMap Text) = Text
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UserId)
    where type S (Path_ReportMap UserId) = ReportMap
          type A (Path_ReportMap UserId) = UserId
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportMap UUID)
    where type S (Path_ReportMap UUID) = ReportMap
          type A (Path_ReportMap UUID) = UUID
          toLens (Path_ReportMap_unReportMap _x) = lens_ReportMap_unReportMap . toLens _x
instance ToLens (Path_ReportStandard Int)
    where type S (Path_ReportStandard Int) = ReportStandard
          type A (Path_ReportStandard Int) = Int
          toLens (Path_ReportStandard_unReportStandard _x) = lens_ReportStandard_unReportStandard
instance ToLens (Path_ReportStandard ReportStandard)
    where type S (Path_ReportStandard ReportStandard) = ReportStandard
          type A (Path_ReportStandard ReportStandard) = ReportStandard
          toLens _ = id
instance ToLens (Path_ReportStatus String)
    where type S (Path_ReportStatus String) = ReportStatus
          type A (Path_ReportStatus String) = String
          toLens (Path_ReportStatus_View _) = viewLens :: Lens' ReportStatus String
instance ToLens (Path_ReportStatus JSONText)
    where type S (Path_ReportStatus JSONText) = ReportStatus
          type A (Path_ReportStatus JSONText) = JSONText
          toLens (Path_ReportStatus_View v) = (viewLens :: Lens' ReportStatus String) . toLens v
instance ToLens (Path_ReportStatus ReportStatus)
    where type S (Path_ReportStatus ReportStatus) = ReportStatus
          type A (Path_ReportStatus ReportStatus) = ReportStatus
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo JSONText)
    where type S (Path_ReportValueApproachInfo JSONText) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo JSONText) = JSONText
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueApproachInfo Markup)
    where type S (Path_ReportValueApproachInfo Markup) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Markup) = Markup
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription
instance ToLens (Path_ReportValueApproachInfo ReportValueApproachInfo)
    where type S (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo Text)
    where type S (Path_ReportValueApproachInfo Text) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Text) = Text
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueTypeInfo JSONText)
    where type S (Path_ReportValueTypeInfo JSONText) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo JSONText) = JSONText
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportValueTypeInfo Markup)
    where type S (Path_ReportValueTypeInfo Markup) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Markup) = Markup
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition
instance ToLens (Path_ReportValueTypeInfo ReportValueTypeInfo)
    where type S (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          toLens _ = id
instance ToLens (Path_ReportValueTypeInfo Text)
    where type S (Path_ReportValueTypeInfo Text) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Text) = Text
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportView String)
    where type S (Path_ReportView String) = ReportView
          type A (Path_ReportView String) = String
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Int64)
    where type S (Path_ReportView Int64) = ReportView
          type A (Path_ReportView Int64) = Int64
          toLens (Path_ReportView__reportCreated _x) = lens_ReportView__reportCreated
instance ToLens (Path_ReportView Bool)
    where type S (Path_ReportView Bool) = ReportView
          type A (Path_ReportView Bool) = Bool
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName
instance ToLens (Path_ReportView Double)
    where type S (Path_ReportView Double) = ReportView
          type A (Path_ReportView Double) = Double
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Int)
    where type S (Path_ReportView Int) = ReportView
          type A (Path_ReportView Int) = Int
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion . toLens _x
instance ToLens (Path_ReportView Dimension)
    where type S (Path_ReportView Dimension) = ReportView
          type A (Path_ReportView Dimension) = Dimension
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageCrop)
    where type S (Path_ReportView ImageCrop) = ReportView
          type A (Path_ReportView ImageCrop) = ImageCrop
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageSize)
    where type S (Path_ReportView ImageSize) = ReportView
          type A (Path_ReportView ImageSize) = ImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Units)
    where type S (Path_ReportView Units) = ReportView
          type A (Path_ReportView Units) = Units
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageFile)
    where type S (Path_ReportView ImageFile) = ReportView
          type A (Path_ReportView ImageFile) = ImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Integer)
    where type S (Path_ReportView Integer) = ReportView
          type A (Path_ReportView Integer) = Integer
          toLens (Path_ReportView__reportRevision _x) = lens_ReportView__reportRevision
instance ToLens (Path_ReportView JSONText)
    where type S (Path_ReportView JSONText) = ReportView
          type A (Path_ReportView JSONText) = JSONText
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Markup)
    where type S (Path_ReportView Markup) = ReportView
          type A (Path_ReportView Markup) = Markup
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy
instance ToLens (Path_ReportView Permissions)
    where type S (Path_ReportView Permissions) = ReportView
          type A (Path_ReportView Permissions) = Permissions
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms
instance ToLens (Path_ReportView UserIds)
    where type S (Path_ReportView UserIds) = ReportView
          type A (Path_ReportView UserIds) = UserIds
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView AbbrevPair)
    where type S (Path_ReportView AbbrevPair) = ReportView
          type A (Path_ReportView AbbrevPair) = AbbrevPair
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView AbbrevPairs)
    where type S (Path_ReportView AbbrevPairs) = ReportView
          type A (Path_ReportView AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs
instance ToLens (Path_ReportView Author)
    where type S (Path_ReportView Author) = ReportView
          type A (Path_ReportView Author) = Author
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
instance ToLens (Path_ReportView Authors)
    where type S (Path_ReportView Authors) = ReportView
          type A (Path_ReportView Authors) = Authors
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors
instance ToLens (Path_ReportView Branding)
    where type S (Path_ReportView Branding) = ReportView
          type A (Path_ReportView Branding) = Branding
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding
instance ToLens (Path_ReportView MarkupPair)
    where type S (Path_ReportView MarkupPair) = ReportView
          type A (Path_ReportView MarkupPair) = MarkupPair
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
instance ToLens (Path_ReportView MarkupPairs)
    where type S (Path_ReportView MarkupPairs) = ReportView
          type A (Path_ReportView MarkupPairs) = MarkupPairs
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources
instance ToLens (Path_ReportView Markups)
    where type S (Path_ReportView Markups) = ReportView
          type A (Path_ReportView Markups) = Markups
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions
instance ToLens (Path_ReportView MaybeReportIntendedUse)
    where type S (Path_ReportView MaybeReportIntendedUse) = ReportView
          type A (Path_ReportView MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse
instance ToLens (Path_ReportView ReportElem)
    where type S (Path_ReportView ReportElem) = ReportView
          type A (Path_ReportView ReportElem) = ReportElem
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportElems)
    where type S (Path_ReportView ReportElems) = ReportView
          type A (Path_ReportView ReportElems) = ReportElems
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody
instance ToLens (Path_ReportView ReportFlags)
    where type S (Path_ReportView ReportFlags) = ReportView
          type A (Path_ReportView ReportFlags) = ReportFlags
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags
instance ToLens (Path_ReportView ReportStandard)
    where type S (Path_ReportView ReportStandard) = ReportView
          type A (Path_ReportView ReportStandard) = ReportStandard
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion
instance ToLens (Path_ReportView ReportStatus)
    where type S (Path_ReportView ReportStatus) = ReportView
          type A (Path_ReportView ReportStatus) = ReportStatus
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus
instance ToLens (Path_ReportView ReportValueApproachInfo)
    where type S (Path_ReportView ReportValueApproachInfo) = ReportView
          type A (Path_ReportView ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo
instance ToLens (Path_ReportView ReportValueTypeInfo)
    where type S (Path_ReportView ReportValueTypeInfo) = ReportView
          type A (Path_ReportView ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo
instance ToLens (Path_ReportView EUI)
    where type S (Path_ReportView EUI) = ReportView
          type A (Path_ReportView EUI) = EUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MEUI)
    where type S (Path_ReportView MEUI) = ReportView
          type A (Path_ReportView MEUI) = MEUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MaybeImageFile)
    where type S (Path_ReportView MaybeImageFile) = ReportView
          type A (Path_ReportView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImage)
    where type S (Path_ReportView ReportImage) = ReportView
          type A (Path_ReportView ReportImage) = ReportImage
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImages)
    where type S (Path_ReportView ReportImages) = ReportView
          type A (Path_ReportView ReportImages) = ReportImages
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReadOnlyFilePath)
    where type S (Path_ReportView ReadOnlyFilePath) = ReportView
          type A (Path_ReportView ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder
instance ToLens (Path_ReportView ReportImageView)
    where type S (Path_ReportView ReportImageView) = ReportView
          type A (Path_ReportView ReportImageView) = ReportImageView
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportView)
    where type S (Path_ReportView ReportView) = ReportView
          type A (Path_ReportView ReportView) = ReportView
          toLens _ = id
instance ToLens (Path_ReportView SaneSizeImageSize)
    where type S (Path_ReportView SaneSizeImageSize) = ReportView
          type A (Path_ReportView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Item)
    where type S (Path_ReportView Item) = ReportView
          type A (Path_ReportView Item) = Item
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MIM)
    where type S (Path_ReportView MIM) = ReportView
          type A (Path_ReportView MIM) = MIM
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView CIString)
    where type S (Path_ReportView CIString) = ReportView
          type A (Path_ReportView CIString) = CIString
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView URI)
    where type S (Path_ReportView URI) = ReportView
          type A (Path_ReportView URI) = URI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Text)
    where type S (Path_ReportView Text) = ReportView
          type A (Path_ReportView Text) = Text
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
instance ToLens (Path_ReportView UserId)
    where type S (Path_ReportView UserId) = ReportView
          type A (Path_ReportView UserId) = UserId
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView UUID)
    where type S (Path_ReportView UUID) = ReportView
          type A (Path_ReportView UUID) = UUID
          toLens (Path_ReportView__reportUUID _x) = lens_ReportView__reportUUID
instance ToLens (Path_SaneSizeImageSize String)
    where type S (Path_SaneSizeImageSize String) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize String) = String
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Double)
    where type S (Path_SaneSizeImageSize Double) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Double) = Double
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Dimension)
    where type S (Path_SaneSizeImageSize Dimension) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Dimension) = Dimension
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize ImageSize)
    where type S (Path_SaneSizeImageSize ImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize ImageSize) = ImageSize
          toLens (Path_SaneSizeImageSize_View _) = viewLens :: Lens' SaneSizeImageSize ImageSize
instance ToLens (Path_SaneSizeImageSize Units)
    where type S (Path_SaneSizeImageSize Units) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Units) = Units
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize JSONText)
    where type S (Path_SaneSizeImageSize JSONText) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize JSONText) = JSONText
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' SaneSizeImageSize ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize SaneSizeImageSize)
    where type S (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          toLens _ = id
instance ToLens (Path_String String)
    where type S (Path_String String) = String
          type A (Path_String String) = String
          toLens _ = id
instance ToLens (Path_String JSONText)
    where type S (Path_String JSONText) = String
          type A (Path_String JSONText) = JSONText
          toLens (Path_String_View _) = viewLens :: Lens' String JSONText
instance ToLens (Path_Text JSONText)
    where type S (Path_Text JSONText) = Text
          type A (Path_Text JSONText) = JSONText
          toLens (Path_Text_View _) = viewLens :: Lens' Text JSONText
instance ToLens (Path_Text Text)
    where type S (Path_Text Text) = Text
          type A (Path_Text Text) = Text
          toLens _ = id
instance ToLens (Path_URI URI)
    where type S (Path_URI URI) = URI
          type A (Path_URI URI) = URI
          toLens _ = id
instance ToLens (Path_UUID UUID)
    where type S (Path_UUID UUID) = UUID
          type A (Path_UUID UUID) = UUID
          toLens _ = id
instance ToLens (Path_Units Units)
    where type S (Path_Units Units) = Units
          type A (Path_Units Units) = Units
          toLens _ = id
instance ToLens (Path_Units JSONText)
    where type S (Path_Units JSONText) = Units
          type A (Path_Units JSONText) = JSONText
          toLens (Path_Units_View _) = viewLens :: Lens' Units JSONText
instance ToLens (Path_UserId UserId)
    where type S (Path_UserId UserId) = UserId
          type A (Path_UserId UserId) = UserId
          toLens _ = id
instance ToLens (Path_UserIds JSONText)
    where type S (Path_UserIds JSONText) = UserIds
          type A (Path_UserIds JSONText) = JSONText
          toLens (Path_UserIds_View v) = (viewLens :: Lens' UserIds Text) . toLens v
instance ToLens (Path_UserIds UserIds)
    where type S (Path_UserIds UserIds) = UserIds
          type A (Path_UserIds UserIds) = UserIds
          toLens _ = id
instance ToLens (Path_UserIds Text)
    where type S (Path_UserIds Text) = UserIds
          type A (Path_UserIds Text) = Text
          toLens (Path_UserIds_View _) = viewLens :: Lens' UserIds Text
instance ToLens (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)))
    where type S (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = ImageFile
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI)))
    where type S (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = EUI
          toLens (Path_Just _) = _Just
instance ToLens (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI)))
    where type S (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          toLens _ = id
instance ToLens (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI)))
    where type S (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = URI
          toLens (Path_Just v) = _Just . toLens v
