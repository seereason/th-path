{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wall -fno-warn-orphans -fno-warn-incomplete-patterns #-}

import Appraisal.File
import Appraisal.Image
import Appraisal.ImageFile
import Appraisal.IntJS
import Appraisal.LaTeX
import Appraisal.Markup
import Appraisal.Permissions
import Appraisal.Report
import Appraisal.ReportImage
import Appraisal.ReportInstances
import Appraisal.ReportItem
import Appraisal.ReportMap (ReportID(..), ReportMap(..), MRR)
import Appraisal.Utils.CIString (CIString(..))
import Control.Lens (iso, _Just, _1, _2, _Left, _Right, Lens', toListOf, Traversal', view)
import Control.Monad.Readers (askPoly)
import Data.Generics (Data, Typeable)
import Data.Int (Int64)
import Data.Map (Map, toList)
import Data.Proxy
import Data.Text (Text)
import Data.Tree (Tree(Node), Forest)
import Data.UserId (UserId(UserId))
import Data.UUID (UUID)
import Data.UUID.Orphans ()
import Language.Haskell.TH (pprint, runQ, runIO)
import Language.Haskell.TH.Syntax
import Language.Haskell.TH.Path.Core
import Language.Haskell.TH.Path.Decs (allDecsToFile)
import Language.Haskell.TH.Path.Graph (runTypeGraphT)
import Language.Haskell.TH.Path.Order (lens_omat, Order, Path_OMap(Path_At), toPairs)
import Language.Haskell.TH.Path.View (View(viewLens))
import Language.Haskell.TH.TypeGraph.TypeGraph (TypeGraph)
import Network.URI (URI(URI), URIAuth)
import System.Exit
import Test.HUnit hiding (Path)
import Text.LaTeX (LaTeX)

type Path_Checksum a = Path_String a
type Path_FilePath a = Path_String a
data Path_String a = Path_String_View (Path_JSONText a) | Path_String deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_String a)
    where idPath = Path_String
instance Paths String String
    where type FromTo String String = Path_String String
          paths _ _ = [idPath]
instance Paths String JSONText
    where type FromTo String JSONText = Path_String JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_String_View,
                                                                                                a')) (toListOf (toLens (Path_String_View (idPath :: FromTo JSONText JSONText))) _s))
instance PathStart ([Char])
    where data Peek ([Char])
              = Peek_String_String (FromTo ([Char]) ([Char])) (Maybe ([Char])) | Peek_String_JSONText (FromTo ([Char]) JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_String_View _wp) -> map (\a -> let f = peek a
                                                                                     in let liftPeek (Peek_JSONText_JSONText q z) = Peek_String_JSONText (Path_String_View q) z
                                                                                         in Node (Peek_String_JSONText _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                           _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek ([Char]))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_String_View _wp) -> map (\a -> Node (Peek_String_JSONText _pp (Just a)) []) (toListOf (toLens _pp) _s :: [JSONText])
                                          _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek ([Char]))
instance Describe (Peek ([Char]))
    where describe _f (Peek_String_JSONText (_p@(Path_String_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy JSONText);
                                                                                   next = describe wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy ([Char]))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ([Char]))
instance ToLens (Path_String String)
    where type S (Path_String String) = String
          type A (Path_String String) = String
          toLens _ = id
instance ToLens (Path_String JSONText)
    where type S (Path_String JSONText) = String
          type A (Path_String JSONText) = JSONText
          toLens (Path_String_View _) = viewLens :: Lens' ([Char]) JSONText
type Path_EpochMilli a = Path_Int64 a
data Path_Int64 a = Path_Int64 deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Int64 a)
    where idPath = Path_Int64
class HasInt64 c
    where lens_int64 :: Lens' c Int64
instance HasInt64 Int64
    where lens_int64 = id
instance Paths Int64 Int64
    where type FromTo Int64 Int64 = Path_Int64 Int64
          paths _ _ = [idPath]
instance PathStart Int64
    where data Peek Int64 = Peek_Int64_Int64 (FromTo Int64 Int64) (Maybe Int64) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek Int64)
    where describe _ _ = Nothing
instance Describe (Proxy Int64)
    where describe _f _ = case _f of
                              Nothing -> Just "Int64"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Int64 Int64)
    where type S (Path_Int64 Int64) = Int64
          type A (Path_Int64 Int64) = Int64
          toLens _ = id
type Path_Size a = Path_Int a
data Path_Int a = Path_Int deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Int a)
    where idPath = Path_Int
class HasInt c
    where lens_int :: Lens' c Int
instance HasInt Int
    where lens_int = id
instance Paths Int Int
    where type FromTo Int Int = Path_Int Int
          paths _ _ = [idPath]
instance PathStart Int
    where data Peek Int = Peek_Int_Int (FromTo Int Int) (Maybe Int) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek Int)
    where describe _ _ = Nothing
instance Describe (Proxy Int)
    where describe _f _ = case _f of
                              Nothing -> Just "Int"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Int Int)
    where type S (Path_Int Int) = Int
          type A (Path_Int Int) = Int
          toLens _ = id
data Path_Bool a = Path_Bool_View (Path_String a) | Path_Bool deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Bool a)
    where idPath = Path_Bool
class HasBool c
    where lens_bool :: Lens' c Bool
instance HasBool Bool
    where lens_bool = id
instance Paths Bool String
    where type FromTo Bool String = Path_Bool String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_Bool_View, a')) (toListOf (toLens (Path_Bool_View (idPath :: FromTo ([Char])
                                                                                                                                                                       ([Char])))) _s))
instance Paths Bool Bool
    where type FromTo Bool Bool = Path_Bool Bool
          paths _ _ = [idPath]
instance Paths Bool JSONText
    where type FromTo Bool JSONText = Path_Bool JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_Bool_View, a')) (toListOf (toLens (Path_Bool_View (idPath :: FromTo ([Char])
                                                                                                                                                                       ([Char])))) _s))
instance PathStart Bool
    where data Peek Bool
              = Peek_Bool_String (FromTo Bool ([Char])) (Maybe ([Char]))
              | Peek_Bool_Bool (FromTo Bool Bool) (Maybe Bool)
              | Peek_Bool_JSONText (FromTo Bool JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Bool_View _wp) -> map (\a -> let f = peek a
                                                                                   in let liftPeek (Peek_String_String q z) = Peek_Bool_String (Path_Bool_View q) z
                                                                                          liftPeek (Peek_String_JSONText q z) = Peek_Bool_JSONText (Path_Bool_View q) z
                                                                                       in Node (Peek_Bool_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek Bool)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Bool_View _wp) -> map (\a -> Node (Peek_Bool_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek Bool)
instance Describe (Peek Bool)
    where describe _f (Peek_Bool_String (_p@(Path_Bool_View _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                             next = describe wfld (Peek_String_String _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy Bool)}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_Bool_JSONText (_p@(Path_Bool_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                               next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Bool)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Bool)
instance ToLens (Path_Bool String)
    where type S (Path_Bool String) = Bool
          type A (Path_Bool String) = String
          toLens (Path_Bool_View _) = viewLens :: Lens' Bool ([Char])
instance ToLens (Path_Bool Bool)
    where type S (Path_Bool Bool) = Bool
          type A (Path_Bool Bool) = Bool
          toLens _ = id
instance ToLens (Path_Bool JSONText)
    where type S (Path_Bool JSONText) = Bool
          type A (Path_Bool JSONText) = JSONText
          toLens (Path_Bool_View v) = (viewLens :: Lens' Bool ([Char])) . toLens v
data Path_Double a = Path_Double_View (Path_String a) | Path_Double deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Double a)
    where idPath = Path_Double
class HasDouble c
    where lens_double :: Lens' c Double
instance HasDouble Double
    where lens_double = id
instance Paths Double String
    where type FromTo Double String = Path_Double String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_Double_View,
                                                                                              a')) (toListOf (toLens (Path_Double_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths Double Double
    where type FromTo Double Double = Path_Double Double
          paths _ _ = [idPath]
instance Paths Double JSONText
    where type FromTo Double JSONText = Path_Double JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_Double_View,
                                                                                              a')) (toListOf (toLens (Path_Double_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance PathStart Double
    where data Peek Double
              = Peek_Double_String (FromTo Double ([Char])) (Maybe ([Char]))
              | Peek_Double_Double (FromTo Double Double) (Maybe Double)
              | Peek_Double_JSONText (FromTo Double JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Double_View _wp) -> map (\a -> let f = peek a
                                                                                     in let liftPeek (Peek_String_String q z) = Peek_Double_String (Path_Double_View q) z
                                                                                            liftPeek (Peek_String_JSONText q z) = Peek_Double_JSONText (Path_Double_View q) z
                                                                                         in Node (Peek_Double_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek Double)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Double_View _wp) -> map (\a -> Node (Peek_Double_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek Double)
instance Describe (Peek Double)
    where describe _f (Peek_Double_String (_p@(Path_Double_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                 next = describe wfld (Peek_String_String _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Double)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Double_JSONText (_p@(Path_Double_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                   next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Double)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Double)
instance ToLens (Path_Double String)
    where type S (Path_Double String) = Double
          type A (Path_Double String) = String
          toLens (Path_Double_View _) = viewLens :: Lens' Double ([Char])
instance ToLens (Path_Double Double)
    where type S (Path_Double Double) = Double
          type A (Path_Double Double) = Double
          toLens _ = id
instance ToLens (Path_Double JSONText)
    where type S (Path_Double JSONText) = Double
          type A (Path_Double JSONText) = JSONText
          toLens (Path_Double_View v) = (viewLens :: Lens' Double ([Char])) . toLens v
data Path_Dimension a = Path_Dimension_View (Path_JSONText a) | Path_Dimension deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Dimension a)
    where idPath = Path_Dimension
class HasDimension c
    where lens_dimension :: Lens' c Dimension
instance HasDimension Dimension
    where lens_dimension = id
instance Paths Dimension Dimension
    where type FromTo Dimension Dimension = Path_Dimension Dimension
          paths _ _ = [idPath]
instance Paths Dimension JSONText
    where type FromTo Dimension JSONText = Path_Dimension JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Dimension_View,
                                                                                                a')) (toListOf (toLens (Path_Dimension_View (idPath :: FromTo JSONText JSONText))) _s))
instance PathStart Dimension
    where data Peek Dimension
              = Peek_Dimension_Dimension (FromTo Dimension Dimension) (Maybe Dimension) | Peek_Dimension_JSONText (FromTo Dimension JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Dimension_View _wp) -> map (\a -> let f = peek a
                                                                                        in let liftPeek (Peek_JSONText_JSONText q z) = Peek_Dimension_JSONText (Path_Dimension_View q) z
                                                                                            in Node (Peek_Dimension_JSONText _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                           _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Dimension)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Dimension_View _wp) -> map (\a -> Node (Peek_Dimension_JSONText _pp (Just a)) []) (toListOf (toLens _pp) _s :: [JSONText])
                                          _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Dimension)
instance Describe (Peek Dimension)
    where describe _f (Peek_Dimension_JSONText (_p@(Path_Dimension_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy JSONText);
                                                                                         next = describe wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy Dimension)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Dimension)
instance Describe (Proxy Dimension)
    where describe _f _ = case _f of
                              Nothing -> Just "Dimension"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Dimension Dimension)
    where type S (Path_Dimension Dimension) = Dimension
          type A (Path_Dimension Dimension) = Dimension
          toLens _ = id
instance ToLens (Path_Dimension JSONText)
    where type S (Path_Dimension JSONText) = Dimension
          type A (Path_Dimension JSONText) = JSONText
          toLens (Path_Dimension_View _) = viewLens :: Lens' Dimension JSONText
data Path_ImageCrop a = Path_ImageCrop deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ImageCrop a)
    where idPath = Path_ImageCrop
class HasImageCrop c
    where lens_imageCrop :: Lens' c ImageCrop
          lens_ImageCrop_bottomCrop :: forall . Lens' c Int
          lens_ImageCrop_bottomCrop = (.) lens_imageCrop lens_ImageCrop_bottomCrop
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop :: forall . Lens' c Int
          lens_ImageCrop_leftCrop = (.) lens_imageCrop lens_ImageCrop_leftCrop
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop :: forall . Lens' c Int
          lens_ImageCrop_rightCrop = (.) lens_imageCrop lens_ImageCrop_rightCrop
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation :: forall . Lens' c Int
          lens_ImageCrop_rotation = (.) lens_imageCrop lens_ImageCrop_rotation
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop :: forall . Lens' c Int
          lens_ImageCrop_topCrop = (.) lens_imageCrop lens_ImageCrop_topCrop
          {-# INLINE lens_ImageCrop_topCrop #-}
instance HasImageCrop ImageCrop
    where lens_imageCrop = id
          lens_ImageCrop_bottomCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageCrop_bottomCrop #-}
          lens_ImageCrop_leftCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageCrop_leftCrop #-}
          lens_ImageCrop_rightCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageCrop_rightCrop #-}
          lens_ImageCrop_rotation f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageCrop_rotation #-}
          lens_ImageCrop_topCrop f (ImageCrop x1 x2 x3 x4 x5) = fmap (\y1 -> ImageCrop y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageCrop_topCrop #-}
instance Paths ImageCrop ImageCrop
    where type FromTo ImageCrop ImageCrop = Path_ImageCrop ImageCrop
          paths _ _ = [idPath]
instance PathStart ImageCrop
    where data Peek ImageCrop = Peek_ImageCrop_ImageCrop (FromTo ImageCrop ImageCrop) (Maybe ImageCrop) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek ImageCrop)
    where describe _ _ = Nothing
instance Describe (Proxy ImageCrop)
    where describe _f _ = case _f of
                              Nothing -> Just "Image Crop"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ImageCrop ImageCrop)
    where type S (Path_ImageCrop ImageCrop) = ImageCrop
          type A (Path_ImageCrop ImageCrop) = ImageCrop
          toLens _ = id
data Path_ImageSize a
    = Path_ImageSize_dim (Path_Dimension a) | Path_ImageSize_size (Path_Double a) | Path_ImageSize_units (Path_Units a) | Path_ImageSize
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ImageSize a)
    where idPath = Path_ImageSize
class HasImageSize c
    where lens_imageSize :: Lens' c ImageSize
          lens_ImageSize_dim :: forall . Lens' c Dimension
          lens_ImageSize_dim = (.) lens_imageSize lens_ImageSize_dim
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size :: forall . Lens' c Double
          lens_ImageSize_size = (.) lens_imageSize lens_ImageSize_size
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units :: forall . Lens' c Units
          lens_ImageSize_units = (.) lens_imageSize lens_ImageSize_units
          {-# INLINE lens_ImageSize_units #-}
instance HasImageSize ImageSize
    where lens_imageSize = id
          lens_ImageSize_dim f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize y1 x2 x3) (f x1)
          {-# INLINE lens_ImageSize_dim #-}
          lens_ImageSize_size f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 y1 x3) (f x2)
          {-# INLINE lens_ImageSize_size #-}
          lens_ImageSize_units f (ImageSize x1 x2 x3) = fmap (\y1 -> ImageSize x1 x2 y1) (f x3)
          {-# INLINE lens_ImageSize_units #-}
instance Paths ImageSize String
    where type FromTo ImageSize String = Path_ImageSize String
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)]
instance Paths ImageSize Double
    where type FromTo ImageSize Double = Path_ImageSize Double
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)]
instance Paths ImageSize Dimension
    where type FromTo ImageSize Dimension = Path_ImageSize Dimension
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Dimension) _g)) [(Path_ImageSize_dim, dim _s)]
instance Paths ImageSize ImageSize
    where type FromTo ImageSize ImageSize = Path_ImageSize ImageSize
          paths _ _ = [idPath]
instance Paths ImageSize Units
    where type FromTo ImageSize Units = Path_ImageSize Units
          paths (_s@(ImageSize {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Units) _g)) [(Path_ImageSize_units, units _s)]
instance Paths ImageSize JSONText
    where type FromTo ImageSize JSONText = Path_ImageSize JSONText
          paths (_s@(ImageSize {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Dimension) _g)) [(Path_ImageSize_dim, dim _s)],
                                                  concatMap (\(p, a') -> map p (paths (a' :: Double) _g)) [(Path_ImageSize_size, size _s)],
                                                  concatMap (\(p, a') -> map p (paths (a' :: Units) _g)) [(Path_ImageSize_units, units _s)]]
instance PathStart ImageSize
    where data Peek ImageSize
              = Peek_ImageSize_String (FromTo ImageSize ([Char])) (Maybe ([Char]))
              | Peek_ImageSize_Double (FromTo ImageSize Double) (Maybe Double)
              | Peek_ImageSize_Dimension (FromTo ImageSize Dimension) (Maybe Dimension)
              | Peek_ImageSize_ImageSize (FromTo ImageSize ImageSize) (Maybe ImageSize)
              | Peek_ImageSize_Units (FromTo ImageSize Units) (Maybe Units)
              | Peek_ImageSize_JSONText (FromTo ImageSize JSONText) (Maybe JSONText)
              deriving (Eq, Show)
          peek (_s@(ImageSize {})) = mconcat [concatMap (\pth -> case pth of
                                                                     _pp@(Path_ImageSize_dim _wp) -> map (\a -> let f = peek a
                                                                                                                 in let liftPeek (Peek_Dimension_Dimension q z) = Peek_ImageSize_Dimension (Path_ImageSize_dim q) z
                                                                                                                        liftPeek (Peek_Dimension_JSONText q z) = Peek_ImageSize_JSONText (Path_ImageSize_dim q) z
                                                                                                                     in Node (Peek_ImageSize_Dimension _pp (if null f
                                                                                                                                                             then Just a
                                                                                                                                                             else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Dimension])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Dimension)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ImageSize_size _wp) -> map (\a -> let f = peek a
                                                                                                                  in let liftPeek (Peek_Double_String q z) = Peek_ImageSize_String (Path_ImageSize_size q) z
                                                                                                                         liftPeek (Peek_Double_Double q z) = Peek_ImageSize_Double (Path_ImageSize_size q) z
                                                                                                                         liftPeek (Peek_Double_JSONText q z) = Peek_ImageSize_JSONText (Path_ImageSize_size q) z
                                                                                                                      in Node (Peek_ImageSize_Double _pp (if null f
                                                                                                                                                           then Just a
                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Double])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Double)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ImageSize_units _wp) -> map (\a -> let f = peek a
                                                                                                                   in let liftPeek (Peek_Units_Units q z) = Peek_ImageSize_Units (Path_ImageSize_units q) z
                                                                                                                          liftPeek (Peek_Units_JSONText q z) = Peek_ImageSize_JSONText (Path_ImageSize_units q) z
                                                                                                                       in Node (Peek_ImageSize_Units _pp (if null f
                                                                                                                                                           then Just a
                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Units])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Units))] :: Forest (Peek ImageSize)
          hop (_s@(ImageSize {})) = mconcat [concatMap (\pth -> case pth of
                                                                    _pp@(Path_ImageSize_dim _wp) -> map (\a -> Node (Peek_ImageSize_Dimension _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Dimension])
                                                                    _ -> []) (paths _s (Proxy :: Proxy Dimension)),
                                             concatMap (\pth -> case pth of
                                                                    _pp@(Path_ImageSize_size _wp) -> map (\a -> Node (Peek_ImageSize_Double _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Double])
                                                                    _ -> []) (paths _s (Proxy :: Proxy Double)),
                                             concatMap (\pth -> case pth of
                                                                    _pp@(Path_ImageSize_units _wp) -> map (\a -> Node (Peek_ImageSize_Units _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Units])
                                                                    _ -> []) (paths _s (Proxy :: Proxy Units))] :: Forest (Peek ImageSize)
instance Describe (Peek ImageSize)
    where describe _f (Peek_ImageSize_Dimension (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                         custom = describe wfld (Proxy :: Proxy Dimension);
                                                                                         next = describe wfld (Peek_Dimension_Dimension _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_dim _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "dim");
                                                                                        custom = describe wfld (Proxy :: Proxy Dimension);
                                                                                        next = describe wfld (Peek_Dimension_JSONText _wp undefined);
                                                                                        top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_String (_p@(Path_ImageSize_size _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                       custom = describe wfld (Proxy :: Proxy Double);
                                                                                       next = describe wfld (Peek_Double_String _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_Double (_p@(Path_ImageSize_size _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                       custom = describe wfld (Proxy :: Proxy Double);
                                                                                       next = describe wfld (Peek_Double_Double _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_size _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "size");
                                                                                         custom = describe wfld (Proxy :: Proxy Double);
                                                                                         next = describe wfld (Peek_Double_JSONText _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_Units (_p@(Path_ImageSize_units _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                       custom = describe wfld (Proxy :: Proxy Units);
                                                                                       next = describe wfld (Peek_Units_Units _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ImageSize_JSONText (_p@(Path_ImageSize_units _wp)) _x) = let {wfld = Just ("ImageSize", "ImageSize", Right "units");
                                                                                          custom = describe wfld (Proxy :: Proxy Units);
                                                                                          next = describe wfld (Peek_Units_JSONText _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy ImageSize)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ImageSize)
instance Describe (Proxy ImageSize)
    where describe _f _ = case _f of
                              Nothing -> Just "Image Size"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ImageSize String)
    where type S (Path_ImageSize String) = ImageSize
          type A (Path_ImageSize String) = String
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
instance ToLens (Path_ImageSize Double)
    where type S (Path_ImageSize Double) = ImageSize
          type A (Path_ImageSize Double) = Double
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size
instance ToLens (Path_ImageSize Dimension)
    where type S (Path_ImageSize Dimension) = ImageSize
          type A (Path_ImageSize Dimension) = Dimension
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim
instance ToLens (Path_ImageSize ImageSize)
    where type S (Path_ImageSize ImageSize) = ImageSize
          type A (Path_ImageSize ImageSize) = ImageSize
          toLens _ = id
instance ToLens (Path_ImageSize Units)
    where type S (Path_ImageSize Units) = ImageSize
          type A (Path_ImageSize Units) = Units
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units
instance ToLens (Path_ImageSize JSONText)
    where type S (Path_ImageSize JSONText) = ImageSize
          type A (Path_ImageSize JSONText) = JSONText
          toLens (Path_ImageSize_dim _x) = lens_ImageSize_dim . toLens _x
          toLens (Path_ImageSize_size _x) = lens_ImageSize_size . toLens _x
          toLens (Path_ImageSize_units _x) = lens_ImageSize_units . toLens _x
data Path_Units a = Path_Units_View (Path_JSONText a) | Path_Units deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Units a)
    where idPath = Path_Units
class HasUnits c
    where lens_units :: Lens' c Units
instance HasUnits Units
    where lens_units = id
instance Paths Units Units
    where type FromTo Units Units = Path_Units Units
          paths _ _ = [idPath]
instance Paths Units JSONText
    where type FromTo Units JSONText = Path_Units JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Units_View,
                                                                                                a')) (toListOf (toLens (Path_Units_View (idPath :: FromTo JSONText JSONText))) _s))
instance PathStart Units
    where data Peek Units = Peek_Units_Units (FromTo Units Units) (Maybe Units) | Peek_Units_JSONText (FromTo Units JSONText) (Maybe JSONText) deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Units_View _wp) -> map (\a -> let f = peek a
                                                                                    in let liftPeek (Peek_JSONText_JSONText q z) = Peek_Units_JSONText (Path_Units_View q) z
                                                                                        in Node (Peek_Units_JSONText _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                           _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Units)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Units_View _wp) -> map (\a -> Node (Peek_Units_JSONText _pp (Just a)) []) (toListOf (toLens _pp) _s :: [JSONText])
                                          _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Units)
instance Describe (Peek Units)
    where describe _f (Peek_Units_JSONText (_p@(Path_Units_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy JSONText);
                                                                                 next = describe wfld (Peek_JSONText_JSONText _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Units)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Units)
instance Describe (Proxy Units)
    where describe _f _ = case _f of
                              Nothing -> Just "Units"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Units Units)
    where type S (Path_Units Units) = Units
          type A (Path_Units Units) = Units
          toLens _ = id
instance ToLens (Path_Units JSONText)
    where type S (Path_Units JSONText) = Units
          type A (Path_Units JSONText) = JSONText
          toLens (Path_Units_View _) = viewLens :: Lens' Units JSONText
data Path_ImageFile a = Path_ImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ImageFile a)
    where idPath = Path_ImageFile
class HasImageFile c
    where lens_imageFile :: Lens' c ImageFile
          lens_ImageFile_imageFile :: forall . Lens' c File
          lens_ImageFile_imageFile = (.) lens_imageFile lens_ImageFile_imageFile
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight :: forall . Lens' c Int
          lens_ImageFile_imageFileHeight = (.) lens_imageFile lens_ImageFile_imageFileHeight
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal :: forall . Lens' c Int
          lens_ImageFile_imageFileMaxVal = (.) lens_imageFile lens_ImageFile_imageFileMaxVal
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType :: forall . Lens' c ImageType
          lens_ImageFile_imageFileType = (.) lens_imageFile lens_ImageFile_imageFileType
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth :: forall . Lens' c Int
          lens_ImageFile_imageFileWidth = (.) lens_imageFile lens_ImageFile_imageFileWidth
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance HasImageFile ImageFile
    where lens_imageFile = id
          lens_ImageFile_imageFile f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_ImageFile_imageFile #-}
          lens_ImageFile_imageFileHeight f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_ImageFile_imageFileHeight #-}
          lens_ImageFile_imageFileMaxVal f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_ImageFile_imageFileMaxVal #-}
          lens_ImageFile_imageFileType f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_ImageFile_imageFileType #-}
          lens_ImageFile_imageFileWidth f (ImageFile x1 x2 x3 x4 x5) = fmap (\y1 -> ImageFile x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_ImageFile_imageFileWidth #-}
instance Paths ImageFile ImageFile
    where type FromTo ImageFile ImageFile = Path_ImageFile ImageFile
          paths _ _ = [idPath]
instance PathStart ImageFile
    where data Peek ImageFile = Peek_ImageFile_ImageFile (FromTo ImageFile ImageFile) (Maybe ImageFile) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek ImageFile)
    where describe _ _ = Nothing
instance Describe (Proxy ImageFile)
    where describe _f _ = case _f of
                              Nothing -> Just "Image File"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ImageFile ImageFile)
    where type S (Path_ImageFile ImageFile) = ImageFile
          type A (Path_ImageFile ImageFile) = ImageFile
          toLens _ = id
data Path_Integer a = Path_Integer deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Integer a)
    where idPath = Path_Integer
class HasInteger c
    where lens_integer :: Lens' c Integer
instance HasInteger Integer
    where lens_integer = id
instance Paths Integer Integer
    where type FromTo Integer Integer = Path_Integer Integer
          paths _ _ = [idPath]
instance PathStart Integer
    where data Peek Integer = Peek_Integer_Integer (FromTo Integer Integer) (Maybe Integer) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek Integer)
    where describe _ _ = Nothing
instance Describe (Proxy Integer)
    where describe _f _ = case _f of
                              Nothing -> Just "Integer"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Integer Integer)
    where type S (Path_Integer Integer) = Integer
          type A (Path_Integer Integer) = Integer
          toLens _ = id
data Path_JSONText a = Path_JSONText deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_JSONText a)
    where idPath = Path_JSONText
class HasJSONText c
    where lens_jSONText :: Lens' c JSONText
          lens_JSONText_unJSONText :: forall . Lens' c String
          lens_JSONText_unJSONText = (.) lens_jSONText lens_JSONText_unJSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance HasJSONText JSONText
    where lens_jSONText = id
          lens_JSONText_unJSONText = iso (\(JSONText x) -> x) JSONText
          {-# INLINE lens_JSONText_unJSONText #-}
instance Paths JSONText JSONText
    where type FromTo JSONText JSONText = Path_JSONText JSONText
          paths _ _ = [idPath]
instance PathStart JSONText
    where data Peek JSONText = Peek_JSONText_JSONText (FromTo JSONText JSONText) (Maybe JSONText) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek JSONText)
    where describe _ _ = Nothing
instance ToLens (Path_JSONText JSONText)
    where type S (Path_JSONText JSONText) = JSONText
          type A (Path_JSONText JSONText) = JSONText
          toLens _ = id
data Path_Markup a = Path_Markup_markdownText (Path_Text a) | Path_Markup_htmlText (Path_Text a) | Path_Markup deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Markup a)
    where idPath = Path_Markup
class HasMarkup c
    where lens_markup :: Lens' c Markup
          lens_Markup_htmlText :: forall . Traversal' c Text
          lens_Markup_htmlText = (.) lens_markup lens_Markup_htmlText
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText :: forall . Traversal' c Text
          lens_Markup_markdownText = (.) lens_markup lens_Markup_markdownText
          {-# INLINE lens_Markup_markdownText #-}
instance HasMarkup Markup
    where lens_markup = id
          lens_Markup_htmlText _ (Markdown x1) = pure (Markdown x1)
          lens_Markup_htmlText f (Html x1) = fmap (\y1 -> Html y1) (f x1)
          lens_Markup_htmlText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_htmlText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_htmlText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_htmlText #-}
          lens_Markup_markdownText f (Markdown x1) = fmap (\y1 -> Markdown y1) (f x1)
          lens_Markup_markdownText _ (Html x1) = pure (Html x1)
          lens_Markup_markdownText _ (LaTeX x1) = pure (LaTeX x1)
          lens_Markup_markdownText _ (Pandoc x1) = pure (Pandoc x1)
          lens_Markup_markdownText _ (Markup x1) = pure (Markup x1)
          {-# INLINE lens_Markup_markdownText #-}
instance Paths Markup JSONText
    where type FromTo Markup JSONText = Path_Markup JSONText
          paths (_s@(Markdown {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_markdownText, markdownText _s)]
          paths (_s@(Html {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_htmlText, htmlText _s)]
          paths (_s@(LaTeX {})) _g = mempty
          paths (_s@(Pandoc {})) _g = mempty
          paths (_s@(Markup {})) _g = mempty
instance Paths Markup Markup
    where type FromTo Markup Markup = Path_Markup Markup
          paths _ _ = [idPath]
instance Paths Markup Text
    where type FromTo Markup Text = Path_Markup Text
          paths (_s@(Markdown {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_markdownText, markdownText _s)]
          paths (_s@(Html {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Markup_htmlText, htmlText _s)]
          paths (_s@(LaTeX {})) _g = mempty
          paths (_s@(Pandoc {})) _g = mempty
          paths (_s@(Markup {})) _g = mempty
instance PathStart Markup
    where data Peek Markup
              = Peek_Markup_JSONText (FromTo Markup JSONText) (Maybe JSONText)
              | Peek_Markup_Markup (FromTo Markup Markup) (Maybe Markup)
              | Peek_Markup_Text (FromTo Markup Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(Markdown {})) = concatMap (\pth -> case pth of
                                                           _pp@(Path_Markup_markdownText _wp) -> map (\a -> let f = peek a
                                                                                                             in let liftPeek (Peek_Text_JSONText q z) = Peek_Markup_JSONText (Path_Markup_markdownText q) z
                                                                                                                    liftPeek (Peek_Text_Text q z) = Peek_Markup_Text (Path_Markup_markdownText q) z
                                                                                                                 in Node (Peek_Markup_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                           _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          peek (_s@(Html {})) = concatMap (\pth -> case pth of
                                                       _pp@(Path_Markup_htmlText _wp) -> map (\a -> let f = peek a
                                                                                                     in let liftPeek (Peek_Text_JSONText q z) = Peek_Markup_JSONText (Path_Markup_htmlText q) z
                                                                                                            liftPeek (Peek_Text_Text q z) = Peek_Markup_Text (Path_Markup_htmlText q) z
                                                                                                         in Node (Peek_Markup_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                       _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          peek (_s@(LaTeX {})) = mempty :: Forest (Peek Markup)
          peek (_s@(Pandoc {})) = mempty :: Forest (Peek Markup)
          peek (_s@(Markup {})) = mempty :: Forest (Peek Markup)
          hop (_s@(Markdown {})) = concatMap (\pth -> case pth of
                                                          _pp@(Path_Markup_markdownText _wp) -> map (\a -> Node (Peek_Markup_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                                          _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          hop (_s@(Html {})) = concatMap (\pth -> case pth of
                                                      _pp@(Path_Markup_htmlText _wp) -> map (\a -> Node (Peek_Markup_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                                      _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Markup)
          hop (_s@(LaTeX {})) = mempty :: Forest (Peek Markup)
          hop (_s@(Pandoc {})) = mempty :: Forest (Peek Markup)
          hop (_s@(Markup {})) = mempty :: Forest (Peek Markup)
instance Describe (Peek Markup)
    where describe _f (Peek_Markup_JSONText (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                           custom = describe wfld (Proxy :: Proxy Text);
                                                                                           next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy Markup)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_Markup_Text (_p@(Path_Markup_markdownText _wp)) _x) = let {wfld = Just ("Markup", "Markdown", Right "markdownText");
                                                                                       custom = describe wfld (Proxy :: Proxy Text);
                                                                                       next = describe wfld (Peek_Text_Text _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Markup)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Markup_JSONText (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                       custom = describe wfld (Proxy :: Proxy Text);
                                                                                       next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Markup)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Markup_Text (_p@(Path_Markup_htmlText _wp)) _x) = let {wfld = Just ("Markup", "Html", Right "htmlText");
                                                                                   custom = describe wfld (Proxy :: Proxy Text);
                                                                                   next = describe wfld (Peek_Text_Text _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Markup)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Markup)
instance ToLens (Path_Markup JSONText)
    where type S (Path_Markup JSONText) = Markup
          type A (Path_Markup JSONText) = JSONText
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText . toLens _x
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText . toLens _x
instance ToLens (Path_Markup Markup)
    where type S (Path_Markup Markup) = Markup
          type A (Path_Markup Markup) = Markup
          toLens _ = id
instance ToLens (Path_Markup Text)
    where type S (Path_Markup Text) = Markup
          type A (Path_Markup Text) = Text
          toLens (Path_Markup_markdownText _x) = lens_Markup_markdownText
          toLens (Path_Markup_htmlText _x) = lens_Markup_htmlText
data Path_Permissions a
    = Path_Permissions_owner (Path_UserId a) | Path_Permissions_writers (Path_UserIds a) | Path_Permissions_readers (Path_UserIds a) | Path_Permissions
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Permissions a)
    where idPath = Path_Permissions
class HasPermissions c
    where lens_permissions :: Lens' c Permissions
          lens_Permissions_owner :: forall . Lens' c UserId
          lens_Permissions_owner = (.) lens_permissions lens_Permissions_owner
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers :: forall . Lens' c UserIds
          lens_Permissions_readers = (.) lens_permissions lens_Permissions_readers
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers :: forall . Lens' c UserIds
          lens_Permissions_writers = (.) lens_permissions lens_Permissions_writers
          {-# INLINE lens_Permissions_writers #-}
instance HasPermissions Permissions
    where lens_permissions = id
          lens_Permissions_owner f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions y1 x2 x3) (f x1)
          {-# INLINE lens_Permissions_owner #-}
          lens_Permissions_readers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 x2 y1) (f x3)
          {-# INLINE lens_Permissions_readers #-}
          lens_Permissions_writers f (Permissions x1 x2 x3) = fmap (\y1 -> Permissions x1 y1 x3) (f x2)
          {-# INLINE lens_Permissions_writers #-}
instance Paths Permissions JSONText
    where type FromTo Permissions JSONText = Path_Permissions JSONText
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
instance Paths Permissions Permissions
    where type FromTo Permissions Permissions = Path_Permissions Permissions
          paths _ _ = [idPath]
instance Paths Permissions UserIds
    where type FromTo Permissions UserIds = Path_Permissions UserIds
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
instance Paths Permissions Text
    where type FromTo Permissions Text = Path_Permissions Text
          paths (_s@(Permissions {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_writers, writers _s)],
                                                    concatMap (\(p, a') -> map p (paths (a' :: UserIds) _g)) [(Path_Permissions_readers, readers _s)]]
instance Paths Permissions UserId
    where type FromTo Permissions UserId = Path_Permissions UserId
          paths (_s@(Permissions {})) _g = concatMap (\(p, a') -> map p (paths (a' :: UserId) _g)) [(Path_Permissions_owner, owner _s)]
instance PathStart Permissions
    where data Peek Permissions
              = Peek_Permissions_JSONText (FromTo Permissions JSONText) (Maybe JSONText)
              | Peek_Permissions_Permissions (FromTo Permissions Permissions) (Maybe Permissions)
              | Peek_Permissions_UserIds (FromTo Permissions ([UserId])) (Maybe ([UserId]))
              | Peek_Permissions_Text (FromTo Permissions Text) (Maybe Text)
              | Peek_Permissions_UserId (FromTo Permissions UserId) (Maybe UserId)
              deriving (Eq, Show)
          peek (_s@(Permissions {})) = mconcat [concatMap (\pth -> case pth of
                                                                       _pp@(Path_Permissions_owner _wp) -> map (\a -> let f = peek a
                                                                                                                       in let liftPeek (Peek_UserId_UserId q z) = Peek_Permissions_UserId (Path_Permissions_owner q) z
                                                                                                                           in Node (Peek_Permissions_UserId _pp (if null f
                                                                                                                                                                  then Just a
                                                                                                                                                                  else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UserId])
                                                                       _ -> []) (paths _s (Proxy :: Proxy UserId)),
                                                concatMap (\pth -> case pth of
                                                                       _pp@(Path_Permissions_writers _wp) -> map (\a -> let f = peek a
                                                                                                                         in let liftPeek (Peek_UserIds_JSONText q z) = Peek_Permissions_JSONText (Path_Permissions_writers q) z
                                                                                                                                liftPeek (Peek_UserIds_UserIds q z) = Peek_Permissions_UserIds (Path_Permissions_writers q) z
                                                                                                                                liftPeek (Peek_UserIds_Text q z) = Peek_Permissions_Text (Path_Permissions_writers q) z
                                                                                                                             in Node (Peek_Permissions_UserIds _pp (if null f
                                                                                                                                                                     then Just a
                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[UserId]])
                                                                       _ -> []) (paths _s (Proxy :: Proxy ([UserId]))),
                                                concatMap (\pth -> case pth of
                                                                       _pp@(Path_Permissions_readers _wp) -> map (\a -> let f = peek a
                                                                                                                         in let liftPeek (Peek_UserIds_JSONText q z) = Peek_Permissions_JSONText (Path_Permissions_readers q) z
                                                                                                                                liftPeek (Peek_UserIds_UserIds q z) = Peek_Permissions_UserIds (Path_Permissions_readers q) z
                                                                                                                                liftPeek (Peek_UserIds_Text q z) = Peek_Permissions_Text (Path_Permissions_readers q) z
                                                                                                                             in Node (Peek_Permissions_UserIds _pp (if null f
                                                                                                                                                                     then Just a
                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[UserId]])
                                                                       _ -> []) (paths _s (Proxy :: Proxy ([UserId])))] :: Forest (Peek Permissions)
          hop (_s@(Permissions {})) = mconcat [concatMap (\pth -> case pth of
                                                                      _pp@(Path_Permissions_owner _wp) -> map (\a -> Node (Peek_Permissions_UserId _pp (Just a)) []) (toListOf (toLens _pp) _s :: [UserId])
                                                                      _ -> []) (paths _s (Proxy :: Proxy UserId)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_Permissions_writers _wp) -> map (\a -> Node (Peek_Permissions_UserIds _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[UserId]])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ([UserId]))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_Permissions_readers _wp) -> map (\a -> Node (Peek_Permissions_UserIds _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[UserId]])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ([UserId])))] :: Forest (Peek Permissions)
instance Describe (Peek Permissions)
    where describe _f (Peek_Permissions_UserId (_p@(Path_Permissions_owner _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "owner");
                                                                                            custom = describe wfld (Proxy :: Proxy UserId);
                                                                                            next = describe wfld (Peek_UserId_UserId _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy Permissions)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_JSONText (_p@(Path_Permissions_writers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                                custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                                next = describe wfld (Peek_UserIds_JSONText _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_UserIds (_p@(Path_Permissions_writers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                               custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                               next = describe wfld (Peek_UserIds_UserIds _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy Permissions)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_Text (_p@(Path_Permissions_writers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "writers");
                                                                                            custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                            next = describe wfld (Peek_UserIds_Text _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy Permissions)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_JSONText (_p@(Path_Permissions_readers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                                custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                                next = describe wfld (Peek_UserIds_JSONText _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy Permissions)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_UserIds (_p@(Path_Permissions_readers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                               custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                               next = describe wfld (Peek_UserIds_UserIds _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy Permissions)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Permissions_Text (_p@(Path_Permissions_readers _wp)) _x) = let {wfld = Just ("Permissions", "Permissions", Right "readers");
                                                                                            custom = describe wfld (Proxy :: Proxy ([UserId]));
                                                                                            next = describe wfld (Peek_UserIds_Text _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy Permissions)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Permissions)
instance Describe (Proxy Permissions)
    where describe _f _ = case _f of
                              Nothing -> Just "Permissions"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Permissions JSONText)
    where type S (Path_Permissions JSONText) = Permissions
          type A (Path_Permissions JSONText) = JSONText
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions Permissions)
    where type S (Path_Permissions Permissions) = Permissions
          type A (Path_Permissions Permissions) = Permissions
          toLens _ = id
instance ToLens (Path_Permissions UserIds)
    where type S (Path_Permissions UserIds) = Permissions
          type A (Path_Permissions UserIds) = UserIds
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers
instance ToLens (Path_Permissions Text)
    where type S (Path_Permissions Text) = Permissions
          type A (Path_Permissions Text) = Text
          toLens (Path_Permissions_writers _x) = lens_Permissions_writers . toLens _x
          toLens (Path_Permissions_readers _x) = lens_Permissions_readers . toLens _x
instance ToLens (Path_Permissions UserId)
    where type S (Path_Permissions UserId) = Permissions
          type A (Path_Permissions UserId) = UserId
          toLens (Path_Permissions_owner _x) = lens_Permissions_owner
data Path_UserIds a = Path_UserIds_View (Path_Text a) | Path_UserIds deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_UserIds a)
    where idPath = Path_UserIds
instance Paths UserIds JSONText
    where type FromTo UserIds JSONText = Path_UserIds JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_UserIds_View, a')) (toListOf (toLens (Path_UserIds_View (idPath :: FromTo Text
                                                                                                                                                                           Text))) _s))
instance Paths UserIds UserIds
    where type FromTo UserIds UserIds = Path_UserIds UserIds
          paths _ _ = [idPath]
instance Paths UserIds Text
    where type FromTo UserIds Text = Path_UserIds Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_UserIds_View, a')) (toListOf (toLens (Path_UserIds_View (idPath :: FromTo Text
                                                                                                                                                                           Text))) _s))
instance PathStart ([UserId])
    where data Peek ([UserId])
              = Peek_UserIds_JSONText (FromTo ([UserId]) JSONText) (Maybe JSONText)
              | Peek_UserIds_UserIds (FromTo ([UserId]) ([UserId])) (Maybe ([UserId]))
              | Peek_UserIds_Text (FromTo ([UserId]) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_UserIds_View _wp) -> map (\a -> let f = peek a
                                                                                      in let liftPeek (Peek_Text_JSONText q z) = Peek_UserIds_JSONText (Path_UserIds_View q) z
                                                                                             liftPeek (Peek_Text_Text q z) = Peek_UserIds_Text (Path_UserIds_View q) z
                                                                                          in Node (Peek_UserIds_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                           _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek ([UserId]))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_UserIds_View _wp) -> map (\a -> Node (Peek_UserIds_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                          _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek ([UserId]))
instance Describe (Peek ([UserId]))
    where describe _f (Peek_UserIds_JSONText (_p@(Path_UserIds_View _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy Text);
                                                                                     next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy ([UserId]))}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_UserIds_Text (_p@(Path_UserIds_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy Text);
                                                                                 next = describe wfld (Peek_Text_Text _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy ([UserId]))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ([UserId]))
instance Describe (Proxy ([UserId]))
    where describe _f _ = case _f of
                              Nothing -> Just "User Ids"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_UserIds JSONText)
    where type S (Path_UserIds JSONText) = UserIds
          type A (Path_UserIds JSONText) = JSONText
          toLens (Path_UserIds_View v) = (viewLens :: Lens' ([UserId]) Text) . toLens v
instance ToLens (Path_UserIds UserIds)
    where type S (Path_UserIds UserIds) = UserIds
          type A (Path_UserIds UserIds) = UserIds
          toLens _ = id
instance ToLens (Path_UserIds Text)
    where type S (Path_UserIds Text) = UserIds
          type A (Path_UserIds Text) = Text
          toLens (Path_UserIds_View _) = viewLens :: Lens' ([UserId]) Text
type Path_AbbrevPair a = Path_Pair (Path_CIString a) (Path_Markup a)
instance Paths AbbrevPair JSONText
    where type FromTo AbbrevPair JSONText = Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
instance Paths AbbrevPair Markup
    where type FromTo AbbrevPair Markup = Path_Pair (Path_CIString Markup) (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]
instance Paths AbbrevPair AbbrevPair
    where type FromTo AbbrevPair AbbrevPair = Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)
          paths _ _ = [idPath]
instance Paths AbbrevPair CIString
    where type FromTo AbbrevPair CIString = Path_Pair (Path_CIString CIString) (Path_Markup CIString)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)]
instance Paths AbbrevPair Text
    where type FromTo AbbrevPair Text = Path_Pair (Path_CIString Text) (Path_Markup Text)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: CIString) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
instance PathStart ((CIString, Markup))
    where data Peek ((CIString, Markup))
              = Peek_AbbrevPair_JSONText (FromTo ((CIString, Markup)) JSONText) (Maybe JSONText)
              | Peek_AbbrevPair_Markup (FromTo ((CIString, Markup)) Markup) (Maybe Markup)
              | Peek_AbbrevPair_AbbrevPair (FromTo ((CIString, Markup)) ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_AbbrevPair_CIString (FromTo ((CIString, Markup)) CIString) (Maybe CIString)
              | Peek_AbbrevPair_Text (FromTo ((CIString, Markup)) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = mconcat [concatMap (\pth -> case pth of
                                                    _pp@(Path_First _wp) -> map (\a -> let f = peek a
                                                                                        in let liftPeek (Peek_CIString_JSONText q z) = Peek_AbbrevPair_JSONText (Path_First q) z
                                                                                               liftPeek (Peek_CIString_CIString q z) = Peek_AbbrevPair_CIString (Path_First q) z
                                                                                               liftPeek (Peek_CIString_Text q z) = Peek_AbbrevPair_Text (Path_First q) z
                                                                                            in Node (Peek_AbbrevPair_CIString _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [CIString])
                                                    _ -> []) (paths _s (Proxy :: Proxy CIString)),
                             concatMap (\pth -> case pth of
                                                    _pp@(Path_Second _wp) -> map (\a -> let f = peek a
                                                                                         in let liftPeek (Peek_Markup_JSONText q z) = Peek_AbbrevPair_JSONText (Path_Second q) z
                                                                                                liftPeek (Peek_Markup_Markup q z) = Peek_AbbrevPair_Markup (Path_Second q) z
                                                                                                liftPeek (Peek_Markup_Text q z) = Peek_AbbrevPair_Text (Path_Second q) z
                                                                                             in Node (Peek_AbbrevPair_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                    _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ((CIString, Markup)))
          hop _s = mconcat [concatMap (\pth -> case pth of
                                                   _pp@(Path_First _wp) -> map (\a -> Node (Peek_AbbrevPair_CIString _pp (Just a)) []) (toListOf (toLens _pp) _s :: [CIString])
                                                   _ -> []) (paths _s (Proxy :: Proxy CIString)),
                            concatMap (\pth -> case pth of
                                                   _pp@(Path_Second _wp) -> map (\a -> Node (Peek_AbbrevPair_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                   _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ((CIString, Markup)))
instance Describe (Peek ((CIString, Markup)))
    where describe _f (Peek_AbbrevPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy CIString);
                                                                                 next = describe wfld (Peek_CIString_JSONText _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPair_CIString (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy CIString);
                                                                                 next = describe wfld (Peek_CIString_CIString _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPair_Text (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy CIString);
                                                                             next = describe wfld (Peek_CIString_Text _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                  next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPair_Text (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                              next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy ((CIString, Markup)))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ((CIString, Markup)))
instance Describe (Proxy ((CIString, Markup)))
    where describe _f _ = case _f of
                              Nothing -> Just "Abbrev Pair"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = AbbrevPair
          type A (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = AbbrevPair
          type A (Path_Pair (Path_CIString Markup) (Path_Markup Markup)) = Markup
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
    where type S (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          type A (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)) = AbbrevPair
          toLens _ = id
instance ToLens (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
    where type S (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = AbbrevPair
          type A (Path_Pair (Path_CIString CIString) (Path_Markup CIString)) = CIString
          toLens (Path_First _) = _1
instance ToLens (Path_Pair (Path_CIString Text) (Path_Markup Text))
    where type S (Path_Pair (Path_CIString Text) (Path_Markup Text)) = AbbrevPair
          type A (Path_Pair (Path_CIString Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
type Path_AbbrevPairs a = Path_OMap AbbrevPairID (Path_Pair (Path_CIString a) (Path_Markup a))
instance Paths AbbrevPairs JSONText
    where type FromTo AbbrevPairs JSONText = Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (CIString, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths AbbrevPairs Markup
    where type FromTo AbbrevPairs Markup = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (CIString, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths AbbrevPairs AbbrevPair
    where type FromTo AbbrevPairs AbbrevPair = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (CIString, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths AbbrevPairs AbbrevPairs
    where type FromTo AbbrevPairs AbbrevPairs = Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))
          paths _ _ = [idPath]
instance Paths AbbrevPairs CIString
    where type FromTo AbbrevPairs CIString = Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (CIString, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths AbbrevPairs Text
    where type FromTo AbbrevPairs Text = Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (CIString, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order AbbrevPairID ((CIString, Markup)))
    where data Peek (Order AbbrevPairID ((CIString, Markup)))
              = Peek_AbbrevPairs_JSONText (FromTo (Order AbbrevPairID ((CIString, Markup))) JSONText) (Maybe JSONText)
              | Peek_AbbrevPairs_Markup (FromTo (Order AbbrevPairID ((CIString, Markup))) Markup) (Maybe Markup)
              | Peek_AbbrevPairs_AbbrevPair (FromTo (Order AbbrevPairID ((CIString, Markup))) ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_AbbrevPairs_AbbrevPairs (FromTo (Order AbbrevPairID ((CIString, Markup))) (Order AbbrevPairID ((CIString, Markup))))
                                             (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_AbbrevPairs_CIString (FromTo (Order AbbrevPairID ((CIString, Markup))) CIString) (Maybe CIString)
              | Peek_AbbrevPairs_Text (FromTo (Order AbbrevPairID ((CIString, Markup))) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_AbbrevPair_JSONText q z) = Peek_AbbrevPairs_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_AbbrevPair_Markup q z) = Peek_AbbrevPairs_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_AbbrevPair_AbbrevPair q z) = Peek_AbbrevPairs_AbbrevPair (Path_At _k q) z
                                                                                      liftPeek (Peek_AbbrevPair_CIString q z) = Peek_AbbrevPairs_CIString (Path_At _k q) z
                                                                                      liftPeek (Peek_AbbrevPair_Text q z) = Peek_AbbrevPairs_Text (Path_At _k q) z
                                                                                   in Node (Peek_AbbrevPairs_AbbrevPair _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [(CIString, Markup)])
                                           _ -> []) (paths _s (Proxy :: Proxy ((CIString, Markup)))) :: Forest (Peek (Order AbbrevPairID ((CIString, Markup))))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_AbbrevPairs_AbbrevPair _pp (Just a)) []) (toListOf (toLens _pp) _s :: [(CIString, Markup)])
                                          _ -> []) (paths _s (Proxy :: Proxy ((CIString, Markup)))) :: Forest (Peek (Order AbbrevPairID ((CIString, Markup))))
instance Describe (Peek (Order AbbrevPairID ((CIString, Markup))))
    where describe _f (Peek_AbbrevPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ((CIString, Markup)));
                                                                                  next = describe wfld (Peek_AbbrevPair_JSONText _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ((CIString, Markup)));
                                                                                next = describe wfld (Peek_AbbrevPair_Markup _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPairs_AbbrevPair (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ((CIString, Markup)));
                                                                                    next = describe wfld (Peek_AbbrevPair_AbbrevPair _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPairs_CIString (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ((CIString, Markup)));
                                                                                  next = describe wfld (Peek_AbbrevPair_CIString _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_AbbrevPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ((CIString, Markup)));
                                                                              next = describe wfld (Peek_AbbrevPair_Text _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))
instance Describe (Proxy (Order AbbrevPairID ((CIString, Markup))))
    where describe _f _ = case _f of
                              Nothing -> Just "Abbrev Pairs"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPair) (Path_Markup AbbrevPair))) = AbbrevPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString AbbrevPairs) (Path_Markup AbbrevPairs))) = AbbrevPairs
          toLens _ = id
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString CIString) (Path_Markup CIString))) = CIString
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text)))
    where type S (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = AbbrevPairs
          type A (Path_OMap AbbrevPairID (Path_Pair (Path_CIString Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
data Path_Author a
    = Path_Author_authorName (Path_Markup a) | Path_Author_authorCredentials (Path_Markup a) | Path_Author
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Author a)
    where idPath = Path_Author
class HasAuthor c
    where lens_author :: Lens' c Author
          lens_Author_authorCredentials :: forall . Lens' c Markup
          lens_Author_authorCredentials = (.) lens_author lens_Author_authorCredentials
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName :: forall . Lens' c Markup
          lens_Author_authorName = (.) lens_author lens_Author_authorName
          {-# INLINE lens_Author_authorName #-}
instance HasAuthor Author
    where lens_author = id
          lens_Author_authorCredentials f (Author x1 x2) = fmap (\y1 -> Author x1 y1) (f x2)
          {-# INLINE lens_Author_authorCredentials #-}
          lens_Author_authorName f (Author x1 x2) = fmap (\y1 -> Author y1 x2) (f x1)
          {-# INLINE lens_Author_authorName #-}
instance Paths Author JSONText
    where type FromTo Author JSONText = Path_Author JSONText
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
instance Paths Author Markup
    where type FromTo Author Markup = Path_Author Markup
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
instance Paths Author Author
    where type FromTo Author Author = Path_Author Author
          paths _ _ = [idPath]
instance Paths Author Text
    where type FromTo Author Text = Path_Author Text
          paths (_s@(Author {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorName, authorName _s)],
                                               concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Author_authorCredentials, authorCredentials _s)]]
instance PathStart Author
    where data Peek Author
              = Peek_Author_JSONText (FromTo Author JSONText) (Maybe JSONText)
              | Peek_Author_Markup (FromTo Author Markup) (Maybe Markup)
              | Peek_Author_Author (FromTo Author Author) (Maybe Author)
              | Peek_Author_Text (FromTo Author Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(Author {})) = mconcat [concatMap (\pth -> case pth of
                                                                  _pp@(Path_Author_authorName _wp) -> map (\a -> let f = peek a
                                                                                                                  in let liftPeek (Peek_Markup_JSONText q z) = Peek_Author_JSONText (Path_Author_authorName q) z
                                                                                                                         liftPeek (Peek_Markup_Markup q z) = Peek_Author_Markup (Path_Author_authorName q) z
                                                                                                                         liftPeek (Peek_Markup_Text q z) = Peek_Author_Text (Path_Author_authorName q) z
                                                                                                                      in Node (Peek_Author_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                           concatMap (\pth -> case pth of
                                                                  _pp@(Path_Author_authorCredentials _wp) -> map (\a -> let f = peek a
                                                                                                                         in let liftPeek (Peek_Markup_JSONText q z) = Peek_Author_JSONText (Path_Author_authorCredentials q) z
                                                                                                                                liftPeek (Peek_Markup_Markup q z) = Peek_Author_Markup (Path_Author_authorCredentials q) z
                                                                                                                                liftPeek (Peek_Markup_Text q z) = Peek_Author_Text (Path_Author_authorCredentials q) z
                                                                                                                             in Node (Peek_Author_Markup _pp (if null f
                                                                                                                                                               then Just a
                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek Author)
          hop (_s@(Author {})) = mconcat [concatMap (\pth -> case pth of
                                                                 _pp@(Path_Author_authorName _wp) -> map (\a -> Node (Peek_Author_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                          concatMap (\pth -> case pth of
                                                                 _pp@(Path_Author_authorCredentials _wp) -> map (\a -> Node (Peek_Author_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek Author)
instance Describe (Peek Author)
    where describe _f (Peek_Author_JSONText (_p@(Path_Author_authorName _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorName");
                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                         next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy Author)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_Author_Markup (_p@(Path_Author_authorName _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorName");
                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                       next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Author)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Author_Text (_p@(Path_Author_authorName _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorName");
                                                                                     custom = describe wfld (Proxy :: Proxy Markup);
                                                                                     next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Author)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Author_JSONText (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy Author)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_Author_Markup (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                                              next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy Author)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Author_Text (_p@(Path_Author_authorCredentials _wp)) _x) = let {wfld = Just ("Author", "Author", Right "authorCredentials");
                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                            next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy Author)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Author)
instance Describe (Proxy Author)
    where describe _f _ = case _f of
                              Nothing -> Just "Author"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Author JSONText)
    where type S (Path_Author JSONText) = Author
          type A (Path_Author JSONText) = JSONText
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
instance ToLens (Path_Author Markup)
    where type S (Path_Author Markup) = Author
          type A (Path_Author Markup) = Markup
          toLens (Path_Author_authorName _x) = lens_Author_authorName
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials
instance ToLens (Path_Author Author)
    where type S (Path_Author Author) = Author
          type A (Path_Author Author) = Author
          toLens _ = id
instance ToLens (Path_Author Text)
    where type S (Path_Author Text) = Author
          type A (Path_Author Text) = Text
          toLens (Path_Author_authorName _x) = lens_Author_authorName . toLens _x
          toLens (Path_Author_authorCredentials _x) = lens_Author_authorCredentials . toLens _x
type Path_Authors a = Path_OMap AuthorID (Path_Author a)
instance Paths Authors JSONText
    where type FromTo Authors JSONText = Path_OMap AuthorID (Path_Author JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths Authors Markup
    where type FromTo Authors Markup = Path_OMap AuthorID (Path_Author Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths Authors Author
    where type FromTo Authors Author = Path_OMap AuthorID (Path_Author Author)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths Authors Authors
    where type FromTo Authors Authors = Path_OMap AuthorID (Path_Author Authors)
          paths _ _ = [idPath]
instance Paths Authors Text
    where type FromTo Authors Text = Path_OMap AuthorID (Path_Author Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Author) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order AuthorID Author)
    where data Peek (Order AuthorID Author)
              = Peek_Authors_JSONText (FromTo (Order AuthorID Author) JSONText) (Maybe JSONText)
              | Peek_Authors_Markup (FromTo (Order AuthorID Author) Markup) (Maybe Markup)
              | Peek_Authors_Author (FromTo (Order AuthorID Author) Author) (Maybe Author)
              | Peek_Authors_Authors (FromTo (Order AuthorID Author) (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_Authors_Text (FromTo (Order AuthorID Author) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_Author_JSONText q z) = Peek_Authors_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_Author_Markup q z) = Peek_Authors_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_Author_Author q z) = Peek_Authors_Author (Path_At _k q) z
                                                                                      liftPeek (Peek_Author_Text q z) = Peek_Authors_Text (Path_At _k q) z
                                                                                   in Node (Peek_Authors_Author _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Author])
                                           _ -> []) (paths _s (Proxy :: Proxy Author)) :: Forest (Peek (Order AuthorID Author))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_Authors_Author _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Author])
                                          _ -> []) (paths _s (Proxy :: Proxy Author)) :: Forest (Peek (Order AuthorID Author))
instance Describe (Peek (Order AuthorID Author))
    where describe _f (Peek_Authors_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy Author);
                                                                              next = describe wfld (Peek_Author_JSONText _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order AuthorID Author))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Authors_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                            custom = describe wfld (Proxy :: Proxy Author);
                                                                            next = describe wfld (Peek_Author_Markup _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy (Order AuthorID Author))}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Authors_Author (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                            custom = describe wfld (Proxy :: Proxy Author);
                                                                            next = describe wfld (Peek_Author_Author _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy (Order AuthorID Author))}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Authors_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                          custom = describe wfld (Proxy :: Proxy Author);
                                                                          next = describe wfld (Peek_Author_Text _wp undefined);
                                                                          top = describe _f (Proxy :: Proxy (Order AuthorID Author))}
                                                                      in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order AuthorID Author))
instance Describe (Proxy (Order AuthorID Author))
    where describe _f _ = case _f of
                              Nothing -> Just "Authors"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap AuthorID (Path_Author JSONText))
    where type S (Path_OMap AuthorID (Path_Author JSONText)) = Authors
          type A (Path_OMap AuthorID (Path_Author JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Markup))
    where type S (Path_OMap AuthorID (Path_Author Markup)) = Authors
          type A (Path_OMap AuthorID (Path_Author Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap AuthorID (Path_Author Author))
    where type S (Path_OMap AuthorID (Path_Author Author)) = Authors
          type A (Path_OMap AuthorID (Path_Author Author)) = Author
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap AuthorID (Path_Author Authors))
    where type S (Path_OMap AuthorID (Path_Author Authors)) = Authors
          type A (Path_OMap AuthorID (Path_Author Authors)) = Authors
          toLens _ = id
instance ToLens (Path_OMap AuthorID (Path_Author Text))
    where type S (Path_OMap AuthorID (Path_Author Text)) = Authors
          type A (Path_OMap AuthorID (Path_Author Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
data Path_Branding a = Path_Branding_View (Path_Text a) | Path_Branding deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Branding a)
    where idPath = Path_Branding
class HasBranding c
    where lens_branding :: Lens' c Branding
instance HasBranding Branding
    where lens_branding = id
instance Paths Branding JSONText
    where type FromTo Branding JSONText = Path_Branding JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_Branding_View, a')) (toListOf (toLens (Path_Branding_View (idPath :: FromTo Text
                                                                                                                                                                             Text))) _s))
instance Paths Branding Branding
    where type FromTo Branding Branding = Path_Branding Branding
          paths _ _ = [idPath]
instance Paths Branding Text
    where type FromTo Branding Text = Path_Branding Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_Branding_View, a')) (toListOf (toLens (Path_Branding_View (idPath :: FromTo Text
                                                                                                                                                                             Text))) _s))
instance PathStart Branding
    where data Peek Branding
              = Peek_Branding_JSONText (FromTo Branding JSONText) (Maybe JSONText)
              | Peek_Branding_Branding (FromTo Branding Branding) (Maybe Branding)
              | Peek_Branding_Text (FromTo Branding Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Branding_View _wp) -> map (\a -> let f = peek a
                                                                                       in let liftPeek (Peek_Text_JSONText q z) = Peek_Branding_JSONText (Path_Branding_View q) z
                                                                                              liftPeek (Peek_Text_Text q z) = Peek_Branding_Text (Path_Branding_View q) z
                                                                                           in Node (Peek_Branding_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                           _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Branding)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Branding_View _wp) -> map (\a -> Node (Peek_Branding_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                          _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek Branding)
instance Describe (Peek Branding)
    where describe _f (Peek_Branding_JSONText (_p@(Path_Branding_View _wp)) _x) = let {wfld = Nothing;
                                                                                       custom = describe wfld (Proxy :: Proxy Text);
                                                                                       next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Branding)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Branding_Text (_p@(Path_Branding_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy Text);
                                                                                   next = describe wfld (Peek_Text_Text _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Branding)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Branding)
instance Describe (Proxy Branding)
    where describe _f _ = case _f of
                              Nothing -> Just "Branding"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Branding JSONText)
    where type S (Path_Branding JSONText) = Branding
          type A (Path_Branding JSONText) = JSONText
          toLens (Path_Branding_View v) = (viewLens :: Lens' Branding Text) . toLens v
instance ToLens (Path_Branding Branding)
    where type S (Path_Branding Branding) = Branding
          type A (Path_Branding Branding) = Branding
          toLens _ = id
instance ToLens (Path_Branding Text)
    where type S (Path_Branding Text) = Branding
          type A (Path_Branding Text) = Text
          toLens (Path_Branding_View _) = viewLens :: Lens' Branding Text
type Path_MarkupPair a = Path_Pair (Path_Markup a) (Path_Markup a)
instance Paths MarkupPair JSONText
    where type FromTo MarkupPair JSONText = Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
instance Paths MarkupPair Markup
    where type FromTo MarkupPair Markup = Path_Pair (Path_Markup Markup) (Path_Markup Markup)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
instance Paths MarkupPair MarkupPair
    where type FromTo MarkupPair MarkupPair = Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)
          paths _ _ = [idPath]
instance Paths MarkupPair Text
    where type FromTo MarkupPair Text = Path_Pair (Path_Markup Text) (Path_Markup Text)
          paths _s _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_First, fst _s)],
                                 concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_Second, snd _s)]]
instance PathStart ((Markup, Markup))
    where data Peek ((Markup, Markup))
              = Peek_MarkupPair_JSONText (FromTo ((Markup, Markup)) JSONText) (Maybe JSONText)
              | Peek_MarkupPair_Markup (FromTo ((Markup, Markup)) Markup) (Maybe Markup)
              | Peek_MarkupPair_MarkupPair (FromTo ((Markup, Markup)) ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_MarkupPair_Text (FromTo ((Markup, Markup)) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = mconcat [concatMap (\pth -> case pth of
                                                    _pp@(Path_First _wp) -> map (\a -> let f = peek a
                                                                                        in let liftPeek (Peek_Markup_JSONText q z) = Peek_MarkupPair_JSONText (Path_First q) z
                                                                                               liftPeek (Peek_Markup_Markup q z) = Peek_MarkupPair_Markup (Path_First q) z
                                                                                               liftPeek (Peek_Markup_Text q z) = Peek_MarkupPair_Text (Path_First q) z
                                                                                            in Node (Peek_MarkupPair_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                    _ -> []) (paths _s (Proxy :: Proxy Markup)),
                             concatMap (\pth -> case pth of
                                                    _pp@(Path_Second _wp) -> map (\a -> let f = peek a
                                                                                         in let liftPeek (Peek_Markup_JSONText q z) = Peek_MarkupPair_JSONText (Path_Second q) z
                                                                                                liftPeek (Peek_Markup_Markup q z) = Peek_MarkupPair_Markup (Path_Second q) z
                                                                                                liftPeek (Peek_Markup_Text q z) = Peek_MarkupPair_Text (Path_Second q) z
                                                                                             in Node (Peek_MarkupPair_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                    _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ((Markup, Markup)))
          hop _s = mconcat [concatMap (\pth -> case pth of
                                                   _pp@(Path_First _wp) -> map (\a -> Node (Peek_MarkupPair_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                   _ -> []) (paths _s (Proxy :: Proxy Markup)),
                            concatMap (\pth -> case pth of
                                                   _pp@(Path_Second _wp) -> map (\a -> Node (Peek_MarkupPair_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                   _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ((Markup, Markup)))
instance Describe (Peek ((Markup, Markup)))
    where describe _f (Peek_MarkupPair_JSONText (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy Markup);
                                                                                 next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPair_Markup (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy Markup);
                                                                               next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPair_Text (_p@(Path_First _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy Markup);
                                                                             next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPair_JSONText (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                  next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPair_Markup (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPair_Text (_p@(Path_Second _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                              next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy ((Markup, Markup)))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ((Markup, Markup)))
instance Describe (Proxy ((Markup, Markup)))
    where describe _f _ = case _f of
                              Nothing -> Just "Markup Pair"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
    where type S (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = MarkupPair
          type A (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)) = JSONText
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
instance ToLens (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
    where type S (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = MarkupPair
          type A (Path_Pair (Path_Markup Markup) (Path_Markup Markup)) = Markup
          toLens (Path_First _) = _1
          toLens (Path_Second _) = _2
instance ToLens (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
    where type S (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          type A (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)) = MarkupPair
          toLens _ = id
instance ToLens (Path_Pair (Path_Markup Text) (Path_Markup Text))
    where type S (Path_Pair (Path_Markup Text) (Path_Markup Text)) = MarkupPair
          type A (Path_Pair (Path_Markup Text) (Path_Markup Text)) = Text
          toLens (Path_First v) = _1 . toLens v
          toLens (Path_Second v) = _2 . toLens v
type Path_MarkupPairs a = Path_OMap MarkupPairID (Path_Pair (Path_Markup a) (Path_Markup a))
instance Paths MarkupPairs JSONText
    where type FromTo MarkupPairs JSONText = Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (Markup, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths MarkupPairs Markup
    where type FromTo MarkupPairs Markup = Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (Markup, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths MarkupPairs MarkupPair
    where type FromTo MarkupPairs MarkupPair = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (Markup, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths MarkupPairs MarkupPairs
    where type FromTo MarkupPairs MarkupPairs = Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))
          paths _ _ = [idPath]
instance Paths MarkupPairs Text
    where type FromTo MarkupPairs Text = Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: (Markup, Markup)) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order MarkupPairID ((Markup, Markup)))
    where data Peek (Order MarkupPairID ((Markup, Markup)))
              = Peek_MarkupPairs_JSONText (FromTo (Order MarkupPairID ((Markup, Markup))) JSONText) (Maybe JSONText)
              | Peek_MarkupPairs_Markup (FromTo (Order MarkupPairID ((Markup, Markup))) Markup) (Maybe Markup)
              | Peek_MarkupPairs_MarkupPair (FromTo (Order MarkupPairID ((Markup, Markup))) ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_MarkupPairs_MarkupPairs (FromTo (Order MarkupPairID ((Markup, Markup))) (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_MarkupPairs_Text (FromTo (Order MarkupPairID ((Markup, Markup))) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_MarkupPair_JSONText q z) = Peek_MarkupPairs_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_MarkupPair_Markup q z) = Peek_MarkupPairs_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_MarkupPair_MarkupPair q z) = Peek_MarkupPairs_MarkupPair (Path_At _k q) z
                                                                                      liftPeek (Peek_MarkupPair_Text q z) = Peek_MarkupPairs_Text (Path_At _k q) z
                                                                                   in Node (Peek_MarkupPairs_MarkupPair _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [(Markup, Markup)])
                                           _ -> []) (paths _s (Proxy :: Proxy ((Markup, Markup)))) :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_MarkupPairs_MarkupPair _pp (Just a)) []) (toListOf (toLens _pp) _s :: [(Markup, Markup)])
                                          _ -> []) (paths _s (Proxy :: Proxy ((Markup, Markup)))) :: Forest (Peek (Order MarkupPairID ((Markup, Markup))))
instance Describe (Peek (Order MarkupPairID ((Markup, Markup))))
    where describe _f (Peek_MarkupPairs_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ((Markup, Markup)));
                                                                                  next = describe wfld (Peek_MarkupPair_JSONText _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPairs_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ((Markup, Markup)));
                                                                                next = describe wfld (Peek_MarkupPair_Markup _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPairs_MarkupPair (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ((Markup, Markup)));
                                                                                    next = describe wfld (Peek_MarkupPair_MarkupPair _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_MarkupPairs_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ((Markup, Markup)));
                                                                              next = describe wfld (Peek_MarkupPair_Text _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))
instance Describe (Proxy (Order MarkupPairID ((Markup, Markup))))
    where describe _f _ = case _f of
                              Nothing -> Just "Markup Pairs"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup JSONText) (Path_Markup JSONText))) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Markup) (Path_Markup Markup))) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPair) (Path_Markup MarkupPair))) = MarkupPair
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup MarkupPairs) (Path_Markup MarkupPairs))) = MarkupPairs
          toLens _ = id
instance ToLens (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text)))
    where type S (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = MarkupPairs
          type A (Path_OMap MarkupPairID (Path_Pair (Path_Markup Text) (Path_Markup Text))) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
type Path_Markups a = Path_OMap MarkupID (Path_Markup a)
instance Paths Markups JSONText
    where type FromTo Markups JSONText = Path_OMap MarkupID (Path_Markup JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths Markups Markup
    where type FromTo Markups Markup = Path_OMap MarkupID (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths Markups Markups
    where type FromTo Markups Markups = Path_OMap MarkupID (Path_Markup Markups)
          paths _ _ = [idPath]
instance Paths Markups Text
    where type FromTo Markups Text = Path_OMap MarkupID (Path_Markup Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order MarkupID Markup)
    where data Peek (Order MarkupID Markup)
              = Peek_Markups_JSONText (FromTo (Order MarkupID Markup) JSONText) (Maybe JSONText)
              | Peek_Markups_Markup (FromTo (Order MarkupID Markup) Markup) (Maybe Markup)
              | Peek_Markups_Markups (FromTo (Order MarkupID Markup) (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_Markups_Text (FromTo (Order MarkupID Markup) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_Markup_JSONText q z) = Peek_Markups_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_Markup_Markup q z) = Peek_Markups_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_Markup_Text q z) = Peek_Markups_Text (Path_At _k q) z
                                                                                   in Node (Peek_Markups_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                           _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek (Order MarkupID Markup))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_Markups_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                          _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek (Order MarkupID Markup))
instance Describe (Peek (Order MarkupID Markup))
    where describe _f (Peek_Markups_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                              next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order MarkupID Markup))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Markups_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                            next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy (Order MarkupID Markup))}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Markups_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                          next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                          top = describe _f (Proxy :: Proxy (Order MarkupID Markup))}
                                                                      in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order MarkupID Markup))
instance Describe (Proxy (Order MarkupID Markup))
    where describe _f _ = case _f of
                              Nothing -> Just "Markups"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap MarkupID (Path_Markup JSONText))
    where type S (Path_OMap MarkupID (Path_Markup JSONText)) = Markups
          type A (Path_OMap MarkupID (Path_Markup JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap MarkupID (Path_Markup Markup))
    where type S (Path_OMap MarkupID (Path_Markup Markup)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markup)) = Markup
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap MarkupID (Path_Markup Markups))
    where type S (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Markups)) = Markups
          toLens _ = id
instance ToLens (Path_OMap MarkupID (Path_Markup Text))
    where type S (Path_OMap MarkupID (Path_Markup Text)) = Markups
          type A (Path_OMap MarkupID (Path_Markup Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
data Path_MaybeReportIntendedUse a = Path_MaybeReportIntendedUse_View (Path_String a) | Path_MaybeReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_MaybeReportIntendedUse a)
    where idPath = Path_MaybeReportIntendedUse
instance Paths MaybeReportIntendedUse String
    where type FromTo MaybeReportIntendedUse String = Path_MaybeReportIntendedUse String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths MaybeReportIntendedUse JSONText
    where type FromTo MaybeReportIntendedUse JSONText = Path_MaybeReportIntendedUse JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_MaybeReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeReportIntendedUse_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths MaybeReportIntendedUse MaybeReportIntendedUse
    where type FromTo MaybeReportIntendedUse MaybeReportIntendedUse = Path_MaybeReportIntendedUse MaybeReportIntendedUse
          paths _ _ = [idPath]
instance PathStart (Maybe ReportIntendedUse)
    where data Peek (Maybe ReportIntendedUse)
              = Peek_MaybeReportIntendedUse_String (FromTo (Maybe ReportIntendedUse) ([Char])) (Maybe ([Char]))
              | Peek_MaybeReportIntendedUse_JSONText (FromTo (Maybe ReportIntendedUse) JSONText) (Maybe JSONText)
              | Peek_MaybeReportIntendedUse_MaybeReportIntendedUse (FromTo (Maybe ReportIntendedUse) (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> let f = peek a
                                                                                                     in let liftPeek (Peek_String_String q z) = Peek_MaybeReportIntendedUse_String (Path_MaybeReportIntendedUse_View q) z
                                                                                                            liftPeek (Peek_String_JSONText q z) = Peek_MaybeReportIntendedUse_JSONText (Path_MaybeReportIntendedUse_View q) z
                                                                                                         in Node (Peek_MaybeReportIntendedUse_String _pp (if null f
                                                                                                                                                           then Just a
                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (Maybe ReportIntendedUse))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_MaybeReportIntendedUse_View _wp) -> map (\a -> Node (Peek_MaybeReportIntendedUse_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (Maybe ReportIntendedUse))
instance Describe (Peek (Maybe ReportIntendedUse))
    where describe _f (Peek_MaybeReportIntendedUse_String (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld = Nothing;
                                                                                                                 custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                                 next = describe wfld (Peek_String_String _wp undefined);
                                                                                                                 top = describe _f (Proxy :: Proxy (Maybe ReportIntendedUse))}
                                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_MaybeReportIntendedUse_JSONText (_p@(Path_MaybeReportIntendedUse_View _wp)) _x) = let {wfld = Nothing;
                                                                                                                   custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                                   next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                                                   top = describe _f (Proxy :: Proxy (Maybe ReportIntendedUse))}
                                                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Maybe ReportIntendedUse))
instance Describe (Proxy (Maybe ReportIntendedUse))
    where describe _f _ = case _f of
                              Nothing -> Just "Maybe Report Intended Use"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_MaybeReportIntendedUse String)
    where type S (Path_MaybeReportIntendedUse String) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse String) = String
          toLens (Path_MaybeReportIntendedUse_View _) = viewLens :: Lens' (Maybe ReportIntendedUse) ([Char])
instance ToLens (Path_MaybeReportIntendedUse JSONText)
    where type S (Path_MaybeReportIntendedUse JSONText) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse JSONText) = JSONText
          toLens (Path_MaybeReportIntendedUse_View v) = (viewLens :: Lens' (Maybe ReportIntendedUse) ([Char])) . toLens v
instance ToLens (Path_MaybeReportIntendedUse MaybeReportIntendedUse)
    where type S (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          type A (Path_MaybeReportIntendedUse MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens _ = id
data Path_Report a = Path_Report_View (Path_ReportView a) | Path_Report deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Report a)
    where idPath = Path_Report
class HasReport c
    where lens_report :: Lens' c Report
          lens_Report_reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_Report_reportAbbrevs = (.) lens_report lens_Report_reportAbbrevs
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors :: forall . Lens' c Authors
          lens_Report_reportAuthors = (.) lens_report lens_Report_reportAuthors
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody :: forall . Lens' c ReportElems
          lens_Report_reportBody = (.) lens_report lens_Report_reportBody
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding :: forall . Lens' c Branding
          lens_Report_reportBranding = (.) lens_report lens_Report_reportBranding
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems :: forall . Lens' c Markup
          lens_Report_reportBriefItems = (.) lens_report lens_Report_reportBriefItems
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification :: forall . Lens' c Markups
          lens_Report_reportCertification = (.) lens_report lens_Report_reportCertification
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress :: forall . Lens' c Markup
          lens_Report_reportClientAddress = (.) lens_report lens_Report_reportClientAddress
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting :: forall . Lens' c Markup
          lens_Report_reportClientGreeting = (.) lens_report lens_Report_reportClientGreeting
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName :: forall . Lens' c Markup
          lens_Report_reportClientName = (.) lens_report lens_Report_reportClientName
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate :: forall . Lens' c Markup
          lens_Report_reportContractDate = (.) lens_report lens_Report_reportContractDate
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated :: forall . Lens' c EpochMilli
          lens_Report_reportCreated = (.) lens_report lens_Report_reportCreated
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate :: forall . Lens' c Markup
          lens_Report_reportDate = (.) lens_report lens_Report_reportDate
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName :: forall . Lens' c Bool
          lens_Report_reportDisplayItemName = (.) lens_report lens_Report_reportDisplayItemName
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate :: forall . Lens' c Markup
          lens_Report_reportEffectiveDate = (.) lens_report lens_Report_reportEffectiveDate
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags :: forall . Lens' c ReportFlags
          lens_Report_reportFlags = (.) lens_report lens_Report_reportFlags
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder :: forall . Lens' c FilePath
          lens_Report_reportFolder = (.) lens_report lens_Report_reportFolder
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter :: forall . Lens' c Markup
          lens_Report_reportFooter = (.) lens_report lens_Report_reportFooter
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary :: forall . Lens' c MarkupPairs
          lens_Report_reportGlossary = (.) lens_report lens_Report_reportGlossary
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader :: forall . Lens' c Markup
          lens_Report_reportHeader = (.) lens_report lens_Report_reportHeader
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate :: forall . Lens' c Markup
          lens_Report_reportInspectionDate = (.) lens_report lens_Report_reportInspectionDate
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation :: forall . Lens' c Markup
          lens_Report_reportInspectionLocation = (.) lens_report lens_Report_reportInspectionLocation
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_Report_reportIntendedUse = (.) lens_report lens_Report_reportIntendedUse
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner :: forall . Lens' c Markup
          lens_Report_reportItemsOwner = (.) lens_report lens_Report_reportItemsOwner
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull :: forall . Lens' c Markup
          lens_Report_reportItemsOwnerFull = (.) lens_report lens_Report_reportItemsOwnerFull
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_Report_reportLetterOfTransmittal = (.) lens_report lens_Report_reportLetterOfTransmittal
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions :: forall . Lens' c Markups
          lens_Report_reportLimitingConditions = (.) lens_report lens_Report_reportLimitingConditions
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName :: forall . Lens' c Markup
          lens_Report_reportName = (.) lens_report lens_Report_reportName
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName :: forall . Lens' c Bool
          lens_Report_reportOrderByItemName = (.) lens_report lens_Report_reportOrderByItemName
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms :: forall . Lens' c Permissions
          lens_Report_reportPerms = (.) lens_report lens_Report_reportPerms
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer :: forall . Lens' c Markup
          lens_Report_reportPreparer = (.) lens_report lens_Report_reportPreparer
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress :: forall . Lens' c Markup
          lens_Report_reportPreparerAddress = (.) lens_report lens_Report_reportPreparerAddress
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN :: forall . Lens' c Markup
          lens_Report_reportPreparerEIN = (.) lens_report lens_Report_reportPreparerEIN
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail :: forall . Lens' c Markup
          lens_Report_reportPreparerEMail = (.) lens_report lens_Report_reportPreparerEMail
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite :: forall . Lens' c Markup
          lens_Report_reportPreparerWebsite = (.) lens_report lens_Report_reportPreparerWebsite
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy :: forall . Lens' c Markup
          lens_Report_reportPrivacyPolicy = (.) lens_report lens_Report_reportPrivacyPolicy
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted :: forall . Lens' c Bool
          lens_Report_reportRedacted = (.) lens_report lens_Report_reportRedacted
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision :: forall . Lens' c Integer
          lens_Report_reportRevision = (.) lens_report lens_Report_reportRevision
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork :: forall . Lens' c Markup
          lens_Report_reportScopeOfWork = (.) lens_report lens_Report_reportScopeOfWork
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources :: forall . Lens' c MarkupPairs
          lens_Report_reportSources = (.) lens_report lens_Report_reportSources
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_Report_reportStandardsVersion = (.) lens_report lens_Report_reportStandardsVersion
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus :: forall . Lens' c ReportStatus
          lens_Report_reportStatus = (.) lens_report lens_Report_reportStatus
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle :: forall . Lens' c Markup
          lens_Report_reportTitle = (.) lens_report lens_Report_reportTitle
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID :: forall . Lens' c UUID
          lens_Report_reportUUID = (.) lens_report lens_Report_reportUUID
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_Report_reportValueApproachInfo = (.) lens_report lens_Report_reportValueApproachInfo
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_Report_reportValueTypeInfo = (.) lens_report lens_Report_reportValueTypeInfo
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance HasReport Report
    where lens_report = id
          lens_Report_reportAbbrevs f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_Report_reportAbbrevs #-}
          lens_Report_reportAuthors f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_Report_reportAuthors #-}
          lens_Report_reportBody f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_Report_reportBody #-}
          lens_Report_reportBranding f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_Report_reportBranding #-}
          lens_Report_reportBriefItems f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_Report_reportBriefItems #-}
          lens_Report_reportCertification f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_Report_reportCertification #-}
          lens_Report_reportClientAddress f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_Report_reportClientAddress #-}
          lens_Report_reportClientGreeting f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_Report_reportClientGreeting #-}
          lens_Report_reportClientName f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_Report_reportClientName #-}
          lens_Report_reportContractDate f (Report x1
                                                   x2
                                                   x3
                                                   x4
                                                   x5
                                                   x6
                                                   x7
                                                   x8
                                                   x9
                                                   x10
                                                   x11
                                                   x12
                                                   x13
                                                   x14
                                                   x15
                                                   x16
                                                   x17
                                                   x18
                                                   x19
                                                   x20
                                                   x21
                                                   x22
                                                   x23
                                                   x24
                                                   x25
                                                   x26
                                                   x27
                                                   x28
                                                   x29
                                                   x30
                                                   x31
                                                   x32
                                                   x33
                                                   x34
                                                   x35
                                                   x36
                                                   x37
                                                   x38
                                                   x39
                                                   x40
                                                   x41
                                                   x42
                                                   x43
                                                   x44
                                                   x45) = fmap (\y1 -> Report x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_Report_reportContractDate #-}
          lens_Report_reportCreated f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_Report_reportCreated #-}
          lens_Report_reportDate f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_Report_reportDate #-}
          lens_Report_reportDisplayItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_Report_reportDisplayItemName #-}
          lens_Report_reportEffectiveDate f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_Report_reportEffectiveDate #-}
          lens_Report_reportFlags f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_Report_reportFlags #-}
          lens_Report_reportFolder f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_Report_reportFolder #-}
          lens_Report_reportFooter f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_Report_reportFooter #-}
          lens_Report_reportGlossary f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_Report_reportGlossary #-}
          lens_Report_reportHeader f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_Report_reportHeader #-}
          lens_Report_reportInspectionDate f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_Report_reportInspectionDate #-}
          lens_Report_reportInspectionLocation f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_Report_reportInspectionLocation #-}
          lens_Report_reportIntendedUse f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_Report_reportIntendedUse #-}
          lens_Report_reportItemsOwner f (Report x1
                                                 x2
                                                 x3
                                                 x4
                                                 x5
                                                 x6
                                                 x7
                                                 x8
                                                 x9
                                                 x10
                                                 x11
                                                 x12
                                                 x13
                                                 x14
                                                 x15
                                                 x16
                                                 x17
                                                 x18
                                                 x19
                                                 x20
                                                 x21
                                                 x22
                                                 x23
                                                 x24
                                                 x25
                                                 x26
                                                 x27
                                                 x28
                                                 x29
                                                 x30
                                                 x31
                                                 x32
                                                 x33
                                                 x34
                                                 x35
                                                 x36
                                                 x37
                                                 x38
                                                 x39
                                                 x40
                                                 x41
                                                 x42
                                                 x43
                                                 x44
                                                 x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_Report_reportItemsOwner #-}
          lens_Report_reportItemsOwnerFull f (Report x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_Report_reportItemsOwnerFull #-}
          lens_Report_reportLetterOfTransmittal f (Report x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_Report_reportLetterOfTransmittal #-}
          lens_Report_reportLimitingConditions f (Report x1
                                                         x2
                                                         x3
                                                         x4
                                                         x5
                                                         x6
                                                         x7
                                                         x8
                                                         x9
                                                         x10
                                                         x11
                                                         x12
                                                         x13
                                                         x14
                                                         x15
                                                         x16
                                                         x17
                                                         x18
                                                         x19
                                                         x20
                                                         x21
                                                         x22
                                                         x23
                                                         x24
                                                         x25
                                                         x26
                                                         x27
                                                         x28
                                                         x29
                                                         x30
                                                         x31
                                                         x32
                                                         x33
                                                         x34
                                                         x35
                                                         x36
                                                         x37
                                                         x38
                                                         x39
                                                         x40
                                                         x41
                                                         x42
                                                         x43
                                                         x44
                                                         x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_Report_reportLimitingConditions #-}
          lens_Report_reportName f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_Report_reportName #-}
          lens_Report_reportOrderByItemName f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_Report_reportOrderByItemName #-}
          lens_Report_reportPerms f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_Report_reportPerms #-}
          lens_Report_reportPreparer f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_Report_reportPreparer #-}
          lens_Report_reportPreparerAddress f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_Report_reportPreparerAddress #-}
          lens_Report_reportPreparerEIN f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_Report_reportPreparerEIN #-}
          lens_Report_reportPreparerEMail f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_Report_reportPreparerEMail #-}
          lens_Report_reportPreparerWebsite f (Report x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_Report_reportPreparerWebsite #-}
          lens_Report_reportPrivacyPolicy f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_Report_reportPrivacyPolicy #-}
          lens_Report_reportRedacted f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_Report_reportRedacted #-}
          lens_Report_reportRevision f (Report x1
                                               x2
                                               x3
                                               x4
                                               x5
                                               x6
                                               x7
                                               x8
                                               x9
                                               x10
                                               x11
                                               x12
                                               x13
                                               x14
                                               x15
                                               x16
                                               x17
                                               x18
                                               x19
                                               x20
                                               x21
                                               x22
                                               x23
                                               x24
                                               x25
                                               x26
                                               x27
                                               x28
                                               x29
                                               x30
                                               x31
                                               x32
                                               x33
                                               x34
                                               x35
                                               x36
                                               x37
                                               x38
                                               x39
                                               x40
                                               x41
                                               x42
                                               x43
                                               x44
                                               x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_Report_reportRevision #-}
          lens_Report_reportScopeOfWork f (Report x1
                                                  x2
                                                  x3
                                                  x4
                                                  x5
                                                  x6
                                                  x7
                                                  x8
                                                  x9
                                                  x10
                                                  x11
                                                  x12
                                                  x13
                                                  x14
                                                  x15
                                                  x16
                                                  x17
                                                  x18
                                                  x19
                                                  x20
                                                  x21
                                                  x22
                                                  x23
                                                  x24
                                                  x25
                                                  x26
                                                  x27
                                                  x28
                                                  x29
                                                  x30
                                                  x31
                                                  x32
                                                  x33
                                                  x34
                                                  x35
                                                  x36
                                                  x37
                                                  x38
                                                  x39
                                                  x40
                                                  x41
                                                  x42
                                                  x43
                                                  x44
                                                  x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_Report_reportScopeOfWork #-}
          lens_Report_reportSources f (Report x1
                                              x2
                                              x3
                                              x4
                                              x5
                                              x6
                                              x7
                                              x8
                                              x9
                                              x10
                                              x11
                                              x12
                                              x13
                                              x14
                                              x15
                                              x16
                                              x17
                                              x18
                                              x19
                                              x20
                                              x21
                                              x22
                                              x23
                                              x24
                                              x25
                                              x26
                                              x27
                                              x28
                                              x29
                                              x30
                                              x31
                                              x32
                                              x33
                                              x34
                                              x35
                                              x36
                                              x37
                                              x38
                                              x39
                                              x40
                                              x41
                                              x42
                                              x43
                                              x44
                                              x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_Report_reportSources #-}
          lens_Report_reportStandardsVersion f (Report x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_Report_reportStandardsVersion #-}
          lens_Report_reportStatus f (Report x1
                                             x2
                                             x3
                                             x4
                                             x5
                                             x6
                                             x7
                                             x8
                                             x9
                                             x10
                                             x11
                                             x12
                                             x13
                                             x14
                                             x15
                                             x16
                                             x17
                                             x18
                                             x19
                                             x20
                                             x21
                                             x22
                                             x23
                                             x24
                                             x25
                                             x26
                                             x27
                                             x28
                                             x29
                                             x30
                                             x31
                                             x32
                                             x33
                                             x34
                                             x35
                                             x36
                                             x37
                                             x38
                                             x39
                                             x40
                                             x41
                                             x42
                                             x43
                                             x44
                                             x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_Report_reportStatus #-}
          lens_Report_reportTitle f (Report x1
                                            x2
                                            x3
                                            x4
                                            x5
                                            x6
                                            x7
                                            x8
                                            x9
                                            x10
                                            x11
                                            x12
                                            x13
                                            x14
                                            x15
                                            x16
                                            x17
                                            x18
                                            x19
                                            x20
                                            x21
                                            x22
                                            x23
                                            x24
                                            x25
                                            x26
                                            x27
                                            x28
                                            x29
                                            x30
                                            x31
                                            x32
                                            x33
                                            x34
                                            x35
                                            x36
                                            x37
                                            x38
                                            x39
                                            x40
                                            x41
                                            x42
                                            x43
                                            x44
                                            x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_Report_reportTitle #-}
          lens_Report_reportUUID f (Report x1
                                           x2
                                           x3
                                           x4
                                           x5
                                           x6
                                           x7
                                           x8
                                           x9
                                           x10
                                           x11
                                           x12
                                           x13
                                           x14
                                           x15
                                           x16
                                           x17
                                           x18
                                           x19
                                           x20
                                           x21
                                           x22
                                           x23
                                           x24
                                           x25
                                           x26
                                           x27
                                           x28
                                           x29
                                           x30
                                           x31
                                           x32
                                           x33
                                           x34
                                           x35
                                           x36
                                           x37
                                           x38
                                           x39
                                           x40
                                           x41
                                           x42
                                           x43
                                           x44
                                           x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_Report_reportUUID #-}
          lens_Report_reportValueApproachInfo f (Report x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_Report_reportValueApproachInfo #-}
          lens_Report_reportValueTypeInfo f (Report x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> Report x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_Report_reportValueTypeInfo #-}
instance Paths Report String
    where type FromTo Report String = Path_Report String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Int64
    where type FromTo Report Int64 = Path_Report Int64
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Int
    where type FromTo Report Int = Path_Report Int
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Bool
    where type FromTo Report Bool = Path_Report Bool
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Double
    where type FromTo Report Double = Path_Report Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Dimension
    where type FromTo Report Dimension = Path_Report Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ImageCrop
    where type FromTo Report ImageCrop = Path_Report ImageCrop
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ImageSize
    where type FromTo Report ImageSize = Path_Report ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Units
    where type FromTo Report Units = Path_Report Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ImageFile
    where type FromTo Report ImageFile = Path_Report ImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Integer
    where type FromTo Report Integer = Path_Report Integer
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report JSONText
    where type FromTo Report JSONText = Path_Report JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Markup
    where type FromTo Report Markup = Path_Report Markup
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Permissions
    where type FromTo Report Permissions = Path_Report Permissions
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report UserIds
    where type FromTo Report UserIds = Path_Report UserIds
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report AbbrevPair
    where type FromTo Report AbbrevPair = Path_Report AbbrevPair
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report AbbrevPairs
    where type FromTo Report AbbrevPairs = Path_Report AbbrevPairs
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Author
    where type FromTo Report Author = Path_Report Author
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Authors
    where type FromTo Report Authors = Path_Report Authors
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Branding
    where type FromTo Report Branding = Path_Report Branding
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MarkupPair
    where type FromTo Report MarkupPair = Path_Report MarkupPair
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MarkupPairs
    where type FromTo Report MarkupPairs = Path_Report MarkupPairs
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Markups
    where type FromTo Report Markups = Path_Report Markups
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MaybeReportIntendedUse
    where type FromTo Report MaybeReportIntendedUse = Path_Report MaybeReportIntendedUse
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Report
    where type FromTo Report Report = Path_Report Report
          paths _ _ = [idPath]
instance Paths Report ReportElem
    where type FromTo Report ReportElem = Path_Report ReportElem
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportElems
    where type FromTo Report ReportElems = Path_Report ReportElems
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportFlags
    where type FromTo Report ReportFlags = Path_Report ReportFlags
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportStandard
    where type FromTo Report ReportStandard = Path_Report ReportStandard
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportStatus
    where type FromTo Report ReportStatus = Path_Report ReportStatus
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportValueApproachInfo
    where type FromTo Report ReportValueApproachInfo = Path_Report ReportValueApproachInfo
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportValueTypeInfo
    where type FromTo Report ReportValueTypeInfo = Path_Report ReportValueTypeInfo
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report EUI
    where type FromTo Report EUI = Path_Report EUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MEUI
    where type FromTo Report MEUI = Path_Report MEUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MaybeImageFile
    where type FromTo Report MaybeImageFile = Path_Report MaybeImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportImage
    where type FromTo Report ReportImage = Path_Report ReportImage
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportImages
    where type FromTo Report ReportImages = Path_Report ReportImages
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReadOnlyFilePath
    where type FromTo Report ReadOnlyFilePath = Path_Report ReadOnlyFilePath
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportImageView
    where type FromTo Report ReportImageView = Path_Report ReportImageView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report ReportView
    where type FromTo Report ReportView = Path_Report ReportView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report SaneSizeImageSize
    where type FromTo Report SaneSizeImageSize = Path_Report SaneSizeImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Item
    where type FromTo Report Item = Path_Report Item
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report MIM
    where type FromTo Report MIM = Path_Report MIM
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report CIString
    where type FromTo Report CIString = Path_Report CIString
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report URI
    where type FromTo Report URI = Path_Report URI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report Text
    where type FromTo Report Text = Path_Report Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report UserId
    where type FromTo Report UserId = Path_Report UserId
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance Paths Report UUID
    where type FromTo Report UUID = Path_Report UUID
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportView) _g)) (map (\a' -> (Path_Report_View,
                                                                                                  a')) (toListOf (toLens (Path_Report_View (idPath :: FromTo ReportView ReportView))) _s))
instance PathStart Report
    where data Peek Report
              = Peek_Report_String (FromTo Report ([Char])) (Maybe ([Char]))
              | Peek_Report_Int64 (FromTo Report Int64) (Maybe Int64)
              | Peek_Report_Int (FromTo Report Int) (Maybe Int)
              | Peek_Report_Bool (FromTo Report Bool) (Maybe Bool)
              | Peek_Report_Double (FromTo Report Double) (Maybe Double)
              | Peek_Report_Dimension (FromTo Report Dimension) (Maybe Dimension)
              | Peek_Report_ImageCrop (FromTo Report ImageCrop) (Maybe ImageCrop)
              | Peek_Report_ImageSize (FromTo Report ImageSize) (Maybe ImageSize)
              | Peek_Report_Units (FromTo Report Units) (Maybe Units)
              | Peek_Report_ImageFile (FromTo Report ImageFile) (Maybe ImageFile)
              | Peek_Report_Integer (FromTo Report Integer) (Maybe Integer)
              | Peek_Report_JSONText (FromTo Report JSONText) (Maybe JSONText)
              | Peek_Report_Markup (FromTo Report Markup) (Maybe Markup)
              | Peek_Report_Permissions (FromTo Report Permissions) (Maybe Permissions)
              | Peek_Report_UserIds (FromTo Report ([UserId])) (Maybe ([UserId]))
              | Peek_Report_AbbrevPair (FromTo Report ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_Report_AbbrevPairs (FromTo Report (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_Report_Author (FromTo Report Author) (Maybe Author)
              | Peek_Report_Authors (FromTo Report (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_Report_Branding (FromTo Report Branding) (Maybe Branding)
              | Peek_Report_MarkupPair (FromTo Report ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_Report_MarkupPairs (FromTo Report (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_Report_Markups (FromTo Report (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_Report_MaybeReportIntendedUse (FromTo Report (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_Report_Report (FromTo Report Report) (Maybe Report)
              | Peek_Report_ReportElem (FromTo Report ReportElem) (Maybe ReportElem)
              | Peek_Report_ReportElems (FromTo Report (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_Report_ReportFlags (FromTo Report ReportFlags) (Maybe ReportFlags)
              | Peek_Report_ReportStandard (FromTo Report ReportStandard) (Maybe ReportStandard)
              | Peek_Report_ReportStatus (FromTo Report ReportStatus) (Maybe ReportStatus)
              | Peek_Report_ReportValueApproachInfo (FromTo Report ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_Report_ReportValueTypeInfo (FromTo Report ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_Report_EUI (FromTo Report (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_Report_MEUI (FromTo Report (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_Report_MaybeImageFile (FromTo Report (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_Report_ReportImage (FromTo Report ReportImage) (Maybe ReportImage)
              | Peek_Report_ReportImages (FromTo Report (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_Report_ReadOnlyFilePath (FromTo Report (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_Report_ReportImageView (FromTo Report ReportImageView) (Maybe ReportImageView)
              | Peek_Report_ReportView (FromTo Report ReportView) (Maybe ReportView)
              | Peek_Report_SaneSizeImageSize (FromTo Report (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_Report_Item (FromTo Report Item) (Maybe Item)
              | Peek_Report_MIM (FromTo Report (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_Report_CIString (FromTo Report CIString) (Maybe CIString)
              | Peek_Report_URI (FromTo Report URI) (Maybe URI)
              | Peek_Report_Text (FromTo Report Text) (Maybe Text)
              | Peek_Report_UserId (FromTo Report UserId) (Maybe UserId)
              | Peek_Report_UUID (FromTo Report UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Report_View _wp) -> map (\a -> let f = peek a
                                                                                     in let liftPeek (Peek_ReportView_String q z) = Peek_Report_String (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Int64 q z) = Peek_Report_Int64 (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Int q z) = Peek_Report_Int (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Bool q z) = Peek_Report_Bool (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Double q z) = Peek_Report_Double (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Dimension q z) = Peek_Report_Dimension (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ImageCrop q z) = Peek_Report_ImageCrop (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ImageSize q z) = Peek_Report_ImageSize (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Units q z) = Peek_Report_Units (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ImageFile q z) = Peek_Report_ImageFile (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Integer q z) = Peek_Report_Integer (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_JSONText q z) = Peek_Report_JSONText (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Markup q z) = Peek_Report_Markup (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Permissions q z) = Peek_Report_Permissions (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_UserIds q z) = Peek_Report_UserIds (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_AbbrevPair q z) = Peek_Report_AbbrevPair (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_AbbrevPairs q z) = Peek_Report_AbbrevPairs (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Author q z) = Peek_Report_Author (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Authors q z) = Peek_Report_Authors (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Branding q z) = Peek_Report_Branding (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MarkupPair q z) = Peek_Report_MarkupPair (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MarkupPairs q z) = Peek_Report_MarkupPairs (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Markups q z) = Peek_Report_Markups (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MaybeReportIntendedUse q z) = Peek_Report_MaybeReportIntendedUse (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportElem q z) = Peek_Report_ReportElem (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportElems q z) = Peek_Report_ReportElems (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportFlags q z) = Peek_Report_ReportFlags (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportStandard q z) = Peek_Report_ReportStandard (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportStatus q z) = Peek_Report_ReportStatus (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportValueApproachInfo q z) = Peek_Report_ReportValueApproachInfo (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportValueTypeInfo q z) = Peek_Report_ReportValueTypeInfo (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_EUI q z) = Peek_Report_EUI (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MEUI q z) = Peek_Report_MEUI (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MaybeImageFile q z) = Peek_Report_MaybeImageFile (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportImage q z) = Peek_Report_ReportImage (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportImages q z) = Peek_Report_ReportImages (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReadOnlyFilePath q z) = Peek_Report_ReadOnlyFilePath (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportImageView q z) = Peek_Report_ReportImageView (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_ReportView q z) = Peek_Report_ReportView (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_SaneSizeImageSize q z) = Peek_Report_SaneSizeImageSize (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Item q z) = Peek_Report_Item (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_MIM q z) = Peek_Report_MIM (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_CIString q z) = Peek_Report_CIString (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_URI q z) = Peek_Report_URI (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_Text q z) = Peek_Report_Text (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_UserId q z) = Peek_Report_UserId (Path_Report_View q) z
                                                                                            liftPeek (Peek_ReportView_UUID q z) = Peek_Report_UUID (Path_Report_View q) z
                                                                                         in Node (Peek_Report_ReportView _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportView])
                                           _ -> []) (paths _s (Proxy :: Proxy ReportView)) :: Forest (Peek Report)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Report_View _wp) -> map (\a -> Node (Peek_Report_ReportView _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportView])
                                          _ -> []) (paths _s (Proxy :: Proxy ReportView)) :: Forest (Peek Report)
instance Describe (Peek Report)
    where describe _f (Peek_Report_String (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                 next = describe wfld (Peek_ReportView_String _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Int64 (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                next = describe wfld (Peek_ReportView_Int64 _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Int (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportView);
                                                                              next = describe wfld (Peek_ReportView_Int _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy Report)}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Bool (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportView);
                                                                               next = describe wfld (Peek_ReportView_Bool _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Double (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                 next = describe wfld (Peek_ReportView_Double _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Dimension (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                    next = describe wfld (Peek_ReportView_Dimension _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ImageCrop (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                    next = describe wfld (Peek_ReportView_ImageCrop _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                    next = describe wfld (Peek_ReportView_ImageSize _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Units (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                next = describe wfld (Peek_ReportView_Units _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy Report)}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                    next = describe wfld (Peek_ReportView_ImageFile _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy Report)}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Integer (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                  next = describe wfld (Peek_ReportView_Integer _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_JSONText (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                   next = describe wfld (Peek_ReportView_JSONText _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Markup (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                 next = describe wfld (Peek_ReportView_Markup _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Permissions (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_Permissions _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_UserIds (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                  next = describe wfld (Peek_ReportView_UserIds _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_AbbrevPair (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                     next = describe wfld (Peek_ReportView_AbbrevPair _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_AbbrevPairs (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_AbbrevPairs _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Author (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                 next = describe wfld (Peek_ReportView_Author _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Authors (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                  next = describe wfld (Peek_ReportView_Authors _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Branding (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                   next = describe wfld (Peek_ReportView_Branding _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MarkupPair (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                     next = describe wfld (Peek_ReportView_MarkupPair _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MarkupPairs (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_MarkupPairs _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Markups (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                  next = describe wfld (Peek_ReportView_Markups _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Report)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MaybeReportIntendedUse (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                                 next = describe wfld (Peek_ReportView_MaybeReportIntendedUse _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportElem (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                     next = describe wfld (Peek_ReportView_ReportElem _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportElems (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_ReportElems _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportFlags (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_ReportFlags _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportStandard (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                         next = describe wfld (Peek_ReportView_ReportStandard _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy Report)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportStatus (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                       custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                       next = describe wfld (Peek_ReportView_ReportStatus _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportValueApproachInfo (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                                  custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                                  next = describe wfld (Peek_ReportView_ReportValueApproachInfo _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy Report)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportValueTypeInfo (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                              custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                              next = describe wfld (Peek_ReportView_ReportValueTypeInfo _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy Report)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_EUI (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportView);
                                                                              next = describe wfld (Peek_ReportView_EUI _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy Report)}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MEUI (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportView);
                                                                               next = describe wfld (Peek_ReportView_MEUI _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MaybeImageFile (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                         next = describe wfld (Peek_ReportView_MaybeImageFile _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy Report)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportImage (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                      next = describe wfld (Peek_ReportView_ReportImage _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy Report)}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportImages (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                       custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                       next = describe wfld (Peek_ReportView_ReportImages _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Report)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReadOnlyFilePath (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                           custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                           next = describe wfld (Peek_ReportView_ReadOnlyFilePath _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy Report)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportImageView (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                          custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                          next = describe wfld (Peek_ReportView_ReportImageView _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy Report)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_ReportView (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                     next = describe wfld (Peek_ReportView_ReportView _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Report)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_SaneSizeImageSize (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                            custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                            next = describe wfld (Peek_ReportView_SaneSizeImageSize _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy Report)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Item (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportView);
                                                                               next = describe wfld (Peek_ReportView_Item _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_MIM (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportView);
                                                                              next = describe wfld (Peek_ReportView_MIM _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy Report)}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_CIString (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                   next = describe wfld (Peek_ReportView_CIString _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Report)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_URI (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportView);
                                                                              next = describe wfld (Peek_ReportView_URI _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy Report)}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_Text (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportView);
                                                                               next = describe wfld (Peek_ReportView_Text _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_UserId (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportView);
                                                                                 next = describe wfld (Peek_ReportView_UserId _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Report)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Report_UUID (_p@(Path_Report_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportView);
                                                                               next = describe wfld (Peek_ReportView_UUID _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Report)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Report)
instance Describe (Proxy Report)
    where describe _f _ = case _f of
                              Nothing -> Just "Report"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Report String)
    where type S (Path_Report String) = Report
          type A (Path_Report String) = String
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int64)
    where type S (Path_Report Int64) = Report
          type A (Path_Report Int64) = Int64
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Int)
    where type S (Path_Report Int) = Report
          type A (Path_Report Int) = Int
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Bool)
    where type S (Path_Report Bool) = Report
          type A (Path_Report Bool) = Bool
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Double)
    where type S (Path_Report Double) = Report
          type A (Path_Report Double) = Double
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Dimension)
    where type S (Path_Report Dimension) = Report
          type A (Path_Report Dimension) = Dimension
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageCrop)
    where type S (Path_Report ImageCrop) = Report
          type A (Path_Report ImageCrop) = ImageCrop
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageSize)
    where type S (Path_Report ImageSize) = Report
          type A (Path_Report ImageSize) = ImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Units)
    where type S (Path_Report Units) = Report
          type A (Path_Report Units) = Units
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ImageFile)
    where type S (Path_Report ImageFile) = Report
          type A (Path_Report ImageFile) = ImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Integer)
    where type S (Path_Report Integer) = Report
          type A (Path_Report Integer) = Integer
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report JSONText)
    where type S (Path_Report JSONText) = Report
          type A (Path_Report JSONText) = JSONText
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markup)
    where type S (Path_Report Markup) = Report
          type A (Path_Report Markup) = Markup
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Permissions)
    where type S (Path_Report Permissions) = Report
          type A (Path_Report Permissions) = Permissions
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserIds)
    where type S (Path_Report UserIds) = Report
          type A (Path_Report UserIds) = UserIds
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPair)
    where type S (Path_Report AbbrevPair) = Report
          type A (Path_Report AbbrevPair) = AbbrevPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report AbbrevPairs)
    where type S (Path_Report AbbrevPairs) = Report
          type A (Path_Report AbbrevPairs) = AbbrevPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Author)
    where type S (Path_Report Author) = Report
          type A (Path_Report Author) = Author
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Authors)
    where type S (Path_Report Authors) = Report
          type A (Path_Report Authors) = Authors
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Branding)
    where type S (Path_Report Branding) = Report
          type A (Path_Report Branding) = Branding
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPair)
    where type S (Path_Report MarkupPair) = Report
          type A (Path_Report MarkupPair) = MarkupPair
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MarkupPairs)
    where type S (Path_Report MarkupPairs) = Report
          type A (Path_Report MarkupPairs) = MarkupPairs
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Markups)
    where type S (Path_Report Markups) = Report
          type A (Path_Report Markups) = Markups
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeReportIntendedUse)
    where type S (Path_Report MaybeReportIntendedUse) = Report
          type A (Path_Report MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Report)
    where type S (Path_Report Report) = Report
          type A (Path_Report Report) = Report
          toLens _ = id
instance ToLens (Path_Report ReportElem)
    where type S (Path_Report ReportElem) = Report
          type A (Path_Report ReportElem) = ReportElem
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportElems)
    where type S (Path_Report ReportElems) = Report
          type A (Path_Report ReportElems) = ReportElems
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportFlags)
    where type S (Path_Report ReportFlags) = Report
          type A (Path_Report ReportFlags) = ReportFlags
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStandard)
    where type S (Path_Report ReportStandard) = Report
          type A (Path_Report ReportStandard) = ReportStandard
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportStatus)
    where type S (Path_Report ReportStatus) = Report
          type A (Path_Report ReportStatus) = ReportStatus
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueApproachInfo)
    where type S (Path_Report ReportValueApproachInfo) = Report
          type A (Path_Report ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportValueTypeInfo)
    where type S (Path_Report ReportValueTypeInfo) = Report
          type A (Path_Report ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report EUI)
    where type S (Path_Report EUI) = Report
          type A (Path_Report EUI) = EUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MEUI)
    where type S (Path_Report MEUI) = Report
          type A (Path_Report MEUI) = MEUI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MaybeImageFile)
    where type S (Path_Report MaybeImageFile) = Report
          type A (Path_Report MaybeImageFile) = MaybeImageFile
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImage)
    where type S (Path_Report ReportImage) = Report
          type A (Path_Report ReportImage) = ReportImage
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImages)
    where type S (Path_Report ReportImages) = Report
          type A (Path_Report ReportImages) = ReportImages
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReadOnlyFilePath)
    where type S (Path_Report ReadOnlyFilePath) = Report
          type A (Path_Report ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportImageView)
    where type S (Path_Report ReportImageView) = Report
          type A (Path_Report ReportImageView) = ReportImageView
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report ReportView)
    where type S (Path_Report ReportView) = Report
          type A (Path_Report ReportView) = ReportView
          toLens (Path_Report_View _) = viewLens :: Lens' Report ReportView
instance ToLens (Path_Report SaneSizeImageSize)
    where type S (Path_Report SaneSizeImageSize) = Report
          type A (Path_Report SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Item)
    where type S (Path_Report Item) = Report
          type A (Path_Report Item) = Item
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report MIM)
    where type S (Path_Report MIM) = Report
          type A (Path_Report MIM) = MIM
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report CIString)
    where type S (Path_Report CIString) = Report
          type A (Path_Report CIString) = CIString
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report URI)
    where type S (Path_Report URI) = Report
          type A (Path_Report URI) = URI
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report Text)
    where type S (Path_Report Text) = Report
          type A (Path_Report Text) = Text
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UserId)
    where type S (Path_Report UserId) = Report
          type A (Path_Report UserId) = UserId
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
instance ToLens (Path_Report UUID)
    where type S (Path_Report UUID) = Report
          type A (Path_Report UUID) = UUID
          toLens (Path_Report_View v) = (viewLens :: Lens' Report ReportView) . toLens v
data Path_ReportElem a
    = Path_ReportElem_elemItem (Path_Item a) | Path_ReportElem_elemText (Path_Markup a) | Path_ReportElem
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportElem a)
    where idPath = Path_ReportElem
class HasReportElem c
    where lens_reportElem :: Lens' c ReportElem
          lens_ReportElem_elemItem :: forall . Traversal' c Item
          lens_ReportElem_elemItem = (.) lens_reportElem lens_ReportElem_elemItem
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText :: forall . Traversal' c Markup
          lens_ReportElem_elemText = (.) lens_reportElem lens_ReportElem_elemText
          {-# INLINE lens_ReportElem_elemText #-}
instance HasReportElem ReportElem
    where lens_reportElem = id
          lens_ReportElem_elemItem f (ReportItem x1) = fmap (\y1 -> ReportItem y1) (f x1)
          lens_ReportElem_elemItem _ (ReportParagraph x1) = pure (ReportParagraph x1)
          lens_ReportElem_elemItem _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemItem #-}
          lens_ReportElem_elemText _ (ReportItem x1) = pure (ReportItem x1)
          lens_ReportElem_elemText f (ReportParagraph x1) = fmap (\y1 -> ReportParagraph y1) (f x1)
          lens_ReportElem_elemText _ (ReportUndecided) = pure ReportUndecided
          {-# INLINE lens_ReportElem_elemText #-}
instance Paths ReportElem String
    where type FromTo ReportElem String = Path_ReportElem String
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Bool
    where type FromTo ReportElem Bool = Path_ReportElem Bool
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Double
    where type FromTo ReportElem Double = Path_ReportElem Double
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Dimension
    where type FromTo ReportElem Dimension = Path_ReportElem Dimension
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ImageCrop
    where type FromTo ReportElem ImageCrop = Path_ReportElem ImageCrop
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ImageSize
    where type FromTo ReportElem ImageSize = Path_ReportElem ImageSize
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Units
    where type FromTo ReportElem Units = Path_ReportElem Units
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ImageFile
    where type FromTo ReportElem ImageFile = Path_ReportElem ImageFile
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem JSONText
    where type FromTo ReportElem JSONText = Path_ReportElem JSONText
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Markup
    where type FromTo ReportElem Markup = Path_ReportElem Markup
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ReportElem
    where type FromTo ReportElem ReportElem = Path_ReportElem ReportElem
          paths _ _ = [idPath]
instance Paths ReportElem EUI
    where type FromTo ReportElem EUI = Path_ReportElem EUI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem MEUI
    where type FromTo ReportElem MEUI = Path_ReportElem MEUI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem MaybeImageFile
    where type FromTo ReportElem MaybeImageFile = Path_ReportElem MaybeImageFile
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ReportImage
    where type FromTo ReportElem ReportImage = Path_ReportElem ReportImage
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ReportImages
    where type FromTo ReportElem ReportImages = Path_ReportElem ReportImages
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem ReportImageView
    where type FromTo ReportElem ReportImageView = Path_ReportElem ReportImageView
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem SaneSizeImageSize
    where type FromTo ReportElem SaneSizeImageSize = Path_ReportElem SaneSizeImageSize
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Item
    where type FromTo ReportElem Item = Path_ReportElem Item
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem MIM
    where type FromTo ReportElem MIM = Path_ReportElem MIM
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem URI
    where type FromTo ReportElem URI = Path_ReportElem URI
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = mempty
          paths (_s@(ReportUndecided {})) _g = mempty
instance Paths ReportElem Text
    where type FromTo ReportElem Text = Path_ReportElem Text
          paths (_s@(ReportItem {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Item) _g)) [(Path_ReportElem_elemItem, elemItem _s)]
          paths (_s@(ReportParagraph {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportElem_elemText, elemText _s)]
          paths (_s@(ReportUndecided {})) _g = mempty
instance PathStart ReportElem
    where data Peek ReportElem
              = Peek_ReportElem_String (FromTo ReportElem ([Char])) (Maybe ([Char]))
              | Peek_ReportElem_Bool (FromTo ReportElem Bool) (Maybe Bool)
              | Peek_ReportElem_Double (FromTo ReportElem Double) (Maybe Double)
              | Peek_ReportElem_Dimension (FromTo ReportElem Dimension) (Maybe Dimension)
              | Peek_ReportElem_ImageCrop (FromTo ReportElem ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElem_ImageSize (FromTo ReportElem ImageSize) (Maybe ImageSize)
              | Peek_ReportElem_Units (FromTo ReportElem Units) (Maybe Units)
              | Peek_ReportElem_ImageFile (FromTo ReportElem ImageFile) (Maybe ImageFile)
              | Peek_ReportElem_JSONText (FromTo ReportElem JSONText) (Maybe JSONText)
              | Peek_ReportElem_Markup (FromTo ReportElem Markup) (Maybe Markup)
              | Peek_ReportElem_ReportElem (FromTo ReportElem ReportElem) (Maybe ReportElem)
              | Peek_ReportElem_EUI (FromTo ReportElem (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportElem_MEUI (FromTo ReportElem (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportElem_MaybeImageFile (FromTo ReportElem (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportElem_ReportImage (FromTo ReportElem ReportImage) (Maybe ReportImage)
              | Peek_ReportElem_ReportImages (FromTo ReportElem (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportElem_ReportImageView (FromTo ReportElem ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElem_SaneSizeImageSize (FromTo ReportElem (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportElem_Item (FromTo ReportElem Item) (Maybe Item)
              | Peek_ReportElem_MIM (FromTo ReportElem (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportElem_URI (FromTo ReportElem URI) (Maybe URI)
              | Peek_ReportElem_Text (FromTo ReportElem Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(ReportItem {})) = concatMap (\pth -> case pth of
                                                             _pp@(Path_ReportElem_elemItem _wp) -> map (\a -> let f = peek a
                                                                                                               in let liftPeek (Peek_Item_String q z) = Peek_ReportElem_String (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Bool q z) = Peek_ReportElem_Bool (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Double q z) = Peek_ReportElem_Double (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Dimension q z) = Peek_ReportElem_Dimension (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ImageCrop q z) = Peek_ReportElem_ImageCrop (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ImageSize q z) = Peek_ReportElem_ImageSize (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Units q z) = Peek_ReportElem_Units (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ImageFile q z) = Peek_ReportElem_ImageFile (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_JSONText q z) = Peek_ReportElem_JSONText (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Markup q z) = Peek_ReportElem_Markup (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_EUI q z) = Peek_ReportElem_EUI (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_MEUI q z) = Peek_ReportElem_MEUI (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_MaybeImageFile q z) = Peek_ReportElem_MaybeImageFile (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ReportImage q z) = Peek_ReportElem_ReportImage (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ReportImages q z) = Peek_ReportElem_ReportImages (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_ReportImageView q z) = Peek_ReportElem_ReportImageView (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_SaneSizeImageSize q z) = Peek_ReportElem_SaneSizeImageSize (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Item q z) = Peek_ReportElem_Item (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_MIM q z) = Peek_ReportElem_MIM (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_URI q z) = Peek_ReportElem_URI (Path_ReportElem_elemItem q) z
                                                                                                                      liftPeek (Peek_Item_Text q z) = Peek_ReportElem_Text (Path_ReportElem_elemItem q) z
                                                                                                                   in Node (Peek_ReportElem_Item _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Item])
                                                             _ -> []) (paths _s (Proxy :: Proxy Item)) :: Forest (Peek ReportElem)
          peek (_s@(ReportParagraph {})) = concatMap (\pth -> case pth of
                                                                  _pp@(Path_ReportElem_elemText _wp) -> map (\a -> let f = peek a
                                                                                                                    in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportElem_JSONText (Path_ReportElem_elemText q) z
                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_ReportElem_Markup (Path_ReportElem_elemText q) z
                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_ReportElem_Text (Path_ReportElem_elemText q) z
                                                                                                                        in Node (Peek_ReportElem_Markup _pp (if null f
                                                                                                                                                              then Just a
                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek ReportElem)
          peek (_s@(ReportUndecided {})) = mempty :: Forest (Peek ReportElem)
          hop (_s@(ReportItem {})) = concatMap (\pth -> case pth of
                                                            _pp@(Path_ReportElem_elemItem _wp) -> map (\a -> Node (Peek_ReportElem_Item _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Item])
                                                            _ -> []) (paths _s (Proxy :: Proxy Item)) :: Forest (Peek ReportElem)
          hop (_s@(ReportParagraph {})) = concatMap (\pth -> case pth of
                                                                 _pp@(Path_ReportElem_elemText _wp) -> map (\a -> Node (Peek_ReportElem_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek ReportElem)
          hop (_s@(ReportUndecided {})) = mempty :: Forest (Peek ReportElem)
instance Describe (Peek ReportElem)
    where describe _f (Peek_ReportElem_String (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             custom = describe wfld (Proxy :: Proxy Item);
                                                                                             next = describe wfld (Peek_Item_String _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Bool (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           custom = describe wfld (Proxy :: Proxy Item);
                                                                                           next = describe wfld (Peek_Item_Bool _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Double (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             custom = describe wfld (Proxy :: Proxy Item);
                                                                                             next = describe wfld (Peek_Item_Double _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Dimension (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                custom = describe wfld (Proxy :: Proxy Item);
                                                                                                next = describe wfld (Peek_Item_Dimension _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ImageCrop (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                custom = describe wfld (Proxy :: Proxy Item);
                                                                                                next = describe wfld (Peek_Item_ImageCrop _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                custom = describe wfld (Proxy :: Proxy Item);
                                                                                                next = describe wfld (Peek_Item_ImageSize _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Units (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                            custom = describe wfld (Proxy :: Proxy Item);
                                                                                            next = describe wfld (Peek_Item_Units _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                custom = describe wfld (Proxy :: Proxy Item);
                                                                                                next = describe wfld (Peek_Item_ImageFile _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                               custom = describe wfld (Proxy :: Proxy Item);
                                                                                               next = describe wfld (Peek_Item_JSONText _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                             custom = describe wfld (Proxy :: Proxy Item);
                                                                                             next = describe wfld (Peek_Item_Markup _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_EUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                          custom = describe wfld (Proxy :: Proxy Item);
                                                                                          next = describe wfld (Peek_Item_EUI _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_MEUI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           custom = describe wfld (Proxy :: Proxy Item);
                                                                                           next = describe wfld (Peek_Item_MEUI _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_MaybeImageFile (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                     custom = describe wfld (Proxy :: Proxy Item);
                                                                                                     next = describe wfld (Peek_Item_MaybeImageFile _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ReportImage (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                  custom = describe wfld (Proxy :: Proxy Item);
                                                                                                  next = describe wfld (Peek_Item_ReportImage _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ReportImages (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                   custom = describe wfld (Proxy :: Proxy Item);
                                                                                                   next = describe wfld (Peek_Item_ReportImages _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_ReportImageView (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                      custom = describe wfld (Proxy :: Proxy Item);
                                                                                                      next = describe wfld (Peek_Item_ReportImageView _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_SaneSizeImageSize (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                                        custom = describe wfld (Proxy :: Proxy Item);
                                                                                                        next = describe wfld (Peek_Item_SaneSizeImageSize _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Item (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           custom = describe wfld (Proxy :: Proxy Item);
                                                                                           next = describe wfld (Peek_Item_Item _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_MIM (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                          custom = describe wfld (Proxy :: Proxy Item);
                                                                                          next = describe wfld (Peek_Item_MIM _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_URI (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                          custom = describe wfld (Proxy :: Proxy Item);
                                                                                          next = describe wfld (Peek_Item_URI _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemItem _wp)) _x) = let {wfld = Just ("ReportElem", "ReportItem", Right "elemItem");
                                                                                           custom = describe wfld (Proxy :: Proxy Item);
                                                                                           next = describe wfld (Peek_Item_Text _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_JSONText (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                               custom = describe wfld (Proxy :: Proxy Markup);
                                                                                               next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Markup (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                             custom = describe wfld (Proxy :: Proxy Markup);
                                                                                             next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElem_Text (_p@(Path_ReportElem_elemText _wp)) _x) = let {wfld = Just ("ReportElem", "ReportParagraph", Right "elemText");
                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                           next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportElem)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportElem)
instance Describe (Proxy ReportElem)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Elem"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportElem String)
    where type S (Path_ReportElem String) = ReportElem
          type A (Path_ReportElem String) = String
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Bool)
    where type S (Path_ReportElem Bool) = ReportElem
          type A (Path_ReportElem Bool) = Bool
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Double)
    where type S (Path_ReportElem Double) = ReportElem
          type A (Path_ReportElem Double) = Double
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Dimension)
    where type S (Path_ReportElem Dimension) = ReportElem
          type A (Path_ReportElem Dimension) = Dimension
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageCrop)
    where type S (Path_ReportElem ImageCrop) = ReportElem
          type A (Path_ReportElem ImageCrop) = ImageCrop
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageSize)
    where type S (Path_ReportElem ImageSize) = ReportElem
          type A (Path_ReportElem ImageSize) = ImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Units)
    where type S (Path_ReportElem Units) = ReportElem
          type A (Path_ReportElem Units) = Units
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ImageFile)
    where type S (Path_ReportElem ImageFile) = ReportElem
          type A (Path_ReportElem ImageFile) = ImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem JSONText)
    where type S (Path_ReportElem JSONText) = ReportElem
          type A (Path_ReportElem JSONText) = JSONText
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
instance ToLens (Path_ReportElem Markup)
    where type S (Path_ReportElem Markup) = ReportElem
          type A (Path_ReportElem Markup) = Markup
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText
instance ToLens (Path_ReportElem ReportElem)
    where type S (Path_ReportElem ReportElem) = ReportElem
          type A (Path_ReportElem ReportElem) = ReportElem
          toLens _ = id
instance ToLens (Path_ReportElem EUI)
    where type S (Path_ReportElem EUI) = ReportElem
          type A (Path_ReportElem EUI) = EUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MEUI)
    where type S (Path_ReportElem MEUI) = ReportElem
          type A (Path_ReportElem MEUI) = MEUI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem MaybeImageFile)
    where type S (Path_ReportElem MaybeImageFile) = ReportElem
          type A (Path_ReportElem MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImage)
    where type S (Path_ReportElem ReportImage) = ReportElem
          type A (Path_ReportElem ReportImage) = ReportImage
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImages)
    where type S (Path_ReportElem ReportImages) = ReportElem
          type A (Path_ReportElem ReportImages) = ReportImages
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem ReportImageView)
    where type S (Path_ReportElem ReportImageView) = ReportElem
          type A (Path_ReportElem ReportImageView) = ReportImageView
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem SaneSizeImageSize)
    where type S (Path_ReportElem SaneSizeImageSize) = ReportElem
          type A (Path_ReportElem SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Item)
    where type S (Path_ReportElem Item) = ReportElem
          type A (Path_ReportElem Item) = Item
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem
instance ToLens (Path_ReportElem MIM)
    where type S (Path_ReportElem MIM) = ReportElem
          type A (Path_ReportElem MIM) = MIM
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem URI)
    where type S (Path_ReportElem URI) = ReportElem
          type A (Path_ReportElem URI) = URI
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
instance ToLens (Path_ReportElem Text)
    where type S (Path_ReportElem Text) = ReportElem
          type A (Path_ReportElem Text) = Text
          toLens (Path_ReportElem_elemItem _x) = lens_ReportElem_elemItem . toLens _x
          toLens (Path_ReportElem_elemText _x) = lens_ReportElem_elemText . toLens _x
type Path_ReportElems a = Path_OMap ReportElemID (Path_ReportElem a)
instance Paths ReportElems String
    where type FromTo ReportElems String = Path_OMap ReportElemID (Path_ReportElem String)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Bool
    where type FromTo ReportElems Bool = Path_OMap ReportElemID (Path_ReportElem Bool)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Double
    where type FromTo ReportElems Double = Path_OMap ReportElemID (Path_ReportElem Double)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Dimension
    where type FromTo ReportElems Dimension = Path_OMap ReportElemID (Path_ReportElem Dimension)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ImageCrop
    where type FromTo ReportElems ImageCrop = Path_OMap ReportElemID (Path_ReportElem ImageCrop)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ImageSize
    where type FromTo ReportElems ImageSize = Path_OMap ReportElemID (Path_ReportElem ImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Units
    where type FromTo ReportElems Units = Path_OMap ReportElemID (Path_ReportElem Units)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ImageFile
    where type FromTo ReportElems ImageFile = Path_OMap ReportElemID (Path_ReportElem ImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems JSONText
    where type FromTo ReportElems JSONText = Path_OMap ReportElemID (Path_ReportElem JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Markup
    where type FromTo ReportElems Markup = Path_OMap ReportElemID (Path_ReportElem Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ReportElem
    where type FromTo ReportElems ReportElem = Path_OMap ReportElemID (Path_ReportElem ReportElem)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ReportElems
    where type FromTo ReportElems ReportElems = Path_OMap ReportElemID (Path_ReportElem ReportElems)
          paths _ _ = [idPath]
instance Paths ReportElems EUI
    where type FromTo ReportElems EUI = Path_OMap ReportElemID (Path_ReportElem EUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems MEUI
    where type FromTo ReportElems MEUI = Path_OMap ReportElemID (Path_ReportElem MEUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems MaybeImageFile
    where type FromTo ReportElems MaybeImageFile = Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ReportImage
    where type FromTo ReportElems ReportImage = Path_OMap ReportElemID (Path_ReportElem ReportImage)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ReportImages
    where type FromTo ReportElems ReportImages = Path_OMap ReportElemID (Path_ReportElem ReportImages)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems ReportImageView
    where type FromTo ReportElems ReportImageView = Path_OMap ReportElemID (Path_ReportElem ReportImageView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems SaneSizeImageSize
    where type FromTo ReportElems SaneSizeImageSize = Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Item
    where type FromTo ReportElems Item = Path_OMap ReportElemID (Path_ReportElem Item)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems MIM
    where type FromTo ReportElems MIM = Path_OMap ReportElemID (Path_ReportElem MIM)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems URI
    where type FromTo ReportElems URI = Path_OMap ReportElemID (Path_ReportElem URI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportElems Text
    where type FromTo ReportElems Text = Path_OMap ReportElemID (Path_ReportElem Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElem) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order ReportElemID ReportElem)
    where data Peek (Order ReportElemID ReportElem)
              = Peek_ReportElems_String (FromTo (Order ReportElemID ReportElem) ([Char])) (Maybe ([Char]))
              | Peek_ReportElems_Bool (FromTo (Order ReportElemID ReportElem) Bool) (Maybe Bool)
              | Peek_ReportElems_Double (FromTo (Order ReportElemID ReportElem) Double) (Maybe Double)
              | Peek_ReportElems_Dimension (FromTo (Order ReportElemID ReportElem) Dimension) (Maybe Dimension)
              | Peek_ReportElems_ImageCrop (FromTo (Order ReportElemID ReportElem) ImageCrop) (Maybe ImageCrop)
              | Peek_ReportElems_ImageSize (FromTo (Order ReportElemID ReportElem) ImageSize) (Maybe ImageSize)
              | Peek_ReportElems_Units (FromTo (Order ReportElemID ReportElem) Units) (Maybe Units)
              | Peek_ReportElems_ImageFile (FromTo (Order ReportElemID ReportElem) ImageFile) (Maybe ImageFile)
              | Peek_ReportElems_JSONText (FromTo (Order ReportElemID ReportElem) JSONText) (Maybe JSONText)
              | Peek_ReportElems_Markup (FromTo (Order ReportElemID ReportElem) Markup) (Maybe Markup)
              | Peek_ReportElems_ReportElem (FromTo (Order ReportElemID ReportElem) ReportElem) (Maybe ReportElem)
              | Peek_ReportElems_ReportElems (FromTo (Order ReportElemID ReportElem) (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_ReportElems_EUI (FromTo (Order ReportElemID ReportElem) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportElems_MEUI (FromTo (Order ReportElemID ReportElem) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportElems_MaybeImageFile (FromTo (Order ReportElemID ReportElem) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportElems_ReportImage (FromTo (Order ReportElemID ReportElem) ReportImage) (Maybe ReportImage)
              | Peek_ReportElems_ReportImages (FromTo (Order ReportElemID ReportElem) (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportElems_ReportImageView (FromTo (Order ReportElemID ReportElem) ReportImageView) (Maybe ReportImageView)
              | Peek_ReportElems_SaneSizeImageSize (FromTo (Order ReportElemID ReportElem) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportElems_Item (FromTo (Order ReportElemID ReportElem) Item) (Maybe Item)
              | Peek_ReportElems_MIM (FromTo (Order ReportElemID ReportElem) (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportElems_URI (FromTo (Order ReportElemID ReportElem) URI) (Maybe URI)
              | Peek_ReportElems_Text (FromTo (Order ReportElemID ReportElem) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_ReportElem_String q z) = Peek_ReportElems_String (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Bool q z) = Peek_ReportElems_Bool (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Double q z) = Peek_ReportElems_Double (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Dimension q z) = Peek_ReportElems_Dimension (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ImageCrop q z) = Peek_ReportElems_ImageCrop (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ImageSize q z) = Peek_ReportElems_ImageSize (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Units q z) = Peek_ReportElems_Units (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ImageFile q z) = Peek_ReportElems_ImageFile (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_JSONText q z) = Peek_ReportElems_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Markup q z) = Peek_ReportElems_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ReportElem q z) = Peek_ReportElems_ReportElem (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_EUI q z) = Peek_ReportElems_EUI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_MEUI q z) = Peek_ReportElems_MEUI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_MaybeImageFile q z) = Peek_ReportElems_MaybeImageFile (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ReportImage q z) = Peek_ReportElems_ReportImage (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ReportImages q z) = Peek_ReportElems_ReportImages (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_ReportImageView q z) = Peek_ReportElems_ReportImageView (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_SaneSizeImageSize q z) = Peek_ReportElems_SaneSizeImageSize (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Item q z) = Peek_ReportElems_Item (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_MIM q z) = Peek_ReportElems_MIM (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_URI q z) = Peek_ReportElems_URI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportElem_Text q z) = Peek_ReportElems_Text (Path_At _k q) z
                                                                                   in Node (Peek_ReportElems_ReportElem _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportElem])
                                           _ -> []) (paths _s (Proxy :: Proxy ReportElem)) :: Forest (Peek (Order ReportElemID ReportElem))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_ReportElems_ReportElem _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportElem])
                                          _ -> []) (paths _s (Proxy :: Proxy ReportElem)) :: Forest (Peek (Order ReportElemID ReportElem))
instance Describe (Peek (Order ReportElemID ReportElem))
    where describe _f (Peek_ReportElems_String (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                next = describe wfld (Peek_ReportElem_String _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Bool (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                              next = describe wfld (Peek_ReportElem_Bool _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Double (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                next = describe wfld (Peek_ReportElem_Double _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                   next = describe wfld (Peek_ReportElem_Dimension _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                   next = describe wfld (Peek_ReportElem_ImageCrop _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                   next = describe wfld (Peek_ReportElem_ImageSize _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Units (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                               next = describe wfld (Peek_ReportElem_Units _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                   next = describe wfld (Peek_ReportElem_ImageFile _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                  custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                  next = describe wfld (Peek_ReportElem_JSONText _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                next = describe wfld (Peek_ReportElem_Markup _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ReportElem (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                    next = describe wfld (Peek_ReportElem_ReportElem _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_EUI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                             next = describe wfld (Peek_ReportElem_EUI _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                              next = describe wfld (Peek_ReportElem_MEUI _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                        custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                        next = describe wfld (Peek_ReportElem_MaybeImageFile _wp undefined);
                                                                                        top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                     custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                     next = describe wfld (Peek_ReportElem_ReportImage _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ReportImages (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                      next = describe wfld (Peek_ReportElem_ReportImages _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                         next = describe wfld (Peek_ReportElem_ReportImageView _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                           custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                                           next = describe wfld (Peek_ReportElem_SaneSizeImageSize _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Item (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                              next = describe wfld (Peek_ReportElem_Item _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_MIM (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                             next = describe wfld (Peek_ReportElem_MIM _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_URI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                             custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                             next = describe wfld (Peek_ReportElem_URI _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportElems_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportElem);
                                                                              next = describe wfld (Peek_ReportElem_Text _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order ReportElemID ReportElem))
instance Describe (Proxy (Order ReportElemID ReportElem))
    where describe _f _ = case _f of
                              Nothing -> Just "Report Elems"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap ReportElemID (Path_ReportElem String))
    where type S (Path_OMap ReportElemID (Path_ReportElem String)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Bool))
    where type S (Path_OMap ReportElemID (Path_ReportElem Bool)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Double))
    where type S (Path_OMap ReportElemID (Path_ReportElem Double)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Dimension))
    where type S (Path_OMap ReportElemID (Path_ReportElem Dimension)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageCrop))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Units))
    where type S (Path_OMap ReportElemID (Path_ReportElem Units)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem JSONText))
    where type S (Path_OMap ReportElemID (Path_ReportElem JSONText)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Markup))
    where type S (Path_OMap ReportElemID (Path_ReportElem Markup)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElem))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElem)) = ReportElem
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportElems))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportElems)) = ReportElems
          toLens _ = id
instance ToLens (Path_OMap ReportElemID (Path_ReportElem EUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem EUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MEUI))
    where type S (Path_OMap ReportElemID (Path_ReportElem MEUI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile))
    where type S (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImage))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImage)) = ReportImage
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImages))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImages)) = ReportImages
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem ReportImageView))
    where type S (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize))
    where type S (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Item))
    where type S (Path_OMap ReportElemID (Path_ReportElem Item)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Item)) = Item
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem MIM))
    where type S (Path_OMap ReportElemID (Path_ReportElem MIM)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem MIM)) = MIM
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem URI))
    where type S (Path_OMap ReportElemID (Path_ReportElem URI)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportElemID (Path_ReportElem Text))
    where type S (Path_OMap ReportElemID (Path_ReportElem Text)) = ReportElems
          type A (Path_OMap ReportElemID (Path_ReportElem Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
data Path_ReportFlags a = Path_ReportFlags_hideEmptyItemFields (Path_Bool a) | Path_ReportFlags deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportFlags a)
    where idPath = Path_ReportFlags
class HasReportFlags c
    where lens_reportFlags :: Lens' c ReportFlags
          lens_ReportFlags_hideEmptyItemFields :: forall . Lens' c Bool
          lens_ReportFlags_hideEmptyItemFields = (.) lens_reportFlags lens_ReportFlags_hideEmptyItemFields
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance HasReportFlags ReportFlags
    where lens_reportFlags = id
          lens_ReportFlags_hideEmptyItemFields = iso (\(ReportFlags x) -> x) ReportFlags
          {-# INLINE lens_ReportFlags_hideEmptyItemFields #-}
instance Paths ReportFlags String
    where type FromTo ReportFlags String = Path_ReportFlags String
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
instance Paths ReportFlags Bool
    where type FromTo ReportFlags Bool = Path_ReportFlags Bool
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
instance Paths ReportFlags JSONText
    where type FromTo ReportFlags JSONText = Path_ReportFlags JSONText
          paths (_s@(ReportFlags {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportFlags_hideEmptyItemFields, hideEmptyItemFields _s)]
instance Paths ReportFlags ReportFlags
    where type FromTo ReportFlags ReportFlags = Path_ReportFlags ReportFlags
          paths _ _ = [idPath]
instance PathStart ReportFlags
    where data Peek ReportFlags
              = Peek_ReportFlags_String (FromTo ReportFlags ([Char])) (Maybe ([Char]))
              | Peek_ReportFlags_Bool (FromTo ReportFlags Bool) (Maybe Bool)
              | Peek_ReportFlags_JSONText (FromTo ReportFlags JSONText) (Maybe JSONText)
              | Peek_ReportFlags_ReportFlags (FromTo ReportFlags ReportFlags) (Maybe ReportFlags)
              deriving (Eq, Show)
          peek (_s@(ReportFlags {})) = concatMap (\pth -> case pth of
                                                              _pp@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> let f = peek a
                                                                                                                            in let liftPeek (Peek_Bool_String q z) = Peek_ReportFlags_String (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                   liftPeek (Peek_Bool_Bool q z) = Peek_ReportFlags_Bool (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                   liftPeek (Peek_Bool_JSONText q z) = Peek_ReportFlags_JSONText (Path_ReportFlags_hideEmptyItemFields q) z
                                                                                                                                in Node (Peek_ReportFlags_Bool _pp (if null f
                                                                                                                                                                     then Just a
                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                              _ -> []) (paths _s (Proxy :: Proxy Bool)) :: Forest (Peek ReportFlags)
          hop (_s@(ReportFlags {})) = concatMap (\pth -> case pth of
                                                             _pp@(Path_ReportFlags_hideEmptyItemFields _wp) -> map (\a -> Node (Peek_ReportFlags_Bool _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Bool])
                                                             _ -> []) (paths _s (Proxy :: Proxy Bool)) :: Forest (Peek ReportFlags)
instance Describe (Peek ReportFlags)
    where describe _f (Peek_ReportFlags_String (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld = Just ("ReportFlags",
                                                                                                                       "ReportFlags",
                                                                                                                       Right "hideEmptyItemFields");
                                                                                                          custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                          next = describe wfld (Peek_Bool_String _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportFlags)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportFlags_Bool (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld = Just ("ReportFlags", "ReportFlags", Right "hideEmptyItemFields");
                                                                                                        custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                        next = describe wfld (Peek_Bool_Bool _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportFlags)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportFlags_JSONText (_p@(Path_ReportFlags_hideEmptyItemFields _wp)) _x) = let {wfld = Just ("ReportFlags",
                                                                                                                         "ReportFlags",
                                                                                                                         Right "hideEmptyItemFields");
                                                                                                            custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                            next = describe wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportFlags)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportFlags)
instance Describe (Proxy ReportFlags)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Flags"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportFlags String)
    where type S (Path_ReportFlags String) = ReportFlags
          type A (Path_ReportFlags String) = String
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags Bool)
    where type S (Path_ReportFlags Bool) = ReportFlags
          type A (Path_ReportFlags Bool) = Bool
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields
instance ToLens (Path_ReportFlags JSONText)
    where type S (Path_ReportFlags JSONText) = ReportFlags
          type A (Path_ReportFlags JSONText) = JSONText
          toLens (Path_ReportFlags_hideEmptyItemFields _x) = lens_ReportFlags_hideEmptyItemFields . toLens _x
instance ToLens (Path_ReportFlags ReportFlags)
    where type S (Path_ReportFlags ReportFlags) = ReportFlags
          type A (Path_ReportFlags ReportFlags) = ReportFlags
          toLens _ = id
data Path_ReportIntendedUse a = Path_ReportIntendedUse_View (Path_String a) | Path_ReportIntendedUse deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportIntendedUse a)
    where idPath = Path_ReportIntendedUse
class HasReportIntendedUse c
    where lens_reportIntendedUse :: Lens' c ReportIntendedUse
instance HasReportIntendedUse ReportIntendedUse
    where lens_reportIntendedUse = id
instance Paths ReportIntendedUse String
    where type FromTo ReportIntendedUse String = Path_ReportIntendedUse String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReportIntendedUse JSONText
    where type FromTo ReportIntendedUse JSONText = Path_ReportIntendedUse JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReportIntendedUse_View,
                                                                                              a')) (toListOf (toLens (Path_ReportIntendedUse_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReportIntendedUse ReportIntendedUse
    where type FromTo ReportIntendedUse ReportIntendedUse = Path_ReportIntendedUse ReportIntendedUse
          paths _ _ = [idPath]
instance PathStart ReportIntendedUse
    where data Peek ReportIntendedUse
              = Peek_ReportIntendedUse_String (FromTo ReportIntendedUse ([Char])) (Maybe ([Char]))
              | Peek_ReportIntendedUse_JSONText (FromTo ReportIntendedUse JSONText) (Maybe JSONText)
              | Peek_ReportIntendedUse_ReportIntendedUse (FromTo ReportIntendedUse ReportIntendedUse) (Maybe ReportIntendedUse)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_ReportIntendedUse_View _wp) -> map (\a -> let f = peek a
                                                                                                in let liftPeek (Peek_String_String q z) = Peek_ReportIntendedUse_String (Path_ReportIntendedUse_View q) z
                                                                                                       liftPeek (Peek_String_JSONText q z) = Peek_ReportIntendedUse_JSONText (Path_ReportIntendedUse_View q) z
                                                                                                    in Node (Peek_ReportIntendedUse_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek ReportIntendedUse)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_ReportIntendedUse_View _wp) -> map (\a -> Node (Peek_ReportIntendedUse_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek ReportIntendedUse)
instance Describe (Peek ReportIntendedUse)
    where describe _f (Peek_ReportIntendedUse_String (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld = Nothing;
                                                                                                       custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                       next = describe wfld (Peek_String_String _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportIntendedUse_JSONText (_p@(Path_ReportIntendedUse_View _wp)) _x) = let {wfld = Nothing;
                                                                                                         custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                         next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportIntendedUse)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportIntendedUse)
instance Describe (Proxy ReportIntendedUse)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Intended Use"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportIntendedUse String)
    where type S (Path_ReportIntendedUse String) = ReportIntendedUse
          type A (Path_ReportIntendedUse String) = String
          toLens (Path_ReportIntendedUse_View _) = viewLens :: Lens' ReportIntendedUse ([Char])
instance ToLens (Path_ReportIntendedUse JSONText)
    where type S (Path_ReportIntendedUse JSONText) = ReportIntendedUse
          type A (Path_ReportIntendedUse JSONText) = JSONText
          toLens (Path_ReportIntendedUse_View v) = (viewLens :: Lens' ReportIntendedUse ([Char])) . toLens v
instance ToLens (Path_ReportIntendedUse ReportIntendedUse)
    where type S (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          type A (Path_ReportIntendedUse ReportIntendedUse) = ReportIntendedUse
          toLens _ = id
data Path_ReportStandard a = Path_ReportStandard_unReportStandard (Path_Int a) | Path_ReportStandard deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportStandard a)
    where idPath = Path_ReportStandard
class HasReportStandard c
    where lens_reportStandard :: Lens' c ReportStandard
          lens_ReportStandard_unReportStandard :: forall . Lens' c Int
          lens_ReportStandard_unReportStandard = (.) lens_reportStandard lens_ReportStandard_unReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance HasReportStandard ReportStandard
    where lens_reportStandard = id
          lens_ReportStandard_unReportStandard = iso (\(ReportStandard x) -> x) ReportStandard
          {-# INLINE lens_ReportStandard_unReportStandard #-}
instance Paths ReportStandard Int
    where type FromTo ReportStandard Int = Path_ReportStandard Int
          paths (_s@(ReportStandard {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Int) _g)) [(Path_ReportStandard_unReportStandard, unReportStandard _s)]
instance Paths ReportStandard ReportStandard
    where type FromTo ReportStandard ReportStandard = Path_ReportStandard ReportStandard
          paths _ _ = [idPath]
instance PathStart ReportStandard
    where data Peek ReportStandard
              = Peek_ReportStandard_Int (FromTo ReportStandard Int) (Maybe Int) | Peek_ReportStandard_ReportStandard (FromTo ReportStandard ReportStandard) (Maybe ReportStandard)
              deriving (Eq, Show)
          peek (_s@(ReportStandard {})) = concatMap (\pth -> case pth of
                                                                 _pp@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_Int_Int q z) = Peek_ReportStandard_Int (Path_ReportStandard_unReportStandard q) z
                                                                                                                                   in Node (Peek_ReportStandard_Int _pp (if null f
                                                                                                                                                                          then Just a
                                                                                                                                                                          else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Int])
                                                                 _ -> []) (paths _s (Proxy :: Proxy Int)) :: Forest (Peek ReportStandard)
          hop (_s@(ReportStandard {})) = concatMap (\pth -> case pth of
                                                                _pp@(Path_ReportStandard_unReportStandard _wp) -> map (\a -> Node (Peek_ReportStandard_Int _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Int])
                                                                _ -> []) (paths _s (Proxy :: Proxy Int)) :: Forest (Peek ReportStandard)
instance Describe (Peek ReportStandard)
    where describe _f (Peek_ReportStandard_Int (_p@(Path_ReportStandard_unReportStandard _wp)) _x) = let {wfld = Just ("ReportStandard",
                                                                                                                       "ReportStandard",
                                                                                                                       Right "unReportStandard");
                                                                                                          custom = describe wfld (Proxy :: Proxy Int);
                                                                                                          next = describe wfld (Peek_Int_Int _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportStandard)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportStandard)
instance Describe (Proxy ReportStandard)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Standard"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportStandard Int)
    where type S (Path_ReportStandard Int) = ReportStandard
          type A (Path_ReportStandard Int) = Int
          toLens (Path_ReportStandard_unReportStandard _x) = lens_ReportStandard_unReportStandard
instance ToLens (Path_ReportStandard ReportStandard)
    where type S (Path_ReportStandard ReportStandard) = ReportStandard
          type A (Path_ReportStandard ReportStandard) = ReportStandard
          toLens _ = id
data Path_ReportStatus a = Path_ReportStatus_View (Path_String a) | Path_ReportStatus deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportStatus a)
    where idPath = Path_ReportStatus
class HasReportStatus c
    where lens_reportStatus :: Lens' c ReportStatus
instance HasReportStatus ReportStatus
    where lens_reportStatus = id
instance Paths ReportStatus String
    where type FromTo ReportStatus String = Path_ReportStatus String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReportStatus_View,
                                                                                              a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReportStatus JSONText
    where type FromTo ReportStatus JSONText = Path_ReportStatus JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReportStatus_View,
                                                                                              a')) (toListOf (toLens (Path_ReportStatus_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReportStatus ReportStatus
    where type FromTo ReportStatus ReportStatus = Path_ReportStatus ReportStatus
          paths _ _ = [idPath]
instance PathStart ReportStatus
    where data Peek ReportStatus
              = Peek_ReportStatus_String (FromTo ReportStatus ([Char])) (Maybe ([Char]))
              | Peek_ReportStatus_JSONText (FromTo ReportStatus JSONText) (Maybe JSONText)
              | Peek_ReportStatus_ReportStatus (FromTo ReportStatus ReportStatus) (Maybe ReportStatus)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_ReportStatus_View _wp) -> map (\a -> let f = peek a
                                                                                           in let liftPeek (Peek_String_String q z) = Peek_ReportStatus_String (Path_ReportStatus_View q) z
                                                                                                  liftPeek (Peek_String_JSONText q z) = Peek_ReportStatus_JSONText (Path_ReportStatus_View q) z
                                                                                               in Node (Peek_ReportStatus_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek ReportStatus)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_ReportStatus_View _wp) -> map (\a -> Node (Peek_ReportStatus_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek ReportStatus)
instance Describe (Peek ReportStatus)
    where describe _f (Peek_ReportStatus_String (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld = Nothing;
                                                                                             custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                             next = describe wfld (Peek_String_String _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportStatus)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportStatus_JSONText (_p@(Path_ReportStatus_View _wp)) _x) = let {wfld = Nothing;
                                                                                               custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                               next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportStatus)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportStatus)
instance Describe (Proxy ReportStatus)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Status"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportStatus String)
    where type S (Path_ReportStatus String) = ReportStatus
          type A (Path_ReportStatus String) = String
          toLens (Path_ReportStatus_View _) = viewLens :: Lens' ReportStatus ([Char])
instance ToLens (Path_ReportStatus JSONText)
    where type S (Path_ReportStatus JSONText) = ReportStatus
          type A (Path_ReportStatus JSONText) = JSONText
          toLens (Path_ReportStatus_View v) = (viewLens :: Lens' ReportStatus ([Char])) . toLens v
instance ToLens (Path_ReportStatus ReportStatus)
    where type S (Path_ReportStatus ReportStatus) = ReportStatus
          type A (Path_ReportStatus ReportStatus) = ReportStatus
          toLens _ = id
data Path_ReportValueApproachInfo a
    = Path_ReportValueApproachInfo_reportValueApproachName (Path_Markup a)
    | Path_ReportValueApproachInfo_reportValueApproachDescription (Path_Markup a)
    | Path_ReportValueApproachInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportValueApproachInfo a)
    where idPath = Path_ReportValueApproachInfo
class HasReportValueApproachInfo c
    where lens_reportValueApproachInfo :: Lens' c ReportValueApproachInfo
          lens_ReportValueApproachInfo_reportValueApproachDescription :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachDescription = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachDescription
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName :: forall . Lens' c Markup
          lens_ReportValueApproachInfo_reportValueApproachName = (.) lens_reportValueApproachInfo lens_ReportValueApproachInfo_reportValueApproachName
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance HasReportValueApproachInfo ReportValueApproachInfo
    where lens_reportValueApproachInfo = id
          lens_ReportValueApproachInfo_reportValueApproachDescription f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo x1 y1) (f x2)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachDescription #-}
          lens_ReportValueApproachInfo_reportValueApproachName f (ReportValueApproachInfo x1 x2) = fmap (\y1 -> ReportValueApproachInfo y1 x2) (f x1)
          {-# INLINE lens_ReportValueApproachInfo_reportValueApproachName #-}
instance Paths ReportValueApproachInfo JSONText
    where type FromTo ReportValueApproachInfo JSONText = Path_ReportValueApproachInfo JSONText
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
instance Paths ReportValueApproachInfo Markup
    where type FromTo ReportValueApproachInfo Markup = Path_ReportValueApproachInfo Markup
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
instance Paths ReportValueApproachInfo ReportValueApproachInfo
    where type FromTo ReportValueApproachInfo ReportValueApproachInfo = Path_ReportValueApproachInfo ReportValueApproachInfo
          paths _ _ = [idPath]
instance Paths ReportValueApproachInfo Text
    where type FromTo ReportValueApproachInfo Text = Path_ReportValueApproachInfo Text
          paths (_s@(ReportValueApproachInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachName,
                                                                                                                          reportValueApproachName _s)],
                                                                concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueApproachInfo_reportValueApproachDescription, reportValueApproachDescription _s)]]
instance PathStart ReportValueApproachInfo
    where data Peek ReportValueApproachInfo
              = Peek_ReportValueApproachInfo_JSONText (FromTo ReportValueApproachInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueApproachInfo_Markup (FromTo ReportValueApproachInfo Markup) (Maybe Markup)
              | Peek_ReportValueApproachInfo_ReportValueApproachInfo (FromTo ReportValueApproachInfo ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportValueApproachInfo_Text (FromTo ReportValueApproachInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(ReportValueApproachInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                   _pp@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> let f = peek a
                                                                                                                                                                 in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                       z) = Peek_ReportValueApproachInfo_JSONText (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                        liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                     z) = Peek_ReportValueApproachInfo_Markup (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                        liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                   z) = Peek_ReportValueApproachInfo_Text (Path_ReportValueApproachInfo_reportValueApproachName q) z
                                                                                                                                                                     in Node (Peek_ReportValueApproachInfo_Markup _pp (if null f
                                                                                                                                                                                                                        then Just a
                                                                                                                                                                                                                        else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                   _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                            concatMap (\pth -> case pth of
                                                                                   _pp@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> let f = peek a
                                                                                                                                                                        in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                              z) = Peek_ReportValueApproachInfo_JSONText (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                               liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                            z) = Peek_ReportValueApproachInfo_Markup (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                               liftPeek (Peek_Markup_Text q
                                                                                                                                                                                                          z) = Peek_ReportValueApproachInfo_Text (Path_ReportValueApproachInfo_reportValueApproachDescription q) z
                                                                                                                                                                            in Node (Peek_ReportValueApproachInfo_Markup _pp (if null f
                                                                                                                                                                                                                               then Just a
                                                                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                                   _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueApproachInfo)
          hop (_s@(ReportValueApproachInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                                  _pp@(Path_ReportValueApproachInfo_reportValueApproachName _wp) -> map (\a -> Node (Peek_ReportValueApproachInfo_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                           concatMap (\pth -> case pth of
                                                                                  _pp@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp) -> map (\a -> Node (Peek_ReportValueApproachInfo_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                                  _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueApproachInfo)
instance Describe (Peek ReportValueApproachInfo)
    where describe _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp))
                                                             _x) = let {wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachName");
                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                        next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                        top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld = Just ("ReportValueApproachInfo",
                                                                                                                                                   "ReportValueApproachInfo",
                                                                                                                                                   Right "reportValueApproachName");
                                                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                      next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                      top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachName _wp)) _x) = let {wfld = Just ("ReportValueApproachInfo",
                                                                                                                                                 "ReportValueApproachInfo",
                                                                                                                                                 Right "reportValueApproachName");
                                                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                    next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                                                    top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueApproachInfo_JSONText (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp))
                                                             _x) = let {wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                        next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                        top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueApproachInfo_Markup (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp))
                                                           _x) = let {wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                      next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                      top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueApproachInfo_Text (_p@(Path_ReportValueApproachInfo_reportValueApproachDescription _wp))
                                                         _x) = let {wfld = Just ("ReportValueApproachInfo", "ReportValueApproachInfo", Right "reportValueApproachDescription");
                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                    next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                    top = describe _f (Proxy :: Proxy ReportValueApproachInfo)}
                                                                in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportValueApproachInfo)
instance Describe (Proxy ReportValueApproachInfo)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Value Approach Info"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportValueApproachInfo JSONText)
    where type S (Path_ReportValueApproachInfo JSONText) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo JSONText) = JSONText
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
instance ToLens (Path_ReportValueApproachInfo Markup)
    where type S (Path_ReportValueApproachInfo Markup) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Markup) = Markup
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription
instance ToLens (Path_ReportValueApproachInfo ReportValueApproachInfo)
    where type S (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo ReportValueApproachInfo) = ReportValueApproachInfo
          toLens _ = id
instance ToLens (Path_ReportValueApproachInfo Text)
    where type S (Path_ReportValueApproachInfo Text) = ReportValueApproachInfo
          type A (Path_ReportValueApproachInfo Text) = Text
          toLens (Path_ReportValueApproachInfo_reportValueApproachName _x) = lens_ReportValueApproachInfo_reportValueApproachName . toLens _x
          toLens (Path_ReportValueApproachInfo_reportValueApproachDescription _x) = lens_ReportValueApproachInfo_reportValueApproachDescription . toLens _x
data Path_ReportValueTypeInfo a
    = Path_ReportValueTypeInfo_reportValueTypeName (Path_Markup a)
    | Path_ReportValueTypeInfo_reportValueTypeDescription (Path_Markup a)
    | Path_ReportValueTypeInfo_reportValueTypeDefinition (Path_Markup a)
    | Path_ReportValueTypeInfo
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportValueTypeInfo a)
    where idPath = Path_ReportValueTypeInfo
class HasReportValueTypeInfo c
    where lens_reportValueTypeInfo :: Lens' c ReportValueTypeInfo
          lens_ReportValueTypeInfo_reportValueTypeDefinition :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDefinition = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDefinition
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeDescription = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeDescription
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName :: forall . Lens' c Markup
          lens_ReportValueTypeInfo_reportValueTypeName = (.) lens_reportValueTypeInfo lens_ReportValueTypeInfo_reportValueTypeName
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance HasReportValueTypeInfo ReportValueTypeInfo
    where lens_reportValueTypeInfo = id
          lens_ReportValueTypeInfo_reportValueTypeDefinition f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 x2 y1) (f x3)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDefinition #-}
          lens_ReportValueTypeInfo_reportValueTypeDescription f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo x1 y1 x3) (f x2)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeDescription #-}
          lens_ReportValueTypeInfo_reportValueTypeName f (ReportValueTypeInfo x1 x2 x3) = fmap (\y1 -> ReportValueTypeInfo y1 x2 x3) (f x1)
          {-# INLINE lens_ReportValueTypeInfo_reportValueTypeName #-}
instance Paths ReportValueTypeInfo JSONText
    where type FromTo ReportValueTypeInfo JSONText = Path_ReportValueTypeInfo JSONText
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
instance Paths ReportValueTypeInfo Markup
    where type FromTo ReportValueTypeInfo Markup = Path_ReportValueTypeInfo Markup
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
instance Paths ReportValueTypeInfo ReportValueTypeInfo
    where type FromTo ReportValueTypeInfo ReportValueTypeInfo = Path_ReportValueTypeInfo ReportValueTypeInfo
          paths _ _ = [idPath]
instance Paths ReportValueTypeInfo Text
    where type FromTo ReportValueTypeInfo Text = Path_ReportValueTypeInfo Text
          paths (_s@(ReportValueTypeInfo {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeName,
                                                                                                                      reportValueTypeName _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDescription, reportValueTypeDescription _s)],
                                                            concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportValueTypeInfo_reportValueTypeDefinition, reportValueTypeDefinition _s)]]
instance PathStart ReportValueTypeInfo
    where data Peek ReportValueTypeInfo
              = Peek_ReportValueTypeInfo_JSONText (FromTo ReportValueTypeInfo JSONText) (Maybe JSONText)
              | Peek_ReportValueTypeInfo_Markup (FromTo ReportValueTypeInfo Markup) (Maybe Markup)
              | Peek_ReportValueTypeInfo_ReportValueTypeInfo (FromTo ReportValueTypeInfo ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportValueTypeInfo_Text (FromTo ReportValueTypeInfo Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(ReportValueTypeInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> let f = peek a
                                                                                                                                                     in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                           z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                            liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                         z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                            liftPeek (Peek_Markup_Text q
                                                                                                                                                                                       z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeName q) z
                                                                                                                                                         in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                        then Just a
                                                                                                                                                                                                        else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                               _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> let f = peek a
                                                                                                                                                            in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                  z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                   liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                                z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                   liftPeek (Peek_Markup_Text q
                                                                                                                                                                                              z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeDescription q) z
                                                                                                                                                                in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                               then Just a
                                                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                               _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                        concatMap (\pth -> case pth of
                                                                               _pp@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> let f = peek a
                                                                                                                                                           in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                                 z) = Peek_ReportValueTypeInfo_JSONText (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                                  liftPeek (Peek_Markup_Markup q
                                                                                                                                                                                               z) = Peek_ReportValueTypeInfo_Markup (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                                  liftPeek (Peek_Markup_Text q
                                                                                                                                                                                             z) = Peek_ReportValueTypeInfo_Text (Path_ReportValueTypeInfo_reportValueTypeDefinition q) z
                                                                                                                                                               in Node (Peek_ReportValueTypeInfo_Markup _pp (if null f
                                                                                                                                                                                                              then Just a
                                                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                               _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueTypeInfo)
          hop (_s@(ReportValueTypeInfo {})) = mconcat [concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportValueTypeInfo_reportValueTypeName _wp) -> map (\a -> Node (Peek_ReportValueTypeInfo_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                              _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp) -> map (\a -> Node (Peek_ReportValueTypeInfo_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                              _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                       concatMap (\pth -> case pth of
                                                                              _pp@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp) -> map (\a -> Node (Peek_ReportValueTypeInfo_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                              _ -> []) (paths _s (Proxy :: Proxy Markup))] :: Forest (Peek ReportValueTypeInfo)
instance Describe (Peek ReportValueTypeInfo)
    where describe _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                         "ReportValueTypeInfo",
                                                                                                                                         Right "reportValueTypeName");
                                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                            top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                       "ReportValueTypeInfo",
                                                                                                                                       Right "reportValueTypeName");
                                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                          top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeName _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                     "ReportValueTypeInfo",
                                                                                                                                     Right "reportValueTypeName");
                                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                                        top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                                "ReportValueTypeInfo",
                                                                                                                                                Right "reportValueTypeDescription");
                                                                                                                                   custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                   next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                   top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                              "ReportValueTypeInfo",
                                                                                                                                              Right "reportValueTypeDescription");
                                                                                                                                 custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                 next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                 top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDescription _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                            "ReportValueTypeInfo",
                                                                                                                                            Right "reportValueTypeDescription");
                                                                                                                               custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                               next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                                               top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_JSONText (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                               "ReportValueTypeInfo",
                                                                                                                                               Right "reportValueTypeDefinition");
                                                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                  next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                                  top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Markup (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                             "ReportValueTypeInfo",
                                                                                                                                             Right "reportValueTypeDefinition");
                                                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                                next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                                                top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportValueTypeInfo_Text (_p@(Path_ReportValueTypeInfo_reportValueTypeDefinition _wp)) _x) = let {wfld = Just ("ReportValueTypeInfo",
                                                                                                                                           "ReportValueTypeInfo",
                                                                                                                                           Right "reportValueTypeDefinition");
                                                                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                              next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                                              top = describe _f (Proxy :: Proxy ReportValueTypeInfo)}
                                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportValueTypeInfo)
instance Describe (Proxy ReportValueTypeInfo)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Value Type Info"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportValueTypeInfo JSONText)
    where type S (Path_ReportValueTypeInfo JSONText) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo JSONText) = JSONText
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
instance ToLens (Path_ReportValueTypeInfo Markup)
    where type S (Path_ReportValueTypeInfo Markup) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Markup) = Markup
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition
instance ToLens (Path_ReportValueTypeInfo ReportValueTypeInfo)
    where type S (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo ReportValueTypeInfo) = ReportValueTypeInfo
          toLens _ = id
instance ToLens (Path_ReportValueTypeInfo Text)
    where type S (Path_ReportValueTypeInfo Text) = ReportValueTypeInfo
          type A (Path_ReportValueTypeInfo Text) = Text
          toLens (Path_ReportValueTypeInfo_reportValueTypeName _x) = lens_ReportValueTypeInfo_reportValueTypeName . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDescription _x) = lens_ReportValueTypeInfo_reportValueTypeDescription . toLens _x
          toLens (Path_ReportValueTypeInfo_reportValueTypeDefinition _x) = lens_ReportValueTypeInfo_reportValueTypeDefinition . toLens _x
type Path_EUI a = Path_Either (Path_URI a) (Path_ImageFile a)
instance Paths EUI ImageFile
    where type FromTo EUI ImageFile = Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)
          paths (_s@(Left _)) _g = mempty
          paths (_s@(Right _)) _g = concatMap (\(p, a') -> map p (paths (a' :: ImageFile) _g)) (case _s of
                                                                                                    Left _ -> []
                                                                                                    Right a' -> [(Path_Right, a')])
instance Paths EUI EUI
    where type FromTo EUI EUI = Path_Either (Path_URI EUI) (Path_ImageFile EUI)
          paths _ _ = [idPath]
instance Paths EUI URI
    where type FromTo EUI URI = Path_Either (Path_URI URI) (Path_ImageFile URI)
          paths (_s@(Left _)) _g = concatMap (\(p, a') -> map p (paths (a' :: URI) _g)) (case _s of
                                                                                             Left a' -> [(Path_Left, a')]
                                                                                             Right _ -> [])
          paths (_s@(Right _)) _g = mempty
instance PathStart (Either URI ImageFile)
    where data Peek (Either URI ImageFile)
              = Peek_EUI_ImageFile (FromTo (Either URI ImageFile) ImageFile) (Maybe ImageFile)
              | Peek_EUI_EUI (FromTo (Either URI ImageFile) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_EUI_URI (FromTo (Either URI ImageFile) URI) (Maybe URI)
              deriving (Eq, Show)
          peek (_s@(Left _)) = concatMap (\pth -> case pth of
                                                      _pp@(Path_Left _wp) -> map (\a -> let f = peek a
                                                                                         in let liftPeek (Peek_URI_URI q z) = Peek_EUI_URI (Path_Left q) z
                                                                                             in Node (Peek_EUI_URI _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [URI])
                                                      _ -> []) (paths _s (Proxy :: Proxy URI)) :: Forest (Peek (Either URI ImageFile))
          peek (_s@(Right _)) = concatMap (\pth -> case pth of
                                                       _pp@(Path_Right _wp) -> map (\a -> let f = peek a
                                                                                           in let liftPeek (Peek_ImageFile_ImageFile q z) = Peek_EUI_ImageFile (Path_Right q) z
                                                                                               in Node (Peek_EUI_ImageFile _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageFile])
                                                       _ -> []) (paths _s (Proxy :: Proxy ImageFile)) :: Forest (Peek (Either URI ImageFile))
          hop (_s@(Left _)) = concatMap (\pth -> case pth of
                                                     _pp@(Path_Left _wp) -> map (\a -> Node (Peek_EUI_URI _pp (Just a)) []) (toListOf (toLens _pp) _s :: [URI])
                                                     _ -> []) (paths _s (Proxy :: Proxy URI)) :: Forest (Peek (Either URI ImageFile))
          hop (_s@(Right _)) = concatMap (\pth -> case pth of
                                                      _pp@(Path_Right _wp) -> map (\a -> Node (Peek_EUI_ImageFile _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ImageFile])
                                                      _ -> []) (paths _s (Proxy :: Proxy ImageFile)) :: Forest (Peek (Either URI ImageFile))
instance Describe (Peek (Either URI ImageFile))
    where describe _f (Peek_EUI_URI (_p@(Path_Left _wp)) _x) = let {wfld = Nothing;
                                                                    custom = describe wfld (Proxy :: Proxy URI);
                                                                    next = describe wfld (Peek_URI_URI _wp undefined);
                                                                    top = describe _f (Proxy :: Proxy (Either URI ImageFile))}
                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_EUI_ImageFile (_p@(Path_Right _wp)) _x) = let {wfld = Nothing;
                                                                           custom = describe wfld (Proxy :: Proxy ImageFile);
                                                                           next = describe wfld (Peek_ImageFile_ImageFile _wp undefined);
                                                                           top = describe _f (Proxy :: Proxy (Either URI ImageFile))}
                                                                       in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Either URI ImageFile))
instance Describe (Proxy (Either URI ImageFile))
    where describe _f _ = case _f of
                              Nothing -> Just "EUI"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
    where type S (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = EUI
          type A (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)) = ImageFile
          toLens (Path_Right _) = _Right
instance ToLens (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
    where type S (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          type A (Path_Either (Path_URI EUI) (Path_ImageFile EUI)) = EUI
          toLens _ = id
instance ToLens (Path_Either (Path_URI URI) (Path_ImageFile URI))
    where type S (Path_Either (Path_URI URI) (Path_ImageFile URI)) = EUI
          type A (Path_Either (Path_URI URI) (Path_ImageFile URI)) = URI
          toLens (Path_Left _) = _Left
type Path_MEUI a = Path_Maybe (Path_Either (Path_URI a) (Path_ImageFile a))
instance Paths MEUI ImageFile
    where type FromTo MEUI ImageFile = Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Either URI ImageFile) _g)) (case _s of
                                                                                                   Nothing -> []
                                                                                                   Just a' -> [(Path_Just, a')])
instance Paths MEUI EUI
    where type FromTo MEUI EUI = Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Either URI ImageFile) _g)) (case _s of
                                                                                                   Nothing -> []
                                                                                                   Just a' -> [(Path_Just, a')])
instance Paths MEUI MEUI
    where type FromTo MEUI MEUI = Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))
          paths _ _ = [idPath]
instance Paths MEUI URI
    where type FromTo MEUI URI = Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Either URI ImageFile) _g)) (case _s of
                                                                                                   Nothing -> []
                                                                                                   Just a' -> [(Path_Just, a')])
instance PathStart (Maybe (Either URI ImageFile))
    where data Peek (Maybe (Either URI ImageFile))
              = Peek_MEUI_ImageFile (FromTo (Maybe (Either URI ImageFile)) ImageFile) (Maybe ImageFile)
              | Peek_MEUI_EUI (FromTo (Maybe (Either URI ImageFile)) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_MEUI_MEUI (FromTo (Maybe (Either URI ImageFile)) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_MEUI_URI (FromTo (Maybe (Either URI ImageFile)) URI) (Maybe URI)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Just _wp) -> map (\a -> let f = peek a
                                                                              in let liftPeek (Peek_EUI_ImageFile q z) = Peek_MEUI_ImageFile (Path_Just q) z
                                                                                     liftPeek (Peek_EUI_EUI q z) = Peek_MEUI_EUI (Path_Just q) z
                                                                                     liftPeek (Peek_EUI_URI q z) = Peek_MEUI_URI (Path_Just q) z
                                                                                  in Node (Peek_MEUI_EUI _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Either URI ImageFile])
                                           _ -> []) (paths _s (Proxy :: Proxy (Either URI ImageFile))) :: Forest (Peek (Maybe (Either URI ImageFile)))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Just _wp) -> map (\a -> Node (Peek_MEUI_EUI _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Either URI ImageFile])
                                          _ -> []) (paths _s (Proxy :: Proxy (Either URI ImageFile))) :: Forest (Peek (Maybe (Either URI ImageFile)))
instance Describe (Peek (Maybe (Either URI ImageFile)))
    where describe _f (Peek_MEUI_ImageFile (_p@(Path_Just _wp)) _x) = let {wfld = Nothing;
                                                                           custom = describe wfld (Proxy :: Proxy (Either URI ImageFile));
                                                                           next = describe wfld (Peek_EUI_ImageFile _wp undefined);
                                                                           top = describe _f (Proxy :: Proxy (Maybe (Either URI ImageFile)))}
                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_MEUI_EUI (_p@(Path_Just _wp)) _x) = let {wfld = Nothing;
                                                                     custom = describe wfld (Proxy :: Proxy (Either URI ImageFile));
                                                                     next = describe wfld (Peek_EUI_EUI _wp undefined);
                                                                     top = describe _f (Proxy :: Proxy (Maybe (Either URI ImageFile)))}
                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_MEUI_URI (_p@(Path_Just _wp)) _x) = let {wfld = Nothing;
                                                                     custom = describe wfld (Proxy :: Proxy (Either URI ImageFile));
                                                                     next = describe wfld (Peek_EUI_URI _wp undefined);
                                                                     top = describe _f (Proxy :: Proxy (Maybe (Either URI ImageFile)))}
                                                                 in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Maybe (Either URI ImageFile)))
instance Describe (Proxy (Maybe (Either URI ImageFile)))
    where describe _f _ = case _f of
                              Nothing -> Just "MEUI"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile)))
    where type S (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI ImageFile) (Path_ImageFile ImageFile))) = ImageFile
          toLens (Path_Just v) = _Just . toLens v
instance ToLens (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI)))
    where type S (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI EUI) (Path_ImageFile EUI))) = EUI
          toLens (Path_Just _) = _Just
instance ToLens (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI)))
    where type S (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI MEUI) (Path_ImageFile MEUI))) = MEUI
          toLens _ = id
instance ToLens (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI)))
    where type S (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = MEUI
          type A (Path_Maybe (Path_Either (Path_URI URI) (Path_ImageFile URI))) = URI
          toLens (Path_Just v) = _Just . toLens v
data Path_MaybeImageFile a = Path_MaybeImageFile_View (Path_String a) | Path_MaybeImageFile deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_MaybeImageFile a)
    where idPath = Path_MaybeImageFile
instance Paths MaybeImageFile String
    where type FromTo MaybeImageFile String = Path_MaybeImageFile String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_MaybeImageFile_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths MaybeImageFile JSONText
    where type FromTo MaybeImageFile JSONText = Path_MaybeImageFile JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_MaybeImageFile_View,
                                                                                              a')) (toListOf (toLens (Path_MaybeImageFile_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths MaybeImageFile MaybeImageFile
    where type FromTo MaybeImageFile MaybeImageFile = Path_MaybeImageFile MaybeImageFile
          paths _ _ = [idPath]
instance PathStart (Maybe ImageFile)
    where data Peek (Maybe ImageFile)
              = Peek_MaybeImageFile_String (FromTo (Maybe ImageFile) ([Char])) (Maybe ([Char]))
              | Peek_MaybeImageFile_JSONText (FromTo (Maybe ImageFile) JSONText) (Maybe JSONText)
              | Peek_MaybeImageFile_MaybeImageFile (FromTo (Maybe ImageFile) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_MaybeImageFile_View _wp) -> map (\a -> let f = peek a
                                                                                             in let liftPeek (Peek_String_String q z) = Peek_MaybeImageFile_String (Path_MaybeImageFile_View q) z
                                                                                                    liftPeek (Peek_String_JSONText q z) = Peek_MaybeImageFile_JSONText (Path_MaybeImageFile_View q) z
                                                                                                 in Node (Peek_MaybeImageFile_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (Maybe ImageFile))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_MaybeImageFile_View _wp) -> map (\a -> Node (Peek_MaybeImageFile_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (Maybe ImageFile))
instance Describe (Peek (Maybe ImageFile))
    where describe _f (Peek_MaybeImageFile_String (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld = Nothing;
                                                                                                 custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                 next = describe wfld (Peek_String_String _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy (Maybe ImageFile))}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_MaybeImageFile_JSONText (_p@(Path_MaybeImageFile_View _wp)) _x) = let {wfld = Nothing;
                                                                                                   custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                   next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy (Maybe ImageFile))}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Maybe ImageFile))
instance Describe (Proxy (Maybe ImageFile))
    where describe _f _ = case _f of
                              Nothing -> Just "Maybe Image File"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_MaybeImageFile String)
    where type S (Path_MaybeImageFile String) = MaybeImageFile
          type A (Path_MaybeImageFile String) = String
          toLens (Path_MaybeImageFile_View _) = viewLens :: Lens' (Maybe ImageFile) ([Char])
instance ToLens (Path_MaybeImageFile JSONText)
    where type S (Path_MaybeImageFile JSONText) = MaybeImageFile
          type A (Path_MaybeImageFile JSONText) = JSONText
          toLens (Path_MaybeImageFile_View v) = (viewLens :: Lens' (Maybe ImageFile) ([Char])) . toLens v
instance ToLens (Path_MaybeImageFile MaybeImageFile)
    where type S (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          type A (Path_MaybeImageFile MaybeImageFile) = MaybeImageFile
          toLens _ = id
data Path_ReportImage a = Path_ReportImage_View (Path_ReportImageView a) | Path_ReportImage deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportImage a)
    where idPath = Path_ReportImage
class HasReportImage c
    where lens_reportImage :: Lens' c ReportImage
          lens_ReportImage_picCaption :: forall . Lens' c Markup
          lens_ReportImage_picCaption = (.) lens_reportImage lens_ReportImage_picCaption
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop :: forall . Lens' c ImageCrop
          lens_ReportImage_picCrop = (.) lens_reportImage lens_ReportImage_picCrop
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEditedDeprecated = (.) lens_reportImage lens_ReportImage_picEditedDeprecated
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picEnlargedDeprecated = (.) lens_reportImage lens_ReportImage_picEnlargedDeprecated
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImage_picMustEnlarge = (.) lens_reportImage lens_ReportImage_picMustEnlarge
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal :: forall . Lens' c MEUI
          lens_ReportImage_picOriginal = (.) lens_reportImage lens_ReportImage_picOriginal
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picPrinterDeprecated = (.) lens_reportImage lens_ReportImage_picPrinterDeprecated
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize :: forall . Lens' c ImageSize
          lens_ReportImage_picSize = (.) lens_reportImage lens_ReportImage_picSize
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImage_picThumbDeprecated = (.) lens_reportImage lens_ReportImage_picThumbDeprecated
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance HasReportImage ReportImage
    where lens_reportImage = id
          lens_ReportImage_picCaption f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImage_picCaption #-}
          lens_ReportImage_picCrop f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImage_picCrop #-}
          lens_ReportImage_picEditedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImage_picEditedDeprecated #-}
          lens_ReportImage_picEnlargedDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImage_picEnlargedDeprecated #-}
          lens_ReportImage_picMustEnlarge f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImage_picMustEnlarge #-}
          lens_ReportImage_picOriginal f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImage_picOriginal #-}
          lens_ReportImage_picPrinterDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImage_picPrinterDeprecated #-}
          lens_ReportImage_picSize f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImage_picSize #-}
          lens_ReportImage_picThumbDeprecated f (Pic x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> Pic x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImage_picThumbDeprecated #-}
instance Paths ReportImage String
    where type FromTo ReportImage String = Path_ReportImage String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Bool
    where type FromTo ReportImage Bool = Path_ReportImage Bool
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Double
    where type FromTo ReportImage Double = Path_ReportImage Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Dimension
    where type FromTo ReportImage Dimension = Path_ReportImage Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage ImageCrop
    where type FromTo ReportImage ImageCrop = Path_ReportImage ImageCrop
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage ImageSize
    where type FromTo ReportImage ImageSize = Path_ReportImage ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Units
    where type FromTo ReportImage Units = Path_ReportImage Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage ImageFile
    where type FromTo ReportImage ImageFile = Path_ReportImage ImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage JSONText
    where type FromTo ReportImage JSONText = Path_ReportImage JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Markup
    where type FromTo ReportImage Markup = Path_ReportImage Markup
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage EUI
    where type FromTo ReportImage EUI = Path_ReportImage EUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage MEUI
    where type FromTo ReportImage MEUI = Path_ReportImage MEUI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage MaybeImageFile
    where type FromTo ReportImage MaybeImageFile = Path_ReportImage MaybeImageFile
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage ReportImage
    where type FromTo ReportImage ReportImage = Path_ReportImage ReportImage
          paths _ _ = [idPath]
instance Paths ReportImage ReportImageView
    where type FromTo ReportImage ReportImageView = Path_ReportImage ReportImageView
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage SaneSizeImageSize
    where type FromTo ReportImage SaneSizeImageSize = Path_ReportImage SaneSizeImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage URI
    where type FromTo ReportImage URI = Path_ReportImage URI
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance Paths ReportImage Text
    where type FromTo ReportImage Text = Path_ReportImage Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImageView) _g)) (map (\a' -> (Path_ReportImage_View,
                                                                                                       a')) (toListOf (toLens (Path_ReportImage_View (idPath :: FromTo ReportImageView ReportImageView))) _s))
instance PathStart ReportImage
    where data Peek ReportImage
              = Peek_ReportImage_String (FromTo ReportImage ([Char])) (Maybe ([Char]))
              | Peek_ReportImage_Bool (FromTo ReportImage Bool) (Maybe Bool)
              | Peek_ReportImage_Double (FromTo ReportImage Double) (Maybe Double)
              | Peek_ReportImage_Dimension (FromTo ReportImage Dimension) (Maybe Dimension)
              | Peek_ReportImage_ImageCrop (FromTo ReportImage ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImage_ImageSize (FromTo ReportImage ImageSize) (Maybe ImageSize)
              | Peek_ReportImage_Units (FromTo ReportImage Units) (Maybe Units)
              | Peek_ReportImage_ImageFile (FromTo ReportImage ImageFile) (Maybe ImageFile)
              | Peek_ReportImage_JSONText (FromTo ReportImage JSONText) (Maybe JSONText)
              | Peek_ReportImage_Markup (FromTo ReportImage Markup) (Maybe Markup)
              | Peek_ReportImage_EUI (FromTo ReportImage (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImage_MEUI (FromTo ReportImage (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImage_MaybeImageFile (FromTo ReportImage (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImage_ReportImage (FromTo ReportImage ReportImage) (Maybe ReportImage)
              | Peek_ReportImage_ReportImageView (FromTo ReportImage ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImage_SaneSizeImageSize (FromTo ReportImage (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImage_URI (FromTo ReportImage URI) (Maybe URI)
              | Peek_ReportImage_Text (FromTo ReportImage Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_ReportImage_View _wp) -> map (\a -> let f = peek a
                                                                                          in let liftPeek (Peek_ReportImageView_String q z) = Peek_ReportImage_String (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Bool q z) = Peek_ReportImage_Bool (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Double q z) = Peek_ReportImage_Double (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Dimension q z) = Peek_ReportImage_Dimension (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_ImageCrop q z) = Peek_ReportImage_ImageCrop (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_ImageSize q z) = Peek_ReportImage_ImageSize (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Units q z) = Peek_ReportImage_Units (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_ImageFile q z) = Peek_ReportImage_ImageFile (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_JSONText q z) = Peek_ReportImage_JSONText (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Markup q z) = Peek_ReportImage_Markup (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_EUI q z) = Peek_ReportImage_EUI (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_MEUI q z) = Peek_ReportImage_MEUI (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_MaybeImageFile q z) = Peek_ReportImage_MaybeImageFile (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_ReportImageView q z) = Peek_ReportImage_ReportImageView (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_SaneSizeImageSize q z) = Peek_ReportImage_SaneSizeImageSize (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_URI q z) = Peek_ReportImage_URI (Path_ReportImage_View q) z
                                                                                                 liftPeek (Peek_ReportImageView_Text q z) = Peek_ReportImage_Text (Path_ReportImage_View q) z
                                                                                              in Node (Peek_ReportImage_ReportImageView _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportImageView])
                                           _ -> []) (paths _s (Proxy :: Proxy ReportImageView)) :: Forest (Peek ReportImage)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_ReportImage_View _wp) -> map (\a -> Node (Peek_ReportImage_ReportImageView _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportImageView])
                                          _ -> []) (paths _s (Proxy :: Proxy ReportImageView)) :: Forest (Peek ReportImage)
instance Describe (Peek ReportImage)
    where describe _f (Peek_ReportImage_String (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                           custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                           next = describe wfld (Peek_ReportImageView_String _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Bool (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                         next = describe wfld (Peek_ReportImageView_Bool _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Double (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                           custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                           next = describe wfld (Peek_ReportImageView_Double _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Dimension (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                              custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                              next = describe wfld (Peek_ReportImageView_Dimension _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_ImageCrop (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                              custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                              next = describe wfld (Peek_ReportImageView_ImageCrop _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_ImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                              custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                              next = describe wfld (Peek_ReportImageView_ImageSize _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Units (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                          custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                          next = describe wfld (Peek_ReportImageView_Units _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_ImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                              custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                              next = describe wfld (Peek_ReportImageView_ImageFile _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_JSONText (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                             custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                             next = describe wfld (Peek_ReportImageView_JSONText _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Markup (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                           custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                           next = describe wfld (Peek_ReportImageView_Markup _wp undefined);
                                                                                           top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_EUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                        custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                        next = describe wfld (Peek_ReportImageView_EUI _wp undefined);
                                                                                        top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_MEUI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                         next = describe wfld (Peek_ReportImageView_MEUI _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_MaybeImageFile (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                                   custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                                   next = describe wfld (Peek_ReportImageView_MaybeImageFile _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_ReportImageView (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                                    custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                                    next = describe wfld (Peek_ReportImageView_ReportImageView _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_SaneSizeImageSize (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                                      custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                                      next = describe wfld (Peek_ReportImageView_SaneSizeImageSize _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_URI (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                        custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                        next = describe wfld (Peek_ReportImageView_URI _wp undefined);
                                                                                        top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImage_Text (_p@(Path_ReportImage_View _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportImageView);
                                                                                         next = describe wfld (Peek_ReportImageView_Text _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy ReportImage)}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportImage)
instance Describe (Proxy ReportImage)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Image"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportImage String)
    where type S (Path_ReportImage String) = ReportImage
          type A (Path_ReportImage String) = String
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Bool)
    where type S (Path_ReportImage Bool) = ReportImage
          type A (Path_ReportImage Bool) = Bool
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Double)
    where type S (Path_ReportImage Double) = ReportImage
          type A (Path_ReportImage Double) = Double
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Dimension)
    where type S (Path_ReportImage Dimension) = ReportImage
          type A (Path_ReportImage Dimension) = Dimension
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageCrop)
    where type S (Path_ReportImage ImageCrop) = ReportImage
          type A (Path_ReportImage ImageCrop) = ImageCrop
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageSize)
    where type S (Path_ReportImage ImageSize) = ReportImage
          type A (Path_ReportImage ImageSize) = ImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Units)
    where type S (Path_ReportImage Units) = ReportImage
          type A (Path_ReportImage Units) = Units
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ImageFile)
    where type S (Path_ReportImage ImageFile) = ReportImage
          type A (Path_ReportImage ImageFile) = ImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage JSONText)
    where type S (Path_ReportImage JSONText) = ReportImage
          type A (Path_ReportImage JSONText) = JSONText
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Markup)
    where type S (Path_ReportImage Markup) = ReportImage
          type A (Path_ReportImage Markup) = Markup
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage EUI)
    where type S (Path_ReportImage EUI) = ReportImage
          type A (Path_ReportImage EUI) = EUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MEUI)
    where type S (Path_ReportImage MEUI) = ReportImage
          type A (Path_ReportImage MEUI) = MEUI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage MaybeImageFile)
    where type S (Path_ReportImage MaybeImageFile) = ReportImage
          type A (Path_ReportImage MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage ReportImage)
    where type S (Path_ReportImage ReportImage) = ReportImage
          type A (Path_ReportImage ReportImage) = ReportImage
          toLens _ = id
instance ToLens (Path_ReportImage ReportImageView)
    where type S (Path_ReportImage ReportImageView) = ReportImage
          type A (Path_ReportImage ReportImageView) = ReportImageView
          toLens (Path_ReportImage_View _) = viewLens :: Lens' ReportImage ReportImageView
instance ToLens (Path_ReportImage SaneSizeImageSize)
    where type S (Path_ReportImage SaneSizeImageSize) = ReportImage
          type A (Path_ReportImage SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage URI)
    where type S (Path_ReportImage URI) = ReportImage
          type A (Path_ReportImage URI) = URI
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
instance ToLens (Path_ReportImage Text)
    where type S (Path_ReportImage Text) = ReportImage
          type A (Path_ReportImage Text) = Text
          toLens (Path_ReportImage_View v) = (viewLens :: Lens' ReportImage ReportImageView) . toLens v
type Path_ReportImages a = Path_OMap ReportImageID (Path_ReportImage a)
instance Paths ReportImages String
    where type FromTo ReportImages String = Path_OMap ReportImageID (Path_ReportImage String)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Bool
    where type FromTo ReportImages Bool = Path_OMap ReportImageID (Path_ReportImage Bool)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Double
    where type FromTo ReportImages Double = Path_OMap ReportImageID (Path_ReportImage Double)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Dimension
    where type FromTo ReportImages Dimension = Path_OMap ReportImageID (Path_ReportImage Dimension)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages ImageCrop
    where type FromTo ReportImages ImageCrop = Path_OMap ReportImageID (Path_ReportImage ImageCrop)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages ImageSize
    where type FromTo ReportImages ImageSize = Path_OMap ReportImageID (Path_ReportImage ImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Units
    where type FromTo ReportImages Units = Path_OMap ReportImageID (Path_ReportImage Units)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages ImageFile
    where type FromTo ReportImages ImageFile = Path_OMap ReportImageID (Path_ReportImage ImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages JSONText
    where type FromTo ReportImages JSONText = Path_OMap ReportImageID (Path_ReportImage JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Markup
    where type FromTo ReportImages Markup = Path_OMap ReportImageID (Path_ReportImage Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages EUI
    where type FromTo ReportImages EUI = Path_OMap ReportImageID (Path_ReportImage EUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages MEUI
    where type FromTo ReportImages MEUI = Path_OMap ReportImageID (Path_ReportImage MEUI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages MaybeImageFile
    where type FromTo ReportImages MaybeImageFile = Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages ReportImage
    where type FromTo ReportImages ReportImage = Path_OMap ReportImageID (Path_ReportImage ReportImage)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages ReportImages
    where type FromTo ReportImages ReportImages = Path_OMap ReportImageID (Path_ReportImage ReportImages)
          paths _ _ = [idPath]
instance Paths ReportImages ReportImageView
    where type FromTo ReportImages ReportImageView = Path_OMap ReportImageID (Path_ReportImage ReportImageView)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages SaneSizeImageSize
    where type FromTo ReportImages SaneSizeImageSize = Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages URI
    where type FromTo ReportImages URI = Path_OMap ReportImageID (Path_ReportImage URI)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance Paths ReportImages Text
    where type FromTo ReportImages Text = Path_OMap ReportImageID (Path_ReportImage Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImage) _g)) (map (\(idx, val) -> (Path_At idx, val)) (toPairs _s))
instance PathStart (Order ReportImageID ReportImage)
    where data Peek (Order ReportImageID ReportImage)
              = Peek_ReportImages_String (FromTo (Order ReportImageID ReportImage) ([Char])) (Maybe ([Char]))
              | Peek_ReportImages_Bool (FromTo (Order ReportImageID ReportImage) Bool) (Maybe Bool)
              | Peek_ReportImages_Double (FromTo (Order ReportImageID ReportImage) Double) (Maybe Double)
              | Peek_ReportImages_Dimension (FromTo (Order ReportImageID ReportImage) Dimension) (Maybe Dimension)
              | Peek_ReportImages_ImageCrop (FromTo (Order ReportImageID ReportImage) ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImages_ImageSize (FromTo (Order ReportImageID ReportImage) ImageSize) (Maybe ImageSize)
              | Peek_ReportImages_Units (FromTo (Order ReportImageID ReportImage) Units) (Maybe Units)
              | Peek_ReportImages_ImageFile (FromTo (Order ReportImageID ReportImage) ImageFile) (Maybe ImageFile)
              | Peek_ReportImages_JSONText (FromTo (Order ReportImageID ReportImage) JSONText) (Maybe JSONText)
              | Peek_ReportImages_Markup (FromTo (Order ReportImageID ReportImage) Markup) (Maybe Markup)
              | Peek_ReportImages_EUI (FromTo (Order ReportImageID ReportImage) (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImages_MEUI (FromTo (Order ReportImageID ReportImage) (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImages_MaybeImageFile (FromTo (Order ReportImageID ReportImage) (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImages_ReportImage (FromTo (Order ReportImageID ReportImage) ReportImage) (Maybe ReportImage)
              | Peek_ReportImages_ReportImages (FromTo (Order ReportImageID ReportImage) (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportImages_ReportImageView (FromTo (Order ReportImageID ReportImage) ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImages_SaneSizeImageSize (FromTo (Order ReportImageID ReportImage) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImages_URI (FromTo (Order ReportImageID ReportImage) URI) (Maybe URI)
              | Peek_ReportImages_Text (FromTo (Order ReportImageID ReportImage) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_At _k _wp) -> map (\a -> let f = peek a
                                                                               in let liftPeek (Peek_ReportImage_String q z) = Peek_ReportImages_String (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Bool q z) = Peek_ReportImages_Bool (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Double q z) = Peek_ReportImages_Double (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Dimension q z) = Peek_ReportImages_Dimension (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_ImageCrop q z) = Peek_ReportImages_ImageCrop (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_ImageSize q z) = Peek_ReportImages_ImageSize (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Units q z) = Peek_ReportImages_Units (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_ImageFile q z) = Peek_ReportImages_ImageFile (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_JSONText q z) = Peek_ReportImages_JSONText (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Markup q z) = Peek_ReportImages_Markup (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_EUI q z) = Peek_ReportImages_EUI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_MEUI q z) = Peek_ReportImages_MEUI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_MaybeImageFile q z) = Peek_ReportImages_MaybeImageFile (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_ReportImage q z) = Peek_ReportImages_ReportImage (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_ReportImageView q z) = Peek_ReportImages_ReportImageView (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_SaneSizeImageSize q z) = Peek_ReportImages_SaneSizeImageSize (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_URI q z) = Peek_ReportImages_URI (Path_At _k q) z
                                                                                      liftPeek (Peek_ReportImage_Text q z) = Peek_ReportImages_Text (Path_At _k q) z
                                                                                   in Node (Peek_ReportImages_ReportImage _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportImage])
                                           _ -> []) (paths _s (Proxy :: Proxy ReportImage)) :: Forest (Peek (Order ReportImageID ReportImage))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_At _k _wp) -> map (\a -> Node (Peek_ReportImages_ReportImage _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportImage])
                                          _ -> []) (paths _s (Proxy :: Proxy ReportImage)) :: Forest (Peek (Order ReportImageID ReportImage))
instance Describe (Peek (Order ReportImageID ReportImage))
    where describe _f (Peek_ReportImages_String (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                 next = describe wfld (Peek_ReportImage_String _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Bool (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                               next = describe wfld (Peek_ReportImage_Bool _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Double (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                 next = describe wfld (Peek_ReportImage_Double _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Dimension (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                    next = describe wfld (Peek_ReportImage_Dimension _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_ImageCrop (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                    next = describe wfld (Peek_ReportImage_ImageCrop _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_ImageSize (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                    next = describe wfld (Peek_ReportImage_ImageSize _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Units (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                next = describe wfld (Peek_ReportImage_Units _wp undefined);
                                                                                top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_ImageFile (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                    custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                    next = describe wfld (Peek_ReportImage_ImageFile _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_JSONText (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                   next = describe wfld (Peek_ReportImage_JSONText _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Markup (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                 custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                 next = describe wfld (Peek_ReportImage_Markup _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_EUI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                              next = describe wfld (Peek_ReportImage_EUI _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_MEUI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                               next = describe wfld (Peek_ReportImage_MEUI _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_MaybeImageFile (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                         custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                         next = describe wfld (Peek_ReportImage_MaybeImageFile _wp undefined);
                                                                                         top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_ReportImage (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                      custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                      next = describe wfld (Peek_ReportImage_ReportImage _wp undefined);
                                                                                      top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_ReportImageView (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                          custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                          next = describe wfld (Peek_ReportImage_ReportImageView _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_SaneSizeImageSize (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                                            custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                                            next = describe wfld (Peek_ReportImage_SaneSizeImageSize _wp undefined);
                                                                                            top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_URI (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                              custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                              next = describe wfld (Peek_ReportImage_URI _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImages_Text (_p@(Path_At _k _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy ReportImage);
                                                                               next = describe wfld (Peek_ReportImage_Text _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Order ReportImageID ReportImage))
instance Describe (Proxy (Order ReportImageID ReportImage))
    where describe _f _ = case _f of
                              Nothing -> Just "Report Images"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_OMap ReportImageID (Path_ReportImage String))
    where type S (Path_OMap ReportImageID (Path_ReportImage String)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage String)) = String
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Bool))
    where type S (Path_OMap ReportImageID (Path_ReportImage Bool)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Bool)) = Bool
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Double))
    where type S (Path_OMap ReportImageID (Path_ReportImage Double)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Double)) = Double
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Dimension))
    where type S (Path_OMap ReportImageID (Path_ReportImage Dimension)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Dimension)) = Dimension
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageCrop))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageCrop)) = ImageCrop
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageSize)) = ImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Units))
    where type S (Path_OMap ReportImageID (Path_ReportImage Units)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Units)) = Units
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ImageFile)) = ImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage JSONText))
    where type S (Path_OMap ReportImageID (Path_ReportImage JSONText)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage JSONText)) = JSONText
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Markup))
    where type S (Path_OMap ReportImageID (Path_ReportImage Markup)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Markup)) = Markup
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage EUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage EUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage EUI)) = EUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MEUI))
    where type S (Path_OMap ReportImageID (Path_ReportImage MEUI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MEUI)) = MEUI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile))
    where type S (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage MaybeImageFile)) = MaybeImageFile
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImage))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImage)) = ReportImage
          toLens (Path_At k _) = lens_omat k
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImages))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImages)) = ReportImages
          toLens _ = id
instance ToLens (Path_OMap ReportImageID (Path_ReportImage ReportImageView))
    where type S (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage ReportImageView)) = ReportImageView
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize))
    where type S (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage SaneSizeImageSize)) = SaneSizeImageSize
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage URI))
    where type S (Path_OMap ReportImageID (Path_ReportImage URI)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage URI)) = URI
          toLens (Path_At k v) = lens_omat k . toLens v
instance ToLens (Path_OMap ReportImageID (Path_ReportImage Text))
    where type S (Path_OMap ReportImageID (Path_ReportImage Text)) = ReportImages
          type A (Path_OMap ReportImageID (Path_ReportImage Text)) = Text
          toLens (Path_At k v) = lens_omat k . toLens v
data Path_ReadOnlyFilePath a = Path_ReadOnlyFilePath_View (Path_String a) | Path_ReadOnlyFilePath deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReadOnlyFilePath a)
    where idPath = Path_ReadOnlyFilePath
instance Paths ReadOnlyFilePath String
    where type FromTo ReadOnlyFilePath String = Path_ReadOnlyFilePath String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                              a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReadOnlyFilePath JSONText
    where type FromTo ReadOnlyFilePath JSONText = Path_ReadOnlyFilePath JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: [Char]) _g)) (map (\a' -> (Path_ReadOnlyFilePath_View,
                                                                                              a')) (toListOf (toLens (Path_ReadOnlyFilePath_View (idPath :: FromTo ([Char]) ([Char])))) _s))
instance Paths ReadOnlyFilePath ReadOnlyFilePath
    where type FromTo ReadOnlyFilePath ReadOnlyFilePath = Path_ReadOnlyFilePath ReadOnlyFilePath
          paths _ _ = [idPath]
instance PathStart (ReadOnly ([Char]))
    where data Peek (ReadOnly ([Char]))
              = Peek_ReadOnlyFilePath_String (FromTo (ReadOnly ([Char])) ([Char])) (Maybe ([Char]))
              | Peek_ReadOnlyFilePath_JSONText (FromTo (ReadOnly ([Char])) JSONText) (Maybe JSONText)
              | Peek_ReadOnlyFilePath_ReadOnlyFilePath (FromTo (ReadOnly ([Char])) (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> let f = peek a
                                                                                               in let liftPeek (Peek_String_String q z) = Peek_ReadOnlyFilePath_String (Path_ReadOnlyFilePath_View q) z
                                                                                                      liftPeek (Peek_String_JSONText q z) = Peek_ReadOnlyFilePath_JSONText (Path_ReadOnlyFilePath_View q) z
                                                                                                   in Node (Peek_ReadOnlyFilePath_String _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [[Char]])
                                           _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (ReadOnly ([Char])))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_ReadOnlyFilePath_View _wp) -> map (\a -> Node (Peek_ReadOnlyFilePath_String _pp (Just a)) []) (toListOf (toLens _pp) _s :: [[Char]])
                                          _ -> []) (paths _s (Proxy :: Proxy ([Char]))) :: Forest (Peek (ReadOnly ([Char])))
instance Describe (Peek (ReadOnly ([Char])))
    where describe _f (Peek_ReadOnlyFilePath_String (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld = Nothing;
                                                                                                     custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                     next = describe wfld (Peek_String_String _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy (ReadOnly ([Char])))}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReadOnlyFilePath_JSONText (_p@(Path_ReadOnlyFilePath_View _wp)) _x) = let {wfld = Nothing;
                                                                                                       custom = describe wfld (Proxy :: Proxy ([Char]));
                                                                                                       next = describe wfld (Peek_String_JSONText _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy (ReadOnly ([Char])))}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (ReadOnly ([Char])))
instance Describe (Proxy (ReadOnly ([Char])))
    where describe _f _ = case _f of
                              Nothing -> Just "Read Only File Path"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReadOnlyFilePath String)
    where type S (Path_ReadOnlyFilePath String) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath String) = String
          toLens (Path_ReadOnlyFilePath_View _) = viewLens :: Lens' (ReadOnly ([Char])) ([Char])
instance ToLens (Path_ReadOnlyFilePath JSONText)
    where type S (Path_ReadOnlyFilePath JSONText) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath JSONText) = JSONText
          toLens (Path_ReadOnlyFilePath_View v) = (viewLens :: Lens' (ReadOnly ([Char])) ([Char])) . toLens v
instance ToLens (Path_ReadOnlyFilePath ReadOnlyFilePath)
    where type S (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          type A (Path_ReadOnlyFilePath ReadOnlyFilePath) = ReadOnlyFilePath
          toLens _ = id
data Path_ReportImageView a
    = Path_ReportImageView__picSize (Path_SaneSizeImageSize a)
    | Path_ReportImageView__picCrop (Path_ImageCrop a)
    | Path_ReportImageView__picCaption (Path_Markup a)
    | Path_ReportImageView__picOriginal (Path_Maybe (Path_Either (Path_URI a) (Path_ImageFile a)))
    | Path_ReportImageView__picEditedDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picThumbDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picPrinterDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView__picMustEnlarge (Path_Bool a)
    | Path_ReportImageView__picEnlargedDeprecated (Path_MaybeImageFile a)
    | Path_ReportImageView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportImageView a)
    where idPath = Path_ReportImageView
class HasReportImageView c
    where lens_reportImageView :: Lens' c ReportImageView
          lens_ReportImageView__picCaption :: forall . Lens' c Markup
          lens_ReportImageView__picCaption = (.) lens_reportImageView lens_ReportImageView__picCaption
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop :: forall . Lens' c ImageCrop
          lens_ReportImageView__picCrop = (.) lens_reportImageView lens_ReportImageView__picCrop
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEditedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEditedDeprecated
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picEnlargedDeprecated = (.) lens_reportImageView lens_ReportImageView__picEnlargedDeprecated
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge :: forall . Lens' c Bool
          lens_ReportImageView__picMustEnlarge = (.) lens_reportImageView lens_ReportImageView__picMustEnlarge
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal :: forall . Lens' c (Maybe (Either URI ImageFile))
          lens_ReportImageView__picOriginal = (.) lens_reportImageView lens_ReportImageView__picOriginal
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picPrinterDeprecated = (.) lens_reportImageView lens_ReportImageView__picPrinterDeprecated
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize :: forall . Lens' c SaneSizeImageSize
          lens_ReportImageView__picSize = (.) lens_reportImageView lens_ReportImageView__picSize
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated :: forall . Lens' c MaybeImageFile
          lens_ReportImageView__picThumbDeprecated = (.) lens_reportImageView lens_ReportImageView__picThumbDeprecated
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance HasReportImageView ReportImageView
    where lens_reportImageView = id
          lens_ReportImageView__picCaption f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 y1 x4 x5 x6 x7 x8 x9) (f x3)
          {-# INLINE lens_ReportImageView__picCaption #-}
          lens_ReportImageView__picCrop f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 y1 x3 x4 x5 x6 x7 x8 x9) (f x2)
          {-# INLINE lens_ReportImageView__picCrop #-}
          lens_ReportImageView__picEditedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 y1 x6 x7 x8 x9) (f x5)
          {-# INLINE lens_ReportImageView__picEditedDeprecated #-}
          lens_ReportImageView__picEnlargedDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 y1) (f x9)
          {-# INLINE lens_ReportImageView__picEnlargedDeprecated #-}
          lens_ReportImageView__picMustEnlarge f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 x7 y1 x9) (f x8)
          {-# INLINE lens_ReportImageView__picMustEnlarge #-}
          lens_ReportImageView__picOriginal f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 y1 x5 x6 x7 x8 x9) (f x4)
          {-# INLINE lens_ReportImageView__picOriginal #-}
          lens_ReportImageView__picPrinterDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 x6 y1 x8 x9) (f x7)
          {-# INLINE lens_ReportImageView__picPrinterDeprecated #-}
          lens_ReportImageView__picSize f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView y1 x2 x3 x4 x5 x6 x7 x8 x9) (f x1)
          {-# INLINE lens_ReportImageView__picSize #-}
          lens_ReportImageView__picThumbDeprecated f (ReportImageView x1 x2 x3 x4 x5 x6 x7 x8 x9) = fmap (\y1 -> ReportImageView x1 x2 x3 x4 x5 y1 x7 x8 x9) (f x6)
          {-# INLINE lens_ReportImageView__picThumbDeprecated #-}
instance Paths ReportImageView String
    where type FromTo ReportImageView String = Path_ReportImageView String
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
instance Paths ReportImageView Bool
    where type FromTo ReportImageView Bool = Path_ReportImageView Bool
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)]
instance Paths ReportImageView Double
    where type FromTo ReportImageView Double = Path_ReportImageView Double
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
instance Paths ReportImageView Dimension
    where type FromTo ReportImageView Dimension = Path_ReportImageView Dimension
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
instance Paths ReportImageView ImageCrop
    where type FromTo ReportImageView ImageCrop = Path_ReportImageView ImageCrop
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ImageCrop) _g)) [(Path_ReportImageView__picCrop, _picCrop _s)]
instance Paths ReportImageView ImageSize
    where type FromTo ReportImageView ImageSize = Path_ReportImageView ImageSize
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
instance Paths ReportImageView Units
    where type FromTo ReportImageView Units = Path_ReportImageView Units
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
instance Paths ReportImageView ImageFile
    where type FromTo ReportImageView ImageFile = Path_ReportImageView ImageFile
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
instance Paths ReportImageView JSONText
    where type FromTo ReportImageView JSONText = Path_ReportImageView JSONText
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated, _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportImageView__picMustEnlarge, _picMustEnlarge _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
instance Paths ReportImageView Markup
    where type FromTo ReportImageView Markup = Path_ReportImageView Markup
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)]
instance Paths ReportImageView EUI
    where type FromTo ReportImageView EUI = Path_ReportImageView EUI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
instance Paths ReportImageView MEUI
    where type FromTo ReportImageView MEUI = Path_ReportImageView MEUI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
instance Paths ReportImageView MaybeImageFile
    where type FromTo ReportImageView MaybeImageFile = Path_ReportImageView MaybeImageFile
          paths (_s@(ReportImageView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEditedDeprecated,
                                                                                                                          _picEditedDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picThumbDeprecated, _picThumbDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picPrinterDeprecated, _picPrinterDeprecated _s)],
                                                        concatMap (\(p, a') -> map p (paths (a' :: MaybeImageFile) _g)) [(Path_ReportImageView__picEnlargedDeprecated, _picEnlargedDeprecated _s)]]
instance Paths ReportImageView ReportImageView
    where type FromTo ReportImageView ReportImageView = Path_ReportImageView ReportImageView
          paths _ _ = [idPath]
instance Paths ReportImageView SaneSizeImageSize
    where type FromTo ReportImageView SaneSizeImageSize = Path_ReportImageView SaneSizeImageSize
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: SaneSizeImageSize) _g)) [(Path_ReportImageView__picSize, _picSize _s)]
instance Paths ReportImageView URI
    where type FromTo ReportImageView URI = Path_ReportImageView URI
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Maybe (Either URI ImageFile)) _g)) [(Path_ReportImageView__picOriginal,
                                                                                                                               _picOriginal _s)]
instance Paths ReportImageView Text
    where type FromTo ReportImageView Text = Path_ReportImageView Text
          paths (_s@(ReportImageView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportImageView__picCaption, _picCaption _s)]
instance PathStart ReportImageView
    where data Peek ReportImageView
              = Peek_ReportImageView_String (FromTo ReportImageView ([Char])) (Maybe ([Char]))
              | Peek_ReportImageView_Bool (FromTo ReportImageView Bool) (Maybe Bool)
              | Peek_ReportImageView_Double (FromTo ReportImageView Double) (Maybe Double)
              | Peek_ReportImageView_Dimension (FromTo ReportImageView Dimension) (Maybe Dimension)
              | Peek_ReportImageView_ImageCrop (FromTo ReportImageView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportImageView_ImageSize (FromTo ReportImageView ImageSize) (Maybe ImageSize)
              | Peek_ReportImageView_Units (FromTo ReportImageView Units) (Maybe Units)
              | Peek_ReportImageView_ImageFile (FromTo ReportImageView ImageFile) (Maybe ImageFile)
              | Peek_ReportImageView_JSONText (FromTo ReportImageView JSONText) (Maybe JSONText)
              | Peek_ReportImageView_Markup (FromTo ReportImageView Markup) (Maybe Markup)
              | Peek_ReportImageView_EUI (FromTo ReportImageView (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportImageView_MEUI (FromTo ReportImageView (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportImageView_MaybeImageFile (FromTo ReportImageView (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportImageView_ReportImageView (FromTo ReportImageView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportImageView_SaneSizeImageSize (FromTo ReportImageView (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportImageView_URI (FromTo ReportImageView URI) (Maybe URI)
              | Peek_ReportImageView_Text (FromTo ReportImageView Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(ReportImageView {})) = mconcat [concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picSize _wp) -> map (\a -> let f = peek a
                                                                                                                                  in let liftPeek (Peek_SaneSizeImageSize_String q z) = Peek_ReportImageView_String (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_Double q z) = Peek_ReportImageView_Double (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_Dimension q
                                                                                                                                                                                    z) = Peek_ReportImageView_Dimension (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_ImageSize q
                                                                                                                                                                                    z) = Peek_ReportImageView_ImageSize (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_Units q z) = Peek_ReportImageView_Units (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_JSONText q
                                                                                                                                                                                   z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picSize q) z
                                                                                                                                         liftPeek (Peek_SaneSizeImageSize_SaneSizeImageSize q
                                                                                                                                                                                            z) = Peek_ReportImageView_SaneSizeImageSize (Path_ReportImageView__picSize q) z
                                                                                                                                      in Node (Peek_ReportImageView_SaneSizeImageSize _pp (if null f
                                                                                                                                                                                            then Just a
                                                                                                                                                                                            else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [SaneSize ImageSize])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (SaneSize ImageSize))),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picCrop _wp) -> map (\a -> let f = peek a
                                                                                                                                  in let liftPeek (Peek_ImageCrop_ImageCrop q z) = Peek_ReportImageView_ImageCrop (Path_ReportImageView__picCrop q) z
                                                                                                                                      in Node (Peek_ReportImageView_ImageCrop _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageCrop])
                                                                           _ -> []) (paths _s (Proxy :: Proxy ImageCrop)),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picCaption _wp) -> map (\a -> let f = peek a
                                                                                                                                     in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picCaption q) z
                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_ReportImageView_Markup (Path_ReportImageView__picCaption q) z
                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_ReportImageView_Text (Path_ReportImageView__picCaption q) z
                                                                                                                                         in Node (Peek_ReportImageView_Markup _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                           _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picOriginal _wp) -> map (\a -> let f = peek a
                                                                                                                                      in let liftPeek (Peek_MEUI_ImageFile q z) = Peek_ReportImageView_ImageFile (Path_ReportImageView__picOriginal q) z
                                                                                                                                             liftPeek (Peek_MEUI_EUI q z) = Peek_ReportImageView_EUI (Path_ReportImageView__picOriginal q) z
                                                                                                                                             liftPeek (Peek_MEUI_MEUI q z) = Peek_ReportImageView_MEUI (Path_ReportImageView__picOriginal q) z
                                                                                                                                             liftPeek (Peek_MEUI_URI q z) = Peek_ReportImageView_URI (Path_ReportImageView__picOriginal q) z
                                                                                                                                          in Node (Peek_ReportImageView_MEUI _pp (if null f
                                                                                                                                                                                   then Just a
                                                                                                                                                                                   else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe (Either URI
                                                                                                                                                                                                                                                                      ImageFile)])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (Maybe (Either URI ImageFile)))),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> let f = peek a
                                                                                                                                              in let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                          z) = Peek_ReportImageView_String (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                     liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                            z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                     liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                  z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picEditedDeprecated q) z
                                                                                                                                                  in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                     then Just a
                                                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> let f = peek a
                                                                                                                                             in let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                         z) = Peek_ReportImageView_String (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                    liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                           z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                    liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                 z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picThumbDeprecated q) z
                                                                                                                                                 in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                    then Just a
                                                                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> let f = peek a
                                                                                                                                               in let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                           z) = Peek_ReportImageView_String (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                      liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                             z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                      liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                   z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picPrinterDeprecated q) z
                                                                                                                                                   in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                      then Just a
                                                                                                                                                                                                      else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> let f = peek a
                                                                                                                                         in let liftPeek (Peek_Bool_String q z) = Peek_ReportImageView_String (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                                liftPeek (Peek_Bool_Bool q z) = Peek_ReportImageView_Bool (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                                liftPeek (Peek_Bool_JSONText q
                                                                                                                                                                             z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picMustEnlarge q) z
                                                                                                                                             in Node (Peek_ReportImageView_Bool _pp (if null f
                                                                                                                                                                                      then Just a
                                                                                                                                                                                      else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                           _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                    concatMap (\pth -> case pth of
                                                                           _pp@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> let f = peek a
                                                                                                                                                in let liftPeek (Peek_MaybeImageFile_String q
                                                                                                                                                                                            z) = Peek_ReportImageView_String (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                       liftPeek (Peek_MaybeImageFile_JSONText q
                                                                                                                                                                                              z) = Peek_ReportImageView_JSONText (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                       liftPeek (Peek_MaybeImageFile_MaybeImageFile q
                                                                                                                                                                                                    z) = Peek_ReportImageView_MaybeImageFile (Path_ReportImageView__picEnlargedDeprecated q) z
                                                                                                                                                    in Node (Peek_ReportImageView_MaybeImageFile _pp (if null f
                                                                                                                                                                                                       then Just a
                                                                                                                                                                                                       else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                           _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile)))] :: Forest (Peek ReportImageView)
          hop (_s@(ReportImageView {})) = mconcat [concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picSize _wp) -> map (\a -> Node (Peek_ReportImageView_SaneSizeImageSize _pp (Just a)) []) (toListOf (toLens _pp) _s :: [SaneSize ImageSize])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (SaneSize ImageSize))),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picCrop _wp) -> map (\a -> Node (Peek_ReportImageView_ImageCrop _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ImageCrop])
                                                                          _ -> []) (paths _s (Proxy :: Proxy ImageCrop)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picCaption _wp) -> map (\a -> Node (Peek_ReportImageView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picOriginal _wp) -> map (\a -> Node (Peek_ReportImageView_MEUI _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe (Either URI
                                                                                                                                                                                                                                  ImageFile)])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (Maybe (Either URI ImageFile)))),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picEditedDeprecated _wp) -> map (\a -> Node (Peek_ReportImageView_MaybeImageFile _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picThumbDeprecated _wp) -> map (\a -> Node (Peek_ReportImageView_MaybeImageFile _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picPrinterDeprecated _wp) -> map (\a -> Node (Peek_ReportImageView_MaybeImageFile _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile))),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picMustEnlarge _wp) -> map (\a -> Node (Peek_ReportImageView_Bool _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Bool])
                                                                          _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                                   concatMap (\pth -> case pth of
                                                                          _pp@(Path_ReportImageView__picEnlargedDeprecated _wp) -> map (\a -> Node (Peek_ReportImageView_MaybeImageFile _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe ImageFile])
                                                                          _ -> []) (paths _s (Proxy :: Proxy (Maybe ImageFile)))] :: Forest (Peek ReportImageView)
instance Describe (Peek ReportImageView)
    where describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                    "ReportImageView",
                                                                                                                    Right "_picSize");
                                                                                                       custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                       next = describe wfld (Peek_SaneSizeImageSize_String _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Double (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                       custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                       next = describe wfld (Peek_SaneSizeImageSize_Double _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Dimension (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                          custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                          next = describe wfld (Peek_SaneSizeImageSize_Dimension _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_ImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                          custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                          next = describe wfld (Peek_SaneSizeImageSize_ImageSize _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Units (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                      custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                      next = describe wfld (Peek_SaneSizeImageSize_Units _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picSize");
                                                                                                         custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                         next = describe wfld (Peek_SaneSizeImageSize_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_SaneSizeImageSize (_p@(Path_ReportImageView__picSize _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                               "ReportImageView",
                                                                                                                               Right "_picSize");
                                                                                                                  custom = describe wfld (Proxy :: Proxy (SaneSize ImageSize));
                                                                                                                  next = describe wfld (Peek_SaneSizeImageSize_SaneSizeImageSize _wp undefined);
                                                                                                                  top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_ImageCrop (_p@(Path_ReportImageView__picCrop _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picCrop");
                                                                                                          custom = describe wfld (Proxy :: Proxy ImageCrop);
                                                                                                          next = describe wfld (Peek_ImageCrop_ImageCrop _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                         "ReportImageView",
                                                                                                                         Right "_picCaption");
                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Markup (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                       "ReportImageView",
                                                                                                                       Right "_picCaption");
                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Text (_p@(Path_ReportImageView__picCaption _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picCaption");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_ImageFile (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                           "ReportImageView",
                                                                                                                           Right "_picOriginal");
                                                                                                              custom = describe wfld (Proxy :: Proxy (Maybe (Either URI ImageFile)));
                                                                                                              next = describe wfld (Peek_MEUI_ImageFile _wp undefined);
                                                                                                              top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_EUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Maybe (Either URI ImageFile)));
                                                                                                        next = describe wfld (Peek_MEUI_EUI _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_MEUI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                      "ReportImageView",
                                                                                                                      Right "_picOriginal");
                                                                                                         custom = describe wfld (Proxy :: Proxy (Maybe (Either URI ImageFile)));
                                                                                                         next = describe wfld (Peek_MEUI_MEUI _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_URI (_p@(Path_ReportImageView__picOriginal _wp)) _x) = let {wfld = Just ("ReportImageView", "ReportImageView", Right "_picOriginal");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Maybe (Either URI ImageFile)));
                                                                                                        next = describe wfld (Peek_MEUI_URI _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                "ReportImageView",
                                                                                                                                Right "_picEditedDeprecated");
                                                                                                                   custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                   next = describe wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                   top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                  "ReportImageView",
                                                                                                                                  Right "_picEditedDeprecated");
                                                                                                                     custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                     next = describe wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                     top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEditedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                        "ReportImageView",
                                                                                                                                        Right "_picEditedDeprecated");
                                                                                                                           custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                           next = describe wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                           top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                               "ReportImageView",
                                                                                                                               Right "_picThumbDeprecated");
                                                                                                                  custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                  next = describe wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                  top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                 "ReportImageView",
                                                                                                                                 Right "_picThumbDeprecated");
                                                                                                                    custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                    next = describe wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                    top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picThumbDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                       "ReportImageView",
                                                                                                                                       Right "_picThumbDeprecated");
                                                                                                                          custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                          next = describe wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                          top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                 "ReportImageView",
                                                                                                                                 Right "_picPrinterDeprecated");
                                                                                                                    custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                    next = describe wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                    top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                   "ReportImageView",
                                                                                                                                   Right "_picPrinterDeprecated");
                                                                                                                      custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                      next = describe wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                      top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picPrinterDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                         "ReportImageView",
                                                                                                                                         Right "_picPrinterDeprecated");
                                                                                                                            custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                            next = describe wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                            top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                           "ReportImageView",
                                                                                                                           Right "_picMustEnlarge");
                                                                                                              custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                              next = describe wfld (Peek_Bool_String _wp undefined);
                                                                                                              top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_Bool (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                         "ReportImageView",
                                                                                                                         Right "_picMustEnlarge");
                                                                                                            custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                            next = describe wfld (Peek_Bool_Bool _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picMustEnlarge _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                             "ReportImageView",
                                                                                                                             Right "_picMustEnlarge");
                                                                                                                custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                                next = describe wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                                top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_String (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                  "ReportImageView",
                                                                                                                                  Right "_picEnlargedDeprecated");
                                                                                                                     custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                     next = describe wfld (Peek_MaybeImageFile_String _wp undefined);
                                                                                                                     top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_JSONText (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                    "ReportImageView",
                                                                                                                                    Right "_picEnlargedDeprecated");
                                                                                                                       custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                       next = describe wfld (Peek_MaybeImageFile_JSONText _wp undefined);
                                                                                                                       top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportImageView_MaybeImageFile (_p@(Path_ReportImageView__picEnlargedDeprecated _wp)) _x) = let {wfld = Just ("ReportImageView",
                                                                                                                                          "ReportImageView",
                                                                                                                                          Right "_picEnlargedDeprecated");
                                                                                                                             custom = describe wfld (Proxy :: Proxy (Maybe ImageFile));
                                                                                                                             next = describe wfld (Peek_MaybeImageFile_MaybeImageFile _wp undefined);
                                                                                                                             top = describe _f (Proxy :: Proxy ReportImageView)}
                                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportImageView)
instance Describe (Proxy ReportImageView)
    where describe _f _ = case _f of
                              Nothing -> Just "Report Image View"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportImageView String)
    where type S (Path_ReportImageView String) = ReportImageView
          type A (Path_ReportImageView String) = String
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Bool)
    where type S (Path_ReportImageView Bool) = ReportImageView
          type A (Path_ReportImageView Bool) = Bool
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge
instance ToLens (Path_ReportImageView Double)
    where type S (Path_ReportImageView Double) = ReportImageView
          type A (Path_ReportImageView Double) = Double
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Dimension)
    where type S (Path_ReportImageView Dimension) = ReportImageView
          type A (Path_ReportImageView Dimension) = Dimension
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageCrop)
    where type S (Path_ReportImageView ImageCrop) = ReportImageView
          type A (Path_ReportImageView ImageCrop) = ImageCrop
          toLens (Path_ReportImageView__picCrop _x) = lens_ReportImageView__picCrop
instance ToLens (Path_ReportImageView ImageSize)
    where type S (Path_ReportImageView ImageSize) = ReportImageView
          type A (Path_ReportImageView ImageSize) = ImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView Units)
    where type S (Path_ReportImageView Units) = ReportImageView
          type A (Path_ReportImageView Units) = Units
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
instance ToLens (Path_ReportImageView ImageFile)
    where type S (Path_ReportImageView ImageFile) = ReportImageView
          type A (Path_ReportImageView ImageFile) = ImageFile
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView JSONText)
    where type S (Path_ReportImageView JSONText) = ReportImageView
          type A (Path_ReportImageView JSONText) = JSONText
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize . toLens _x
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated . toLens _x
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated . toLens _x
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated . toLens _x
          toLens (Path_ReportImageView__picMustEnlarge _x) = lens_ReportImageView__picMustEnlarge . toLens _x
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated . toLens _x
instance ToLens (Path_ReportImageView Markup)
    where type S (Path_ReportImageView Markup) = ReportImageView
          type A (Path_ReportImageView Markup) = Markup
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption
instance ToLens (Path_ReportImageView EUI)
    where type S (Path_ReportImageView EUI) = ReportImageView
          type A (Path_ReportImageView EUI) = EUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView MEUI)
    where type S (Path_ReportImageView MEUI) = ReportImageView
          type A (Path_ReportImageView MEUI) = MEUI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal
instance ToLens (Path_ReportImageView MaybeImageFile)
    where type S (Path_ReportImageView MaybeImageFile) = ReportImageView
          type A (Path_ReportImageView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportImageView__picEditedDeprecated _x) = lens_ReportImageView__picEditedDeprecated
          toLens (Path_ReportImageView__picThumbDeprecated _x) = lens_ReportImageView__picThumbDeprecated
          toLens (Path_ReportImageView__picPrinterDeprecated _x) = lens_ReportImageView__picPrinterDeprecated
          toLens (Path_ReportImageView__picEnlargedDeprecated _x) = lens_ReportImageView__picEnlargedDeprecated
instance ToLens (Path_ReportImageView ReportImageView)
    where type S (Path_ReportImageView ReportImageView) = ReportImageView
          type A (Path_ReportImageView ReportImageView) = ReportImageView
          toLens _ = id
instance ToLens (Path_ReportImageView SaneSizeImageSize)
    where type S (Path_ReportImageView SaneSizeImageSize) = ReportImageView
          type A (Path_ReportImageView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportImageView__picSize _x) = lens_ReportImageView__picSize
instance ToLens (Path_ReportImageView URI)
    where type S (Path_ReportImageView URI) = ReportImageView
          type A (Path_ReportImageView URI) = URI
          toLens (Path_ReportImageView__picOriginal _x) = lens_ReportImageView__picOriginal . toLens _x
instance ToLens (Path_ReportImageView Text)
    where type S (Path_ReportImageView Text) = ReportImageView
          type A (Path_ReportImageView Text) = Text
          toLens (Path_ReportImageView__picCaption _x) = lens_ReportImageView__picCaption . toLens _x
data Path_ReportView a
    = Path_ReportView__reportFolder (Path_ReadOnlyFilePath a)
    | Path_ReportView__reportName (Path_Markup a)
    | Path_ReportView__reportDate (Path_Markup a)
    | Path_ReportView__reportContractDate (Path_Markup a)
    | Path_ReportView__reportInspectionDate (Path_Markup a)
    | Path_ReportView__reportEffectiveDate (Path_Markup a)
    | Path_ReportView__reportAuthors (Path_Authors a)
    | Path_ReportView__reportPreparer (Path_Markup a)
    | Path_ReportView__reportPreparerEIN (Path_Markup a)
    | Path_ReportView__reportPreparerAddress (Path_Markup a)
    | Path_ReportView__reportPreparerEMail (Path_Markup a)
    | Path_ReportView__reportPreparerWebsite (Path_Markup a)
    | Path_ReportView__reportAbbrevs (Path_AbbrevPairs a)
    | Path_ReportView__reportTitle (Path_Markup a)
    | Path_ReportView__reportHeader (Path_Markup a)
    | Path_ReportView__reportFooter (Path_Markup a)
    | Path_ReportView__reportIntendedUse (Path_MaybeReportIntendedUse a)
    | Path_ReportView__reportValueTypeInfo (Path_ReportValueTypeInfo a)
    | Path_ReportView__reportValueApproachInfo (Path_ReportValueApproachInfo a)
    | Path_ReportView__reportClientName (Path_Markup a)
    | Path_ReportView__reportClientAddress (Path_Markup a)
    | Path_ReportView__reportClientGreeting (Path_Markup a)
    | Path_ReportView__reportItemsOwnerFull (Path_Markup a)
    | Path_ReportView__reportItemsOwner (Path_Markup a)
    | Path_ReportView__reportBriefItems (Path_Markup a)
    | Path_ReportView__reportInspectionLocation (Path_Markup a)
    | Path_ReportView__reportBody (Path_ReportElems a)
    | Path_ReportView__reportGlossary (Path_MarkupPairs a)
    | Path_ReportView__reportSources (Path_MarkupPairs a)
    | Path_ReportView__reportLetterOfTransmittal (Path_Markup a)
    | Path_ReportView__reportScopeOfWork (Path_Markup a)
    | Path_ReportView__reportCertification (Path_Markups a)
    | Path_ReportView__reportLimitingConditions (Path_Markups a)
    | Path_ReportView__reportPrivacyPolicy (Path_Markup a)
    | Path_ReportView__reportPerms (Path_Permissions a)
    | Path_ReportView__reportRevision (Path_Integer a)
    | Path_ReportView__reportCreated (Path_EpochMilli a)
    | Path_ReportView__reportBranding (Path_Branding a)
    | Path_ReportView__reportStatus (Path_ReportStatus a)
    | Path_ReportView__reportRedacted (Path_Bool a)
    | Path_ReportView__reportFlags (Path_ReportFlags a)
    | Path_ReportView__reportUUID (Path_UUID a)
    | Path_ReportView__reportOrderByItemName (Path_Bool a)
    | Path_ReportView__reportDisplayItemName (Path_Bool a)
    | Path_ReportView__reportStandardsVersion (Path_ReportStandard a)
    | Path_ReportView
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_ReportView a)
    where idPath = Path_ReportView
class HasReportView c
    where lens_reportView :: Lens' c ReportView
          lens_ReportView__reportAbbrevs :: forall . Lens' c AbbrevPairs
          lens_ReportView__reportAbbrevs = (.) lens_reportView lens_ReportView__reportAbbrevs
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors :: forall . Lens' c Authors
          lens_ReportView__reportAuthors = (.) lens_reportView lens_ReportView__reportAuthors
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody :: forall . Lens' c ReportElems
          lens_ReportView__reportBody = (.) lens_reportView lens_ReportView__reportBody
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding :: forall . Lens' c Branding
          lens_ReportView__reportBranding = (.) lens_reportView lens_ReportView__reportBranding
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems :: forall . Lens' c Markup
          lens_ReportView__reportBriefItems = (.) lens_reportView lens_ReportView__reportBriefItems
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification :: forall . Lens' c Markups
          lens_ReportView__reportCertification = (.) lens_reportView lens_ReportView__reportCertification
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress :: forall . Lens' c Markup
          lens_ReportView__reportClientAddress = (.) lens_reportView lens_ReportView__reportClientAddress
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting :: forall . Lens' c Markup
          lens_ReportView__reportClientGreeting = (.) lens_reportView lens_ReportView__reportClientGreeting
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName :: forall . Lens' c Markup
          lens_ReportView__reportClientName = (.) lens_reportView lens_ReportView__reportClientName
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate :: forall . Lens' c Markup
          lens_ReportView__reportContractDate = (.) lens_reportView lens_ReportView__reportContractDate
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated :: forall . Lens' c EpochMilli
          lens_ReportView__reportCreated = (.) lens_reportView lens_ReportView__reportCreated
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate :: forall . Lens' c Markup
          lens_ReportView__reportDate = (.) lens_reportView lens_ReportView__reportDate
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName :: forall . Lens' c Bool
          lens_ReportView__reportDisplayItemName = (.) lens_reportView lens_ReportView__reportDisplayItemName
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate :: forall . Lens' c Markup
          lens_ReportView__reportEffectiveDate = (.) lens_reportView lens_ReportView__reportEffectiveDate
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags :: forall . Lens' c ReportFlags
          lens_ReportView__reportFlags = (.) lens_reportView lens_ReportView__reportFlags
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder :: forall . Lens' c ReadOnlyFilePath
          lens_ReportView__reportFolder = (.) lens_reportView lens_ReportView__reportFolder
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter :: forall . Lens' c Markup
          lens_ReportView__reportFooter = (.) lens_reportView lens_ReportView__reportFooter
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary :: forall . Lens' c MarkupPairs
          lens_ReportView__reportGlossary = (.) lens_reportView lens_ReportView__reportGlossary
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader :: forall . Lens' c Markup
          lens_ReportView__reportHeader = (.) lens_reportView lens_ReportView__reportHeader
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate :: forall . Lens' c Markup
          lens_ReportView__reportInspectionDate = (.) lens_reportView lens_ReportView__reportInspectionDate
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation :: forall . Lens' c Markup
          lens_ReportView__reportInspectionLocation = (.) lens_reportView lens_ReportView__reportInspectionLocation
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse :: forall . Lens' c MaybeReportIntendedUse
          lens_ReportView__reportIntendedUse = (.) lens_reportView lens_ReportView__reportIntendedUse
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwner = (.) lens_reportView lens_ReportView__reportItemsOwner
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull :: forall . Lens' c Markup
          lens_ReportView__reportItemsOwnerFull = (.) lens_reportView lens_ReportView__reportItemsOwnerFull
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal :: forall . Lens' c Markup
          lens_ReportView__reportLetterOfTransmittal = (.) lens_reportView lens_ReportView__reportLetterOfTransmittal
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions :: forall . Lens' c Markups
          lens_ReportView__reportLimitingConditions = (.) lens_reportView lens_ReportView__reportLimitingConditions
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName :: forall . Lens' c Markup
          lens_ReportView__reportName = (.) lens_reportView lens_ReportView__reportName
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName :: forall . Lens' c Bool
          lens_ReportView__reportOrderByItemName = (.) lens_reportView lens_ReportView__reportOrderByItemName
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms :: forall . Lens' c Permissions
          lens_ReportView__reportPerms = (.) lens_reportView lens_ReportView__reportPerms
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer :: forall . Lens' c Markup
          lens_ReportView__reportPreparer = (.) lens_reportView lens_ReportView__reportPreparer
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress :: forall . Lens' c Markup
          lens_ReportView__reportPreparerAddress = (.) lens_reportView lens_ReportView__reportPreparerAddress
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEIN = (.) lens_reportView lens_ReportView__reportPreparerEIN
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail :: forall . Lens' c Markup
          lens_ReportView__reportPreparerEMail = (.) lens_reportView lens_ReportView__reportPreparerEMail
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite :: forall . Lens' c Markup
          lens_ReportView__reportPreparerWebsite = (.) lens_reportView lens_ReportView__reportPreparerWebsite
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy :: forall . Lens' c Markup
          lens_ReportView__reportPrivacyPolicy = (.) lens_reportView lens_ReportView__reportPrivacyPolicy
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted :: forall . Lens' c Bool
          lens_ReportView__reportRedacted = (.) lens_reportView lens_ReportView__reportRedacted
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision :: forall . Lens' c Integer
          lens_ReportView__reportRevision = (.) lens_reportView lens_ReportView__reportRevision
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork :: forall . Lens' c Markup
          lens_ReportView__reportScopeOfWork = (.) lens_reportView lens_ReportView__reportScopeOfWork
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources :: forall . Lens' c MarkupPairs
          lens_ReportView__reportSources = (.) lens_reportView lens_ReportView__reportSources
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion :: forall . Lens' c ReportStandard
          lens_ReportView__reportStandardsVersion = (.) lens_reportView lens_ReportView__reportStandardsVersion
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus :: forall . Lens' c ReportStatus
          lens_ReportView__reportStatus = (.) lens_reportView lens_ReportView__reportStatus
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle :: forall . Lens' c Markup
          lens_ReportView__reportTitle = (.) lens_reportView lens_ReportView__reportTitle
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID :: forall . Lens' c UUID
          lens_ReportView__reportUUID = (.) lens_reportView lens_ReportView__reportUUID
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo :: forall . Lens' c ReportValueApproachInfo
          lens_ReportView__reportValueApproachInfo = (.) lens_reportView lens_ReportView__reportValueApproachInfo
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo :: forall . Lens' c ReportValueTypeInfo
          lens_ReportView__reportValueTypeInfo = (.) lens_reportView lens_ReportView__reportValueTypeInfo
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance HasReportView ReportView
    where lens_reportView = id
          lens_ReportView__reportAbbrevs f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 y1 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x13)
          {-# INLINE lens_ReportView__reportAbbrevs #-}
          lens_ReportView__reportAuthors f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 y1 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x7)
          {-# INLINE lens_ReportView__reportAuthors #-}
          lens_ReportView__reportBody f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 y1 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x27)
          {-# INLINE lens_ReportView__reportBody #-}
          lens_ReportView__reportBranding f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 y1 x39 x40 x41 x42 x43 x44 x45) (f x38)
          {-# INLINE lens_ReportView__reportBranding #-}
          lens_ReportView__reportBriefItems f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 y1 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x25)
          {-# INLINE lens_ReportView__reportBriefItems #-}
          lens_ReportView__reportCertification f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 y1 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x32)
          {-# INLINE lens_ReportView__reportCertification #-}
          lens_ReportView__reportClientAddress f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 y1 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x21)
          {-# INLINE lens_ReportView__reportClientAddress #-}
          lens_ReportView__reportClientGreeting f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 y1 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x22)
          {-# INLINE lens_ReportView__reportClientGreeting #-}
          lens_ReportView__reportClientName f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 y1 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x20)
          {-# INLINE lens_ReportView__reportClientName #-}
          lens_ReportView__reportContractDate f (ReportView x1
                                                            x2
                                                            x3
                                                            x4
                                                            x5
                                                            x6
                                                            x7
                                                            x8
                                                            x9
                                                            x10
                                                            x11
                                                            x12
                                                            x13
                                                            x14
                                                            x15
                                                            x16
                                                            x17
                                                            x18
                                                            x19
                                                            x20
                                                            x21
                                                            x22
                                                            x23
                                                            x24
                                                            x25
                                                            x26
                                                            x27
                                                            x28
                                                            x29
                                                            x30
                                                            x31
                                                            x32
                                                            x33
                                                            x34
                                                            x35
                                                            x36
                                                            x37
                                                            x38
                                                            x39
                                                            x40
                                                            x41
                                                            x42
                                                            x43
                                                            x44
                                                            x45) = fmap (\y1 -> ReportView x1 x2 x3 y1 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x4)
          {-# INLINE lens_ReportView__reportContractDate #-}
          lens_ReportView__reportCreated f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 y1 x38 x39 x40 x41 x42 x43 x44 x45) (f x37)
          {-# INLINE lens_ReportView__reportCreated #-}
          lens_ReportView__reportDate f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 y1 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x3)
          {-# INLINE lens_ReportView__reportDate #-}
          lens_ReportView__reportDisplayItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 y1 x45) (f x44)
          {-# INLINE lens_ReportView__reportDisplayItemName #-}
          lens_ReportView__reportEffectiveDate f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 y1 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x6)
          {-# INLINE lens_ReportView__reportEffectiveDate #-}
          lens_ReportView__reportFlags f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 y1 x42 x43 x44 x45) (f x41)
          {-# INLINE lens_ReportView__reportFlags #-}
          lens_ReportView__reportFolder f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView y1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x1)
          {-# INLINE lens_ReportView__reportFolder #-}
          lens_ReportView__reportFooter f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 y1 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x16)
          {-# INLINE lens_ReportView__reportFooter #-}
          lens_ReportView__reportGlossary f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 y1 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x28)
          {-# INLINE lens_ReportView__reportGlossary #-}
          lens_ReportView__reportHeader f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 y1 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x15)
          {-# INLINE lens_ReportView__reportHeader #-}
          lens_ReportView__reportInspectionDate f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 y1 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x5)
          {-# INLINE lens_ReportView__reportInspectionDate #-}
          lens_ReportView__reportInspectionLocation f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 y1 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x26)
          {-# INLINE lens_ReportView__reportInspectionLocation #-}
          lens_ReportView__reportIntendedUse f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 y1 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x17)
          {-# INLINE lens_ReportView__reportIntendedUse #-}
          lens_ReportView__reportItemsOwner f (ReportView x1
                                                          x2
                                                          x3
                                                          x4
                                                          x5
                                                          x6
                                                          x7
                                                          x8
                                                          x9
                                                          x10
                                                          x11
                                                          x12
                                                          x13
                                                          x14
                                                          x15
                                                          x16
                                                          x17
                                                          x18
                                                          x19
                                                          x20
                                                          x21
                                                          x22
                                                          x23
                                                          x24
                                                          x25
                                                          x26
                                                          x27
                                                          x28
                                                          x29
                                                          x30
                                                          x31
                                                          x32
                                                          x33
                                                          x34
                                                          x35
                                                          x36
                                                          x37
                                                          x38
                                                          x39
                                                          x40
                                                          x41
                                                          x42
                                                          x43
                                                          x44
                                                          x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 y1 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x24)
          {-# INLINE lens_ReportView__reportItemsOwner #-}
          lens_ReportView__reportItemsOwnerFull f (ReportView x1
                                                              x2
                                                              x3
                                                              x4
                                                              x5
                                                              x6
                                                              x7
                                                              x8
                                                              x9
                                                              x10
                                                              x11
                                                              x12
                                                              x13
                                                              x14
                                                              x15
                                                              x16
                                                              x17
                                                              x18
                                                              x19
                                                              x20
                                                              x21
                                                              x22
                                                              x23
                                                              x24
                                                              x25
                                                              x26
                                                              x27
                                                              x28
                                                              x29
                                                              x30
                                                              x31
                                                              x32
                                                              x33
                                                              x34
                                                              x35
                                                              x36
                                                              x37
                                                              x38
                                                              x39
                                                              x40
                                                              x41
                                                              x42
                                                              x43
                                                              x44
                                                              x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 y1 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x23)
          {-# INLINE lens_ReportView__reportItemsOwnerFull #-}
          lens_ReportView__reportLetterOfTransmittal f (ReportView x1
                                                                   x2
                                                                   x3
                                                                   x4
                                                                   x5
                                                                   x6
                                                                   x7
                                                                   x8
                                                                   x9
                                                                   x10
                                                                   x11
                                                                   x12
                                                                   x13
                                                                   x14
                                                                   x15
                                                                   x16
                                                                   x17
                                                                   x18
                                                                   x19
                                                                   x20
                                                                   x21
                                                                   x22
                                                                   x23
                                                                   x24
                                                                   x25
                                                                   x26
                                                                   x27
                                                                   x28
                                                                   x29
                                                                   x30
                                                                   x31
                                                                   x32
                                                                   x33
                                                                   x34
                                                                   x35
                                                                   x36
                                                                   x37
                                                                   x38
                                                                   x39
                                                                   x40
                                                                   x41
                                                                   x42
                                                                   x43
                                                                   x44
                                                                   x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 y1 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x30)
          {-# INLINE lens_ReportView__reportLetterOfTransmittal #-}
          lens_ReportView__reportLimitingConditions f (ReportView x1
                                                                  x2
                                                                  x3
                                                                  x4
                                                                  x5
                                                                  x6
                                                                  x7
                                                                  x8
                                                                  x9
                                                                  x10
                                                                  x11
                                                                  x12
                                                                  x13
                                                                  x14
                                                                  x15
                                                                  x16
                                                                  x17
                                                                  x18
                                                                  x19
                                                                  x20
                                                                  x21
                                                                  x22
                                                                  x23
                                                                  x24
                                                                  x25
                                                                  x26
                                                                  x27
                                                                  x28
                                                                  x29
                                                                  x30
                                                                  x31
                                                                  x32
                                                                  x33
                                                                  x34
                                                                  x35
                                                                  x36
                                                                  x37
                                                                  x38
                                                                  x39
                                                                  x40
                                                                  x41
                                                                  x42
                                                                  x43
                                                                  x44
                                                                  x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 y1 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x33)
          {-# INLINE lens_ReportView__reportLimitingConditions #-}
          lens_ReportView__reportName f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 y1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x2)
          {-# INLINE lens_ReportView__reportName #-}
          lens_ReportView__reportOrderByItemName f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 y1 x44 x45) (f x43)
          {-# INLINE lens_ReportView__reportOrderByItemName #-}
          lens_ReportView__reportPerms f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 y1 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x35)
          {-# INLINE lens_ReportView__reportPerms #-}
          lens_ReportView__reportPreparer f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 y1 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x8)
          {-# INLINE lens_ReportView__reportPreparer #-}
          lens_ReportView__reportPreparerAddress f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 y1 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x10)
          {-# INLINE lens_ReportView__reportPreparerAddress #-}
          lens_ReportView__reportPreparerEIN f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 y1 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x9)
          {-# INLINE lens_ReportView__reportPreparerEIN #-}
          lens_ReportView__reportPreparerEMail f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 y1 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x11)
          {-# INLINE lens_ReportView__reportPreparerEMail #-}
          lens_ReportView__reportPreparerWebsite f (ReportView x1
                                                               x2
                                                               x3
                                                               x4
                                                               x5
                                                               x6
                                                               x7
                                                               x8
                                                               x9
                                                               x10
                                                               x11
                                                               x12
                                                               x13
                                                               x14
                                                               x15
                                                               x16
                                                               x17
                                                               x18
                                                               x19
                                                               x20
                                                               x21
                                                               x22
                                                               x23
                                                               x24
                                                               x25
                                                               x26
                                                               x27
                                                               x28
                                                               x29
                                                               x30
                                                               x31
                                                               x32
                                                               x33
                                                               x34
                                                               x35
                                                               x36
                                                               x37
                                                               x38
                                                               x39
                                                               x40
                                                               x41
                                                               x42
                                                               x43
                                                               x44
                                                               x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 y1 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x12)
          {-# INLINE lens_ReportView__reportPreparerWebsite #-}
          lens_ReportView__reportPrivacyPolicy f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 y1 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x34)
          {-# INLINE lens_ReportView__reportPrivacyPolicy #-}
          lens_ReportView__reportRedacted f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 y1 x41 x42 x43 x44 x45) (f x40)
          {-# INLINE lens_ReportView__reportRedacted #-}
          lens_ReportView__reportRevision f (ReportView x1
                                                        x2
                                                        x3
                                                        x4
                                                        x5
                                                        x6
                                                        x7
                                                        x8
                                                        x9
                                                        x10
                                                        x11
                                                        x12
                                                        x13
                                                        x14
                                                        x15
                                                        x16
                                                        x17
                                                        x18
                                                        x19
                                                        x20
                                                        x21
                                                        x22
                                                        x23
                                                        x24
                                                        x25
                                                        x26
                                                        x27
                                                        x28
                                                        x29
                                                        x30
                                                        x31
                                                        x32
                                                        x33
                                                        x34
                                                        x35
                                                        x36
                                                        x37
                                                        x38
                                                        x39
                                                        x40
                                                        x41
                                                        x42
                                                        x43
                                                        x44
                                                        x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 y1 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x36)
          {-# INLINE lens_ReportView__reportRevision #-}
          lens_ReportView__reportScopeOfWork f (ReportView x1
                                                           x2
                                                           x3
                                                           x4
                                                           x5
                                                           x6
                                                           x7
                                                           x8
                                                           x9
                                                           x10
                                                           x11
                                                           x12
                                                           x13
                                                           x14
                                                           x15
                                                           x16
                                                           x17
                                                           x18
                                                           x19
                                                           x20
                                                           x21
                                                           x22
                                                           x23
                                                           x24
                                                           x25
                                                           x26
                                                           x27
                                                           x28
                                                           x29
                                                           x30
                                                           x31
                                                           x32
                                                           x33
                                                           x34
                                                           x35
                                                           x36
                                                           x37
                                                           x38
                                                           x39
                                                           x40
                                                           x41
                                                           x42
                                                           x43
                                                           x44
                                                           x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 y1 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x31)
          {-# INLINE lens_ReportView__reportScopeOfWork #-}
          lens_ReportView__reportSources f (ReportView x1
                                                       x2
                                                       x3
                                                       x4
                                                       x5
                                                       x6
                                                       x7
                                                       x8
                                                       x9
                                                       x10
                                                       x11
                                                       x12
                                                       x13
                                                       x14
                                                       x15
                                                       x16
                                                       x17
                                                       x18
                                                       x19
                                                       x20
                                                       x21
                                                       x22
                                                       x23
                                                       x24
                                                       x25
                                                       x26
                                                       x27
                                                       x28
                                                       x29
                                                       x30
                                                       x31
                                                       x32
                                                       x33
                                                       x34
                                                       x35
                                                       x36
                                                       x37
                                                       x38
                                                       x39
                                                       x40
                                                       x41
                                                       x42
                                                       x43
                                                       x44
                                                       x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 y1 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x29)
          {-# INLINE lens_ReportView__reportSources #-}
          lens_ReportView__reportStandardsVersion f (ReportView x1
                                                                x2
                                                                x3
                                                                x4
                                                                x5
                                                                x6
                                                                x7
                                                                x8
                                                                x9
                                                                x10
                                                                x11
                                                                x12
                                                                x13
                                                                x14
                                                                x15
                                                                x16
                                                                x17
                                                                x18
                                                                x19
                                                                x20
                                                                x21
                                                                x22
                                                                x23
                                                                x24
                                                                x25
                                                                x26
                                                                x27
                                                                x28
                                                                x29
                                                                x30
                                                                x31
                                                                x32
                                                                x33
                                                                x34
                                                                x35
                                                                x36
                                                                x37
                                                                x38
                                                                x39
                                                                x40
                                                                x41
                                                                x42
                                                                x43
                                                                x44
                                                                x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 y1) (f x45)
          {-# INLINE lens_ReportView__reportStandardsVersion #-}
          lens_ReportView__reportStatus f (ReportView x1
                                                      x2
                                                      x3
                                                      x4
                                                      x5
                                                      x6
                                                      x7
                                                      x8
                                                      x9
                                                      x10
                                                      x11
                                                      x12
                                                      x13
                                                      x14
                                                      x15
                                                      x16
                                                      x17
                                                      x18
                                                      x19
                                                      x20
                                                      x21
                                                      x22
                                                      x23
                                                      x24
                                                      x25
                                                      x26
                                                      x27
                                                      x28
                                                      x29
                                                      x30
                                                      x31
                                                      x32
                                                      x33
                                                      x34
                                                      x35
                                                      x36
                                                      x37
                                                      x38
                                                      x39
                                                      x40
                                                      x41
                                                      x42
                                                      x43
                                                      x44
                                                      x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 y1 x40 x41 x42 x43 x44 x45) (f x39)
          {-# INLINE lens_ReportView__reportStatus #-}
          lens_ReportView__reportTitle f (ReportView x1
                                                     x2
                                                     x3
                                                     x4
                                                     x5
                                                     x6
                                                     x7
                                                     x8
                                                     x9
                                                     x10
                                                     x11
                                                     x12
                                                     x13
                                                     x14
                                                     x15
                                                     x16
                                                     x17
                                                     x18
                                                     x19
                                                     x20
                                                     x21
                                                     x22
                                                     x23
                                                     x24
                                                     x25
                                                     x26
                                                     x27
                                                     x28
                                                     x29
                                                     x30
                                                     x31
                                                     x32
                                                     x33
                                                     x34
                                                     x35
                                                     x36
                                                     x37
                                                     x38
                                                     x39
                                                     x40
                                                     x41
                                                     x42
                                                     x43
                                                     x44
                                                     x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 y1 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x14)
          {-# INLINE lens_ReportView__reportTitle #-}
          lens_ReportView__reportUUID f (ReportView x1
                                                    x2
                                                    x3
                                                    x4
                                                    x5
                                                    x6
                                                    x7
                                                    x8
                                                    x9
                                                    x10
                                                    x11
                                                    x12
                                                    x13
                                                    x14
                                                    x15
                                                    x16
                                                    x17
                                                    x18
                                                    x19
                                                    x20
                                                    x21
                                                    x22
                                                    x23
                                                    x24
                                                    x25
                                                    x26
                                                    x27
                                                    x28
                                                    x29
                                                    x30
                                                    x31
                                                    x32
                                                    x33
                                                    x34
                                                    x35
                                                    x36
                                                    x37
                                                    x38
                                                    x39
                                                    x40
                                                    x41
                                                    x42
                                                    x43
                                                    x44
                                                    x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 y1 x43 x44 x45) (f x42)
          {-# INLINE lens_ReportView__reportUUID #-}
          lens_ReportView__reportValueApproachInfo f (ReportView x1
                                                                 x2
                                                                 x3
                                                                 x4
                                                                 x5
                                                                 x6
                                                                 x7
                                                                 x8
                                                                 x9
                                                                 x10
                                                                 x11
                                                                 x12
                                                                 x13
                                                                 x14
                                                                 x15
                                                                 x16
                                                                 x17
                                                                 x18
                                                                 x19
                                                                 x20
                                                                 x21
                                                                 x22
                                                                 x23
                                                                 x24
                                                                 x25
                                                                 x26
                                                                 x27
                                                                 x28
                                                                 x29
                                                                 x30
                                                                 x31
                                                                 x32
                                                                 x33
                                                                 x34
                                                                 x35
                                                                 x36
                                                                 x37
                                                                 x38
                                                                 x39
                                                                 x40
                                                                 x41
                                                                 x42
                                                                 x43
                                                                 x44
                                                                 x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 y1 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x19)
          {-# INLINE lens_ReportView__reportValueApproachInfo #-}
          lens_ReportView__reportValueTypeInfo f (ReportView x1
                                                             x2
                                                             x3
                                                             x4
                                                             x5
                                                             x6
                                                             x7
                                                             x8
                                                             x9
                                                             x10
                                                             x11
                                                             x12
                                                             x13
                                                             x14
                                                             x15
                                                             x16
                                                             x17
                                                             x18
                                                             x19
                                                             x20
                                                             x21
                                                             x22
                                                             x23
                                                             x24
                                                             x25
                                                             x26
                                                             x27
                                                             x28
                                                             x29
                                                             x30
                                                             x31
                                                             x32
                                                             x33
                                                             x34
                                                             x35
                                                             x36
                                                             x37
                                                             x38
                                                             x39
                                                             x40
                                                             x41
                                                             x42
                                                             x43
                                                             x44
                                                             x45) = fmap (\y1 -> ReportView x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 y1 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45) (f x18)
          {-# INLINE lens_ReportView__reportValueTypeInfo #-}
instance Paths ReportView String
    where type FromTo ReportView String = Path_ReportView String
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
instance Paths ReportView Int64
    where type FromTo ReportView Int64 = Path_ReportView Int64
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: EpochMilli) _g)) [(Path_ReportView__reportCreated, _reportCreated _s)]
instance Paths ReportView Int
    where type FromTo ReportView Int = Path_ReportView Int
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStandard) _g)) [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion _s)]
instance Paths ReportView Bool
    where type FromTo ReportView Bool = Path_ReportView Bool
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
instance Paths ReportView Double
    where type FromTo ReportView Double = Path_ReportView Double
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView Dimension
    where type FromTo ReportView Dimension = Path_ReportView Dimension
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ImageCrop
    where type FromTo ReportView ImageCrop = Path_ReportView ImageCrop
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ImageSize
    where type FromTo ReportView ImageSize = Path_ReportView ImageSize
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView Units
    where type FromTo ReportView Units = Path_ReportView Units
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ImageFile
    where type FromTo ReportView ImageFile = Path_ReportView ImageFile
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView Integer
    where type FromTo ReportView Integer = Path_ReportView Integer
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Integer) _g)) [(Path_ReportView__reportRevision, _reportRevision _s)]
instance Paths ReportView JSONText
    where type FromTo ReportView JSONText = Path_ReportView JSONText
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportRedacted, _reportRedacted _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportOrderByItemName, _reportOrderByItemName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Bool) _g)) [(Path_ReportView__reportDisplayItemName, _reportDisplayItemName _s)]]
instance Paths ReportView Markup
    where type FromTo ReportView Markup = Path_ReportView Markup
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)]]
instance Paths ReportView Permissions
    where type FromTo ReportView Permissions = Path_ReportView Permissions
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
instance Paths ReportView UserIds
    where type FromTo ReportView UserIds = Path_ReportView UserIds
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
instance Paths ReportView AbbrevPair
    where type FromTo ReportView AbbrevPair = Path_ReportView AbbrevPair
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
instance Paths ReportView AbbrevPairs
    where type FromTo ReportView AbbrevPairs = Path_ReportView AbbrevPairs
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
instance Paths ReportView Author
    where type FromTo ReportView Author = Path_ReportView Author
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)]
instance Paths ReportView Authors
    where type FromTo ReportView Authors = Path_ReportView Authors
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)]
instance Paths ReportView Branding
    where type FromTo ReportView Branding = Path_ReportView Branding
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)]
instance Paths ReportView MarkupPair
    where type FromTo ReportView MarkupPair = Path_ReportView MarkupPair
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)]]
instance Paths ReportView MarkupPairs
    where type FromTo ReportView MarkupPairs = Path_ReportView MarkupPairs
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)]]
instance Paths ReportView Markups
    where type FromTo ReportView Markups = Path_ReportView Markups
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)]]
instance Paths ReportView MaybeReportIntendedUse
    where type FromTo ReportView MaybeReportIntendedUse = Path_ReportView MaybeReportIntendedUse
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MaybeReportIntendedUse) _g)) [(Path_ReportView__reportIntendedUse, _reportIntendedUse _s)]
instance Paths ReportView ReportElem
    where type FromTo ReportView ReportElem = Path_ReportView ReportElem
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReportElems
    where type FromTo ReportView ReportElems = Path_ReportView ReportElems
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReportFlags
    where type FromTo ReportView ReportFlags = Path_ReportView ReportFlags
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportFlags) _g)) [(Path_ReportView__reportFlags, _reportFlags _s)]
instance Paths ReportView ReportStandard
    where type FromTo ReportView ReportStandard = Path_ReportView ReportStandard
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStandard) _g)) [(Path_ReportView__reportStandardsVersion, _reportStandardsVersion _s)]
instance Paths ReportView ReportStatus
    where type FromTo ReportView ReportStatus = Path_ReportView ReportStatus
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportStatus) _g)) [(Path_ReportView__reportStatus, _reportStatus _s)]
instance Paths ReportView ReportValueApproachInfo
    where type FromTo ReportView ReportValueApproachInfo = Path_ReportView ReportValueApproachInfo
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo,
                                                                                                                     _reportValueApproachInfo _s)]
instance Paths ReportView ReportValueTypeInfo
    where type FromTo ReportView ReportValueTypeInfo = Path_ReportView ReportValueTypeInfo
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)]
instance Paths ReportView EUI
    where type FromTo ReportView EUI = Path_ReportView EUI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView MEUI
    where type FromTo ReportView MEUI = Path_ReportView MEUI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView MaybeImageFile
    where type FromTo ReportView MaybeImageFile = Path_ReportView MaybeImageFile
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReportImage
    where type FromTo ReportView ReportImage = Path_ReportView ReportImage
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReportImages
    where type FromTo ReportView ReportImages = Path_ReportView ReportImages
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReadOnlyFilePath
    where type FromTo ReportView ReadOnlyFilePath = Path_ReportView ReadOnlyFilePath
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReadOnlyFilePath) _g)) [(Path_ReportView__reportFolder, _reportFolder _s)]
instance Paths ReportView ReportImageView
    where type FromTo ReportView ReportImageView = Path_ReportView ReportImageView
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView ReportView
    where type FromTo ReportView ReportView = Path_ReportView ReportView
          paths _ _ = [idPath]
instance Paths ReportView SaneSizeImageSize
    where type FromTo ReportView SaneSizeImageSize = Path_ReportView SaneSizeImageSize
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView Item
    where type FromTo ReportView Item = Path_ReportView Item
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView MIM
    where type FromTo ReportView MIM = Path_ReportView MIM
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView CIString
    where type FromTo ReportView CIString = Path_ReportView CIString
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)]
instance Paths ReportView URI
    where type FromTo ReportView URI = Path_ReportView URI
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)]
instance Paths ReportView Text
    where type FromTo ReportView Text = Path_ReportView Text
          paths (_s@(ReportView {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportName, _reportName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportDate, _reportDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportContractDate, _reportContractDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionDate, _reportInspectionDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportEffectiveDate, _reportEffectiveDate _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Authors) _g)) [(Path_ReportView__reportAuthors, _reportAuthors _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparer, _reportPreparer _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEIN, _reportPreparerEIN _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerAddress, _reportPreparerAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerEMail, _reportPreparerEMail _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPreparerWebsite, _reportPreparerWebsite _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: AbbrevPairs) _g)) [(Path_ReportView__reportAbbrevs, _reportAbbrevs _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportTitle, _reportTitle _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportHeader, _reportHeader _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportFooter, _reportFooter _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueTypeInfo) _g)) [(Path_ReportView__reportValueTypeInfo, _reportValueTypeInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportValueApproachInfo) _g)) [(Path_ReportView__reportValueApproachInfo, _reportValueApproachInfo _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientName, _reportClientName _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientAddress, _reportClientAddress _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportClientGreeting, _reportClientGreeting _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwnerFull, _reportItemsOwnerFull _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportItemsOwner, _reportItemsOwner _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportBriefItems, _reportBriefItems _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportInspectionLocation, _reportInspectionLocation _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: ReportElems) _g)) [(Path_ReportView__reportBody, _reportBody _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportGlossary, _reportGlossary _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: MarkupPairs) _g)) [(Path_ReportView__reportSources, _reportSources _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportLetterOfTransmittal, _reportLetterOfTransmittal _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportScopeOfWork, _reportScopeOfWork _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportCertification, _reportCertification _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markups) _g)) [(Path_ReportView__reportLimitingConditions, _reportLimitingConditions _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) [(Path_ReportView__reportPrivacyPolicy, _reportPrivacyPolicy _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)],
                                                   concatMap (\(p, a') -> map p (paths (a' :: Branding) _g)) [(Path_ReportView__reportBranding, _reportBranding _s)]]
instance Paths ReportView UserId
    where type FromTo ReportView UserId = Path_ReportView UserId
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: Permissions) _g)) [(Path_ReportView__reportPerms, _reportPerms _s)]
instance Paths ReportView UUID
    where type FromTo ReportView UUID = Path_ReportView UUID
          paths (_s@(ReportView {})) _g = concatMap (\(p, a') -> map p (paths (a' :: UUID) _g)) [(Path_ReportView__reportUUID, _reportUUID _s)]
instance PathStart ReportView
    where data Peek ReportView
              = Peek_ReportView_String (FromTo ReportView ([Char])) (Maybe ([Char]))
              | Peek_ReportView_Int64 (FromTo ReportView Int64) (Maybe Int64)
              | Peek_ReportView_Int (FromTo ReportView Int) (Maybe Int)
              | Peek_ReportView_Bool (FromTo ReportView Bool) (Maybe Bool)
              | Peek_ReportView_Double (FromTo ReportView Double) (Maybe Double)
              | Peek_ReportView_Dimension (FromTo ReportView Dimension) (Maybe Dimension)
              | Peek_ReportView_ImageCrop (FromTo ReportView ImageCrop) (Maybe ImageCrop)
              | Peek_ReportView_ImageSize (FromTo ReportView ImageSize) (Maybe ImageSize)
              | Peek_ReportView_Units (FromTo ReportView Units) (Maybe Units)
              | Peek_ReportView_ImageFile (FromTo ReportView ImageFile) (Maybe ImageFile)
              | Peek_ReportView_Integer (FromTo ReportView Integer) (Maybe Integer)
              | Peek_ReportView_JSONText (FromTo ReportView JSONText) (Maybe JSONText)
              | Peek_ReportView_Markup (FromTo ReportView Markup) (Maybe Markup)
              | Peek_ReportView_Permissions (FromTo ReportView Permissions) (Maybe Permissions)
              | Peek_ReportView_UserIds (FromTo ReportView ([UserId])) (Maybe ([UserId]))
              | Peek_ReportView_AbbrevPair (FromTo ReportView ((CIString, Markup))) (Maybe ((CIString, Markup)))
              | Peek_ReportView_AbbrevPairs (FromTo ReportView (Order AbbrevPairID ((CIString, Markup)))) (Maybe (Order AbbrevPairID ((CIString, Markup))))
              | Peek_ReportView_Author (FromTo ReportView Author) (Maybe Author)
              | Peek_ReportView_Authors (FromTo ReportView (Order AuthorID Author)) (Maybe (Order AuthorID Author))
              | Peek_ReportView_Branding (FromTo ReportView Branding) (Maybe Branding)
              | Peek_ReportView_MarkupPair (FromTo ReportView ((Markup, Markup))) (Maybe ((Markup, Markup)))
              | Peek_ReportView_MarkupPairs (FromTo ReportView (Order MarkupPairID ((Markup, Markup)))) (Maybe (Order MarkupPairID ((Markup, Markup))))
              | Peek_ReportView_Markups (FromTo ReportView (Order MarkupID Markup)) (Maybe (Order MarkupID Markup))
              | Peek_ReportView_MaybeReportIntendedUse (FromTo ReportView (Maybe ReportIntendedUse)) (Maybe (Maybe ReportIntendedUse))
              | Peek_ReportView_ReportElem (FromTo ReportView ReportElem) (Maybe ReportElem)
              | Peek_ReportView_ReportElems (FromTo ReportView (Order ReportElemID ReportElem)) (Maybe (Order ReportElemID ReportElem))
              | Peek_ReportView_ReportFlags (FromTo ReportView ReportFlags) (Maybe ReportFlags)
              | Peek_ReportView_ReportStandard (FromTo ReportView ReportStandard) (Maybe ReportStandard)
              | Peek_ReportView_ReportStatus (FromTo ReportView ReportStatus) (Maybe ReportStatus)
              | Peek_ReportView_ReportValueApproachInfo (FromTo ReportView ReportValueApproachInfo) (Maybe ReportValueApproachInfo)
              | Peek_ReportView_ReportValueTypeInfo (FromTo ReportView ReportValueTypeInfo) (Maybe ReportValueTypeInfo)
              | Peek_ReportView_EUI (FromTo ReportView (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_ReportView_MEUI (FromTo ReportView (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_ReportView_MaybeImageFile (FromTo ReportView (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_ReportView_ReportImage (FromTo ReportView ReportImage) (Maybe ReportImage)
              | Peek_ReportView_ReportImages (FromTo ReportView (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_ReportView_ReadOnlyFilePath (FromTo ReportView (ReadOnly ([Char]))) (Maybe (ReadOnly ([Char])))
              | Peek_ReportView_ReportImageView (FromTo ReportView ReportImageView) (Maybe ReportImageView)
              | Peek_ReportView_ReportView (FromTo ReportView ReportView) (Maybe ReportView)
              | Peek_ReportView_SaneSizeImageSize (FromTo ReportView (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_ReportView_Item (FromTo ReportView Item) (Maybe Item)
              | Peek_ReportView_MIM (FromTo ReportView (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_ReportView_CIString (FromTo ReportView CIString) (Maybe CIString)
              | Peek_ReportView_URI (FromTo ReportView URI) (Maybe URI)
              | Peek_ReportView_Text (FromTo ReportView Text) (Maybe Text)
              | Peek_ReportView_UserId (FromTo ReportView UserId) (Maybe UserId)
              | Peek_ReportView_UUID (FromTo ReportView UUID) (Maybe UUID)
              deriving (Eq, Show)
          peek (_s@(ReportView {})) = mconcat [concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportFolder _wp) -> map (\a -> let f = peek a
                                                                                                                             in let liftPeek (Peek_ReadOnlyFilePath_String q z) = Peek_ReportView_String (Path_ReportView__reportFolder q) z
                                                                                                                                    liftPeek (Peek_ReadOnlyFilePath_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportFolder q) z
                                                                                                                                    liftPeek (Peek_ReadOnlyFilePath_ReadOnlyFilePath q
                                                                                                                                                                                     z) = Peek_ReportView_ReadOnlyFilePath (Path_ReportView__reportFolder q) z
                                                                                                                                 in Node (Peek_ReportView_ReadOnlyFilePath _pp (if null f
                                                                                                                                                                                 then Just a
                                                                                                                                                                                 else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReadOnly ([Char])])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (ReadOnly ([Char])))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportName _wp) -> map (\a -> let f = peek a
                                                                                                                           in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportName q) z
                                                                                                                                  liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportName q) z
                                                                                                                                  liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportName q) z
                                                                                                                               in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                     then Just a
                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportDate _wp) -> map (\a -> let f = peek a
                                                                                                                           in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportDate q) z
                                                                                                                                  liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportDate q) z
                                                                                                                                  liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportDate q) z
                                                                                                                               in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                     then Just a
                                                                                                                                                                     else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportContractDate _wp) -> map (\a -> let f = peek a
                                                                                                                                   in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportContractDate q) z
                                                                                                                                          liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportContractDate q) z
                                                                                                                                          liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportContractDate q) z
                                                                                                                                       in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> let f = peek a
                                                                                                                                     in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportInspectionDate q) z
                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportInspectionDate q) z
                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportInspectionDate q) z
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                               then Just a
                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportEffectiveDate q) z
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportAuthors _wp) -> map (\a -> let f = peek a
                                                                                                                              in let liftPeek (Peek_Authors_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportAuthors q) z
                                                                                                                                     liftPeek (Peek_Authors_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportAuthors q) z
                                                                                                                                     liftPeek (Peek_Authors_Author q z) = Peek_ReportView_Author (Path_ReportView__reportAuthors q) z
                                                                                                                                     liftPeek (Peek_Authors_Authors q z) = Peek_ReportView_Authors (Path_ReportView__reportAuthors q) z
                                                                                                                                     liftPeek (Peek_Authors_Text q z) = Peek_ReportView_Text (Path_ReportView__reportAuthors q) z
                                                                                                                                  in Node (Peek_ReportView_Authors _pp (if null f
                                                                                                                                                                         then Just a
                                                                                                                                                                         else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order AuthorID
                                                                                                                                                                                                                                                    Author])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order AuthorID Author))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPreparer _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparer q) z
                                                                                                                                      liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPreparer q) z
                                                                                                                                      liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPreparer q) z
                                                                                                                                   in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                         then Just a
                                                                                                                                                                         else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> let f = peek a
                                                                                                                                  in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                         liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                         liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPreparerEIN q) z
                                                                                                                                      in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> let f = peek a
                                                                                                                                      in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                             liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                             liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPreparerAddress q) z
                                                                                                                                          in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                then Just a
                                                                                                                                                                                else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPreparerEMail q) z
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> let f = peek a
                                                                                                                                      in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                             liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                             liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPreparerWebsite q) z
                                                                                                                                          in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                then Just a
                                                                                                                                                                                else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> let f = peek a
                                                                                                                              in let liftPeek (Peek_AbbrevPairs_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportAbbrevs q) z
                                                                                                                                     liftPeek (Peek_AbbrevPairs_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportAbbrevs q) z
                                                                                                                                     liftPeek (Peek_AbbrevPairs_AbbrevPair q z) = Peek_ReportView_AbbrevPair (Path_ReportView__reportAbbrevs q) z
                                                                                                                                     liftPeek (Peek_AbbrevPairs_AbbrevPairs q z) = Peek_ReportView_AbbrevPairs (Path_ReportView__reportAbbrevs q) z
                                                                                                                                     liftPeek (Peek_AbbrevPairs_CIString q z) = Peek_ReportView_CIString (Path_ReportView__reportAbbrevs q) z
                                                                                                                                     liftPeek (Peek_AbbrevPairs_Text q z) = Peek_ReportView_Text (Path_ReportView__reportAbbrevs q) z
                                                                                                                                  in Node (Peek_ReportView_AbbrevPairs _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order AbbrevPairID
                                                                                                                                                                                                                                                        ((CIString,
                                                                                                                                                                                                                                                          Markup))])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportTitle _wp) -> map (\a -> let f = peek a
                                                                                                                            in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportTitle q) z
                                                                                                                                   liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportTitle q) z
                                                                                                                                   liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportTitle q) z
                                                                                                                                in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                      then Just a
                                                                                                                                                                      else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportHeader _wp) -> map (\a -> let f = peek a
                                                                                                                             in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportHeader q) z
                                                                                                                                    liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportHeader q) z
                                                                                                                                    liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportHeader q) z
                                                                                                                                 in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                       then Just a
                                                                                                                                                                       else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportFooter _wp) -> map (\a -> let f = peek a
                                                                                                                             in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportFooter q) z
                                                                                                                                    liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportFooter q) z
                                                                                                                                    liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportFooter q) z
                                                                                                                                 in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                       then Just a
                                                                                                                                                                       else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> let f = peek a
                                                                                                                                  in let liftPeek (Peek_MaybeReportIntendedUse_String q
                                                                                                                                                                                      z) = Peek_ReportView_String (Path_ReportView__reportIntendedUse q) z
                                                                                                                                         liftPeek (Peek_MaybeReportIntendedUse_JSONText q
                                                                                                                                                                                        z) = Peek_ReportView_JSONText (Path_ReportView__reportIntendedUse q) z
                                                                                                                                         liftPeek (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse q
                                                                                                                                                                                                      z) = Peek_ReportView_MaybeReportIntendedUse (Path_ReportView__reportIntendedUse q) z
                                                                                                                                      in Node (Peek_ReportView_MaybeReportIntendedUse _pp (if null f
                                                                                                                                                                                            then Just a
                                                                                                                                                                                            else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Maybe ReportIntendedUse])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Maybe ReportIntendedUse))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_ReportValueTypeInfo_JSONText q
                                                                                                                                                                                       z) = Peek_ReportView_JSONText (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                           liftPeek (Peek_ReportValueTypeInfo_Markup q
                                                                                                                                                                                     z) = Peek_ReportView_Markup (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                           liftPeek (Peek_ReportValueTypeInfo_ReportValueTypeInfo q
                                                                                                                                                                                                  z) = Peek_ReportView_ReportValueTypeInfo (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                           liftPeek (Peek_ReportValueTypeInfo_Text q z) = Peek_ReportView_Text (Path_ReportView__reportValueTypeInfo q) z
                                                                                                                                        in Node (Peek_ReportView_ReportValueTypeInfo _pp (if null f
                                                                                                                                                                                           then Just a
                                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportValueTypeInfo])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ReportValueTypeInfo)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> let f = peek a
                                                                                                                                        in let liftPeek (Peek_ReportValueApproachInfo_JSONText q
                                                                                                                                                                                               z) = Peek_ReportView_JSONText (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                               liftPeek (Peek_ReportValueApproachInfo_Markup q
                                                                                                                                                                                             z) = Peek_ReportView_Markup (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                               liftPeek (Peek_ReportValueApproachInfo_ReportValueApproachInfo q
                                                                                                                                                                                                              z) = Peek_ReportView_ReportValueApproachInfo (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                               liftPeek (Peek_ReportValueApproachInfo_Text q
                                                                                                                                                                                           z) = Peek_ReportView_Text (Path_ReportView__reportValueApproachInfo q) z
                                                                                                                                            in Node (Peek_ReportView_ReportValueApproachInfo _pp (if null f
                                                                                                                                                                                                   then Just a
                                                                                                                                                                                                   else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportValueApproachInfo])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ReportValueApproachInfo)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportClientName _wp) -> map (\a -> let f = peek a
                                                                                                                                 in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportClientName q) z
                                                                                                                                        liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportClientName q) z
                                                                                                                                        liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportClientName q) z
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportClientAddress _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportClientAddress q) z
                                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportClientAddress q) z
                                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportClientAddress q) z
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> let f = peek a
                                                                                                                                     in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportClientGreeting q) z
                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportClientGreeting q) z
                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportClientGreeting q) z
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                               then Just a
                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> let f = peek a
                                                                                                                                     in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                            liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                            liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportItemsOwnerFull q) z
                                                                                                                                         in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                               then Just a
                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> let f = peek a
                                                                                                                                 in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportItemsOwner q) z
                                                                                                                                        liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportItemsOwner q) z
                                                                                                                                        liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportItemsOwner q) z
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportBriefItems _wp) -> map (\a -> let f = peek a
                                                                                                                                 in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportBriefItems q) z
                                                                                                                                        liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportBriefItems q) z
                                                                                                                                        liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportBriefItems q) z
                                                                                                                                     in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> let f = peek a
                                                                                                                                         in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                               z) = Peek_ReportView_JSONText (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                                liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                                liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportInspectionLocation q) z
                                                                                                                                             in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                   then Just a
                                                                                                                                                                                   else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportBody _wp) -> map (\a -> let f = peek a
                                                                                                                           in let liftPeek (Peek_ReportElems_String q z) = Peek_ReportView_String (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Bool q z) = Peek_ReportView_Bool (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Double q z) = Peek_ReportView_Double (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Dimension q z) = Peek_ReportView_Dimension (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ImageCrop q z) = Peek_ReportView_ImageCrop (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ImageSize q z) = Peek_ReportView_ImageSize (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Units q z) = Peek_ReportView_Units (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ImageFile q z) = Peek_ReportView_ImageFile (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ReportElem q z) = Peek_ReportView_ReportElem (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ReportElems q z) = Peek_ReportView_ReportElems (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_EUI q z) = Peek_ReportView_EUI (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_MEUI q z) = Peek_ReportView_MEUI (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_MaybeImageFile q z) = Peek_ReportView_MaybeImageFile (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ReportImage q z) = Peek_ReportView_ReportImage (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ReportImages q z) = Peek_ReportView_ReportImages (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_ReportImageView q z) = Peek_ReportView_ReportImageView (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_SaneSizeImageSize q z) = Peek_ReportView_SaneSizeImageSize (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Item q z) = Peek_ReportView_Item (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_MIM q z) = Peek_ReportView_MIM (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_URI q z) = Peek_ReportView_URI (Path_ReportView__reportBody q) z
                                                                                                                                  liftPeek (Peek_ReportElems_Text q z) = Peek_ReportView_Text (Path_ReportView__reportBody q) z
                                                                                                                               in Node (Peek_ReportView_ReportElems _pp (if null f
                                                                                                                                                                          then Just a
                                                                                                                                                                          else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order ReportElemID
                                                                                                                                                                                                                                                     ReportElem])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order ReportElemID ReportElem))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportGlossary _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_MarkupPairs_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportGlossary q) z
                                                                                                                                      liftPeek (Peek_MarkupPairs_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportGlossary q) z
                                                                                                                                      liftPeek (Peek_MarkupPairs_MarkupPair q z) = Peek_ReportView_MarkupPair (Path_ReportView__reportGlossary q) z
                                                                                                                                      liftPeek (Peek_MarkupPairs_MarkupPairs q z) = Peek_ReportView_MarkupPairs (Path_ReportView__reportGlossary q) z
                                                                                                                                      liftPeek (Peek_MarkupPairs_Text q z) = Peek_ReportView_Text (Path_ReportView__reportGlossary q) z
                                                                                                                                   in Node (Peek_ReportView_MarkupPairs _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order MarkupPairID
                                                                                                                                                                                                                                                         ((Markup,
                                                                                                                                                                                                                                                           Markup))])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportSources _wp) -> map (\a -> let f = peek a
                                                                                                                              in let liftPeek (Peek_MarkupPairs_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportSources q) z
                                                                                                                                     liftPeek (Peek_MarkupPairs_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportSources q) z
                                                                                                                                     liftPeek (Peek_MarkupPairs_MarkupPair q z) = Peek_ReportView_MarkupPair (Path_ReportView__reportSources q) z
                                                                                                                                     liftPeek (Peek_MarkupPairs_MarkupPairs q z) = Peek_ReportView_MarkupPairs (Path_ReportView__reportSources q) z
                                                                                                                                     liftPeek (Peek_MarkupPairs_Text q z) = Peek_ReportView_Text (Path_ReportView__reportSources q) z
                                                                                                                                  in Node (Peek_ReportView_MarkupPairs _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order MarkupPairID
                                                                                                                                                                                                                                                        ((Markup,
                                                                                                                                                                                                                                                          Markup))])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> let f = peek a
                                                                                                                                          in let liftPeek (Peek_Markup_JSONText q
                                                                                                                                                                                z) = Peek_ReportView_JSONText (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                                 liftPeek (Peek_Markup_Markup q
                                                                                                                                                                              z) = Peek_ReportView_Markup (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                                 liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportLetterOfTransmittal q) z
                                                                                                                                              in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> let f = peek a
                                                                                                                                  in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                         liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                         liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportScopeOfWork q) z
                                                                                                                                      in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                            then Just a
                                                                                                                                                                            else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportCertification _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_Markups_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportCertification q) z
                                                                                                                                           liftPeek (Peek_Markups_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportCertification q) z
                                                                                                                                           liftPeek (Peek_Markups_Markups q z) = Peek_ReportView_Markups (Path_ReportView__reportCertification q) z
                                                                                                                                           liftPeek (Peek_Markups_Text q z) = Peek_ReportView_Text (Path_ReportView__reportCertification q) z
                                                                                                                                        in Node (Peek_ReportView_Markups _pp (if null f
                                                                                                                                                                               then Just a
                                                                                                                                                                               else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order MarkupID
                                                                                                                                                                                                                                                          Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order MarkupID Markup))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> let f = peek a
                                                                                                                                         in let liftPeek (Peek_Markups_JSONText q
                                                                                                                                                                                z) = Peek_ReportView_JSONText (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                liftPeek (Peek_Markups_Markup q
                                                                                                                                                                              z) = Peek_ReportView_Markup (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                liftPeek (Peek_Markups_Markups q
                                                                                                                                                                               z) = Peek_ReportView_Markups (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                                liftPeek (Peek_Markups_Text q z) = Peek_ReportView_Text (Path_ReportView__reportLimitingConditions q) z
                                                                                                                                             in Node (Peek_ReportView_Markups _pp (if null f
                                                                                                                                                                                    then Just a
                                                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order MarkupID
                                                                                                                                                                                                                                                               Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy (Order MarkupID Markup))),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> let f = peek a
                                                                                                                                    in let liftPeek (Peek_Markup_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                           liftPeek (Peek_Markup_Markup q z) = Peek_ReportView_Markup (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                           liftPeek (Peek_Markup_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPrivacyPolicy q) z
                                                                                                                                        in Node (Peek_ReportView_Markup _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportPerms _wp) -> map (\a -> let f = peek a
                                                                                                                            in let liftPeek (Peek_Permissions_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportPerms q) z
                                                                                                                                   liftPeek (Peek_Permissions_Permissions q z) = Peek_ReportView_Permissions (Path_ReportView__reportPerms q) z
                                                                                                                                   liftPeek (Peek_Permissions_UserIds q z) = Peek_ReportView_UserIds (Path_ReportView__reportPerms q) z
                                                                                                                                   liftPeek (Peek_Permissions_Text q z) = Peek_ReportView_Text (Path_ReportView__reportPerms q) z
                                                                                                                                   liftPeek (Peek_Permissions_UserId q z) = Peek_ReportView_UserId (Path_ReportView__reportPerms q) z
                                                                                                                                in Node (Peek_ReportView_Permissions _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Permissions])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Permissions)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportRevision _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_Integer_Integer q z) = Peek_ReportView_Integer (Path_ReportView__reportRevision q) z
                                                                                                                                   in Node (Peek_ReportView_Integer _pp (if null f
                                                                                                                                                                          then Just a
                                                                                                                                                                          else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Integer])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Integer)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportCreated _wp) -> map (\a -> let f = peek a
                                                                                                                              in let liftPeek (Peek_Int64_Int64 q z) = Peek_ReportView_Int64 (Path_ReportView__reportCreated q) z
                                                                                                                                  in Node (Peek_ReportView_Int64 _pp (if null f
                                                                                                                                                                       then Just a
                                                                                                                                                                       else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Int64])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Int64)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportBranding _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_Branding_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportBranding q) z
                                                                                                                                      liftPeek (Peek_Branding_Branding q z) = Peek_ReportView_Branding (Path_ReportView__reportBranding q) z
                                                                                                                                      liftPeek (Peek_Branding_Text q z) = Peek_ReportView_Text (Path_ReportView__reportBranding q) z
                                                                                                                                   in Node (Peek_ReportView_Branding _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Branding])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Branding)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportStatus _wp) -> map (\a -> let f = peek a
                                                                                                                             in let liftPeek (Peek_ReportStatus_String q z) = Peek_ReportView_String (Path_ReportView__reportStatus q) z
                                                                                                                                    liftPeek (Peek_ReportStatus_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportStatus q) z
                                                                                                                                    liftPeek (Peek_ReportStatus_ReportStatus q z) = Peek_ReportView_ReportStatus (Path_ReportView__reportStatus q) z
                                                                                                                                 in Node (Peek_ReportView_ReportStatus _pp (if null f
                                                                                                                                                                             then Just a
                                                                                                                                                                             else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportStatus])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ReportStatus)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportRedacted _wp) -> map (\a -> let f = peek a
                                                                                                                               in let liftPeek (Peek_Bool_String q z) = Peek_ReportView_String (Path_ReportView__reportRedacted q) z
                                                                                                                                      liftPeek (Peek_Bool_Bool q z) = Peek_ReportView_Bool (Path_ReportView__reportRedacted q) z
                                                                                                                                      liftPeek (Peek_Bool_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportRedacted q) z
                                                                                                                                   in Node (Peek_ReportView_Bool _pp (if null f
                                                                                                                                                                       then Just a
                                                                                                                                                                       else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportFlags _wp) -> map (\a -> let f = peek a
                                                                                                                            in let liftPeek (Peek_ReportFlags_String q z) = Peek_ReportView_String (Path_ReportView__reportFlags q) z
                                                                                                                                   liftPeek (Peek_ReportFlags_Bool q z) = Peek_ReportView_Bool (Path_ReportView__reportFlags q) z
                                                                                                                                   liftPeek (Peek_ReportFlags_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportFlags q) z
                                                                                                                                   liftPeek (Peek_ReportFlags_ReportFlags q z) = Peek_ReportView_ReportFlags (Path_ReportView__reportFlags q) z
                                                                                                                                in Node (Peek_ReportView_ReportFlags _pp (if null f
                                                                                                                                                                           then Just a
                                                                                                                                                                           else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportFlags])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ReportFlags)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportUUID _wp) -> map (\a -> let f = peek a
                                                                                                                           in let liftPeek (Peek_UUID_UUID q z) = Peek_ReportView_UUID (Path_ReportView__reportUUID q) z
                                                                                                                               in Node (Peek_ReportView_UUID _pp (if null f
                                                                                                                                                                   then Just a
                                                                                                                                                                   else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [UUID])
                                                                      _ -> []) (paths _s (Proxy :: Proxy UUID)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> let f = peek a
                                                                                                                                      in let liftPeek (Peek_Bool_String q z) = Peek_ReportView_String (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                             liftPeek (Peek_Bool_Bool q z) = Peek_ReportView_Bool (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                             liftPeek (Peek_Bool_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportOrderByItemName q) z
                                                                                                                                          in Node (Peek_ReportView_Bool _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> let f = peek a
                                                                                                                                      in let liftPeek (Peek_Bool_String q z) = Peek_ReportView_String (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                             liftPeek (Peek_Bool_Bool q z) = Peek_ReportView_Bool (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                             liftPeek (Peek_Bool_JSONText q z) = Peek_ReportView_JSONText (Path_ReportView__reportDisplayItemName q) z
                                                                                                                                          in Node (Peek_ReportView_Bool _pp (if null f
                                                                                                                                                                              then Just a
                                                                                                                                                                              else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Bool])
                                                                      _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                               concatMap (\pth -> case pth of
                                                                      _pp@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> let f = peek a
                                                                                                                                       in let liftPeek (Peek_ReportStandard_Int q z) = Peek_ReportView_Int (Path_ReportView__reportStandardsVersion q) z
                                                                                                                                              liftPeek (Peek_ReportStandard_ReportStandard q
                                                                                                                                                                                           z) = Peek_ReportView_ReportStandard (Path_ReportView__reportStandardsVersion q) z
                                                                                                                                           in Node (Peek_ReportView_ReportStandard _pp (if null f
                                                                                                                                                                                         then Just a
                                                                                                                                                                                         else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ReportStandard])
                                                                      _ -> []) (paths _s (Proxy :: Proxy ReportStandard))] :: Forest (Peek ReportView)
          hop (_s@(ReportView {})) = mconcat [concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportFolder _wp) -> map (\a -> Node (Peek_ReportView_ReadOnlyFilePath _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReadOnly ([Char])])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (ReadOnly ([Char])))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportName _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportDate _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportContractDate _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportInspectionDate _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportEffectiveDate _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportAuthors _wp) -> map (\a -> Node (Peek_ReportView_Authors _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order AuthorID Author])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order AuthorID Author))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPreparer _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPreparerEIN _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPreparerAddress _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPreparerEMail _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPreparerWebsite _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportAbbrevs _wp) -> map (\a -> Node (Peek_ReportView_AbbrevPairs _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order AbbrevPairID
                                                                                                                                                                                                                    ((CIString, Markup))])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportTitle _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportHeader _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportFooter _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportIntendedUse _wp) -> map (\a -> Node (Peek_ReportView_MaybeReportIntendedUse _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Maybe ReportIntendedUse])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Maybe ReportIntendedUse))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportValueTypeInfo _wp) -> map (\a -> Node (Peek_ReportView_ReportValueTypeInfo _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportValueTypeInfo])
                                                                     _ -> []) (paths _s (Proxy :: Proxy ReportValueTypeInfo)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportValueApproachInfo _wp) -> map (\a -> Node (Peek_ReportView_ReportValueApproachInfo _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportValueApproachInfo])
                                                                     _ -> []) (paths _s (Proxy :: Proxy ReportValueApproachInfo)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportClientName _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportClientAddress _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportClientGreeting _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportItemsOwnerFull _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportItemsOwner _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportBriefItems _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportInspectionLocation _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportBody _wp) -> map (\a -> Node (Peek_ReportView_ReportElems _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order ReportElemID ReportElem])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order ReportElemID ReportElem))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportGlossary _wp) -> map (\a -> Node (Peek_ReportView_MarkupPairs _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order MarkupPairID
                                                                                                                                                                                                                     ((Markup, Markup))])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportSources _wp) -> map (\a -> Node (Peek_ReportView_MarkupPairs _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order MarkupPairID
                                                                                                                                                                                                                    ((Markup, Markup))])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportLetterOfTransmittal _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportScopeOfWork _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportCertification _wp) -> map (\a -> Node (Peek_ReportView_Markups _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order MarkupID Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order MarkupID Markup))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportLimitingConditions _wp) -> map (\a -> Node (Peek_ReportView_Markups _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order MarkupID Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy (Order MarkupID Markup))),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPrivacyPolicy _wp) -> map (\a -> Node (Peek_ReportView_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Markup)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportPerms _wp) -> map (\a -> Node (Peek_ReportView_Permissions _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Permissions])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Permissions)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportRevision _wp) -> map (\a -> Node (Peek_ReportView_Integer _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Integer])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Integer)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportCreated _wp) -> map (\a -> Node (Peek_ReportView_Int64 _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Int64])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Int64)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportBranding _wp) -> map (\a -> Node (Peek_ReportView_Branding _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Branding])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Branding)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportStatus _wp) -> map (\a -> Node (Peek_ReportView_ReportStatus _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportStatus])
                                                                     _ -> []) (paths _s (Proxy :: Proxy ReportStatus)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportRedacted _wp) -> map (\a -> Node (Peek_ReportView_Bool _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Bool])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportFlags _wp) -> map (\a -> Node (Peek_ReportView_ReportFlags _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportFlags])
                                                                     _ -> []) (paths _s (Proxy :: Proxy ReportFlags)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportUUID _wp) -> map (\a -> Node (Peek_ReportView_UUID _pp (Just a)) []) (toListOf (toLens _pp) _s :: [UUID])
                                                                     _ -> []) (paths _s (Proxy :: Proxy UUID)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportOrderByItemName _wp) -> map (\a -> Node (Peek_ReportView_Bool _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Bool])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportDisplayItemName _wp) -> map (\a -> Node (Peek_ReportView_Bool _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Bool])
                                                                     _ -> []) (paths _s (Proxy :: Proxy Bool)),
                                              concatMap (\pth -> case pth of
                                                                     _pp@(Path_ReportView__reportStandardsVersion _wp) -> map (\a -> Node (Peek_ReportView_ReportStandard _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ReportStandard])
                                                                     _ -> []) (paths _s (Proxy :: Proxy ReportStandard))] :: Forest (Peek ReportView)
instance Describe (Peek ReportView)
    where describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                  custom = describe wfld (Proxy :: Proxy (ReadOnly ([Char])));
                                                                                                  next = describe wfld (Peek_ReadOnlyFilePath_String _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                    custom = describe wfld (Proxy :: Proxy (ReadOnly ([Char])));
                                                                                                    next = describe wfld (Peek_ReadOnlyFilePath_JSONText _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReadOnlyFilePath (_p@(Path_ReportView__reportFolder _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFolder");
                                                                                                            custom = describe wfld (Proxy :: Proxy (ReadOnly ([Char])));
                                                                                                            next = describe wfld (Peek_ReadOnlyFilePath_ReadOnlyFilePath _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                  next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportName");
                                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                                              next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                  next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportDate");
                                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                                              next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                          next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportContractDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportContractDate");
                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                      next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                         "ReportView",
                                                                                                                         Right "_reportInspectionDate");
                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                       "ReportView",
                                                                                                                       Right "_reportInspectionDate");
                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportInspectionDate");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportEffectiveDate");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportEffectiveDate _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportEffectiveDate");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order AuthorID Author));
                                                                                                     next = describe wfld (Peek_Authors_JSONText _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order AuthorID Author));
                                                                                                   next = describe wfld (Peek_Authors_Markup _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Author (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order AuthorID Author));
                                                                                                   next = describe wfld (Peek_Authors_Author _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Authors (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                    custom = describe wfld (Proxy :: Proxy (Order AuthorID Author));
                                                                                                    next = describe wfld (Peek_Authors_Authors _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAuthors _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAuthors");
                                                                                                 custom = describe wfld (Proxy :: Proxy (Order AuthorID Author));
                                                                                                 next = describe wfld (Peek_Authors_Text _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                      next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparer _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparer");
                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                  next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEIN _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEIN");
                                                                                                     custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                     next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportPreparerAddress");
                                                                                                             custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                             next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportPreparerAddress");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerAddress _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                      "ReportView",
                                                                                                                      Right "_reportPreparerAddress");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportPreparerEMail");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerEMail _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPreparerEMail");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportPreparerWebsite");
                                                                                                             custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                             next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportPreparerWebsite");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPreparerWebsite _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                      "ReportView",
                                                                                                                      Right "_reportPreparerWebsite");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                     next = describe wfld (Peek_AbbrevPairs_JSONText _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                   next = describe wfld (Peek_AbbrevPairs_Markup _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_AbbrevPair (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                       custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                       next = describe wfld (Peek_AbbrevPairs_AbbrevPair _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_AbbrevPairs (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                        next = describe wfld (Peek_AbbrevPairs_AbbrevPairs _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_CIString (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                     next = describe wfld (Peek_AbbrevPairs_CIString _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportAbbrevs _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportAbbrevs");
                                                                                                 custom = describe wfld (Proxy :: Proxy (Order AbbrevPairID ((CIString, Markup))));
                                                                                                 next = describe wfld (Peek_AbbrevPairs_Text _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                   custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                   next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                                 custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                 next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportTitle _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportTitle");
                                                                                               custom = describe wfld (Proxy :: Proxy Markup);
                                                                                               next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                  next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportHeader _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportHeader");
                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                  custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                  next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportFooter _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFooter");
                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                       custom = describe wfld (Proxy :: Proxy (Maybe ReportIntendedUse));
                                                                                                       next = describe wfld (Peek_MaybeReportIntendedUse_String _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportIntendedUse");
                                                                                                         custom = describe wfld (Proxy :: Proxy (Maybe ReportIntendedUse));
                                                                                                         next = describe wfld (Peek_MaybeReportIntendedUse_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MaybeReportIntendedUse (_p@(Path_ReportView__reportIntendedUse _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                                    "ReportView",
                                                                                                                                    Right "_reportIntendedUse");
                                                                                                                       custom = describe wfld (Proxy :: Proxy (Maybe ReportIntendedUse));
                                                                                                                       next = describe wfld (Peek_MaybeReportIntendedUse_MaybeReportIntendedUse _wp undefined);
                                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportValueTypeInfo");
                                                                                                           custom = describe wfld (Proxy :: Proxy ReportValueTypeInfo);
                                                                                                           next = describe wfld (Peek_ReportValueTypeInfo_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                         custom = describe wfld (Proxy :: Proxy ReportValueTypeInfo);
                                                                                                         next = describe wfld (Peek_ReportValueTypeInfo_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportValueTypeInfo (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                                   "ReportView",
                                                                                                                                   Right "_reportValueTypeInfo");
                                                                                                                      custom = describe wfld (Proxy :: Proxy ReportValueTypeInfo);
                                                                                                                      next = describe wfld (Peek_ReportValueTypeInfo_ReportValueTypeInfo _wp undefined);
                                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueTypeInfo _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportValueTypeInfo");
                                                                                                       custom = describe wfld (Proxy :: Proxy ReportValueTypeInfo);
                                                                                                       next = describe wfld (Peek_ReportValueTypeInfo_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                            "ReportView",
                                                                                                                            Right "_reportValueApproachInfo");
                                                                                                               custom = describe wfld (Proxy :: Proxy ReportValueApproachInfo);
                                                                                                               next = describe wfld (Peek_ReportValueApproachInfo_JSONText _wp undefined);
                                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportValueApproachInfo");
                                                                                                             custom = describe wfld (Proxy :: Proxy ReportValueApproachInfo);
                                                                                                             next = describe wfld (Peek_ReportValueApproachInfo_Markup _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportValueApproachInfo (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                                           "ReportView",
                                                                                                                                           Right "_reportValueApproachInfo");
                                                                                                                              custom = describe wfld (Proxy :: Proxy ReportValueApproachInfo);
                                                                                                                              next = describe wfld (Peek_ReportValueApproachInfo_ReportValueApproachInfo _wp undefined);
                                                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportValueApproachInfo _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportValueApproachInfo");
                                                                                                           custom = describe wfld (Proxy :: Proxy ReportValueApproachInfo);
                                                                                                           next = describe wfld (Peek_ReportValueApproachInfo_Text _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                      next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientName _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientName");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportClientAddress");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientAddress _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientAddress");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                         "ReportView",
                                                                                                                         Right "_reportClientGreeting");
                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                       "ReportView",
                                                                                                                       Right "_reportClientGreeting");
                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportClientGreeting _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportClientGreeting");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                         "ReportView",
                                                                                                                         Right "_reportItemsOwnerFull");
                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                       "ReportView",
                                                                                                                       Right "_reportItemsOwnerFull");
                                                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwnerFull _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwnerFull");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                      next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportItemsOwner _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportItemsOwner");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                        next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                      custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                      next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBriefItems _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBriefItems");
                                                                                                    custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                    next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                             "ReportView",
                                                                                                                             Right "_reportInspectionLocation");
                                                                                                                custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                           "ReportView",
                                                                                                                           Right "_reportInspectionLocation");
                                                                                                              custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                              next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportInspectionLocation _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                         "ReportView",
                                                                                                                         Right "_reportInspectionLocation");
                                                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                            next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                next = describe wfld (Peek_ReportElems_String _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                              next = describe wfld (Peek_ReportElems_Bool _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Double (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                next = describe wfld (Peek_ReportElems_Double _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Dimension (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                   next = describe wfld (Peek_ReportElems_Dimension _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ImageCrop (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                   next = describe wfld (Peek_ReportElems_ImageCrop _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                   next = describe wfld (Peek_ReportElems_ImageSize _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Units (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                               custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                               next = describe wfld (Peek_ReportElems_Units _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                   next = describe wfld (Peek_ReportElems_ImageFile _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                  custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                  next = describe wfld (Peek_ReportElems_JSONText _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                next = describe wfld (Peek_ReportElems_Markup _wp undefined);
                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportElem (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                    custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                    next = describe wfld (Peek_ReportElems_ReportElem _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportElems (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                     next = describe wfld (Peek_ReportElems_ReportElems _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_EUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                             next = describe wfld (Peek_ReportElems_EUI _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MEUI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                              next = describe wfld (Peek_ReportElems_MEUI _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MaybeImageFile (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                        next = describe wfld (Peek_ReportElems_MaybeImageFile _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportImage (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                     next = describe wfld (Peek_ReportElems_ReportImage _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportImages (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                      custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                      next = describe wfld (Peek_ReportElems_ReportImages _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportImageView (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                         custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                         next = describe wfld (Peek_ReportElems_ReportImageView _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_SaneSizeImageSize (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                                           custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                                           next = describe wfld (Peek_ReportElems_SaneSizeImageSize _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Item (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                              next = describe wfld (Peek_ReportElems_Item _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MIM (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                             next = describe wfld (Peek_ReportElems_MIM _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_URI (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                             next = describe wfld (Peek_ReportElems_URI _wp undefined);
                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBody _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBody");
                                                                                              custom = describe wfld (Proxy :: Proxy (Order ReportElemID ReportElem));
                                                                                              next = describe wfld (Peek_ReportElems_Text _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                      custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                      next = describe wfld (Peek_MarkupPairs_JSONText _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                    custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                    next = describe wfld (Peek_MarkupPairs_Markup _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                        next = describe wfld (Peek_MarkupPairs_MarkupPair _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                         custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                         next = describe wfld (Peek_MarkupPairs_MarkupPairs _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportGlossary _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportGlossary");
                                                                                                  custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                  next = describe wfld (Peek_MarkupPairs_Text _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                     custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                     next = describe wfld (Peek_MarkupPairs_JSONText _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                   custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                   next = describe wfld (Peek_MarkupPairs_Markup _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MarkupPair (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                       custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                       next = describe wfld (Peek_MarkupPairs_MarkupPair _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_MarkupPairs (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                        custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                        next = describe wfld (Peek_MarkupPairs_MarkupPairs _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportSources _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportSources");
                                                                                                 custom = describe wfld (Proxy :: Proxy (Order MarkupPairID ((Markup, Markup))));
                                                                                                 next = describe wfld (Peek_MarkupPairs_Text _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                              "ReportView",
                                                                                                                              Right "_reportLetterOfTransmittal");
                                                                                                                 custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                                 next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                            "ReportView",
                                                                                                                            Right "_reportLetterOfTransmittal");
                                                                                                               custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                               next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLetterOfTransmittal _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportLetterOfTransmittal");
                                                                                                             custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                             next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportScopeOfWork _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportScopeOfWork");
                                                                                                     custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                     next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportCertification");
                                                                                                           custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                           next = describe wfld (Peek_Markups_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                         custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                         next = describe wfld (Peek_Markups_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                          custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                          next = describe wfld (Peek_Markups_Markups _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportCertification _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportCertification");
                                                                                                       custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                       next = describe wfld (Peek_Markups_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                             "ReportView",
                                                                                                                             Right "_reportLimitingConditions");
                                                                                                                custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                                next = describe wfld (Peek_Markups_JSONText _wp undefined);
                                                                                                                top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                            in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                           "ReportView",
                                                                                                                           Right "_reportLimitingConditions");
                                                                                                              custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                              next = describe wfld (Peek_Markups_Markup _wp undefined);
                                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markups (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                            "ReportView",
                                                                                                                            Right "_reportLimitingConditions");
                                                                                                               custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                               next = describe wfld (Peek_Markups_Markups _wp undefined);
                                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportLimitingConditions _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                         "ReportView",
                                                                                                                         Right "_reportLimitingConditions");
                                                                                                            custom = describe wfld (Proxy :: Proxy (Order MarkupID Markup));
                                                                                                            next = describe wfld (Peek_Markups_Text _wp undefined);
                                                                                                            top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportPrivacyPolicy");
                                                                                                           custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                           next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Markup (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                         custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                         next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPrivacyPolicy _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPrivacyPolicy");
                                                                                                       custom = describe wfld (Proxy :: Proxy Markup);
                                                                                                       next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                   custom = describe wfld (Proxy :: Proxy Permissions);
                                                                                                   next = describe wfld (Peek_Permissions_JSONText _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Permissions (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                      custom = describe wfld (Proxy :: Proxy Permissions);
                                                                                                      next = describe wfld (Peek_Permissions_Permissions _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_UserIds (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                  custom = describe wfld (Proxy :: Proxy Permissions);
                                                                                                  next = describe wfld (Peek_Permissions_UserIds _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                               custom = describe wfld (Proxy :: Proxy Permissions);
                                                                                               next = describe wfld (Peek_Permissions_Text _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_UserId (_p@(Path_ReportView__reportPerms _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportPerms");
                                                                                                 custom = describe wfld (Proxy :: Proxy Permissions);
                                                                                                 next = describe wfld (Peek_Permissions_UserId _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Integer (_p@(Path_ReportView__reportRevision _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportRevision");
                                                                                                     custom = describe wfld (Proxy :: Proxy Integer);
                                                                                                     next = describe wfld (Peek_Integer_Integer _wp undefined);
                                                                                                     top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Int64 (_p@(Path_ReportView__reportCreated _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportCreated");
                                                                                                  custom = describe wfld (Proxy :: Proxy Int64);
                                                                                                  next = describe wfld (Peek_Int64_Int64 _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                      custom = describe wfld (Proxy :: Proxy Branding);
                                                                                                      next = describe wfld (Peek_Branding_JSONText _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Branding (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                      custom = describe wfld (Proxy :: Proxy Branding);
                                                                                                      next = describe wfld (Peek_Branding_Branding _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Text (_p@(Path_ReportView__reportBranding _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportBranding");
                                                                                                  custom = describe wfld (Proxy :: Proxy Branding);
                                                                                                  next = describe wfld (Peek_Branding_Text _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                  custom = describe wfld (Proxy :: Proxy ReportStatus);
                                                                                                  next = describe wfld (Peek_ReportStatus_String _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                    custom = describe wfld (Proxy :: Proxy ReportStatus);
                                                                                                    next = describe wfld (Peek_ReportStatus_JSONText _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportStatus (_p@(Path_ReportView__reportStatus _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportStatus");
                                                                                                        custom = describe wfld (Proxy :: Proxy ReportStatus);
                                                                                                        next = describe wfld (Peek_ReportStatus_ReportStatus _wp undefined);
                                                                                                        top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                    custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                    next = describe wfld (Peek_Bool_String _wp undefined);
                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                  custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                  next = describe wfld (Peek_Bool_Bool _wp undefined);
                                                                                                  top = describe _f (Proxy :: Proxy ReportView)}
                                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportRedacted _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportRedacted");
                                                                                                      custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                      next = describe wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                 custom = describe wfld (Proxy :: Proxy ReportFlags);
                                                                                                 next = describe wfld (Peek_ReportFlags_String _wp undefined);
                                                                                                 top = describe _f (Proxy :: Proxy ReportView)}
                                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                               custom = describe wfld (Proxy :: Proxy ReportFlags);
                                                                                               next = describe wfld (Peek_ReportFlags_Bool _wp undefined);
                                                                                               top = describe _f (Proxy :: Proxy ReportView)}
                                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                   custom = describe wfld (Proxy :: Proxy ReportFlags);
                                                                                                   next = describe wfld (Peek_ReportFlags_JSONText _wp undefined);
                                                                                                   top = describe _f (Proxy :: Proxy ReportView)}
                                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportFlags (_p@(Path_ReportView__reportFlags _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportFlags");
                                                                                                      custom = describe wfld (Proxy :: Proxy ReportFlags);
                                                                                                      next = describe wfld (Peek_ReportFlags_ReportFlags _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_UUID (_p@(Path_ReportView__reportUUID _wp)) _x) = let {wfld = Just ("ReportView", "ReportView", Right "_reportUUID");
                                                                                              custom = describe wfld (Proxy :: Proxy UUID);
                                                                                              next = describe wfld (Peek_UUID_UUID _wp undefined);
                                                                                              top = describe _f (Proxy :: Proxy ReportView)}
                                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportOrderByItemName");
                                                                                                           custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                           next = describe wfld (Peek_Bool_String _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                      "ReportView",
                                                                                                                      Right "_reportOrderByItemName");
                                                                                                         custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                         next = describe wfld (Peek_Bool_Bool _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportOrderByItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportOrderByItemName");
                                                                                                             custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                             next = describe wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_String (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                        "ReportView",
                                                                                                                        Right "_reportDisplayItemName");
                                                                                                           custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                           next = describe wfld (Peek_Bool_String _wp undefined);
                                                                                                           top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                       in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Bool (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                      "ReportView",
                                                                                                                      Right "_reportDisplayItemName");
                                                                                                         custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                         next = describe wfld (Peek_Bool_Bool _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_JSONText (_p@(Path_ReportView__reportDisplayItemName _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                          "ReportView",
                                                                                                                          Right "_reportDisplayItemName");
                                                                                                             custom = describe wfld (Proxy :: Proxy Bool);
                                                                                                             next = describe wfld (Peek_Bool_JSONText _wp undefined);
                                                                                                             top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_Int (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                      "ReportView",
                                                                                                                      Right "_reportStandardsVersion");
                                                                                                         custom = describe wfld (Proxy :: Proxy ReportStandard);
                                                                                                         next = describe wfld (Peek_ReportStandard_Int _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f (Peek_ReportView_ReportStandard (_p@(Path_ReportView__reportStandardsVersion _wp)) _x) = let {wfld = Just ("ReportView",
                                                                                                                                 "ReportView",
                                                                                                                                 Right "_reportStandardsVersion");
                                                                                                                    custom = describe wfld (Proxy :: Proxy ReportStandard);
                                                                                                                    next = describe wfld (Peek_ReportStandard_ReportStandard _wp undefined);
                                                                                                                    top = describe _f (Proxy :: Proxy ReportView)}
                                                                                                                in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy ReportView)
instance Describe (Proxy ReportView)
    where describe _f _ = case _f of
                              Nothing -> Just "Report View"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_ReportView String)
    where type S (Path_ReportView String) = ReportView
          type A (Path_ReportView String) = String
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Int64)
    where type S (Path_ReportView Int64) = ReportView
          type A (Path_ReportView Int64) = Int64
          toLens (Path_ReportView__reportCreated _x) = lens_ReportView__reportCreated
instance ToLens (Path_ReportView Int)
    where type S (Path_ReportView Int) = ReportView
          type A (Path_ReportView Int) = Int
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion . toLens _x
instance ToLens (Path_ReportView Bool)
    where type S (Path_ReportView Bool) = ReportView
          type A (Path_ReportView Bool) = Bool
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName
instance ToLens (Path_ReportView Double)
    where type S (Path_ReportView Double) = ReportView
          type A (Path_ReportView Double) = Double
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Dimension)
    where type S (Path_ReportView Dimension) = ReportView
          type A (Path_ReportView Dimension) = Dimension
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageCrop)
    where type S (Path_ReportView ImageCrop) = ReportView
          type A (Path_ReportView ImageCrop) = ImageCrop
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageSize)
    where type S (Path_ReportView ImageSize) = ReportView
          type A (Path_ReportView ImageSize) = ImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Units)
    where type S (Path_ReportView Units) = ReportView
          type A (Path_ReportView Units) = Units
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ImageFile)
    where type S (Path_ReportView ImageFile) = ReportView
          type A (Path_ReportView ImageFile) = ImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Integer)
    where type S (Path_ReportView Integer) = ReportView
          type A (Path_ReportView Integer) = Integer
          toLens (Path_ReportView__reportRevision _x) = lens_ReportView__reportRevision
instance ToLens (Path_ReportView JSONText)
    where type S (Path_ReportView JSONText) = ReportView
          type A (Path_ReportView JSONText) = JSONText
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder . toLens _x
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus . toLens _x
          toLens (Path_ReportView__reportRedacted _x) = lens_ReportView__reportRedacted . toLens _x
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags . toLens _x
          toLens (Path_ReportView__reportOrderByItemName _x) = lens_ReportView__reportOrderByItemName . toLens _x
          toLens (Path_ReportView__reportDisplayItemName _x) = lens_ReportView__reportDisplayItemName . toLens _x
instance ToLens (Path_ReportView Markup)
    where type S (Path_ReportView Markup) = ReportView
          type A (Path_ReportView Markup) = Markup
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy
instance ToLens (Path_ReportView Permissions)
    where type S (Path_ReportView Permissions) = ReportView
          type A (Path_ReportView Permissions) = Permissions
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms
instance ToLens (Path_ReportView UserIds)
    where type S (Path_ReportView UserIds) = ReportView
          type A (Path_ReportView UserIds) = UserIds
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView AbbrevPair)
    where type S (Path_ReportView AbbrevPair) = ReportView
          type A (Path_ReportView AbbrevPair) = AbbrevPair
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView AbbrevPairs)
    where type S (Path_ReportView AbbrevPairs) = ReportView
          type A (Path_ReportView AbbrevPairs) = AbbrevPairs
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs
instance ToLens (Path_ReportView Author)
    where type S (Path_ReportView Author) = ReportView
          type A (Path_ReportView Author) = Author
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
instance ToLens (Path_ReportView Authors)
    where type S (Path_ReportView Authors) = ReportView
          type A (Path_ReportView Authors) = Authors
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors
instance ToLens (Path_ReportView Branding)
    where type S (Path_ReportView Branding) = ReportView
          type A (Path_ReportView Branding) = Branding
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding
instance ToLens (Path_ReportView MarkupPair)
    where type S (Path_ReportView MarkupPair) = ReportView
          type A (Path_ReportView MarkupPair) = MarkupPair
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
instance ToLens (Path_ReportView MarkupPairs)
    where type S (Path_ReportView MarkupPairs) = ReportView
          type A (Path_ReportView MarkupPairs) = MarkupPairs
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources
instance ToLens (Path_ReportView Markups)
    where type S (Path_ReportView Markups) = ReportView
          type A (Path_ReportView Markups) = Markups
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions
instance ToLens (Path_ReportView MaybeReportIntendedUse)
    where type S (Path_ReportView MaybeReportIntendedUse) = ReportView
          type A (Path_ReportView MaybeReportIntendedUse) = MaybeReportIntendedUse
          toLens (Path_ReportView__reportIntendedUse _x) = lens_ReportView__reportIntendedUse
instance ToLens (Path_ReportView ReportElem)
    where type S (Path_ReportView ReportElem) = ReportView
          type A (Path_ReportView ReportElem) = ReportElem
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportElems)
    where type S (Path_ReportView ReportElems) = ReportView
          type A (Path_ReportView ReportElems) = ReportElems
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody
instance ToLens (Path_ReportView ReportFlags)
    where type S (Path_ReportView ReportFlags) = ReportView
          type A (Path_ReportView ReportFlags) = ReportFlags
          toLens (Path_ReportView__reportFlags _x) = lens_ReportView__reportFlags
instance ToLens (Path_ReportView ReportStandard)
    where type S (Path_ReportView ReportStandard) = ReportView
          type A (Path_ReportView ReportStandard) = ReportStandard
          toLens (Path_ReportView__reportStandardsVersion _x) = lens_ReportView__reportStandardsVersion
instance ToLens (Path_ReportView ReportStatus)
    where type S (Path_ReportView ReportStatus) = ReportView
          type A (Path_ReportView ReportStatus) = ReportStatus
          toLens (Path_ReportView__reportStatus _x) = lens_ReportView__reportStatus
instance ToLens (Path_ReportView ReportValueApproachInfo)
    where type S (Path_ReportView ReportValueApproachInfo) = ReportView
          type A (Path_ReportView ReportValueApproachInfo) = ReportValueApproachInfo
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo
instance ToLens (Path_ReportView ReportValueTypeInfo)
    where type S (Path_ReportView ReportValueTypeInfo) = ReportView
          type A (Path_ReportView ReportValueTypeInfo) = ReportValueTypeInfo
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo
instance ToLens (Path_ReportView EUI)
    where type S (Path_ReportView EUI) = ReportView
          type A (Path_ReportView EUI) = EUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MEUI)
    where type S (Path_ReportView MEUI) = ReportView
          type A (Path_ReportView MEUI) = MEUI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MaybeImageFile)
    where type S (Path_ReportView MaybeImageFile) = ReportView
          type A (Path_ReportView MaybeImageFile) = MaybeImageFile
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImage)
    where type S (Path_ReportView ReportImage) = ReportView
          type A (Path_ReportView ReportImage) = ReportImage
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportImages)
    where type S (Path_ReportView ReportImages) = ReportView
          type A (Path_ReportView ReportImages) = ReportImages
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReadOnlyFilePath)
    where type S (Path_ReportView ReadOnlyFilePath) = ReportView
          type A (Path_ReportView ReadOnlyFilePath) = ReadOnlyFilePath
          toLens (Path_ReportView__reportFolder _x) = lens_ReportView__reportFolder
instance ToLens (Path_ReportView ReportImageView)
    where type S (Path_ReportView ReportImageView) = ReportView
          type A (Path_ReportView ReportImageView) = ReportImageView
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView ReportView)
    where type S (Path_ReportView ReportView) = ReportView
          type A (Path_ReportView ReportView) = ReportView
          toLens _ = id
instance ToLens (Path_ReportView SaneSizeImageSize)
    where type S (Path_ReportView SaneSizeImageSize) = ReportView
          type A (Path_ReportView SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Item)
    where type S (Path_ReportView Item) = ReportView
          type A (Path_ReportView Item) = Item
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView MIM)
    where type S (Path_ReportView MIM) = ReportView
          type A (Path_ReportView MIM) = MIM
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView CIString)
    where type S (Path_ReportView CIString) = ReportView
          type A (Path_ReportView CIString) = CIString
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
instance ToLens (Path_ReportView URI)
    where type S (Path_ReportView URI) = ReportView
          type A (Path_ReportView URI) = URI
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
instance ToLens (Path_ReportView Text)
    where type S (Path_ReportView Text) = ReportView
          type A (Path_ReportView Text) = Text
          toLens (Path_ReportView__reportName _x) = lens_ReportView__reportName . toLens _x
          toLens (Path_ReportView__reportDate _x) = lens_ReportView__reportDate . toLens _x
          toLens (Path_ReportView__reportContractDate _x) = lens_ReportView__reportContractDate . toLens _x
          toLens (Path_ReportView__reportInspectionDate _x) = lens_ReportView__reportInspectionDate . toLens _x
          toLens (Path_ReportView__reportEffectiveDate _x) = lens_ReportView__reportEffectiveDate . toLens _x
          toLens (Path_ReportView__reportAuthors _x) = lens_ReportView__reportAuthors . toLens _x
          toLens (Path_ReportView__reportPreparer _x) = lens_ReportView__reportPreparer . toLens _x
          toLens (Path_ReportView__reportPreparerEIN _x) = lens_ReportView__reportPreparerEIN . toLens _x
          toLens (Path_ReportView__reportPreparerAddress _x) = lens_ReportView__reportPreparerAddress . toLens _x
          toLens (Path_ReportView__reportPreparerEMail _x) = lens_ReportView__reportPreparerEMail . toLens _x
          toLens (Path_ReportView__reportPreparerWebsite _x) = lens_ReportView__reportPreparerWebsite . toLens _x
          toLens (Path_ReportView__reportAbbrevs _x) = lens_ReportView__reportAbbrevs . toLens _x
          toLens (Path_ReportView__reportTitle _x) = lens_ReportView__reportTitle . toLens _x
          toLens (Path_ReportView__reportHeader _x) = lens_ReportView__reportHeader . toLens _x
          toLens (Path_ReportView__reportFooter _x) = lens_ReportView__reportFooter . toLens _x
          toLens (Path_ReportView__reportValueTypeInfo _x) = lens_ReportView__reportValueTypeInfo . toLens _x
          toLens (Path_ReportView__reportValueApproachInfo _x) = lens_ReportView__reportValueApproachInfo . toLens _x
          toLens (Path_ReportView__reportClientName _x) = lens_ReportView__reportClientName . toLens _x
          toLens (Path_ReportView__reportClientAddress _x) = lens_ReportView__reportClientAddress . toLens _x
          toLens (Path_ReportView__reportClientGreeting _x) = lens_ReportView__reportClientGreeting . toLens _x
          toLens (Path_ReportView__reportItemsOwnerFull _x) = lens_ReportView__reportItemsOwnerFull . toLens _x
          toLens (Path_ReportView__reportItemsOwner _x) = lens_ReportView__reportItemsOwner . toLens _x
          toLens (Path_ReportView__reportBriefItems _x) = lens_ReportView__reportBriefItems . toLens _x
          toLens (Path_ReportView__reportInspectionLocation _x) = lens_ReportView__reportInspectionLocation . toLens _x
          toLens (Path_ReportView__reportBody _x) = lens_ReportView__reportBody . toLens _x
          toLens (Path_ReportView__reportGlossary _x) = lens_ReportView__reportGlossary . toLens _x
          toLens (Path_ReportView__reportSources _x) = lens_ReportView__reportSources . toLens _x
          toLens (Path_ReportView__reportLetterOfTransmittal _x) = lens_ReportView__reportLetterOfTransmittal . toLens _x
          toLens (Path_ReportView__reportScopeOfWork _x) = lens_ReportView__reportScopeOfWork . toLens _x
          toLens (Path_ReportView__reportCertification _x) = lens_ReportView__reportCertification . toLens _x
          toLens (Path_ReportView__reportLimitingConditions _x) = lens_ReportView__reportLimitingConditions . toLens _x
          toLens (Path_ReportView__reportPrivacyPolicy _x) = lens_ReportView__reportPrivacyPolicy . toLens _x
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
          toLens (Path_ReportView__reportBranding _x) = lens_ReportView__reportBranding . toLens _x
instance ToLens (Path_ReportView UserId)
    where type S (Path_ReportView UserId) = ReportView
          type A (Path_ReportView UserId) = UserId
          toLens (Path_ReportView__reportPerms _x) = lens_ReportView__reportPerms . toLens _x
instance ToLens (Path_ReportView UUID)
    where type S (Path_ReportView UUID) = ReportView
          type A (Path_ReportView UUID) = UUID
          toLens (Path_ReportView__reportUUID _x) = lens_ReportView__reportUUID
data Path_SaneSizeImageSize a = Path_SaneSizeImageSize_View (Path_ImageSize a) | Path_SaneSizeImageSize deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_SaneSizeImageSize a)
    where idPath = Path_SaneSizeImageSize
instance Paths SaneSizeImageSize String
    where type FromTo SaneSizeImageSize String = Path_SaneSizeImageSize String
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize Double
    where type FromTo SaneSizeImageSize Double = Path_SaneSizeImageSize Double
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize Dimension
    where type FromTo SaneSizeImageSize Dimension = Path_SaneSizeImageSize Dimension
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize ImageSize
    where type FromTo SaneSizeImageSize ImageSize = Path_SaneSizeImageSize ImageSize
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize Units
    where type FromTo SaneSizeImageSize Units = Path_SaneSizeImageSize Units
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize JSONText
    where type FromTo SaneSizeImageSize JSONText = Path_SaneSizeImageSize JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: ImageSize) _g)) (map (\a' -> (Path_SaneSizeImageSize_View,
                                                                                                 a')) (toListOf (toLens (Path_SaneSizeImageSize_View (idPath :: FromTo ImageSize ImageSize))) _s))
instance Paths SaneSizeImageSize SaneSizeImageSize
    where type FromTo SaneSizeImageSize SaneSizeImageSize = Path_SaneSizeImageSize SaneSizeImageSize
          paths _ _ = [idPath]
instance PathStart (SaneSize ImageSize)
    where data Peek (SaneSize ImageSize)
              = Peek_SaneSizeImageSize_String (FromTo (SaneSize ImageSize) ([Char])) (Maybe ([Char]))
              | Peek_SaneSizeImageSize_Double (FromTo (SaneSize ImageSize) Double) (Maybe Double)
              | Peek_SaneSizeImageSize_Dimension (FromTo (SaneSize ImageSize) Dimension) (Maybe Dimension)
              | Peek_SaneSizeImageSize_ImageSize (FromTo (SaneSize ImageSize) ImageSize) (Maybe ImageSize)
              | Peek_SaneSizeImageSize_Units (FromTo (SaneSize ImageSize) Units) (Maybe Units)
              | Peek_SaneSizeImageSize_JSONText (FromTo (SaneSize ImageSize) JSONText) (Maybe JSONText)
              | Peek_SaneSizeImageSize_SaneSizeImageSize (FromTo (SaneSize ImageSize) (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_SaneSizeImageSize_View _wp) -> map (\a -> let f = peek a
                                                                                                in let liftPeek (Peek_ImageSize_String q z) = Peek_SaneSizeImageSize_String (Path_SaneSizeImageSize_View q) z
                                                                                                       liftPeek (Peek_ImageSize_Double q z) = Peek_SaneSizeImageSize_Double (Path_SaneSizeImageSize_View q) z
                                                                                                       liftPeek (Peek_ImageSize_Dimension q z) = Peek_SaneSizeImageSize_Dimension (Path_SaneSizeImageSize_View q) z
                                                                                                       liftPeek (Peek_ImageSize_ImageSize q z) = Peek_SaneSizeImageSize_ImageSize (Path_SaneSizeImageSize_View q) z
                                                                                                       liftPeek (Peek_ImageSize_Units q z) = Peek_SaneSizeImageSize_Units (Path_SaneSizeImageSize_View q) z
                                                                                                       liftPeek (Peek_ImageSize_JSONText q z) = Peek_SaneSizeImageSize_JSONText (Path_SaneSizeImageSize_View q) z
                                                                                                    in Node (Peek_SaneSizeImageSize_ImageSize _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [ImageSize])
                                           _ -> []) (paths _s (Proxy :: Proxy ImageSize)) :: Forest (Peek (SaneSize ImageSize))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_SaneSizeImageSize_View _wp) -> map (\a -> Node (Peek_SaneSizeImageSize_ImageSize _pp (Just a)) []) (toListOf (toLens _pp) _s :: [ImageSize])
                                          _ -> []) (paths _s (Proxy :: Proxy ImageSize)) :: Forest (Peek (SaneSize ImageSize))
instance Describe (Peek (SaneSize ImageSize))
    where describe _f (Peek_SaneSizeImageSize_String (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                       custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                       next = describe wfld (Peek_ImageSize_String _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_SaneSizeImageSize_Double (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                       custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                       next = describe wfld (Peek_ImageSize_Double _wp undefined);
                                                                                                       top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_SaneSizeImageSize_Dimension (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                          custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                          next = describe wfld (Peek_ImageSize_Dimension _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_SaneSizeImageSize_ImageSize (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                          custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                          next = describe wfld (Peek_ImageSize_ImageSize _wp undefined);
                                                                                                          top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_SaneSizeImageSize_Units (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                      custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                      next = describe wfld (Peek_ImageSize_Units _wp undefined);
                                                                                                      top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                  in maybe top Just (maybe next Just custom)
          describe _f (Peek_SaneSizeImageSize_JSONText (_p@(Path_SaneSizeImageSize_View _wp)) _x) = let {wfld = Nothing;
                                                                                                         custom = describe wfld (Proxy :: Proxy ImageSize);
                                                                                                         next = describe wfld (Peek_ImageSize_JSONText _wp undefined);
                                                                                                         top = describe _f (Proxy :: Proxy (SaneSize ImageSize))}
                                                                                                     in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (SaneSize ImageSize))
instance Describe (Proxy (SaneSize ImageSize))
    where describe _f _ = case _f of
                              Nothing -> Just "Sane Size Image Size"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_SaneSizeImageSize String)
    where type S (Path_SaneSizeImageSize String) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize String) = String
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Double)
    where type S (Path_SaneSizeImageSize Double) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Double) = Double
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize Dimension)
    where type S (Path_SaneSizeImageSize Dimension) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Dimension) = Dimension
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize ImageSize)
    where type S (Path_SaneSizeImageSize ImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize ImageSize) = ImageSize
          toLens (Path_SaneSizeImageSize_View _) = viewLens :: Lens' (SaneSize ImageSize) ImageSize
instance ToLens (Path_SaneSizeImageSize Units)
    where type S (Path_SaneSizeImageSize Units) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize Units) = Units
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize JSONText)
    where type S (Path_SaneSizeImageSize JSONText) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize JSONText) = JSONText
          toLens (Path_SaneSizeImageSize_View v) = (viewLens :: Lens' (SaneSize ImageSize) ImageSize) . toLens v
instance ToLens (Path_SaneSizeImageSize SaneSizeImageSize)
    where type S (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          type A (Path_SaneSizeImageSize SaneSizeImageSize) = SaneSizeImageSize
          toLens _ = id
data Path_Item a
    = Path_Item_itemName (Path_Text a) | Path_Item_fields (Path_MIM a) | Path_Item_images (Path_ReportImages a) | Path_Item
    deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Item a)
    where idPath = Path_Item
class HasItem c
    where lens_item :: Lens' c Item
          lens_Item_fields :: forall . Lens' c MIM
          lens_Item_fields = (.) lens_item lens_Item_fields
          {-# INLINE lens_Item_fields #-}
          lens_Item_images :: forall . Lens' c ReportImages
          lens_Item_images = (.) lens_item lens_Item_images
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName :: forall . Lens' c Text
          lens_Item_itemName = (.) lens_item lens_Item_itemName
          {-# INLINE lens_Item_itemName #-}
instance HasItem Item
    where lens_item = id
          lens_Item_fields f (Item x1 x2 x3) = fmap (\y1 -> Item x1 y1 x3) (f x2)
          {-# INLINE lens_Item_fields #-}
          lens_Item_images f (Item x1 x2 x3) = fmap (\y1 -> Item x1 x2 y1) (f x3)
          {-# INLINE lens_Item_images #-}
          lens_Item_itemName f (Item x1 x2 x3) = fmap (\y1 -> Item y1 x2 x3) (f x1)
          {-# INLINE lens_Item_itemName #-}
instance Paths Item String
    where type FromTo Item String = Path_Item String
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Bool
    where type FromTo Item Bool = Path_Item Bool
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Double
    where type FromTo Item Double = Path_Item Double
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Dimension
    where type FromTo Item Dimension = Path_Item Dimension
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ImageCrop
    where type FromTo Item ImageCrop = Path_Item ImageCrop
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ImageSize
    where type FromTo Item ImageSize = Path_Item ImageSize
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Units
    where type FromTo Item Units = Path_Item Units
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ImageFile
    where type FromTo Item ImageFile = Path_Item ImageFile
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item JSONText
    where type FromTo Item JSONText = Path_Item JSONText
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Item_itemName, itemName _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
instance Paths Item Markup
    where type FromTo Item Markup = Path_Item Markup
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
instance Paths Item EUI
    where type FromTo Item EUI = Path_Item EUI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item MEUI
    where type FromTo Item MEUI = Path_Item MEUI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item MaybeImageFile
    where type FromTo Item MaybeImageFile = Path_Item MaybeImageFile
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ReportImage
    where type FromTo Item ReportImage = Path_Item ReportImage
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ReportImages
    where type FromTo Item ReportImages = Path_Item ReportImages
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item ReportImageView
    where type FromTo Item ReportImageView = Path_Item ReportImageView
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item SaneSizeImageSize
    where type FromTo Item SaneSizeImageSize = Path_Item SaneSizeImageSize
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Item
    where type FromTo Item Item = Path_Item Item
          paths _ _ = [idPath]
instance Paths Item MIM
    where type FromTo Item MIM = Path_Item MIM
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)]
instance Paths Item URI
    where type FromTo Item URI = Path_Item URI
          paths (_s@(Item {})) _g = concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]
instance Paths Item Text
    where type FromTo Item Text = Path_Item Text
          paths (_s@(Item {})) _g = mconcat [concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) [(Path_Item_itemName, itemName _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: MIM) _g)) [(Path_Item_fields, fields _s)],
                                             concatMap (\(p, a') -> map p (paths (a' :: ReportImages) _g)) [(Path_Item_images, images _s)]]
instance PathStart Item
    where data Peek Item
              = Peek_Item_String (FromTo Item ([Char])) (Maybe ([Char]))
              | Peek_Item_Bool (FromTo Item Bool) (Maybe Bool)
              | Peek_Item_Double (FromTo Item Double) (Maybe Double)
              | Peek_Item_Dimension (FromTo Item Dimension) (Maybe Dimension)
              | Peek_Item_ImageCrop (FromTo Item ImageCrop) (Maybe ImageCrop)
              | Peek_Item_ImageSize (FromTo Item ImageSize) (Maybe ImageSize)
              | Peek_Item_Units (FromTo Item Units) (Maybe Units)
              | Peek_Item_ImageFile (FromTo Item ImageFile) (Maybe ImageFile)
              | Peek_Item_JSONText (FromTo Item JSONText) (Maybe JSONText)
              | Peek_Item_Markup (FromTo Item Markup) (Maybe Markup)
              | Peek_Item_EUI (FromTo Item (Either URI ImageFile)) (Maybe (Either URI ImageFile))
              | Peek_Item_MEUI (FromTo Item (Maybe (Either URI ImageFile))) (Maybe (Maybe (Either URI ImageFile)))
              | Peek_Item_MaybeImageFile (FromTo Item (Maybe ImageFile)) (Maybe (Maybe ImageFile))
              | Peek_Item_ReportImage (FromTo Item ReportImage) (Maybe ReportImage)
              | Peek_Item_ReportImages (FromTo Item (Order ReportImageID ReportImage)) (Maybe (Order ReportImageID ReportImage))
              | Peek_Item_ReportImageView (FromTo Item ReportImageView) (Maybe ReportImageView)
              | Peek_Item_SaneSizeImageSize (FromTo Item (SaneSize ImageSize)) (Maybe (SaneSize ImageSize))
              | Peek_Item_Item (FromTo Item Item) (Maybe Item)
              | Peek_Item_MIM (FromTo Item (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_Item_URI (FromTo Item URI) (Maybe URI)
              | Peek_Item_Text (FromTo Item Text) (Maybe Text)
              deriving (Eq, Show)
          peek (_s@(Item {})) = mconcat [concatMap (\pth -> case pth of
                                                                _pp@(Path_Item_itemName _wp) -> map (\a -> let f = peek a
                                                                                                            in let liftPeek (Peek_Text_JSONText q z) = Peek_Item_JSONText (Path_Item_itemName q) z
                                                                                                                   liftPeek (Peek_Text_Text q z) = Peek_Item_Text (Path_Item_itemName q) z
                                                                                                                in Node (Peek_Item_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                                                _ -> []) (paths _s (Proxy :: Proxy Text)),
                                         concatMap (\pth -> case pth of
                                                                _pp@(Path_Item_fields _wp) -> map (\a -> let f = peek a
                                                                                                          in let liftPeek (Peek_MIM_JSONText q z) = Peek_Item_JSONText (Path_Item_fields q) z
                                                                                                                 liftPeek (Peek_MIM_Markup q z) = Peek_Item_Markup (Path_Item_fields q) z
                                                                                                                 liftPeek (Peek_MIM_MIM q z) = Peek_Item_MIM (Path_Item_fields q) z
                                                                                                                 liftPeek (Peek_MIM_Text q z) = Peek_Item_Text (Path_Item_fields q) z
                                                                                                              in Node (Peek_Item_MIM _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Map ItemFieldName
                                                                                                                                                                                                                                         Markup])
                                                                _ -> []) (paths _s (Proxy :: Proxy (Map ItemFieldName Markup))),
                                         concatMap (\pth -> case pth of
                                                                _pp@(Path_Item_images _wp) -> map (\a -> let f = peek a
                                                                                                          in let liftPeek (Peek_ReportImages_String q z) = Peek_Item_String (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Bool q z) = Peek_Item_Bool (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Double q z) = Peek_Item_Double (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Dimension q z) = Peek_Item_Dimension (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ImageCrop q z) = Peek_Item_ImageCrop (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ImageSize q z) = Peek_Item_ImageSize (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Units q z) = Peek_Item_Units (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ImageFile q z) = Peek_Item_ImageFile (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_JSONText q z) = Peek_Item_JSONText (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Markup q z) = Peek_Item_Markup (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_EUI q z) = Peek_Item_EUI (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_MEUI q z) = Peek_Item_MEUI (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_MaybeImageFile q z) = Peek_Item_MaybeImageFile (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ReportImage q z) = Peek_Item_ReportImage (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ReportImages q z) = Peek_Item_ReportImages (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_ReportImageView q z) = Peek_Item_ReportImageView (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_SaneSizeImageSize q z) = Peek_Item_SaneSizeImageSize (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_URI q z) = Peek_Item_URI (Path_Item_images q) z
                                                                                                                 liftPeek (Peek_ReportImages_Text q z) = Peek_Item_Text (Path_Item_images q) z
                                                                                                              in Node (Peek_Item_ReportImages _pp (if null f
                                                                                                                                                    then Just a
                                                                                                                                                    else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Order ReportImageID ReportImage])
                                                                _ -> []) (paths _s (Proxy :: Proxy (Order ReportImageID ReportImage)))] :: Forest (Peek Item)
          hop (_s@(Item {})) = mconcat [concatMap (\pth -> case pth of
                                                               _pp@(Path_Item_itemName _wp) -> map (\a -> Node (Peek_Item_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                                               _ -> []) (paths _s (Proxy :: Proxy Text)),
                                        concatMap (\pth -> case pth of
                                                               _pp@(Path_Item_fields _wp) -> map (\a -> Node (Peek_Item_MIM _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Map ItemFieldName Markup])
                                                               _ -> []) (paths _s (Proxy :: Proxy (Map ItemFieldName Markup))),
                                        concatMap (\pth -> case pth of
                                                               _pp@(Path_Item_images _wp) -> map (\a -> Node (Peek_Item_ReportImages _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Order ReportImageID ReportImage])
                                                               _ -> []) (paths _s (Proxy :: Proxy (Order ReportImageID ReportImage)))] :: Forest (Peek Item)
instance Describe (Peek Item)
    where describe _f (Peek_Item_JSONText (_p@(Path_Item_itemName _wp)) _x) = let {wfld = Just ("Item", "Item", Right "itemName");
                                                                                   custom = describe wfld (Proxy :: Proxy Text);
                                                                                   next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy Item)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Text (_p@(Path_Item_itemName _wp)) _x) = let {wfld = Just ("Item", "Item", Right "itemName");
                                                                               custom = describe wfld (Proxy :: Proxy Text);
                                                                               next = describe wfld (Peek_Text_Text _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_JSONText (_p@(Path_Item_fields _wp)) _x) = let {wfld = Just ("Item", "Item", Right "fields");
                                                                                 custom = describe wfld (Proxy :: Proxy (Map ItemFieldName Markup));
                                                                                 next = describe wfld (Peek_MIM_JSONText _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Item)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Markup (_p@(Path_Item_fields _wp)) _x) = let {wfld = Just ("Item", "Item", Right "fields");
                                                                               custom = describe wfld (Proxy :: Proxy (Map ItemFieldName Markup));
                                                                               next = describe wfld (Peek_MIM_Markup _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_MIM (_p@(Path_Item_fields _wp)) _x) = let {wfld = Just ("Item", "Item", Right "fields");
                                                                            custom = describe wfld (Proxy :: Proxy (Map ItemFieldName Markup));
                                                                            next = describe wfld (Peek_MIM_MIM _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy Item)}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Text (_p@(Path_Item_fields _wp)) _x) = let {wfld = Just ("Item", "Item", Right "fields");
                                                                             custom = describe wfld (Proxy :: Proxy (Map ItemFieldName Markup));
                                                                             next = describe wfld (Peek_MIM_Text _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_String (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                               custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                               next = describe wfld (Peek_ReportImages_String _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Bool (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                             next = describe wfld (Peek_ReportImages_Bool _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Double (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                               custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                               next = describe wfld (Peek_ReportImages_Double _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Dimension (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                  custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                  next = describe wfld (Peek_ReportImages_Dimension _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ImageCrop (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                  custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                  next = describe wfld (Peek_ReportImages_ImageCrop _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                  custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                  next = describe wfld (Peek_ReportImages_ImageSize _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Units (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                              custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                              next = describe wfld (Peek_ReportImages_Units _wp undefined);
                                                                              top = describe _f (Proxy :: Proxy Item)}
                                                                          in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                  custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                  next = describe wfld (Peek_ReportImages_ImageFile _wp undefined);
                                                                                  top = describe _f (Proxy :: Proxy Item)}
                                                                              in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_JSONText (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                 custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                 next = describe wfld (Peek_ReportImages_JSONText _wp undefined);
                                                                                 top = describe _f (Proxy :: Proxy Item)}
                                                                             in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Markup (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                               custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                               next = describe wfld (Peek_ReportImages_Markup _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Item)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_EUI (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                            custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                            next = describe wfld (Peek_ReportImages_EUI _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy Item)}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_MEUI (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                             next = describe wfld (Peek_ReportImages_MEUI _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_MaybeImageFile (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                       custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                       next = describe wfld (Peek_ReportImages_MaybeImageFile _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy Item)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ReportImage (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                    custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                    next = describe wfld (Peek_ReportImages_ReportImage _wp undefined);
                                                                                    top = describe _f (Proxy :: Proxy Item)}
                                                                                in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ReportImages (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                     custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                     next = describe wfld (Peek_ReportImages_ReportImages _wp undefined);
                                                                                     top = describe _f (Proxy :: Proxy Item)}
                                                                                 in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_ReportImageView (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                        custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                        next = describe wfld (Peek_ReportImages_ReportImageView _wp undefined);
                                                                                        top = describe _f (Proxy :: Proxy Item)}
                                                                                    in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_SaneSizeImageSize (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                                          custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                                          next = describe wfld (Peek_ReportImages_SaneSizeImageSize _wp undefined);
                                                                                          top = describe _f (Proxy :: Proxy Item)}
                                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_URI (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                            custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                            next = describe wfld (Peek_ReportImages_URI _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy Item)}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_Item_Text (_p@(Path_Item_images _wp)) _x) = let {wfld = Just ("Item", "Item", Right "images");
                                                                             custom = describe wfld (Proxy :: Proxy (Order ReportImageID ReportImage));
                                                                             next = describe wfld (Peek_ReportImages_Text _wp undefined);
                                                                             top = describe _f (Proxy :: Proxy Item)}
                                                                         in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Item)
instance Describe (Proxy Item)
    where describe _f _ = case _f of
                              Nothing -> Just "Item"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Item String)
    where type S (Path_Item String) = Item
          type A (Path_Item String) = String
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Bool)
    where type S (Path_Item Bool) = Item
          type A (Path_Item Bool) = Bool
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Double)
    where type S (Path_Item Double) = Item
          type A (Path_Item Double) = Double
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Dimension)
    where type S (Path_Item Dimension) = Item
          type A (Path_Item Dimension) = Dimension
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageCrop)
    where type S (Path_Item ImageCrop) = Item
          type A (Path_Item ImageCrop) = ImageCrop
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageSize)
    where type S (Path_Item ImageSize) = Item
          type A (Path_Item ImageSize) = ImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Units)
    where type S (Path_Item Units) = Item
          type A (Path_Item Units) = Units
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ImageFile)
    where type S (Path_Item ImageFile) = Item
          type A (Path_Item ImageFile) = ImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item JSONText)
    where type S (Path_Item JSONText) = Item
          type A (Path_Item JSONText) = JSONText
          toLens (Path_Item_itemName _x) = lens_Item_itemName . toLens _x
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Markup)
    where type S (Path_Item Markup) = Item
          type A (Path_Item Markup) = Markup
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item EUI)
    where type S (Path_Item EUI) = Item
          type A (Path_Item EUI) = EUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MEUI)
    where type S (Path_Item MEUI) = Item
          type A (Path_Item MEUI) = MEUI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item MaybeImageFile)
    where type S (Path_Item MaybeImageFile) = Item
          type A (Path_Item MaybeImageFile) = MaybeImageFile
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImage)
    where type S (Path_Item ReportImage) = Item
          type A (Path_Item ReportImage) = ReportImage
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item ReportImages)
    where type S (Path_Item ReportImages) = Item
          type A (Path_Item ReportImages) = ReportImages
          toLens (Path_Item_images _x) = lens_Item_images
instance ToLens (Path_Item ReportImageView)
    where type S (Path_Item ReportImageView) = Item
          type A (Path_Item ReportImageView) = ReportImageView
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item SaneSizeImageSize)
    where type S (Path_Item SaneSizeImageSize) = Item
          type A (Path_Item SaneSizeImageSize) = SaneSizeImageSize
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Item)
    where type S (Path_Item Item) = Item
          type A (Path_Item Item) = Item
          toLens _ = id
instance ToLens (Path_Item MIM)
    where type S (Path_Item MIM) = Item
          type A (Path_Item MIM) = MIM
          toLens (Path_Item_fields _x) = lens_Item_fields
instance ToLens (Path_Item URI)
    where type S (Path_Item URI) = Item
          type A (Path_Item URI) = URI
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
instance ToLens (Path_Item Text)
    where type S (Path_Item Text) = Item
          type A (Path_Item Text) = Text
          toLens (Path_Item_itemName _x) = lens_Item_itemName
          toLens (Path_Item_fields _x) = lens_Item_fields . toLens _x
          toLens (Path_Item_images _x) = lens_Item_images . toLens _x
type Path_MIM a = Path_Map ItemFieldName (Path_Markup a)
instance Paths MIM JSONText
    where type FromTo MIM JSONText = Path_Map ItemFieldName (Path_Markup JSONText)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
instance Paths MIM Markup
    where type FromTo MIM Markup = Path_Map ItemFieldName (Path_Markup Markup)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
instance Paths MIM MIM
    where type FromTo MIM MIM = Path_Map ItemFieldName (Path_Markup MIM)
          paths _ _ = [idPath]
instance Paths MIM Text
    where type FromTo MIM Text = Path_Map ItemFieldName (Path_Markup Text)
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Markup) _g)) (map (\(idx, val) -> (Path_Look idx, val)) (toList _s))
instance PathStart (Map ItemFieldName Markup)
    where data Peek (Map ItemFieldName Markup)
              = Peek_MIM_JSONText (FromTo (Map ItemFieldName Markup) JSONText) (Maybe JSONText)
              | Peek_MIM_Markup (FromTo (Map ItemFieldName Markup) Markup) (Maybe Markup)
              | Peek_MIM_MIM (FromTo (Map ItemFieldName Markup) (Map ItemFieldName Markup)) (Maybe (Map ItemFieldName Markup))
              | Peek_MIM_Text (FromTo (Map ItemFieldName Markup) Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Look _k _wp) -> map (\a -> let f = peek a
                                                                                 in let liftPeek (Peek_Markup_JSONText q z) = Peek_MIM_JSONText (Path_Look _k q) z
                                                                                        liftPeek (Peek_Markup_Markup q z) = Peek_MIM_Markup (Path_Look _k q) z
                                                                                        liftPeek (Peek_Markup_Text q z) = Peek_MIM_Text (Path_Look _k q) z
                                                                                     in Node (Peek_MIM_Markup _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Markup])
                                           _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek (Map ItemFieldName Markup))
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Look _k _wp) -> map (\a -> Node (Peek_MIM_Markup _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Markup])
                                          _ -> []) (paths _s (Proxy :: Proxy Markup)) :: Forest (Peek (Map ItemFieldName Markup))
instance Describe (Peek (Map ItemFieldName Markup))
    where describe _f (Peek_MIM_JSONText (_p@(Path_Look _k _wp)) _x) = let {wfld = Nothing;
                                                                            custom = describe wfld (Proxy :: Proxy Markup);
                                                                            next = describe wfld (Peek_Markup_JSONText _wp undefined);
                                                                            top = describe _f (Proxy :: Proxy (Map ItemFieldName Markup))}
                                                                        in maybe top Just (maybe next Just custom)
          describe _f (Peek_MIM_Markup (_p@(Path_Look _k _wp)) _x) = let {wfld = Nothing;
                                                                          custom = describe wfld (Proxy :: Proxy Markup);
                                                                          next = describe wfld (Peek_Markup_Markup _wp undefined);
                                                                          top = describe _f (Proxy :: Proxy (Map ItemFieldName Markup))}
                                                                      in maybe top Just (maybe next Just custom)
          describe _f (Peek_MIM_Text (_p@(Path_Look _k _wp)) _x) = let {wfld = Nothing;
                                                                        custom = describe wfld (Proxy :: Proxy Markup);
                                                                        next = describe wfld (Peek_Markup_Text _wp undefined);
                                                                        top = describe _f (Proxy :: Proxy (Map ItemFieldName Markup))}
                                                                    in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy (Map ItemFieldName Markup))
instance Describe (Proxy (Map ItemFieldName Markup))
    where describe _f _ = case _f of
                              Nothing -> Just "MIM"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_Map ItemFieldName (Path_Markup JSONText))
    where type S (Path_Map ItemFieldName (Path_Markup JSONText)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup JSONText)) = JSONText
          toLens (Path_Look k v) = mat k . toLens v
instance ToLens (Path_Map ItemFieldName (Path_Markup Markup))
    where type S (Path_Map ItemFieldName (Path_Markup Markup)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Markup)) = Markup
          toLens (Path_Look k _) = mat k
instance ToLens (Path_Map ItemFieldName (Path_Markup MIM))
    where type S (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup MIM)) = MIM
          toLens _ = id
instance ToLens (Path_Map ItemFieldName (Path_Markup Text))
    where type S (Path_Map ItemFieldName (Path_Markup Text)) = MIM
          type A (Path_Map ItemFieldName (Path_Markup Text)) = Text
          toLens (Path_Look k v) = mat k . toLens v
data Path_CIString a = Path_CIString_View (Path_Text a) | Path_CIString deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_CIString a)
    where idPath = Path_CIString
class HasCIString c
    where lens_cIString :: Lens' c CIString
          lens_CIString_unCIString :: forall . Lens' c String
          lens_CIString_unCIString = (.) lens_cIString lens_CIString_unCIString
          {-# INLINE lens_CIString_unCIString #-}
instance HasCIString CIString
    where lens_cIString = id
          lens_CIString_unCIString = iso (\(CIString x) -> x) CIString
          {-# INLINE lens_CIString_unCIString #-}
instance Paths CIString JSONText
    where type FromTo CIString JSONText = Path_CIString JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_CIString_View, a')) (toListOf (toLens (Path_CIString_View (idPath :: FromTo Text
                                                                                                                                                                             Text))) _s))
instance Paths CIString CIString
    where type FromTo CIString CIString = Path_CIString CIString
          paths _ _ = [idPath]
instance Paths CIString Text
    where type FromTo CIString Text = Path_CIString Text
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: Text) _g)) (map (\a' -> (Path_CIString_View, a')) (toListOf (toLens (Path_CIString_View (idPath :: FromTo Text
                                                                                                                                                                             Text))) _s))
instance PathStart CIString
    where data Peek CIString
              = Peek_CIString_JSONText (FromTo CIString JSONText) (Maybe JSONText)
              | Peek_CIString_CIString (FromTo CIString CIString) (Maybe CIString)
              | Peek_CIString_Text (FromTo CIString Text) (Maybe Text)
              deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_CIString_View _wp) -> map (\a -> let f = peek a
                                                                                       in let liftPeek (Peek_Text_JSONText q z) = Peek_CIString_JSONText (Path_CIString_View q) z
                                                                                              liftPeek (Peek_Text_Text q z) = Peek_CIString_Text (Path_CIString_View q) z
                                                                                           in Node (Peek_CIString_Text _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [Text])
                                           _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek CIString)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_CIString_View _wp) -> map (\a -> Node (Peek_CIString_Text _pp (Just a)) []) (toListOf (toLens _pp) _s :: [Text])
                                          _ -> []) (paths _s (Proxy :: Proxy Text)) :: Forest (Peek CIString)
instance Describe (Peek CIString)
    where describe _f (Peek_CIString_JSONText (_p@(Path_CIString_View _wp)) _x) = let {wfld = Nothing;
                                                                                       custom = describe wfld (Proxy :: Proxy Text);
                                                                                       next = describe wfld (Peek_Text_JSONText _wp undefined);
                                                                                       top = describe _f (Proxy :: Proxy CIString)}
                                                                                   in maybe top Just (maybe next Just custom)
          describe _f (Peek_CIString_Text (_p@(Path_CIString_View _wp)) _x) = let {wfld = Nothing;
                                                                                   custom = describe wfld (Proxy :: Proxy Text);
                                                                                   next = describe wfld (Peek_Text_Text _wp undefined);
                                                                                   top = describe _f (Proxy :: Proxy CIString)}
                                                                               in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy CIString)
instance Describe (Proxy CIString)
    where describe _f _ = case _f of
                              Nothing -> Just "CIString"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_CIString JSONText)
    where type S (Path_CIString JSONText) = CIString
          type A (Path_CIString JSONText) = JSONText
          toLens (Path_CIString_View v) = (viewLens :: Lens' CIString Text) . toLens v
instance ToLens (Path_CIString CIString)
    where type S (Path_CIString CIString) = CIString
          type A (Path_CIString CIString) = CIString
          toLens _ = id
instance ToLens (Path_CIString Text)
    where type S (Path_CIString Text) = CIString
          type A (Path_CIString Text) = Text
          toLens (Path_CIString_View _) = viewLens :: Lens' CIString Text
data Path_URI a = Path_URI deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_URI a)
    where idPath = Path_URI
class HasURI c
    where lens_uRI :: Lens' c URI
          lens_URI_uriAuthority :: forall . Lens' c (Maybe URIAuth)
          lens_URI_uriAuthority = (.) lens_uRI lens_URI_uriAuthority
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment :: forall . Lens' c String
          lens_URI_uriFragment = (.) lens_uRI lens_URI_uriFragment
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath :: forall . Lens' c String
          lens_URI_uriPath = (.) lens_uRI lens_URI_uriPath
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery :: forall . Lens' c String
          lens_URI_uriQuery = (.) lens_uRI lens_URI_uriQuery
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme :: forall . Lens' c String
          lens_URI_uriScheme = (.) lens_uRI lens_URI_uriScheme
          {-# INLINE lens_URI_uriScheme #-}
instance HasURI URI
    where lens_uRI = id
          lens_URI_uriAuthority f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 y1 x3 x4 x5) (f x2)
          {-# INLINE lens_URI_uriAuthority #-}
          lens_URI_uriFragment f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 x4 y1) (f x5)
          {-# INLINE lens_URI_uriFragment #-}
          lens_URI_uriPath f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 y1 x4 x5) (f x3)
          {-# INLINE lens_URI_uriPath #-}
          lens_URI_uriQuery f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI x1 x2 x3 y1 x5) (f x4)
          {-# INLINE lens_URI_uriQuery #-}
          lens_URI_uriScheme f (URI x1 x2 x3 x4 x5) = fmap (\y1 -> URI y1 x2 x3 x4 x5) (f x1)
          {-# INLINE lens_URI_uriScheme #-}
instance Paths URI URI
    where type FromTo URI URI = Path_URI URI
          paths _ _ = [idPath]
instance PathStart URI
    where data Peek URI = Peek_URI_URI (FromTo URI URI) (Maybe URI) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek URI)
    where describe _ _ = Nothing
instance Describe (Proxy URI)
    where describe _f _ = case _f of
                              Nothing -> Just "URI"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_URI URI)
    where type S (Path_URI URI) = URI
          type A (Path_URI URI) = URI
          toLens _ = id
data Path_Text a = Path_Text_View (Path_JSONText a) | Path_Text deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_Text a)
    where idPath = Path_Text
class HasText c
    where lens_text :: Lens' c Text
instance HasText Text
    where lens_text = id
instance Paths Text JSONText
    where type FromTo Text JSONText = Path_Text JSONText
          paths _s _g = concatMap (\(p, a') -> map p (paths (a' :: JSONText) _g)) (map (\a' -> (Path_Text_View, a')) (toListOf (toLens (Path_Text_View (idPath :: FromTo JSONText
                                                                                                                                                                         JSONText))) _s))
instance Paths Text Text
    where type FromTo Text Text = Path_Text Text
          paths _ _ = [idPath]
instance PathStart Text
    where data Peek Text = Peek_Text_JSONText (FromTo Text JSONText) (Maybe JSONText) | Peek_Text_Text (FromTo Text Text) (Maybe Text) deriving (Eq, Show)
          peek _s = concatMap (\pth -> case pth of
                                           _pp@(Path_Text_View _wp) -> map (\a -> let f = peek a
                                                                                   in let liftPeek (Peek_JSONText_JSONText q z) = Peek_Text_JSONText (Path_Text_View q) z
                                                                                       in Node (Peek_Text_JSONText _pp (if null f then Just a else Nothing)) (forestMap liftPeek f)) (toListOf (toLens _pp) _s :: [JSONText])
                                           _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Text)
          hop _s = concatMap (\pth -> case pth of
                                          _pp@(Path_Text_View _wp) -> map (\a -> Node (Peek_Text_JSONText _pp (Just a)) []) (toListOf (toLens _pp) _s :: [JSONText])
                                          _ -> []) (paths _s (Proxy :: Proxy JSONText)) :: Forest (Peek Text)
instance Describe (Peek Text)
    where describe _f (Peek_Text_JSONText (_p@(Path_Text_View _wp)) _x) = let {wfld = Nothing;
                                                                               custom = describe wfld (Proxy :: Proxy JSONText);
                                                                               next = describe wfld (Peek_JSONText_JSONText _wp undefined);
                                                                               top = describe _f (Proxy :: Proxy Text)}
                                                                           in maybe top Just (maybe next Just custom)
          describe _f _ = describe _f (Proxy :: Proxy Text)
instance ToLens (Path_Text JSONText)
    where type S (Path_Text JSONText) = Text
          type A (Path_Text JSONText) = JSONText
          toLens (Path_Text_View _) = viewLens :: Lens' Text JSONText
instance ToLens (Path_Text Text)
    where type S (Path_Text Text) = Text
          type A (Path_Text Text) = Text
          toLens _ = id
data Path_UserId a = Path_UserId deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_UserId a)
    where idPath = Path_UserId
class HasUserId c
    where lens_userId :: Lens' c UserId
          lens_UserId__unUserId :: forall . Lens' c Integer
          lens_UserId__unUserId = (.) lens_userId lens_UserId__unUserId
          {-# INLINE lens_UserId__unUserId #-}
instance HasUserId UserId
    where lens_userId = id
          lens_UserId__unUserId = iso (\(UserId x) -> x) UserId
          {-# INLINE lens_UserId__unUserId #-}
instance Paths UserId UserId
    where type FromTo UserId UserId = Path_UserId UserId
          paths _ _ = [idPath]
instance PathStart UserId
    where data Peek UserId = Peek_UserId_UserId (FromTo UserId UserId) (Maybe UserId) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek UserId)
    where describe _ _ = Nothing
instance Describe (Proxy UserId)
    where describe _f _ = case _f of
                              Nothing -> Just "User Id"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_UserId UserId)
    where type S (Path_UserId UserId) = UserId
          type A (Path_UserId UserId) = UserId
          toLens _ = id
data Path_UUID a = Path_UUID deriving (Eq, Ord, Read, Show, Typeable, Data)
instance IdPath (Path_UUID a)
    where idPath = Path_UUID
class HasUUID c
    where lens_uUID :: Lens' c UUID
instance HasUUID UUID
    where lens_uUID = id
instance Paths UUID UUID
    where type FromTo UUID UUID = Path_UUID UUID
          paths _ _ = [idPath]
instance PathStart UUID
    where data Peek UUID = Peek_UUID_UUID (FromTo UUID UUID) (Maybe UUID) deriving (Eq, Show)
          peek _ = []
          hop _ = []
instance Describe (Peek UUID)
    where describe _ _ = Nothing
instance Describe (Proxy UUID)
    where describe _f _ = case _f of
                              Nothing -> Just "UUID"
                              Just (_tname, _cname, Right fname) -> Just (camelWords fname)
                              Just (_tname, cname, Left fpos) -> Just (camelWords $ (cname ++ ("[" ++ (show fpos ++ "]"))))
instance ToLens (Path_UUID UUID)
    where type S (Path_UUID UUID) = UUID
          type A (Path_UUID UUID) = UUID
          toLens _ = id

image :: ReportImage
image = Pic {picSize = ImageSize {dim = TheArea, size = 6.0, units = Inches}, picCrop = ImageCrop {topCrop = 0, bottomCrop = 0, leftCrop = 0, rightCrop = 0, rotation = 0}, picCaption = rawMarkdown "", picOriginal = Just (Right (ImageFile {imageFile = File {fileSource = Nothing, fileChksum = "b2ba73ef42b951e095eb927c0fc4d45b", fileMessages = []}, imageFileType = JPEG, imageFileWidth = 2048, imageFileHeight = 1536, imageFileMaxVal = 255})), picEditedDeprecated = Nothing, picThumbDeprecated = Nothing, picPrinterDeprecated = Nothing, picMustEnlarge = False, picEnlargedDeprecated = Nothing}

main :: IO ()
main = do
  r <- runTestTT $ TestList $
         [ assertEqual' "toLens3" (toListOf (toLens (Path_ImageSize_dim (idPath :: Path_Dimension Dimension))) (picSize image)) [dim (picSize image) :: Dimension]
         , assertEqual' "toLens4" (toListOf (toLens (Path_ImageSize_units (idPath :: Path_Units Units))) (picSize image)) [units (picSize image)]
         , assertEqual' "toLens5" (toListOf (toLens (Path_ReportImage_View (idPath :: Path_ReportImageView ReportImageView))) image) [view viewLens image]
         , assertEqual' "toLens6" (toListOf (toLens (Path_ReportImageView__picCrop (idPath :: Path_ImageCrop ImageCrop))) (view viewLens image)) [picCrop image]
         , assertEqual' "toLens7" (toListOf (toLens ((Path_ReportImage_View (idPath :: Path_ReportImageView ReportImageView)) :.:
                                                     (Path_ReportImageView__picCrop (idPath :: Path_ImageCrop ImageCrop)))) image) [picCrop image]
         , assertEqual' "toLens8" ((Path_ReportImage_View (idPath :: Path_ReportImageView Bool) :.: Path_ReportImage_View (idPath :: Path_ReportImageView Bool)) ==
                                   (Path_ReportImage_View (idPath :: Path_ReportImageView Bool) :.: Path_ReportImage_View (idPath :: Path_ReportImageView Bool))) True
         , assertEqual' "label01"
             (Just "Letter of Transmittal")
             (describe (Just (''ReportView, 'ReportView, Right '_reportLetterOfTransmittal)) (Peek_ReportView_JSONText (Path_ReportView__reportLetterOfTransmittal (Path_Markup_markdownText (Path_Text_View Path_JSONText))) Nothing)) ]
  case r of
    Counts {errors = 0, failures = 0} -> exitWith ExitSuccess
    _ -> error $ showCounts r

assertEqual' :: (Eq a, Show a) => String -> a -> a -> Test
assertEqual' label expected actual = TestLabel label $ TestCase $ assertEqual label expected actual
assertString' :: String -> String -> Test
assertString' label string = TestLabel label $ TestCase $ assertString string
